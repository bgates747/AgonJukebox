PC     Output      Line
040000             0001      assume adl=0
040000             0002      org 0x0000
000000 C3 45 00    0003      jp start
000003             0004      align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 
000040 4D 4F 53    0005      db "MOS"
000043 00          0006      db 00h
000044 01          0007      db 01h
000045             0008  
000045             0009  start:
000045 F5          0010      push af
000046 C5          0011      push bc
000047 D5          0012      push de
000048 DD E5       0013      push ix
00004A FD E5       0014      push iy
00004C             0015  
00004C CD EA 00    0016      call init
00004F CD EB 00    0017      call main
000052             0018  
000052             0019  exit:
000052 FD E1       0020      pop iy
000054 DD E1       0021      pop ix
000056 D1          0022      pop de
000057 C1          0023      pop bc
000058 F1          0024      pop af
000059 21 00 00    0025      ld hl,0
00005C             0026  
00005C C9          0027      ret
00005D             0028  
00005D             0029      include "../heapsort/heapsortb.inc"
00005D             0001* ;Copyright (c) 2006, Sean McLaughlin. All rights reserved.
00005D             0002* ;Redistribution and use in source and binary forms, with or without modification, are
00005D             0003* ;permitted provided that the following conditions are met:
00005D             0004* ;
00005D             0005* ;Redistributions of source code must retain the above copyright notice, this list of
00005D             0006* ;conditions and the following disclaimer.
00005D             0007* ;
00005D             0008* ;Redistributions in binary form must reproduce the above copyright notice, this list of
00005D             0009* ;conditions and the following disclaimer in the documentation and/or other materials
00005D             0010* ;provided with the distribution.
00005D             0011* ;
00005D             0012* ;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
00005D             0013* ;"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
00005D             0014* ;TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
00005D             0015* ;PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR
00005D             0016* ;CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
00005D             0017* ;EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
00005D             0018* ;ROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
00005D             0019* ;PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
00005D             0020* ;OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
00005D             0021* ;NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
00005D             0022* ;SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
00005D             0023* 
00005D             0024* HeapSortB:
00005D             0025* ; ### HEAPSORTB ################################################################
00005D             0026* ; HL = Address of array start
00005D             0027* ; BC = Size of array
00005D             0028* ; IX = Address of callback:
00005D             0029* ;   HL -> first
00005D             0030* ;   DE -> second
00005D             0031* ;   Returns CF = 1 if (HL) precedes (DE), CF = 0 if (HL) follows (DE)
00005D             0032* ;   Can destroy A, DE, HL, IY, must preserve BC, IX
00005D             0033* 
00005D 2B          0034*     dec     hl
00005E             0035* 
00005E             0036* ; ### Build heap ##############################################################
00005E C5          0037*     push    bc
00005F             0038* 
00005F 01 01 00    0039*     ld      bc, 1
000062             0040* @buildHeapLoopStart:
000062 C5          0041*     push    bc
000063             0042* 
000063             0043* @buildHeapInnerLoopStart:
000063 E5          0044*     push    hl
000064 CB 28       0045*     sra     b
000066 CB 19       0046*     rr      c
000068 28 26       0047*     jr      z, @buildHeapEnd
00006A             0048* 
00006A 54          0049*     ld      d, h
00006B 5D          0050*     ld      e, l
00006C ED 4A       0051*     adc     hl, bc
00006E 09          0052*     add     hl, bc
00006F EB          0053*     ex      de, hl
000070             0054* 
000070 09          0055*     add     hl, bc
000071             0056* 
000071 E5          0057*     push    hl
000072 D5          0058*     push    de
000073 CD E8 00    0059*     call    @call_ix
000076 D1          0060*     pop     de
000077 E1          0061*     pop     hl
000078 38 09       0062*     jr      c, @swapHeapElements
00007A             0063* 
00007A 1A          0064*     ld      a, (de)
00007B F5          0065*     push    af
00007C 7E          0066*     ld      a, (hl)
00007D 12          0067*     ld      (de), a
00007E F1          0068*     pop     af
00007F 77          0069*     ld      (hl), a
000080 E1          0070*     pop     hl
000081             0071* 
000081 18 E0       0072*     jr      @buildHeapInnerLoopStart
000083             0073* @swapHeapElements:
000083 E1          0074*     pop     hl
000084             0075* 
000084 C1          0076*     pop     bc
000085 03          0077*     inc     bc
000086 E3          0078*     ex      (sp), hl
000087 78          0079*     ld      a, b
000088 BC          0080*     cp      h
000089 20 02       0081*     jr      nz, @buildHeapLoopContinue
00008B 79          0082*     ld      a, c
00008C BD          0083*     cp      l
00008D             0084* @buildHeapLoopContinue:
00008D E3          0085*     ex      (sp), hl
00008E 38 D2       0086*     jr      c, @buildHeapLoopStart
000090             0087* @buildHeapEnd:
000090 C1          0088*     pop     bc
000091             0089* 
000091             0090* ; ### Sort ####################################################################
000091 54          0091*     ld      d, h
000092 5D          0092*     ld      e, l
000093 09          0093*     add     hl, bc
000094 44          0094*     ld      b, h
000095 4D          0095*     ld      c, l
000096 62          0096*     ld      h, d
000097 6B          0097*     ld      l, e
000098             0098* 
000098             0099* @sortOuterLoopStart:
000098 23          0100*     inc     hl
000099 7C          0101*     ld      a, h
00009A B8          0102*     cp      b
00009B 20 02       0103*     jr      nz, @sortOuterLoopEnd
00009D 7D          0104*     ld      a, l
00009E B9          0105*     cp      c
00009F             0106* @sortOuterLoopEnd:
00009F 30 46       0107*     jr      nc, @sortComplete
0000A1 2B          0108*     dec     hl
0000A2             0109* 
0000A2 54          0110*     ld      d, h
0000A3 5D          0111*     ld      e, l
0000A4 13          0112*     inc     de
0000A5             0113* 
0000A5 0A          0114*     ld      a, (bc)
0000A6 F5          0115*     push    af
0000A7 1A          0116*     ld      a, (de)
0000A8 02          0117*     ld      (bc), a
0000A9 F1          0118*     pop     af
0000AA 12          0119*     ld      (de), a
0000AB             0120* 
0000AB 0B          0121*     dec     bc
0000AC             0122* 
0000AC             0123* @sortInnerLoopStart:
0000AC E5          0124*     push    hl
0000AD AF          0125*     xor     a
0000AE 95          0126*     sub     l
0000AF 6F          0127*     ld      l, a
0000B0 3E 00       0128*     ld      a, 0
0000B2 9C          0129*     sbc     a, h
0000B3 67          0130*     ld      h, a
0000B4 19          0131*     add     hl, de
0000B5 19          0132*     add     hl, de
0000B6             0133* 
0000B6 7C          0134*     ld      a, h
0000B7 B8          0135*     cp      b
0000B8 20 02       0136*     jr      nz, @sortInnerLoopEnd
0000BA 7D          0137*     ld      a, l
0000BB B9          0138*     cp      c
0000BC             0139* @sortInnerLoopEnd:
0000BC 28 28       0140*     jr      z, @skipSortInnerCheck
0000BE 30 22       0141*     jr      nc, @sortInnerLoopComplete
0000C0             0142* 
0000C0 D5          0143*     push    de
0000C1 54          0144*     ld      d, h
0000C2 5D          0145*     ld      e, l
0000C3 23          0146*     inc     hl
0000C4 E5          0147*     push    hl
0000C5 CD E8 00    0148*     call    @call_ix
0000C8 E1          0149*     pop     hl
0000C9 D1          0150*     pop     de
0000CA 38 01       0151*     jr      c, @swapSortElements
0000CC 2B          0152*     dec     hl
0000CD             0153* 
0000CD             0154* @swapSortElements:
0000CD E5          0155*     push    hl
0000CE D5          0156*     push    de
0000CF CD E8 00    0157*     call    @call_ix
0000D2 D1          0158*     pop     de
0000D3 E1          0159*     pop     hl
0000D4 30 0C       0160*     jr      nc, @sortInnerLoopComplete
0000D6             0161* 
0000D6 7E          0162*     ld      a, (hl)
0000D7 F5          0163*     push    af
0000D8 1A          0164*     ld      a, (de)
0000D9 77          0165*     ld      (hl), a
0000DA F1          0166*     pop     af
0000DB 12          0167*     ld      (de), a
0000DC             0168* 
0000DC 54          0169*     ld      d, h
0000DD 5D          0170*     ld      e, l
0000DE             0171* 
0000DE E1          0172*     pop     hl
0000DF C3 AC 00    0173*     jp      @sortInnerLoopStart
0000E2             0174* 
0000E2             0175* @sortInnerLoopComplete:
0000E2 E1          0176*     pop     hl
0000E3 C3 98 00    0177*     jp      @sortOuterLoopStart
0000E6             0178* 
0000E6             0179* @skipSortInnerCheck:
0000E6 C9          0180*     ret
0000E7             0181* 
0000E7             0182* @sortComplete:
0000E7 C9          0183*     ret
0000E8             0184* 
0000E8 DD E9       0185* @call_ix: jp (ix)
0000EA             0030  
0000EA             0031  ; --- MAIN PROGRAM FILE ---
0000EA             0032  init:
0000EA             0033  
0000EA C9          0034      ret
0000EB             0035  ; end init
0000EB             0036  main:
0000EB             0037  ; ===============================================================================
0000EB             0038  ;  5.1. Demonstrating `HeapSortB'
0000EB             0039  ; -------------------------------------------------------------------------------
0000EB             0040  ; Sort an array of 10 unsigned byte values in ascending order
0000EB             0041  
0000EB 21 FC 00    0042          ld      hl, array       ; Load pointer to array
0000EE 01 0A 00    0043          ld      bc, 10          ; Load array dimension
0000F1 DD 21 F9 00 0044          ld      ix, bytecmp_cb  ; Load pointer to callback
0000F5 CD 5D 00    0045          call    HeapSortB       ; Invoke
0000F8             0046  
0000F8 C9          0047      ret ; back to MOS
0000F9             0048  ; end main
0000F9             0049  
0000F9             0050  bytecmp_cb:                     ; Callback function
0000F9 1A          0051          ld      a, (de)         ; Load one element
0000FA BE          0052          cp      (hl)            ; Compare to other element
0000FB C9          0053          ret                     ; End
0000FC 59 4A 3E 7C 0054  array:  .db     89, 74, 62, 124, 40, 230, 145, 73, 172, 208
       28 E6 91 49 
       AC D0       
