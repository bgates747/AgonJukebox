PC     Output      Line
040000             0001         assume adl=1
040000             0002         org 0x040000
040000 C3 45 00 04 0003         jp start
040004             0004         align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005         db "MOS"
040043 00          0006         db 00h
040044 01          0007         db 01h
040045             0008     
040045             0009     start:
040045 F5          0010         push af
040046 C5          0011         push bc
040047 D5          0012         push de
040048 DD E5       0013         push ix
04004A FD E5       0014         push iy
04004C             0015     
04004C CD F8 5A 04 0016         call init
040050 CD 05 5B 04 0017         call main
040054             0018     
040054             0019     exit:
040054 FD E1       0020         pop iy
040056 DD E1       0021         pop ix
040058 D1          0022         pop de
040059 C1          0023         pop bc
04005A F1          0024         pop af
04005B 21 00 00 00 0025         ld hl,0
04005F             0026     
04005F C9          0027         ret
040060             0028     
040060             0029     ; API INCLUDES
040060             0030         include "mos_api.inc"
040060             0001*    ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*    ; Title:	AGON MOS - API for user projects
040060             0003*    ; Author:	Dean Belfield
040060             0004*    ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*    ;			Added MOS error codes for return in HL
040060             0006*    ; Created:	03/08/2022
040060             0007*    ; Last Updated:	10/08/2023
040060             0008*    ;
040060             0009*    ; Modinfo:
040060             0010*    ; 05/08/2022:	Added mos_feof
040060             0011*    ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*    ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*    ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*    ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*    ; 13/10/2022:	Added mos_oscli
040060             0016*    ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*    ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*    ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*    ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*    ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*    ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*    ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*    ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*    ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*    ; 19/05/2023:	Added sysvar_scrMode
040060             0026*    ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*    ; 03/08/2023:	Added mos_setkbvector
040060             0028*    ; 10/08/2023:	Added mos_getkbmap
040060             0029*    
040060             0030*    ; VDP control (VDU 23, 0, n)
040060             0031*    ;
040060             0032*    vdp_gp:				EQU 80h
040060             0033*    vdp_keycode:		EQU 81h
040060             0034*    vdp_cursor:			EQU	82h
040060             0035*    vdp_scrchar:		EQU	83h
040060             0036*    vdp_scrpixel:		EQU	84h
040060             0037*    vdp_audio:			EQU	85h
040060             0038*    vdp_mode:			EQU	86h
040060             0039*    vdp_rtc:			EQU	87h
040060             0040*    vdp_keystate:		EQU	88h
040060             0041*    vdp_logicalcoords:	EQU	C0h
040060             0042*    vdp_terminalmode:	EQU	FFh
040060             0043*    
040060             0044*    ; MOS high level functions
040060             0045*    ;
040060             0046*    mos_getkey:			EQU	00h
040060             0047*    mos_load:			EQU	01h
040060             0048*    mos_save:			EQU	02h
040060             0049*    mos_cd:				EQU	03h
040060             0050*    mos_dir:			EQU	04h
040060             0051*    mos_del:			EQU	05h
040060             0052*    mos_ren:			EQU	06h
040060             0053*    mos_mkdir:			EQU	07h
040060             0054*    mos_sysvars:		EQU	08h
040060             0055*    mos_editline:		EQU	09h
040060             0056*    mos_fopen:			EQU	0Ah
040060             0057*    mos_fclose:			EQU	0Bh
040060             0058*    mos_fgetc:			EQU	0Ch
040060             0059*    mos_fputc:			EQU	0Dh
040060             0060*    mos_feof:			EQU	0Eh
040060             0061*    mos_getError:		EQU	0Fh
040060             0062*    mos_oscli:			EQU	10h
040060             0063*    mos_copy:			EQU	11h
040060             0064*    mos_getrtc:			EQU	12h
040060             0065*    mos_setrtc:			EQU	13h
040060             0066*    mos_setintvector:	EQU	14h
040060             0067*    mos_uopen:			EQU	15h
040060             0068*    mos_uclose:			EQU	16h
040060             0069*    mos_ugetc:			EQU	17h
040060             0070*    mos_uputc:			EQU	18h
040060             0071*    mos_getfil:			EQU	19h
040060             0072*    mos_fread:			EQU	1Ah
040060             0073*    mos_fwrite:			EQU	1Bh
040060             0074*    mos_flseek:			EQU	1Ch
040060             0075*    mos_setkbvector:	EQU	1Dh
040060             0076*    mos_getkbmap:		EQU	1Eh
040060             0077*    
040060             0078*    ; MOS program exit codes
040060             0079*    ;
040060             0080*    EXIT_OK:				EQU  0;	"OK",
040060             0081*    EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*    EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*    EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*    EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*    EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*    EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*    EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*    EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*    EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*    EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*    EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*    EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*    EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*    EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*    EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*    EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*    EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*    EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*    EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*    EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*    EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*    ; FatFS file access functions
040060             0103*    ;
040060             0104*    ffs_fopen:			EQU	80h
040060             0105*    ffs_fclose:			EQU	81h
040060             0106*    ffs_fread:			EQU	82h
040060             0107*    ffs_fwrite:			EQU	83h
040060             0108*    ffs_flseek:			EQU	84h
040060             0109*    ffs_ftruncate:		EQU	85h
040060             0110*    ffs_fsync:			EQU	86h
040060             0111*    ffs_fforward:		EQU	87h
040060             0112*    ffs_fexpand:		EQU	88h
040060             0113*    ffs_fgets:			EQU	89h
040060             0114*    ffs_fputc:			EQU	8Ah
040060             0115*    ffs_fputs:			EQU	8Bh
040060             0116*    ffs_fprintf:		EQU	8Ch
040060             0117*    ffs_ftell:			EQU	8Dh
040060             0118*    ffs_feof:			EQU	8Eh
040060             0119*    ffs_fsize:			EQU	8Fh
040060             0120*    ffs_ferror:			EQU	90h
040060             0121*    
040060             0122*    ; FatFS directory access functions
040060             0123*    ;
040060             0124*    ffs_dopen:			EQU	91h
040060             0125*    ffs_dclose:			EQU	92h
040060             0126*    ffs_dread:			EQU	93h
040060             0127*    ffs_dfindfirst:		EQU	94h
040060             0128*    ffs_dfindnext:		EQU	95h
040060             0129*    
040060             0130*    ; FatFS file and directory management functions
040060             0131*    ;
040060             0132*    ffs_stat:			EQU	96h
040060             0133*    ffs_unlink:			EQU	97h
040060             0134*    ffs_rename:			EQU	98h
040060             0135*    ffs_chmod:			EQU	99h
040060             0136*    ffs_utime:			EQU	9Ah
040060             0137*    ffs_mkdir:			EQU	9Bh
040060             0138*    ffs_chdir:			EQU	9Ch
040060             0139*    ffs_chdrive:		EQU	9Dh
040060             0140*    ffs_getcwd:			EQU	9Eh
040060             0141*    
040060             0142*    ; FatFS volume management and system configuration functions
040060             0143*    ;
040060             0144*    ffs_mount:			EQU	9Fh
040060             0145*    ffs_mkfs:			EQU	A0h
040060             0146*    ffs_fdisk:			EQU	A1h
040060             0147*    ffs_getfree:		EQU	A2h
040060             0148*    ffs_getlabel:		EQU	A3h
040060             0149*    ffs_setlabel:		EQU	A4h
040060             0150*    ffs_setcp:			EQU	A5h
040060             0151*    
040060             0152*    ; File access modes
040060             0153*    ;
040060             0154*    fa_read:			EQU	01h
040060             0155*    fa_write:			EQU	02h
040060             0156*    fa_open_existing:	EQU	00h
040060             0157*    fa_create_new:		EQU	04h
040060             0158*    fa_create_always:	EQU	08h
040060             0159*    fa_open_always:		EQU	10h
040060             0160*    fa_open_append:		EQU	30h
040060             0161*    
040060             0162*    ; System variable indexes for api_sysvars
040060             0163*    ; Index into _sysvars in globals.inc
040060             0164*    ;
040060             0165*    sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*    sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*    sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*    sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*    sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*    sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*    sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*    sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*    sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*    sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*    sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*    sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*    sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*    sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*    sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*    sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*    sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*    sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*    sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*    sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*    sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*    sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*    sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*    sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*    sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*    sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*    
040060             0192*    ; Flags for the VPD protocol
040060             0193*    ;
040060             0194*    vdp_pflag_cursor:		EQU	00000001b
040060             0195*    vdp_pflag_scrchar:		EQU	00000010b
040060             0196*    vdp_pflag_point:		EQU	00000100b
040060             0197*    vdp_pflag_audio:		EQU	00001000b
040060             0198*    vdp_pflag_mode:			EQU	00010000b
040060             0199*    vdp_pflag_rtc:			EQU	00100000b
040060             0200*    
040060             0201*    ;
040060             0202*    ; FatFS structures
040060             0203*    ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*    ;
040060             0205*    ; Object ID and allocation information (FFOBJID)
040060             0206*    ;
040060             0207*    ; Indexes into FFOBJID structure
040060             0208*    ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*    ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*    ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*    ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*    ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*    ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*    ;
040060             0215*    ; File object structure (FIL)
040060             0216*    ;
040060             0217*    ; Indexes into FIL structure
040060             0218*    fil_obj:		EQU 0	; 15: Object identifier
040060             0219*    fil_flag:		EQU	15 	;  1: File status flags
040060             0220*    fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*    fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*    fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*    fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*    fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*    fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*    ;
040060             0227*    ; Directory object structure (DIR)
040060             0228*    ; Indexes into DIR structure
040060             0229*    dir_obj:		EQU  0	; 15: Object identifier
040060             0230*    dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*    dir_clust:		EQU	19	;  4: Current cluster
040060             0232*    dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*    dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*    dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*    dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*    dir_struct_size:	EQU	46	;  4: Size of the struct
040060             0237*    ;
040060             0238*    ; File information structure (FILINFO)
040060             0239*    ;
040060             0240*    ; Indexes into FILINFO structure
040060             0241*    filinfo_fsize:		EQU 0	;   4: File size
040060             0242*    filinfo_fdate:		EQU	4	;   2: Modified date
040060             0243*    filinfo_ftime:		EQU	6	;   2: Modified time
040060             0244*    filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0245*    filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0246*    filinfo_fname:		EQU	22	; 256: Primary file name
040060             0247*    filinfo_struct_size: EQU filinfo_fname+256 ; size of the FILINFO structure
040060             0248*    
040060             0249*    ; /* File attribute bits for directory entry (FILINFO.fattrib) */
040060             0250*    AM_RDO: equ 0 ; Bit 0 - Read Only
040060             0251*    AM_HID: equ 1 ; Bit 1 - Hidden
040060             0252*    AM_SYS: equ 2 ; Bit 2 - System
040060             0253*    AM_DIR: equ 4 ; Bit 4 - Directory
040060             0254*    AM_ARC: equ 5 ; Bit 5 - Archive
040060             0255*    
040060             0256*    ;
040060             0257*    ; Macro for calling the API
040060             0258*    ; Parameters:
040060             0259*    ; - function: One of the function numbers listed above
040060             0260*    ;
040060             0261*    	MACRO	MOSCALL	function
040060             0262*    			LD	A, function
040060             0263*    			RST.LIL	08h
040060             0264*    	ENDMACRO
040060             0265*    
040060             0266*    ;
040060             0267*    ; Same as above but keeps IY safe on FFS calls
040060             0268*    ; (can be use for regular MOS calls as well)
040060             0269*    ;
040060             0270*    	MACRO	FFSCALL	function
040060             0271*    			PUSH IY
040060             0272*    			LD	A, function
040060             0273*    			RST.LIL	08h
040060             0274*    			POP IY
040060             0275*    	ENDMACRO
040060             0031         include "macros.inc"
040060             0001*    
040060             0002*    ; test the sign of HL
040060             0003*    ; inputs: HL obviously
040060             0004*    ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
040060             0005*    ; destroys: flags
040060             0006*        MACRO SIGN_HLU
040060             0007*        add hl,de ; 1 cycle
040060             0008*        or a ; clear flags ; 1 cycle
040060             0009*        sbc hl,de ; 2 cycles
040060             0010*        ; 4 cycles total
040060             0011*        ENDMACRO
040060             0012*    
040060             0013*    ; put the value in A into HLU
040060             0014*    ; affects: HLU
040060             0015*    ; destroys: nothing
040060             0016*    ; note: $ instead of @@ b/c anon labels deprecated in ez80asm
040060             0017*        MACRO A_TO_HLU
040060             0018*        xor a ; 1 cycle
040060             0019*        ld ($+8+1),hl ; 7 cycles
040060             0020*        ld ($+4+3),a ; 5 cycles
040060             0021*        ld hl,0x000000 ; 4 cycles
040060             0022*        ; 17 cycles total
040060             0023*        ENDMACRO
040060             0024*    
040060             0025*    ; alternative: https://discord.com/channels/1158535358624039014/1282290921815408681/1318315567102300220
040060             0026*    ; one cycle less but burns flags
040060             0027*        MACRO A_TO_HLU_ALT
040060             0028*        push hl ; 4 cycles
040060             0029*        ld hl,2 ; 4 cycles
040060             0030*        add hl,sp ; 1 cycle
040060             0031*        ld (hl),a ; 2 cycles
040060             0032*        pop hl ; 4 cycles
040060             0033*        ; 15 cycles total
040060             0034*        ENDMACRO
040060             0035*    
040060             0036*        MACRO hlu_mul256
040060             0037*        add hl,hl ; * 2
040060             0038*        add hl,hl ; * 4
040060             0039*        add hl,hl ; * 8
040060             0040*        add hl,hl ; * 16
040060             0041*        add hl,hl ; * 32
040060             0042*        add hl,hl ; * 64
040060             0043*        add hl,hl ; * 128
040060             0044*        add hl,hl ; * 256
040060             0045*        ENDMACRO
040060             0046*    
040060             0047*    ; https://discord.com/channels/1158535358624039014/1282290921815408681/1317793870070812715
040060             0048*        MACRO SRL_UHL
040060             0049*        dec sp ; 1 cycle
040060             0050*        push hl ; 4 cycles
040060             0051*        inc sp ; 1 cycle
040060             0052*        pop hl ; 4 cycles
040060             0053*        inc hl ; 1 cycle
040060             0054*        dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040060             0055*        ; 13 cycles total
040060             0056*        ENDMACRO
040060             0057*    
040060             0058*        MACRO printChar char
040060             0059*        LD A, char
040060             0060*        RST.LIL 10h
040060             0061*        ENDMACRO
040060             0062*    
040060             0063*    ; Simulated call to subroutine at HL
040060             0064*    ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040060             0065*    ; outputs: whatever the subroutine does, including HL and BC
040060             0066*    ; destroys: only what the subroutine does, but always BC
040060             0067*        MACRO CALL_HL
040060             0068*        ld bc,$+6 ; Address of first instruction after the jump
040060             0069*        push bc ; which constitutes the return address
040060             0070*        jp (hl) ; Jump to the address in HL
040060             0071*        ENDMACRO
040060             0072*    
040060             0073*    ; Simulated call to subroutine at IX
040060             0074*    ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040060             0075*    ; outputs: whatever the subroutine does, including IX and BC
040060             0076*    ; destroys: only what the subroutine does, but always BC
040060             0077*        MACRO CALL_IX
040060             0078*        ld bc,$+6 ; Address of first instruction after the jump
040060             0079*        push bc ; which constitutes the return address
040060             0080*        jp (ix) ; Jump to the address in IX
040060             0081*        ENDMACRO
040060             0082*    
040060             0083*    ; Simulated call to soubroutinte at IY
040060             0084*    ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040060             0085*    ; outputs: whatever the subroutine does, including IY and BC
040060             0086*    ; destroys: only what the subroutine does, but always BC
040060             0087*        MACRO CALL_IY
040060             0088*        ld bc,$+6 ; Address of first instruction after the jump
040060             0089*        push bc ; which constitutes the return address
040060             0090*        jp (iy) ; Jump to the address in IY
040060             0091*        ENDMACRO
040060             0092*    
040060             0093*    ; put the value in HLU into A
040060             0094*    ; destroys: af
040060             0095*        MACRO HLU_TO_A
040060             0096*        dec sp ; 1 cycle
040060             0097*        push hl ; 4 cycles
040060             0098*        inc sp ; 1 cycle
040060             0099*        pop af ; 4 cycles
040060             0100*        ; 10 cycles total
040060             0101*        ENDMACRO
040060             0102*    
040060             0103*        MACRO PUSH_ALL
040060             0104*        ex af,af'
040060             0105*        exx
040060             0106*        push af
040060             0107*        push hl
040060             0108*        push bc
040060             0109*        push de
040060             0110*    
040060             0111*        ex af,af'
040060             0112*        exx
040060             0113*        push af
040060             0114*        push hl
040060             0115*        push bc
040060             0116*        push de
040060             0117*        push ix
040060             0118*        push iy
040060             0119*        ENDMACRO
040060             0120*    
040060             0121*        MACRO POP_ALL
040060             0122*        pop iy
040060             0123*        pop ix
040060             0124*        pop de
040060             0125*        pop bc
040060             0126*        pop hl
040060             0127*        pop af
040060             0128*        ex af,af'
040060             0129*        exx
040060             0130*    
040060             0131*        pop de
040060             0132*        pop bc
040060             0133*        pop hl
040060             0134*        pop af
040060             0135*        ex af,af'
040060             0136*        exx
040060             0137*        ENDMACRO
040060             0032         include "functions.inc"
040060             0001*    ; Print a zero-terminated string inline with code, e.g.:
040060             0002*    ;
040060             0003*    ;    call printInline
040060             0004*    ;    ASCIZ "Hello, world!\r\n"
040060             0005*    ;
040060             0006*    ; Destroys: HL,AF
040060             0007*    printInline:
040060 E1          0008*        pop hl ; get the return address = pointer to start of string
040061 CD 67 00 04 0009*        call printString ; HL advances to end of string
040065 E5          0010*        push hl ; restore the return address = pointer to end of string
040066 C9          0011*        ret
040067             0012*    
040067             0013*    ; Print a zero-terminated string
040067             0014*    ; IX: Pointer to string, A: signed offset from IX
040067             0015*    printStringIX:
040067             0016*    
040067             0017*    ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040067             0018*    ; Print a zero-terminated string
040067             0019*    ; HL: Pointer to string
040067             0020*    ; returns: hl pointed to character after string terminator
040067             0021*    ; destroys: af, hl
040067             0022*    printString:
040067 C5          0023*        PUSH BC
040068 01 00 00 00 0024*        LD BC,0
04006C 3E 00       0025*        LD A,0
04006E 5B DF       0026*        RST.LIL 18h
040070 C1          0027*        POP BC
040071 C9          0028*        RET
040072             0029*    ; print a VDU sequence
040072             0030*    ; HL: Pointer to VDU sequence - <1 byte length> <data>
040072             0031*    sendVDUsequence:
040072 C5          0032*        PUSH BC
040073 01 00 00 00 0033*        LD BC, 0
040077 4E          0034*        LD C, (HL)
040078 5B DF       0035*        RST.LIL 18h
04007A C1          0036*        POP BC
04007B C9          0037*        RET
04007C             0038*    ; Print Newline sequence to VDP
04007C             0039*    ; destroys: nothing
04007C             0040*    printNewLine:
04007C F5          0041*        push af ; for some reason rst.lil 10h sets carry flag
04007D 3E 0D       0042*        LD A, '\r'
04007F 5B D7       0043*        RST.LIL 10h
040081 3E 0A       0044*        LD A, '\n'
040083 5B D7       0045*        RST.LIL 10h
040085 F1          0046*        pop af
040086 C9          0047*        RET
040087             0048*    
040087             0049*    ; print a zero-terminated string at a graphics coordinate
040087             0050*    ; Inputs: HL Pointer to string, BC,DE x,y position (in pixels)
040087             0051*    printStringGfx:
040087 E5          0052*        push hl ; preserve string pointer
040088             0053*    ; move graphics cursor to x,y location
040088 3E 44       0054*        ld a,plot_pt+mv_abs
04008A CD 23 20 04 0055*        call vdu_plot
04008E             0056*    ; print string
04008E E1          0057*        pop hl ; restore string pointer
04008F             0058*    @print_loop:
04008F 7E          0059*        ld a,(hl)
040090 B7          0060*        or a ; check for end of string
040091 C8          0061*        ret z ; if zero, we're done
040092 08          0062*        ex af,af' ; preserve character
040093 3E 05       0063*        ld a,5 ; VDU 5 char to gfx cursor
040095 5B D7       0064*        rst.lil 10h ; send it
040097 08          0065*        ex af,af' ; restore character
040098 5B D7       0066*        rst.lil 10h ; print character
04009A 23          0067*        inc hl
04009B C3 8F 00 04 0068*        jp @print_loop
04009F C9          0069*        ret
0400A0             0070*    ; end printStringGfx
0400A0             0071*    
0400A0             0072*    ; Print a 24-bit HEX number
0400A0             0073*    ; HLU: Number to print
0400A0             0074*    printHex24:
0400A0             0075*        HLU_TO_A
                       M1 Args: none
0400A0 3B          0001*M1      dec sp ; 1 cycle
0400A1 E5          0002*M1      push hl ; 4 cycles
0400A2 33          0003*M1      inc sp ; 1 cycle
0400A3 F1          0004*M1      pop af ; 4 cycles
0400A4             0005*M1      ; 10 cycles total
0400A4 CD AE 00 04 0076*        CALL printHex8
0400A8             0077*    ; Print a 16-bit HEX number
0400A8             0078*    ; HL: Number to print
0400A8             0079*    printHex16:
0400A8 7C          0080*        LD A,H
0400A9 CD AE 00 04 0081*        CALL printHex8
0400AD 7D          0082*        LD A,L
0400AE             0083*    ; Print an 8-bit HEX number
0400AE             0084*    ; A: Number to print
0400AE             0085*    printHex8:
0400AE 4F          0086*        LD C,A
0400AF 1F          0087*        RRA
0400B0 1F          0088*        RRA
0400B1 1F          0089*        RRA
0400B2 1F          0090*        RRA
0400B3 CD B8 00 04 0091*        CALL @F
0400B7 79          0092*        LD A,C
0400B8             0093*    @@:
0400B8 E6 0F       0094*        AND 0Fh
0400BA C6 90       0095*        ADD A,90h
0400BC 27          0096*        DAA
0400BD CE 40       0097*        ADC A,40h
0400BF 27          0098*        DAA
0400C0 5B D7       0099*        RST.LIL 10h
0400C2 C9          0100*        RET
0400C3             0101*    
0400C3             0102*    ; Print a 0x HEX prefix
0400C3             0103*    DisplayHexPrefix:
0400C3 3E 30       0104*        LD A, '0'
0400C5 5B D7       0105*        RST.LIL 10h
0400C7 3E 78       0106*        LD A, 'x'
0400C9 5B D7       0107*        RST.LIL 10h
0400CB C9          0108*        RET
0400CC             0109*    
0400CC             0110*        MACRO printDecBC
0400CC             0111*        push hl
0400CC             0112*        push bc
0400CC             0113*        pop hl
0400CC             0114*        call printDec
0400CC             0115*        pop hl
0400CC             0116*        ENDMACRO
0400CC             0117*    
0400CC             0118*        MACRO printDecDE
0400CC             0119*        push hl
0400CC             0120*        push de
0400CC             0121*        pop hl
0400CC             0122*        call printDec
0400CC             0123*        pop hl
0400CC             0124*        ENDMACRO
0400CC             0125*    
0400CC             0126*        MACRO printDecHL
0400CC             0127*        call printDec
0400CC             0128*        ENDMACRO
0400CC             0129*    
0400CC             0130*        MACRO printDecIX
0400CC             0131*        push hl
0400CC             0132*        push ix
0400CC             0133*        pop hl
0400CC             0134*        call printDec
0400CC             0135*        pop hl
0400CC             0136*        ENDMACRO
0400CC             0137*    
0400CC             0138*        MACRO printDecIY
0400CC             0139*        push hl
0400CC             0140*        push iy
0400CC             0141*        pop hl
0400CC             0142*        call printDec
0400CC             0143*        pop hl
0400CC             0144*        ENDMACRO
0400CC             0145*    
0400CC             0146*    
0400CC             0147*    ; Prints the right justified decimal value in HL without leading zeroes
0400CC             0148*    ; HL : Value to print
0400CC             0149*    ; preserves all registers and flags
0400CC             0150*    printDec:
0400CC             0151*    ; BEGIN MY CODE
0400CC             0152*    ; back up all the things
0400CC F5          0153*        push af
0400CD C5          0154*        push bc
0400CE D5          0155*        push de
0400CF E5          0156*        push hl
0400D0             0157*    ; END MY CODE
0400D0 11 F8 00 04 0158*        LD DE, _printDecBuffer
0400D4 CD 08 01 04 0159*        CALL u24_to_ascii
0400D8             0160*    ; BEGIN MY CODE
0400D8             0161*    ; replace leading zeroes with spaces
0400D8 21 F8 00 04 0162*        LD HL, _printDecBuffer
0400DC 06 07       0163*        ld B, 7 ; if HL was 0, we want to keep the final zero
0400DE             0164*    @loop:
0400DE 7E          0165*        LD A, (HL)
0400DF FE 30       0166*        CP '0'
0400E1 C2 EB 00 04 0167*        JP NZ, @done
0400E5 3E 20       0168*        LD A, ' '
0400E7 77          0169*        LD (HL), A
0400E8 23          0170*        INC HL
0400E9             0171*        ; CALL vdu_cursor_forward
0400E9 10 F3       0172*        DJNZ @loop
0400EB             0173*    @done:
0400EB             0174*    ; END MY CODE
0400EB 21 F8 00 04 0175*        LD HL, _printDecBuffer
0400EF CD 67 00 04 0176*        CALL printString
0400F3             0177*    ; BEGIN MY CODE
0400F3             0178*    ; restore all the things
0400F3 E1          0179*        pop hl
0400F4 D1          0180*        pop de
0400F5 C1          0181*        pop bc
0400F6 F1          0182*        pop af
0400F7             0183*    ; END MY CODE
0400F7 C9          0184*        RET
0400F8 00 00 00 00 0185*    _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040108             0186*    
040108             0187*    ; This routine converts the unsigned 24-bit value in HLU into its ASCII representation,
040108             0188*    ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040108             0189*    ; so it will allways be 8 characters length
040108             0190*    ; HL : Value to convert to string
040108             0191*    ; DE : pointer to buffer, at least 8 byte + 0
040108             0192*    u24_to_ascii:
040108 01 80 69 67 0193*        LD BC,-10000000
04010C CD 3F 01 04 0194*        CALL one_digit
040110 01 C0 BD F0 0195*        LD BC,-1000000
040114 CD 3F 01 04 0196*        CALL one_digit
040118 01 60 79 FE 0197*        LD BC,-100000
04011C CD 3F 01 04 0198*        CALL one_digit
040120 01 F0 D8 FF 0199*        LD BC,-10000
040124 CD 3F 01 04 0200*        CALL one_digit
040128             0201*    u8_to_ascii: ; same arguments but hl <= 255, uhl and h = 0
040128 01 18 FC FF 0202*        LD BC,-1000
04012C CD 3F 01 04 0203*        CALL one_digit
040130 01 9C FF FF 0204*        LD BC,-100
040134 CD 3F 01 04 0205*        CALL one_digit
040138 0E F6       0206*        LD C,-10
04013A CD 3F 01 04 0207*        CALL one_digit
04013E 48          0208*        LD C,B
04013F             0209*    one_digit:
04013F 3E 2F       0210*        LD A,'0'-1
040141             0211*    @divide_me:
040141 3C          0212*        INC A
040142 09          0213*        ADD HL,BC
040143 38 FC       0214*        JR C,@divide_me
040145 ED 42       0215*        SBC HL,BC
040147 12          0216*        LD (DE),A
040148 13          0217*        INC DE
040149 C9          0218*        RET
04014A             0219*    
04014A             0220*    print_u24:
04014A D5          0221*        push de
04014B E5          0222*        push hl
04014C 11 F8 00 04 0223*        ld de,_printDecBuffer
040150 CD 08 01 04 0224*        call u24_to_ascii
040154 21 F8 00 04 0225*        ld hl,_printDecBuffer
040158 CD 67 00 04 0226*        call printString
04015C 3E 20       0227*        ld a,' '
04015E 5B D7       0228*        rst.lil 10h
040160 E1          0229*        pop hl
040161 D1          0230*        pop de
040162 C9          0231*        ret
040163             0232*    
040163             0233*    ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
040163             0234*    ; HL : Value to convert to string (integer part in H, fractional part in L)
040163             0235*    ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
040163             0236*    u168_to_ascii:
040163             0237*    ; add a leading space to make room for sign flag if needed
040163 3E 20       0238*        ld a,' '
040165 12          0239*        ld (de),a
040166 13          0240*        inc de
040167             0241*    ; Convert integer part
040167 E5          0242*        push hl ; Save HL (we’ll need the fractional part later)
040168             0243*        ; call hlu_udiv256 ; Shift to get integer portion in HL
040168             0244*        SRL_UHL ; Shift to get integer portion in HL
                       M1 Args: none
040168 3B          0001*M1      dec sp ; 1 cycle
040169 E5          0002*M1      push hl ; 4 cycles
04016A 33          0003*M1      inc sp ; 1 cycle
04016B E1          0004*M1      pop hl ; 4 cycles
04016C 23          0005*M1      inc hl ; 1 cycle
04016D 52 2B       0006*M1      dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
04016F             0007*M1      ; 13 cycles total
04016F 01 F0 D8 FF 0245*        ld bc, -10000
040173 CD 96 01 04 0246*        call @one_int
040177 01 18 FC FF 0247*        ld bc, -1000
04017B CD 96 01 04 0248*        call @one_int
04017F 01 9C FF FF 0249*        ld bc, -100
040183 CD 96 01 04 0250*        call @one_int
040187 0E F6       0251*        ld c, -10
040189 CD 96 01 04 0252*        call @one_int
04018D 48          0253*        ld c, b
04018E CD 96 01 04 0254*        call @one_int
040192 C3 A1 01 04 0255*        jp @frac ; Jump to fractional part conversion
040196             0256*    @one_int:
040196 3E 2F       0257*        ld a, '0' - 1 ; Start ASCII character at '0'
040198             0258*    @divide_me:
040198 3C          0259*        inc a
040199 09          0260*        add hl, bc ; Accumulate until overflow
04019A 38 FC       0261*        jr c, @divide_me
04019C ED 42       0262*        sbc hl, bc ; Remove excess after overflow
04019E 12          0263*        ld (de), a ; Store ASCII digit
04019F 13          0264*        inc de
0401A0 C9          0265*        ret
0401A1             0266*    ; Convert fractional part
0401A1             0267*    @frac:
0401A1 3E 2E       0268*        ld a, '.' ; Decimal point
0401A3 12          0269*        ld (de), a
0401A4 13          0270*        inc de
0401A5 E1          0271*        pop hl ; Restore HL with original fraction
0401A6 06 03       0272*        ld b, 3 ; Loop counter for 3 fractional digits
0401A8             0273*    @frac_loop:
0401A8 26 0A       0274*        ld h, 10 ; Load multiplier for fractional part
0401AA ED 6C       0275*        mlt hl ; Multiply by 10, result in HL (H holds the integer part)
0401AC 3E 30       0276*        ld a, '0'
0401AE 84          0277*        add a, h ; Convert integer part to ASCII
0401AF 12          0278*        ld (de), a
0401B0 13          0279*        inc de
0401B1 10 F5       0280*        djnz @frac_loop ; Repeat for each fractional digit
0401B3             0281*    ; Add null terminator
0401B3 AF          0282*        xor a ; Null terminator
0401B4 12          0283*        ld (de), a
0401B5 C9          0284*        ret
0401B6             0285*    
0401B6             0286*    print_u168:
0401B6 D5          0287*        push de
0401B7 E5          0288*        push hl
0401B8 11 F8 00 04 0289*        ld de,_printDecBuffer
0401BC CD 63 01 04 0290*        call u168_to_ascii
0401C0 21 F8 00 04 0291*        ld hl,_printDecBuffer
0401C4 CD 67 00 04 0292*        call printString
0401C8 E1          0293*        pop hl
0401C9 D1          0294*        pop de
0401CA C9          0295*        ret
0401CB             0296*    
0401CB             0297*    ; signed version of u168_to_ascii
0401CB             0298*    s168_to_ascii:
0401CB D5          0299*        push de ; save starting address of buffer
0401CC CD 70 04 04 0300*        call hlu_abs
0401D0 F5          0301*        push af ; save sign flag
0401D1 CD 63 01 04 0302*        call u168_to_ascii
0401D5 F1          0303*        pop af ; restore sign flag
0401D6 D1          0304*        pop de ; restore starting address of buffer
0401D7 F0          0305*        ret p ; hlu was positive so nothing to do
0401D8 3E 2D       0306*        ld a,'-'
0401DA 12          0307*        ld (de),a
0401DB C9          0308*        ret
0401DC             0309*    
0401DC             0310*    print_s168:
0401DC D5          0311*        push de
0401DD E5          0312*        push hl
0401DE 11 F8 00 04 0313*        ld de,_printDecBuffer
0401E2 CD CB 01 04 0314*        call s168_to_ascii
0401E6 21 F8 00 04 0315*        ld hl,_printDecBuffer
0401EA CD 67 00 04 0316*        call printString
0401EE E1          0317*        pop hl
0401EF D1          0318*        pop de
0401F0 C9          0319*        ret
0401F1             0320*    
0401F1             0321*    print_s168_hl:
0401F1 F5          0322*        push af
0401F2 E5          0323*        push hl
0401F3 CD DC 01 04 0324*        call print_s168
0401F7 3E 20       0325*        ld a,' '
0401F9 5B D7       0326*        rst.lil 10h
0401FB E1          0327*        pop hl
0401FC F1          0328*        pop af
0401FD C9          0329*        ret
0401FE             0330*    
0401FE             0331*    print_s168_bc:
0401FE F5          0332*        push af
0401FF C5          0333*        push bc
040200 E5          0334*        push hl
040201 C5          0335*        push bc
040202 E1          0336*        pop hl
040203 CD DC 01 04 0337*        call print_s168
040207 3E 20       0338*        ld a,' '
040209 5B D7       0339*        rst.lil 10h
04020B E1          0340*        pop hl
04020C C1          0341*        pop bc
04020D F1          0342*        pop af
04020E C9          0343*        ret
04020F             0344*    
04020F             0345*    print_s168_de:
04020F F5          0346*        push af
040210 D5          0347*        push de
040211 E5          0348*        push hl
040212 EB          0349*        ex de,hl
040213 CD DC 01 04 0350*        call print_s168
040217 3E 20       0351*        ld a,' '
040219 5B D7       0352*        rst.lil 10h
04021B E1          0353*        pop hl
04021C D1          0354*        pop de
04021D F1          0355*        pop af
04021E C9          0356*        ret
04021F             0357*    
04021F             0358*    print_s168_hl_bc_de:
04021F F5          0359*        push af
040220 C5          0360*        push bc
040221 D5          0361*        push de
040222 E5          0362*        push hl
040223 CD DC 01 04 0363*        call print_s168
040227 3E 20       0364*        ld a,' '
040229 5B D7       0365*        rst.lil 10h
04022B C5          0366*        push bc
04022C E1          0367*        pop hl
04022D CD DC 01 04 0368*        call print_s168
040231 3E 20       0369*        ld a,' '
040233 5B D7       0370*        rst.lil 10h
040235 EB          0371*        ex de,hl
040236 CD DC 01 04 0372*        call print_s168
04023A 3E 20       0373*        ld a,' '
04023C 5B D7       0374*        rst.lil 10h
04023E E1          0375*        pop hl
04023F D1          0376*        pop de
040240 C1          0377*        pop bc
040241 F1          0378*        pop af
040242 C9          0379*        ret
040243             0380*    
040243             0381*    print_s168_bc_de:
040243 F5          0382*        push af
040244 C5          0383*        push bc
040245 D5          0384*        push de
040246 C5          0385*        push bc
040247 E1          0386*        pop hl
040248 CD DC 01 04 0387*        call print_s168
04024C 3E 20       0388*        ld a,' '
04024E 5B D7       0389*        rst.lil 10h
040250 EB          0390*        ex de,hl
040251 CD DC 01 04 0391*        call print_s168
040255 3E 20       0392*        ld a,' '
040257 5B D7       0393*        rst.lil 10h
040259 E1          0394*        pop hl
04025A D1          0395*        pop de
04025B C1          0396*        pop bc
04025C F1          0397*        pop af
04025D C9          0398*        ret
04025E             0399*    
04025E             0400*    print_s168_a:
04025E F5          0401*        push af
04025F C5          0402*        push bc
040260 E5          0403*        push hl
040261 21 00 00 00 0404*        ld hl,0
040265 6F          0405*        ld l,a
040266 CD F1 01 04 0406*        call print_s168_hl
04026A E1          0407*        pop hl
04026B C1          0408*        pop bc
04026C F1          0409*        pop af
04026D C9          0410*        ret
04026E             0411*    
04026E             0412*    ; #### new functions added by Brandon R. Gates ####
04026E             0413*    
04026E             0414*    ; print the binary representation of the 8-bit value in a
04026E             0415*    ; destroys a, hl, bc
04026E             0416*    printBin8:
04026E 06 08       0417*        ld b,8 ; loop counter for 8 bits
040270 21 8B 02 04 0418*        ld hl,@cmd ; set hl to the low byte of the output string
040274             0419*        ; (which will be the high bit of the value in a)
040274             0420*    @loop:
040274 07          0421*        rlca ; put the next highest bit into carry
040275 38 04       0422*        jr c,@one
040277 36 30       0423*        ld (hl),'0'
040279 18 02       0424*        jr @next_bit
04027B             0425*    @one:
04027B 36 31       0426*        ld (hl),'1'
04027D             0427*    @next_bit:
04027D 23          0428*        inc hl
04027E 10 F4       0429*        djnz @loop
040280             0430*    ; print it
040280 21 8B 02 04 0431*        ld hl,@cmd
040284 01 08 00 00 0432*        ld bc,@end-@cmd
040288 5B DF       0433*        rst.lil $18
04028A C9          0434*        ret
04028B             0435*    @cmd: ds 8 ; eight bytes for eight bits
040293             0436*    @end:
040293             0437*    
040293             0438*    ; print the binary representation of the 8-bit value in a
040293             0439*    ; in reverse order (lsb first)
040293             0440*    ; destroys a, hl, bc
040293             0441*    printBin8Rev:
       FF FF FF FF 
       FF FF FF FF 
040293 06 08       0442*        ld b,8 ; loop counter for 8 bits
040295 21 B0 02 04 0443*        ld hl,@cmd ; set hl to the low byte of the output string
040299             0444*        ; (which will be the high bit of the value in a)
040299             0445*    @loop:
040299 0F          0446*        rrca ; put the next lowest bit into carry
04029A 38 04       0447*        jr c,@one
04029C 36 30       0448*        ld (hl),'0'
04029E 18 02       0449*        jr @next_bit
0402A0             0450*    @one:
0402A0 36 31       0451*        ld (hl),'1'
0402A2             0452*    @next_bit:
0402A2 23          0453*        inc hl
0402A3 10 F4       0454*        djnz @loop
0402A5             0455*    ; print it
0402A5 21 B0 02 04 0456*        ld hl,@cmd
0402A9 01 08 00 00 0457*        ld bc,@end-@cmd
0402AD 5B DF       0458*        rst.lil $18
0402AF C9          0459*        ret
0402B0             0460*    @cmd: ds 8 ; eight bytes for eight bits
0402B8             0461*    @end:
0402B8             0462*    
       FF FF FF FF 
       FF FF FF FF 
0402B8 20 61 66 3D 0463*    str_afu: db " af=",0
       00          
0402BD 20 68 6C 3D 0464*    str_hlu: db " hl=",0
       00          
0402C2 20 62 63 3D 0465*    str_bcu: db " bc=",0
       00          
0402C7 20 64 65 3D 0466*    str_deu: db " de=",0
       00          
0402CC 20 69 78 3D 0467*    str_ixu: db " ix=",0
       00          
0402D1 20 69 79 3D 0468*    str_iyu: db " iy=",0
       00          
0402D6             0469*    
0402D6             0470*    ; print udeuhl to screen in hexidecimal format
0402D6             0471*    ; inputs: none
0402D6             0472*    ; outputs: concatenated hexidecimal udeuhl
0402D6             0473*    ; destroys: nothing
0402D6             0474*    dumpUDEUHLHex:
0402D6             0475*    ; store everything in scratch
0402D6 22 35 03 04 0476*        ld (uhl),hl
0402DA ED 43 38 03 0477*        ld (ubc),bc
       04          
0402DF ED 53 3B 03 0478*        ld (ude),de
       04          
0402E4 DD 22 3E 03 0479*        ld (uix),ix
       04          
0402E9 FD 22 41 03 0480*        ld (uiy),iy
       04          
0402EE F5          0481*        push af
0402EF             0482*    
0402EF             0483*    ; print each register
0402EF             0484*    
0402EF 21 29 03 04 0485*        ld hl,str_udeuhl
0402F3 CD 67 00 04 0486*        call printString
0402F7 2A 3B 03 04 0487*        ld hl,(ude)
0402FB CD A0 00 04 0488*        call printHex24
0402FF 3E 2E       0489*        ld a,'.' ; print a dot to separate the values
040301 5B D7       0490*        rst.lil 10h
040303 2A 35 03 04 0491*        ld hl,(uhl)
040307 CD A0 00 04 0492*        call printHex24
04030B CD 7C 00 04 0493*        call printNewLine
04030F             0494*    
04030F             0495*    ; restore everything
04030F 2A 35 03 04 0496*        ld hl, (uhl)
040313 ED 4B 38 03 0497*        ld bc, (ubc)
       04          
040318 ED 5B 3B 03 0498*        ld de, (ude)
       04          
04031D DD 2A 3E 03 0499*        ld ix, (uix)
       04          
040322 FD 2A 41 03 0500*        ld iy, (uiy)
       04          
040327 F1          0501*        pop af
040328             0502*    ; all done
040328 C9          0503*        ret
040329             0504*    
040329 75 64 65 2E 0505*    str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
040332             0506*    
040332             0507*    ; global scratch memory for registers
040332 00 00 00    0508*    uaf: dl 0
040335 00 00 00    0509*    uhl: dl 0
040338 00 00 00    0510*    ubc: dl 0
04033B 00 00 00    0511*    ude: dl 0
04033E 00 00 00    0512*    uix: dl 0
040341 00 00 00    0513*    uiy: dl 0
040344 00 00 00    0514*    usp: dl 0
040347 00 00 00    0515*    upc: dl 0
04034A             0516*    
04034A             0517*    
04034A             0518*    ; set all the bits in the flag register
04034A             0519*    ; more of an academic exercise than anything useful
04034A             0520*    ; inputs; none
04034A             0521*    ; outputs; a=0,f=255
04034A             0522*    ; destroys: flags, hl
04034A             0523*    ; preserves: a, because why not
04034A             0524*    setAllFlags:
04034A 21 FF 00 00 0525*        ld hl,255
04034E 67          0526*        ld h,a ; four cycles to preserve a is cheap
04034F E5          0527*        push hl
040350 F1          0528*        pop af
040351 C9          0529*        ret
040352             0530*    
040352             0531*    ; reset all the bits in the flag register
040352             0532*    ; unlike its inverse counterpart, this may actually be useful
040352             0533*    ; inputs; none
040352             0534*    ; outputs; a=0,f=0
040352             0535*    ; destroys: flags, hl
040352             0536*    ; preserves: a, because why not
040352             0537*    resetAllFlags:
040352 21 00 00 00 0538*        ld hl,0
040356 67          0539*        ld h,a ; four cycles to preserve a is cheap
040357 E5          0540*        push hl
040358 F1          0541*        pop af
040359 C9          0542*        ret
04035A             0543*    
04035A             0544*    ; wait until user presses a key
04035A             0545*    ; inputs: none
04035A             0546*    ; outputs: ascii code of key pressed in a
04035A             0547*    ; destroys: af,ix
04035A             0548*    waitKeypress:
04035A             0549*        MOSCALL mos_getkey
                       M1 Args: function=mos_getkey 
04035A 3E 00       0001*M1  			LD	A, function
04035C 5B CF       0002*M1  			RST.LIL	08h
04035E C9          0550*        ret
04035F             0551*    
04035F             0552*    ; clear a block of memory by writing a prescribed value to each byte in the range
04035F             0553*    ; inputs: a = value to write, hl = address of first byte, bc = number of bytes
04035F             0554*    ; outputs: memory block is cleared
04035F             0555*    ; destroys: hl, bc, de
04035F             0556*    clear_mem:
04035F 0B          0557*        dec bc ; we do this because we will increment de before writing the first byte
040360 77          0558*        ld (hl),a
040361 E5          0559*        push hl
040362 D1          0560*        pop de
040363 13          0561*        inc de ; target address
040364 ED B0       0562*        ldir
040366 C9          0563*        ret
040367             0033         include "arith24.inc"
040367             0001*    ;------------------------------------------------------------------------
040367             0002*    ;  arith24.asm
040367             0003*    ;  24-bit ez80 arithmetic routines
040367             0004*    ;  Copyright (c) Shawn Sijnstra 2024
040367             0005*    ;  MIT license
040367             0006*    ;
040367             0007*    ;  This library was created as a tool to help make ez80
040367             0008*    ;  24-bit native assembly routines for simple mathematical problems
040367             0009*    ;  more widely available.
040367             0010*    ;
040367             0011*    ;------------------------------------------------------------------------
040367             0012*    
040367             0013*    ;------------------------------------------------------------------------
040367             0014*    ; umul24:	HL = HL*DE (unsigned)
040367             0015*    ; Preserves AF, BC, DE
040367             0016*    ; Uses a fast multiply routine.
040367             0017*    ;------------------------------------------------------------------------
040367             0018*    umul24:
040367 D5          0019*    	push	DE
040368 C5          0020*    	push	BC
040369 F5          0021*    	push	AF
04036A E5          0022*    	push	HL
04036B C1          0023*    	pop		BC
04036C 3E 18       0024*        ld	 	a, 24 ; No. of bits to process
04036E 21 00 00 00 0025*        ld	 	hl, 0 ; Result
040372             0026*    umul24_lp:
040372 29          0027*    	add	hl,hl
040373 EB          0028*    	ex	de,hl
040374 29          0029*    	add	hl,hl
040375 EB          0030*    	ex	de,hl
040376 30 01       0031*    	jr	nc,umul24_nc
040378 09          0032*    	add	hl,bc
040379             0033*    umul24_nc:
040379 3D          0034*    	dec	a
04037A 20 F6       0035*    	jr	nz,umul24_lp
04037C F1          0036*    	pop	af
04037D C1          0037*    	pop	bc
04037E D1          0038*    	pop	de
04037F C9          0039*    	ret
040380             0040*    
040380             0041*    
040380             0042*    ;------------------------------------------------------------------------
040380             0043*    ; udiv24
040380             0044*    ; Unsigned 24-bit division
040380             0045*    ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
040380             0046*    ;
040380             0047*    ; Uses AF BC DE HL
040380             0048*    ; Uses Restoring Division algorithm
040380             0049*    ;------------------------------------------------------------------------
040380             0050*    
040380             0051*    udiv24:
040380 E5          0052*    	push	hl
040381 C1          0053*    	pop		bc	;move dividend to BCU
040382 21 00 00 00 0054*    	ld		hl,0	;result
040386 A7          0055*    	and		a
040387 ED 52       0056*    	sbc		hl,de	;test for div by 0
040389 C8          0057*    	ret		z		;it's zero, carry flag is clear
04038A 19          0058*    	add		hl,de	;HL is 0 again
04038B 3E 18       0059*    	ld		a,24	;number of loops through.
04038D             0060*    udiv1:
04038D C5          0061*    	push	bc	;complicated way of doing this because of lack of access to top bits
04038E E3          0062*    	ex		(sp),hl
04038F 37          0063*    	scf
040390 ED 6A       0064*    	adc	hl,hl
040392 E3          0065*    	ex	(sp),hl
040393 C1          0066*    	pop	bc		;we now have bc = (bc * 2) + 1
040394             0067*    
040394 ED 6A       0068*    	adc	hl,hl
040396 A7          0069*    	and	a		;is this the bug
040397 ED 52       0070*    	sbc	hl,de
040399 30 02       0071*    	jr	nc,udiv2
04039B 19          0072*    	add	hl,de
04039C             0073*    ;	dec	c
04039C 0B          0074*    	dec	bc
04039D             0075*    udiv2:
04039D 3D          0076*    	dec	a
04039E 20 ED       0077*    	jr	nz,udiv1
0403A0 37          0078*    	scf		;flag used for div0 error
0403A1 C5          0079*    	push	bc
0403A2 D1          0080*    	pop		de	;remainder
0403A3 C9          0081*    	ret
0403A4             0082*    
0403A4             0083*    
0403A4             0084*    
0403A4             0085*    ;------------------------------------------------------------------------
0403A4             0086*    ; neg24
0403A4             0087*    ; Returns: HLU = 0-HLU
0403A4             0088*    ; preserves all other registers
0403A4             0089*    ;------------------------------------------------------------------------
0403A4             0090*    neg24:
0403A4 D5          0091*    	push	de
0403A5 EB          0092*    	ex		de,hl
0403A6 21 00 00 00 0093*    	ld		hl,0
0403AA B7          0094*    	or		a
0403AB ED 52       0095*    	sbc		hl,de
0403AD D1          0096*    	pop		de
0403AE C9          0097*    	ret
0403AF             0098*    
0403AF             0099*    ;------------------------------------------------------------------------
0403AF             0100*    ; or_hlu_deu: 24 bit bitwise OR
0403AF             0101*    ; Returns: hlu = hlu OR deu
0403AF             0102*    ; preserves all other registers
0403AF             0103*    ;------------------------------------------------------------------------
0403AF             0104*    or_hlu_deu:
0403AF 22 38 04 04 0105*    	ld	(bitbuf1),hl
0403B3 ED 53 3B 04 0106*    	ld	(bitbuf2),de
       04          
0403B8 D5          0107*    	push	de	;preserve DEU
0403B9 C5          0108*    	push	bc	;preserve BCU
0403BA 06 03       0109*    	ld		b,3
0403BC 21 38 04 04 0110*    	ld	hl,bitbuf1
0403C0 11 38 04 04 0111*    	ld	de,bitbuf1
0403C4             0112*    orloop_24:
0403C4 1A          0113*    	ld	a,(de)
0403C5 B6          0114*    	or	(hl)
0403C6 12          0115*    	ld	(de),a
0403C7 13          0116*    	inc	de
0403C8 23          0117*    	inc	hl
0403C9 10 F9       0118*    	djnz	orloop_24
0403CB 2A 3B 04 04 0119*    	ld	hl,(bitbuf2)
0403CF C1          0120*    	pop		bc	;restore BC
0403D0 D1          0121*    	pop		de	;restore DE
0403D1             0122*    
0403D1             0123*    ;------------------------------------------------------------------------
0403D1             0124*    ; and_hlu_deu: 24 bit bitwise AND
0403D1             0125*    ; Returns: hlu = hlu AND deu
0403D1             0126*    ; preserves all other registers
0403D1             0127*    ;------------------------------------------------------------------------
0403D1             0128*    and_hlu_deu:
0403D1 22 38 04 04 0129*    	ld	(bitbuf1),hl
0403D5 ED 53 3B 04 0130*    	ld	(bitbuf2),de
       04          
0403DA D5          0131*    	push	de	;preserve DEU
0403DB C5          0132*    	push	bc	;preserve BCU
0403DC 06 03       0133*    	ld		b,3
0403DE 21 38 04 04 0134*    	ld	hl,bitbuf1
0403E2 11 38 04 04 0135*    	ld	de,bitbuf1
0403E6             0136*    andloop_24:
0403E6 1A          0137*    	ld	a,(de)
0403E7 A6          0138*    	and	(hl)
0403E8 12          0139*    	ld	(de),a
0403E9 13          0140*    	inc	de
0403EA 23          0141*    	inc	hl
0403EB 10 F9       0142*    	djnz	andloop_24
0403ED 2A 3B 04 04 0143*    	ld	hl,(bitbuf2)
0403F1 C1          0144*    	pop		bc	;restore BC
0403F2 D1          0145*    	pop		de	;restore DE
0403F3             0146*    
0403F3             0147*    ;------------------------------------------------------------------------
0403F3             0148*    ; xor_hlu_deu: 24 bit bitwise XOR
0403F3             0149*    ; Returns: hlu = hlu XOR deu
0403F3             0150*    ; preserves all other registers
0403F3             0151*    ;------------------------------------------------------------------------
0403F3             0152*    xor_hlu_deu:
0403F3 22 38 04 04 0153*    	ld	(bitbuf1),hl
0403F7 ED 53 3B 04 0154*    	ld	(bitbuf2),de
       04          
0403FC D5          0155*    	push	de	;preserve DEU
0403FD C5          0156*    	push	bc	;preserve BCU
0403FE 06 03       0157*    	ld		b,3
040400 21 38 04 04 0158*    	ld	hl,bitbuf1
040404 11 38 04 04 0159*    	ld	de,bitbuf1
040408             0160*    xorloop_24:
040408 1A          0161*    	ld	a,(de)
040409 AE          0162*    	xor	(hl)
04040A 12          0163*    	ld	(de),a
04040B 13          0164*    	inc	de
04040C 23          0165*    	inc	hl
04040D 10 F9       0166*    	djnz	xorloop_24
04040F 2A 3B 04 04 0167*    	ld	hl,(bitbuf2)
040413 C1          0168*    	pop		bc	;restore BC
040414 D1          0169*    	pop		de	;restore DE
040415             0170*    
040415             0171*    ;------------------------------------------------------------------------
040415             0172*    ; shl_hlu: 24 bit shift left hlu by a positions
040415             0173*    ; Returns: hlu = hlu << a
040415             0174*    ;		   a = 0
040415             0175*    ; NOTE: only considers a up to 16 bits.
040415             0176*    ; preserves all other registers
040415             0177*    ; modified by Brandon R. Gates to use a instead of de
040415             0178*    ;------------------------------------------------------------------------
040415             0179*    shl_hlu:
040415 B7          0180*    	or a
040416 C8          0181*    	ret		z		;we're done
040417 29          0182*    	add		hl,hl	;shift HLU left
040418 3D          0183*    	dec a
040419 18 FA       0184*    	jr		shl_hlu
04041B             0185*    
04041B             0186*    ;------------------------------------------------------------------------
04041B             0187*    ; shr_hlu: 24 bit shift right hlu by a positions
04041B             0188*    ; Returns: hlu = hlu >> a
04041B             0189*    ;		   a = 0
04041B             0190*    ; NOTE: only considers a up to 16 bits.
04041B             0191*    ; preserves all other registers
04041B             0192*    ; modified by Brandon R. Gates to use a instead of de
04041B             0193*    ;------------------------------------------------------------------------
04041B             0194*    shr_hlu:
04041B 22 38 04 04 0195*    	ld		(bitbuf1),hl
04041F 21 3A 04 04 0196*    	ld		hl,bitbuf1+2
040423             0197*    @shr_loop:
040423 B7          0198*    	or a
040424 28 0D       0199*    	jr		z,@shr_done		;we're done
040426             0200*    ;carry is clear from or instruction
040426 CB 1E       0201*    	rr		(hl)
040428 2B          0202*    	dec		hl
040429 CB 1E       0203*    	rr		(hl)
04042B 2B          0204*    	dec		hl
04042C CB 1E       0205*    	rr		(hl)
04042E 23          0206*    	inc		hl
04042F 23          0207*    	inc		hl
040430 3D          0208*    	dec a
040431 18 F0       0209*    	jr		@shr_loop
040433             0210*    @shr_done:
040433 2A 38 04 04 0211*    	ld		hl,(bitbuf1)	;collect result
040437 C9          0212*    	ret
040438             0213*    
040438             0214*    ;------------------------------------------------------------------------
040438             0215*    ; Scratch area for calculations
040438             0216*    ;------------------------------------------------------------------------
040438 00 00 00    0217*    bitbuf1:	dw24	0	;bit manipulation buffer 1
04043B 00 00 00    0218*    bitbuf2:	dw24	0	;bit manipulation buffer 2
04043E             0219*    
04043E             0220*    ; -----------------------------------------------------------------------
04043E             0221*    ; Functions added by Brandon R. Gates
04043E             0222*    ; -----------------------------------------------------------------------
04043E             0223*    
04043E             0224*    ;------------------------------------------------------------------------
04043E             0225*    ; shr_hlu_div: Quick division by powers of two based on log2 of A
04043E             0226*    ;              Determines the LSB of A and shifts HLU accordingly.
04043E             0227*    ;              HLU = HLU >> LSB(A)
04043E             0228*    ; Returns: HLU = HLU >> LSB(A)
04043E             0229*    ; Destroys: af
04043E             0230*    ;------------------------------------------------------------------------
04043E             0231*    shr_hlu_log2a:
04043E B7          0232*    	or a    ; check for zero
04043F C8          0233*    	ret z   ; nothing to shift so we're done
040440 C5          0234*    	push 	bc ; preserve
040441 06 00       0235*    	ld		b,0 ; clear b
040443             0236*    @find_bit:
040443 0F          0237*    	rrca ; bit 0 to carry
040444 DA 4D 04 04 0238*    	jp c,@found_bit
040448 04          0239*    	inc b ; next bit
040449 C3 43 04 04 0240*    	jp @find_bit
04044D             0241*    @found_bit:
04044D 78          0242*    	ld a,b
04044E CD 1B 04 04 0243*    	call shr_hlu
040452 C1          0244*    	pop 	bc ; restore
040453 C9          0245*    	ret
040454             0246*    ; end shr_hlu_log2a
040454             0247*    
040454             0248*    ;------------------------------------------------------------------------
040454             0249*    ; shl_hlu_log2a: Quick multiplication by powers of two based on log2 of A
040454             0250*    ;                Determines the LSB of A and shifts HLU accordingly.
040454             0251*    ;                HLU = HLU << LSB(A)
040454             0252*    ; Returns: HLU = HLU << LSB(A)
040454             0253*    ; Destroys: af
040454             0254*    ;------------------------------------------------------------------------
040454             0255*    shl_hlu_log2a:
040454 B7          0256*    	or a    ; check for zero
040455 C8          0257*    	ret z   ; nothing to shift so we're done
040456 C5          0258*    	push 	bc ; preserve
040457 06 00       0259*    	ld		b,0 ; clear b
040459             0260*    @find_bit:
040459 0F          0261*    	rrca ; bit 0 to carry
04045A DA 63 04 04 0262*    	jp c,@found_bit
04045E 04          0263*    	inc b ; next bit
04045F C3 59 04 04 0264*    	jp @find_bit
040463             0265*    @found_bit:
040463 78          0266*    	ld a,b
040464 CD 15 04 04 0267*    	call shl_hlu
040468 C1          0268*    	pop 	bc ; restore
040469 C9          0269*    	ret
04046A             0270*    ; end shl_hlu_log2a
04046A             0034         include "maths.inc"
04046A             0001*    ;------------------------------------------------------------------------
04046A             0002*    ; Scratch area for calculations
04046A             0003*    ;------------------------------------------------------------------------
04046A 00 00 00    0004*    scratch1: dw24 0 ;bit manipulation buffer 1
04046D 00 00 00    0005*    scratch2: dw24 0 ;bit manipulation buffer 2
040470             0006*    
040470             0007*    ; absolute value of hlu
040470             0008*    ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040470             0009*    ;         s1,z0,pv0,n1,c0 if hlu was negative
040470             0010*    ;         s0,z1,pv0,n1,c0 if hlu was zero
040470             0011*    ;         s0,z0,pv0,n1,c0 if hlu was positive
040470             0012*    ; destroys: a
040470             0013*    hlu_abs:
040470 19          0014*        add hl,de
040471 B7          0015*        or a
040472 ED 52       0016*        sbc hl,de
040474 FA 79 04 04 0017*        jp m,@is_neg
040478 C9          0018*        ret ; hlu is positive or zero so we're done
040479             0019*    @is_neg:
040479 F5          0020*        push af ; otherwise, save current flags for return
04047A CD 80 04 04 0021*        call neg_hlu ; negate hlu
04047E F1          0022*        pop af ; get back flags
04047F C9          0023*        ret
040480             0024*    
040480             0025*    ; flip the sign of hlu
040480             0026*    ; inputs: hlu
040480             0027*    ; returns: 0-hlu, flags set appropriately for the result:
040480             0028*    ;         s1,z0,pv0,n1,c1 if result is negative
040480             0029*    ;         s0,z1,pv0,n1,c0 if result is zero
040480             0030*    ;         s0,z0,pv0,n1,c1 if result is positive
040480             0031*    ; destroys a
040480             0032*    neg_hlu:
040480 D5          0033*        push de ; save de
040481 EB          0034*        ex de,hl ; put hl into de
040482 21 00 00 00 0035*        ld hl,0 ; clear hl
040486 AF          0036*        xor a ; clear carry
040487 ED 52       0037*        sbc hl,de ; 0-hlu = -hlu
040489 D1          0038*        pop de ; get de back
04048A C9          0039*        ret ; easy peasy
04048B             0040*    
04048B             0041*    ;------------------------------------------------------------------------
04048B             0042*    ; divide hlu by 2, inspired by above
04048B             0043*    ;------------------------------------------------------------------------
04048B             0044*    hlu_div2:
04048B 22 6A 04 04 0045*        ld (scratch1),hl
04048F 21 6C 04 04 0046*        ld hl,scratch1+2
040493 CB 1E       0047*        rr (hl)
040495 2B          0048*        dec hl
040496 CB 1E       0049*        rr (hl)
040498 2B          0050*        dec hl
040499 CB 1E       0051*        rr (hl)
04049B 23          0052*        inc hl
04049C 23          0053*        inc hl
04049D 2A 6A 04 04 0054*        ld hl,(scratch1)
0404A1 C9          0055*        ret
0404A2             0056*    
0404A2             0057*    ; this is my little hack to divide by 16
0404A2             0058*    hlu_div16:
0404A2 AF          0059*        xor a
0404A3 29          0060*        add hl,hl
0404A4 17          0061*        rla
0404A5 29          0062*        add hl,hl
0404A6 17          0063*        rla
0404A7 29          0064*        add hl,hl
0404A8 17          0065*        rla
0404A9 29          0066*        add hl,hl
0404AA 17          0067*        rla
0404AB 22 B8 04 04 0068*        ld (@scratch),hl
0404AF 32 BB 04 04 0069*        ld (@scratch+3),a
0404B3 2A B9 04 04 0070*        ld hl,(@scratch+1)
0404B7 C9          0071*        ret
0404B8             0072*    @scratch: ds 4
0404BC             0073*    
0404BC             0074*    ; hlu signed division by 256
0404BC             0075*    ; returns: hlu / 256
0404BC             0076*    ; destroys: af
0404BC             0077*    hlu_sdiv256:
       FF FF FF FF 
0404BC AF          0078*        xor a ; assume hl is positive
0404BD 22 D3 04 04 0079*        ld (@buffer),hl
0404C1             0080*        SIGN_HLU
                       M1 Args: none
0404C1 19          0001*M1      add hl,de ; 1 cycle
0404C2 B7          0002*M1      or a ; clear flags ; 1 cycle
0404C3 ED 52       0003*M1      sbc hl,de ; 2 cycles
0404C5             0004*M1      ; 4 cycles total
0404C5 F2 CA 04 04 0081*        jp p,@hl_pos
0404C9 3D          0082*        dec a
0404CA             0083*    @hl_pos:
0404CA 32 D6 04 04 0084*        ld (@buffer+3),a
0404CE 2A D4 04 04 0085*        ld hl,(@buffer+1)
0404D2 C9          0086*        ret
0404D3             0087*    @buffer: ds 4
0404D7             0088*    
0404D7             0089*    ; hlu 1 byte right shift, unsigned
0404D7             0090*    ; returns: hlu / 256, fractional portion in a
0404D7             0091*    ; destroys: af
0404D7             0092*    hlu_udiv256:
       FF FF FF FF 
0404D7 AF          0093*        xor a
0404D8 32 E9 04 04 0094*        ld (@buffer+3),a
0404DC 7D          0095*        ld a,l ; save the fractional portion
0404DD 22 E6 04 04 0096*        ld (@buffer),hl
0404E1 2A E7 04 04 0097*        ld hl,(@buffer+1)
0404E5 C9          0098*        ret
0404E6             0099*    @buffer: ds 4
0404EA             0100*    
0404EA             0101*    ; floor(value,n)
0404EA             0102*    ; inputs: hl = value to floor, de = n
0404EA             0103*    ; outputs: hl = value floored to n
0404EA             0104*    ; destroys: af, hl, bc, de
0404EA             0105*    hlu_floor:
       FF FF FF FF 
0404EA D5          0106*        push de ; save n
0404EB CD 80 03 04 0107*        call udiv24 ; de = quotient, hl = remainder
0404EF E1          0108*        pop hl ; get n back (was de)
0404F0 CD 67 03 04 0109*        call umul24 ; hl = n * quotient
0404F4 C9          0110*        ret
0404F5             0111*    ; end hlu_floor
0404F5             0112*    
0404F5             0113*    ; ceil(value,n)
0404F5             0114*    ; inputs: hl = value to ceil, de = n
0404F5             0115*    ; outputs: hl = value ceiled to n
0404F5             0116*    ; destroys: af, hl, bc, de
0404F5             0117*    hlu_ceiling:
0404F5 D5          0118*        push de ; save n
0404F6 CD 80 03 04 0119*        call udiv24 ; de = quotient, hl = remainder
0404FA             0120*        SIGN_HLU ; test remaider for zero
                       M1 Args: none
0404FA 19          0001*M1      add hl,de ; 1 cycle
0404FB B7          0002*M1      or a ; clear flags ; 1 cycle
0404FC ED 52       0003*M1      sbc hl,de ; 2 cycles
0404FE             0004*M1      ; 4 cycles total
0404FE CA 03 05 04 0121*        jp z,@F ; if zero, nothing to add
040502 13          0122*        inc de ; add 1 to quotient for the ceiling
040503             0123*    @@:
040503 E1          0124*        pop hl ; get n back (was de)
040504 CD 67 03 04 0125*        call umul24 ; hl = n * quotient
040508 C9          0126*        ret
040509             0127*    ; end hlu_ceiling
040509             0128*    
040509 C9          0129*        ret
04050A             0130*    
04050A 00 00 00 00 0131*    add_bcd_arg1: db #00,#00,#00,#00
04050E 00 00 00 00 0132*    add_bcd_arg2: db #00,#00,#00,#00
040512             0133*    
040512             0134*    ; set bcd values in a scratch memory address from registers bcde
040512             0135*    ; input: hl; scratch address,bcde; 8-place bcd number
040512             0136*    ; destroys ; hl
040512             0137*    set_bcd:
040512 73          0138*        ld (hl),e
040513 23          0139*        inc hl
040514 72          0140*        ld (hl),d
040515 23          0141*        inc hl
040516 71          0142*        ld (hl),c
040517 23          0143*        inc hl
040518 70          0144*        ld (hl),b
040519 C9          0145*        ret
04051A             0146*    
04051A             0147*    ; load bcd values from a scratch memory address to bcde
04051A             0148*    ; input: hl; scratch address
04051A             0149*    ; output: bcde; 8-place bcd number
04051A             0150*    ; destroys: hl
04051A             0151*    get_bcd:
04051A 5E          0152*        ld e,(hl)
04051B 23          0153*        inc hl
04051C 56          0154*        ld d,(hl)
04051D 23          0155*        inc hl
04051E 4E          0156*        ld c,(hl)
04051F 23          0157*        inc hl
040520 46          0158*        ld b,(hl)
040521 C9          0159*        ret
040522             0160*    
040522             0161*    ; BCD addition
040522             0162*    ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040522             0163*    ;       a is the number of bytes holding each number (number of places/2)
040522             0164*    ; outputs: (hl) + (de) --> (hl)
040522             0165*    ; destroys: a,b,de,hl
040522             0166*    add_bcd:
040522 47          0167*        ld b,a ; loop counter
040523 AF          0168*        xor a ; reset a, clear carry flag
040524             0169*    adcec:
040524 1A          0170*        ld a,(de) ; addend to acc
040525 8E          0171*        adc a,(hl) ; add (hl) to acc
040526 27          0172*        daa ; adjust result to bcd
040527 77          0173*        ld (hl),a ; store result
040528 23          0174*        inc hl ; advance memory pointers
040529 13          0175*        inc de
04052A 10 F8       0176*        djnz adcec ; loop until b == 0
04052C C9          0177*        ret
04052D             0178*    
04052D             0179*    ; BCD subtraction
04052D             0180*    ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04052D             0181*    ;       a is the number of bytes holding each number (number of places/2)
04052D             0182*    ; outputs: (hl) - (de) --> (hl)
04052D             0183*    ; destroys: a,b,de,hl
04052D             0184*    sub_bcd:
04052D 47          0185*        ld b,a ; loop counter
04052E AF          0186*        xor a ; reset a,clear carry flag
04052F             0187*    subdec:
04052F 1A          0188*        ld a,(de) ; subtrahend to acc
040530 9E          0189*        sbc a,(hl) ; subtract (hl) from acc
040531 27          0190*        daa ; adjust result to bcd
040532 77          0191*        ld (hl),a ; store result
040533 23          0192*        inc hl ; advance memory pointers
040534 13          0193*        inc de
040535 10 F8       0194*        djnz subdec ; loop until b == 0
040537 C9          0195*        ret
040538             0196*    
040538             0197*    ; http://www.z80.info/pseudo-random.txt
040538             0198*    rand_8:
040538 C5          0199*        push bc
040539 3A 4C 05 04 0200*        ld a,(r_seed)
04053D 4F          0201*        ld c,a
04053E             0202*    
04053E 0F          0203*        rrca ; multiply by 32
04053F 0F          0204*        rrca
040540 0F          0205*        rrca
040541 EE 1F       0206*        xor 0x1f
040543             0207*    
040543 81          0208*        add a,c
040544 DE FF       0209*        sbc a,255 ; carry
040546             0210*    
040546 32 4C 05 04 0211*        ld (r_seed),a
04054A C1          0212*        pop bc
04054B C9          0213*        ret
04054C 50          0214*    r_seed: defb $50
04054D             0215*    
04054D             0216*    ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
04054D             0217*    prng24:
04054D             0218*    ;;Expects ADL mode.
04054D             0219*    ;;Output: HL
04054D             0220*    ;;50cc
04054D             0221*    ;;33 bytes
04054D             0222*    ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
04054D ED 5B 6E 05 0223*        ld de,(seed1)
       04          
040552 B7          0224*        or a
040553 ED 62       0225*        sbc hl,hl
040555 19          0226*        add hl,de
040556 29          0227*        add hl,hl
040557 29          0228*        add hl,hl
040558 2C          0229*        inc l
040559 19          0230*        add hl,de
04055A 22 6E 05 04 0231*        ld (seed1),hl
04055E 2A 71 05 04 0232*        ld hl,(seed2)
040562 29          0233*        add hl,hl
040563 9F          0234*        sbc a,a
040564 E6 1B       0235*        and %00011011
040566 AD          0236*        xor l
040567 6F          0237*        ld l,a
040568 22 71 05 04 0238*        ld (seed2),hl
04056C 19          0239*        add hl,de
04056D C9          0240*        ret
04056E 00 00 00    0241*    seed1: dl 0
040571 00 00 00    0242*    seed2: dl 0
040574             0243*    
040574             0244*    
040574             0245*    ; https://map.grauw.nl/sources/external/z80bits.html#2.1
040574             0246*    ; h / l -> h, remain a
040574             0247*    ; 2.1 Restoring 8-bit / 8-bit Unsigned
040574             0248*    ; Input: H = Dividend, L = Divisor, A = 0
040574             0249*    ; Output: H = Quotient, A = Remainder, L = Divisor (unchanged)
040574             0250*    udiv8:
040574 AF          0251*        xor a
040575 06 08       0252*        ld b,8
040577             0253*    @loop:
040577 CB 24       0254*        sla h
040579 17          0255*        rla
04057A BD          0256*        cp l
04057B 38 02       0257*        jr c,$+4
04057D 95          0258*        sub l
04057E 24          0259*        inc h
04057F 10 F6       0260*        djnz @loop
040581 C9          0261*        ret
040582             0262*    
040582             0263*    ; https://www.omnimaga.org/asm-language/(z80)-32-bit-by-16-bits-division-and-32-bit-square-root/msg406903/#msg406903
040582             0264*    ; This divides HLIX by BC
040582             0265*    ; The result is stored in HLIX, the remainder in DE
040582             0266*    ; BC is unmodified
040582             0267*    ; A is 0
040582             0268*    udiv3216:
040582 11 00 00 00 0269*        ld de,0		; 10
040586 3E 20       0270*        ld a,32		; 7
040588             0271*    @loop:
040588 52 DD 29    0272*        add.s ix,ix		; 15
04058B 52 ED 6A    0273*        adc.s hl,hl		; 15
04058E EB          0274*        ex de,hl		; 4
04058F 52 ED 6A    0275*        adc.s hl,hl		; 15
040592 B7          0276*        or a			; 4
040593 52 ED 42    0277*        sbc.s hl,bc		; 15
040596 52 DD 23    0278*        inc.s ix		; 10
040599 30 05       0279*        jr nc,@cansub		; 12/7
04059B 52 09       0280*        add.s hl,bc		; 11
04059D 52 DD 2B    0281*        dec.s ix		; 10
0405A0             0282*    @cansub:
0405A0 EB          0283*        ex de,hl		; 4
0405A1 3D          0284*        dec a		; 4
0405A2 20 E4       0285*        jr nz,@loop	; 12/7
0405A4 C9          0286*        ret			; 10
0405A5             0287*    ; end udiv3216
0405A5             0288*    
0405A5             0289*    ; https://discord.com/channels/1158535358624039014/1282290921815408681/1329274504022720512
0405A5             0290*    ; calc84maniac's 32-bit by 23-bit division routine
0405A5             0291*    ; This divides AUIX by UDE (maximum 23 bits)
0405A5             0292*    ; The result is stored in AUIX, the remainder in UHL
0405A5             0293*    ; UDE, C are unmodified
0405A5             0294*    ; B is 0
0405A5             0295*    udiv3223:
0405A5 B7          0296*        or a,a         ; 1
0405A6 ED 62       0297*        sbc hl,hl      ; 2
0405A8 06 20       0298*        ld b,32        ; 2
0405AA             0299*    @loop:
0405AA DD 29       0300*        add ix,ix      ; 2
0405AC 8F          0301*        adc a,a        ; 1
0405AD ED 6A       0302*        adc hl,hl      ; 2
0405AF ED 52       0303*        sbc hl,de      ; 2
0405B1 DD 23       0304*        inc ix         ; 2
0405B3 30 03       0305*        jr nc,@cansub  ; 2/4
0405B5 19          0306*        add hl,de      ; 1
0405B6 DD 2B       0307*        dec ix         ; 2
0405B8             0308*    @cansub:
0405B8 10 F0       0309*        djnz @loop     ; 2/4
0405BA C9          0310*        ret            ; 10
0405BB             0311*    ; end udiv3223
0405BB             0312*    
0405BB             0313*    ; calc84maniac https://discord.com/channels/1158535358624039014/1282290921815408681/1330991583369101322
0405BB             0314*    ; add uhl to signed integer a
0405BB             0315*    add_uhl_a_signed:
0405BB D5          0316*        push de    ; 4 cycles
0405BC EB          0317*        ex de, hl  ; 1 cycle  UDE = UHL
0405BD 07          0318*        rlca       ; 1 cycle  CF = signbit(A)
0405BE ED 62       0319*        sbc hl, hl ; 2 cycles UHL = -signbit(A)
0405C0 0F          0320*        rrca       ; 1 cycle  Restore A
0405C1 6F          0321*        ld l, a    ; 1 cycle  UHL = signext(A)
0405C2 19          0322*        add hl, de ; 1 cycle  UHL = UDE + signext(A)
0405C3 D1          0323*        pop de     ; 4 cycles
0405C4             0324*                   ; 15 cycles total
0405C4 C9          0325*        ret
0405C5             0326*    ; end hlu_add_a_signed
0405C5             0035         include "font.inc"
0405C5             0001*    Lat2_VGA8_8x8: equ 64016
0405C5             0002*    font_data:
0405C5             0003*        ; incbin "../assets/fonts/Lat2-VGA8_8x8.font"
0405C5             0004*        include "../fonts/Lat2-VGA8_8x8.font.inc"
0405C5             0001**   ; 0 NULL
0405C5 00          0002**       db %00000000
0405C6 00          0003**       db %00000000
0405C7 78          0004**       db %01111000
0405C8 0C          0005**       db %00001100
0405C9 7C          0006**       db %01111100
0405CA CC          0007**       db %11001100
0405CB 76          0008**       db %01110110
0405CC 0F          0009**       db %00001111
0405CD             0010**   
0405CD             0011**   ; 1 START_OF_HEADING
0405CD 3C          0012**       db %00111100
0405CE 42          0013**       db %01000010
0405CF B9          0014**       db %10111001
0405D0 A5          0015**       db %10100101
0405D1 B9          0016**       db %10111001
0405D2 A5          0017**       db %10100101
0405D3 42          0018**       db %01000010
0405D4 3C          0019**       db %00111100
0405D5             0020**   
0405D5             0021**   ; 2 START_OF_TEXT
0405D5 00          0022**       db %00000000
0405D6 00          0023**       db %00000000
0405D7 18          0024**       db %00011000
0405D8 3C          0025**       db %00111100
0405D9 66          0026**       db %01100110
0405DA FF          0027**       db %11111111
0405DB 00          0028**       db %00000000
0405DC 00          0029**       db %00000000
0405DD             0030**   
0405DD             0031**   ; 3 END_OF_TEXT
0405DD 7E          0032**       db %01111110
0405DE 81          0033**       db %10000001
0405DF A5          0034**       db %10100101
0405E0 81          0035**       db %10000001
0405E1 BD          0036**       db %10111101
0405E2 99          0037**       db %10011001
0405E3 81          0038**       db %10000001
0405E4 7E          0039**       db %01111110
0405E5             0040**   
0405E5             0041**   ; 4 END_OF_TRANSMISSION
0405E5 10          0042**       db %00010000
0405E6 38          0043**       db %00111000
0405E7 7C          0044**       db %01111100
0405E8 FE          0045**       db %11111110
0405E9 7C          0046**       db %01111100
0405EA 38          0047**       db %00111000
0405EB 10          0048**       db %00010000
0405EC 00          0049**       db %00000000
0405ED             0050**   
0405ED             0051**   ; 5 ENQUIRY
0405ED 3C          0052**       db %00111100
0405EE 7E          0053**       db %01111110
0405EF DB          0054**       db %11011011
0405F0 FF          0055**       db %11111111
0405F1 C3          0056**       db %11000011
0405F2 7E          0057**       db %01111110
0405F3 3C          0058**       db %00111100
0405F4 00          0059**       db %00000000
0405F5             0060**   
0405F5             0061**   ; 6 ACKNOWLEDGE
0405F5 10          0062**       db %00010000
0405F6 38          0063**       db %00111000
0405F7 7C          0064**       db %01111100
0405F8 FE          0065**       db %11111110
0405F9 FE          0066**       db %11111110
0405FA 10          0067**       db %00010000
0405FB 38          0068**       db %00111000
0405FC 00          0069**       db %00000000
0405FD             0070**   
0405FD             0071**   ; 7 BELL
0405FD 00          0072**       db %00000000
0405FE 00          0073**       db %00000000
0405FF 18          0074**       db %00011000
040600 3C          0075**       db %00111100
040601 18          0076**       db %00011000
040602 00          0077**       db %00000000
040603 00          0078**       db %00000000
040604 00          0079**       db %00000000
040605             0080**   
040605             0081**   ; 8 BACKSPACE
040605 00          0082**       db %00000000
040606 3C          0083**       db %00111100
040607 18          0084**       db %00011000
040608 FF          0085**       db %11111111
040609 FF          0086**       db %11111111
04060A 08          0087**       db %00001000
04060B 18          0088**       db %00011000
04060C 00          0089**       db %00000000
04060D             0090**   
04060D             0091**   ; 9 HORIZONTAL_TAB
04060D 00          0092**       db %00000000
04060E EE          0093**       db %11101110
04060F FE          0094**       db %11111110
040610 FE          0095**       db %11111110
040611 7C          0096**       db %01111100
040612 38          0097**       db %00111000
040613 10          0098**       db %00010000
040614 00          0099**       db %00000000
040615             0100**   
040615             0101**   ; 10 LINE_FEED
040615 00          0102**       db %00000000
040616 3C          0103**       db %00111100
040617 42          0104**       db %01000010
040618 81          0105**       db %10000001
040619 81          0106**       db %10000001
04061A 42          0107**       db %01000010
04061B 3C          0108**       db %00111100
04061C 00          0109**       db %00000000
04061D             0110**   
04061D             0111**   ; 11 VERTICAL_TAB
04061D 1F          0112**       db %00011111
04061E 07          0113**       db %00000111
04061F 0D          0114**       db %00001101
040620 7C          0115**       db %01111100
040621 C6          0116**       db %11000110
040622 C6          0117**       db %11000110
040623 7C          0118**       db %01111100
040624 00          0119**       db %00000000
040625             0120**   
040625             0121**   ; 12 FORM_FEED
040625 00          0122**       db %00000000
040626 7E          0123**       db %01111110
040627 C3          0124**       db %11000011
040628 C3          0125**       db %11000011
040629 7E          0126**       db %01111110
04062A 18          0127**       db %00011000
04062B 7E          0128**       db %01111110
04062C 18          0129**       db %00011000
04062D             0130**   
04062D             0131**   ; 13 CARRIAGE_RETURN
04062D 04          0132**       db %00000100
04062E 06          0133**       db %00000110
04062F 07          0134**       db %00000111
040630 04          0135**       db %00000100
040631 04          0136**       db %00000100
040632 FC          0137**       db %11111100
040633 F8          0138**       db %11111000
040634 00          0139**       db %00000000
040635             0140**   
040635             0141**   ; 14 SHIFT_OUT
040635 0C          0142**       db %00001100
040636 0A          0143**       db %00001010
040637 0D          0144**       db %00001101
040638 0B          0145**       db %00001011
040639 F9          0146**       db %11111001
04063A F9          0147**       db %11111001
04063B 1F          0148**       db %00011111
04063C 1F          0149**       db %00011111
04063D             0150**   
04063D             0151**   ; 15 SHIFT_IN
04063D 00          0152**       db %00000000
04063E 92          0153**       db %10010010
04063F 7C          0154**       db %01111100
040640 44          0155**       db %01000100
040641 C6          0156**       db %11000110
040642 7C          0157**       db %01111100
040643 92          0158**       db %10010010
040644 00          0159**       db %00000000
040645             0160**   
040645             0161**   ; 16 DATA_LINK_ESCAPE
040645 FF          0162**       db %11111111
040646 FF          0163**       db %11111111
040647 E7          0164**       db %11100111
040648 C3          0165**       db %11000011
040649 E7          0166**       db %11100111
04064A FF          0167**       db %11111111
04064B FF          0168**       db %11111111
04064C FF          0169**       db %11111111
04064D             0170**   
04064D             0171**   ; 17 DEVICE_CONTROL_1
04064D FF          0172**       db %11111111
04064E C3          0173**       db %11000011
04064F BD          0174**       db %10111101
040650 7E          0175**       db %01111110
040651 7E          0176**       db %01111110
040652 BD          0177**       db %10111101
040653 C3          0178**       db %11000011
040654 FF          0179**       db %11111111
040655             0180**   
040655             0181**   ; 18 DEVICE_CONTROL_2
040655 18          0182**       db %00011000
040656 3C          0183**       db %00111100
040657 7E          0184**       db %01111110
040658 18          0185**       db %00011000
040659 18          0186**       db %00011000
04065A 7E          0187**       db %01111110
04065B 3C          0188**       db %00111100
04065C 18          0189**       db %00011000
04065D             0190**   
04065D             0191**   ; 19 DEVICE_CONTROL_3
04065D 66          0192**       db %01100110
04065E 66          0193**       db %01100110
04065F 66          0194**       db %01100110
040660 66          0195**       db %01100110
040661 66          0196**       db %01100110
040662 00          0197**       db %00000000
040663 66          0198**       db %01100110
040664 00          0199**       db %00000000
040665             0200**   
040665             0201**   ; 20 DEVICE_CONTROL_4
040665 7F          0202**       db %01111111
040666 DB          0203**       db %11011011
040667 7B          0204**       db %01111011
040668 3B          0205**       db %00111011
040669 1B          0206**       db %00011011
04066A 1B          0207**       db %00011011
04066B 1B          0208**       db %00011011
04066C 00          0209**       db %00000000
04066D             0210**   
04066D             0211**   ; 21 NEGATIVE_ACKNOWLEDGE
04066D 3E          0212**       db %00111110
04066E 61          0213**       db %01100001
04066F 3C          0214**       db %00111100
040670 66          0215**       db %01100110
040671 66          0216**       db %01100110
040672 3C          0217**       db %00111100
040673 86          0218**       db %10000110
040674 7C          0219**       db %01111100
040675             0220**   
040675             0221**   ; 22 SYNCHRONOUS_IDLE
040675 38          0222**       db %00111000
040676 64          0223**       db %01100100
040677 F0          0224**       db %11110000
040678 60          0225**       db %01100000
040679 F0          0226**       db %11110000
04067A 64          0227**       db %01100100
04067B 38          0228**       db %00111000
04067C 00          0229**       db %00000000
04067D             0230**   
04067D             0231**   ; 23 END_OF_TRANSMISSION_BLOCK
04067D 18          0232**       db %00011000
04067E 7E          0233**       db %01111110
04067F 18          0234**       db %00011000
040680 18          0235**       db %00011000
040681 7E          0236**       db %01111110
040682 18          0237**       db %00011000
040683 00          0238**       db %00000000
040684 FF          0239**       db %11111111
040685             0240**   
040685             0241**   ; 24 CANCEL
040685 18          0242**       db %00011000
040686 3C          0243**       db %00111100
040687 7E          0244**       db %01111110
040688 18          0245**       db %00011000
040689 18          0246**       db %00011000
04068A 18          0247**       db %00011000
04068B 18          0248**       db %00011000
04068C 00          0249**       db %00000000
04068D             0250**   
04068D             0251**   ; 25 END_OF_MEDIUM
04068D 18          0252**       db %00011000
04068E 18          0253**       db %00011000
04068F 18          0254**       db %00011000
040690 18          0255**       db %00011000
040691 7E          0256**       db %01111110
040692 3C          0257**       db %00111100
040693 18          0258**       db %00011000
040694 00          0259**       db %00000000
040695             0260**   
040695             0261**   ; 26 SUBSTITUTE
040695 00          0262**       db %00000000
040696 18          0263**       db %00011000
040697 0C          0264**       db %00001100
040698 FE          0265**       db %11111110
040699 0C          0266**       db %00001100
04069A 18          0267**       db %00011000
04069B 00          0268**       db %00000000
04069C 00          0269**       db %00000000
04069D             0270**   
04069D             0271**   ; 27 ESCAPE
04069D 00          0272**       db %00000000
04069E 30          0273**       db %00110000
04069F 60          0274**       db %01100000
0406A0 FE          0275**       db %11111110
0406A1 60          0276**       db %01100000
0406A2 30          0277**       db %00110000
0406A3 00          0278**       db %00000000
0406A4 00          0279**       db %00000000
0406A5             0280**   
0406A5             0281**   ; 28 FILE_SEPARATOR
0406A5 00          0282**       db %00000000
0406A6 00          0283**       db %00000000
0406A7 00          0284**       db %00000000
0406A8 C0          0285**       db %11000000
0406A9 C0          0286**       db %11000000
0406AA C0          0287**       db %11000000
0406AB FF          0288**       db %11111111
0406AC 00          0289**       db %00000000
0406AD             0290**   
0406AD             0291**   ; 29 GROUP_SEPARATOR
0406AD 00          0292**       db %00000000
0406AE 24          0293**       db %00100100
0406AF 66          0294**       db %01100110
0406B0 FF          0295**       db %11111111
0406B1 66          0296**       db %01100110
0406B2 24          0297**       db %00100100
0406B3 00          0298**       db %00000000
0406B4 00          0299**       db %00000000
0406B5             0300**   
0406B5             0301**   ; 30 RECORD_SEPARATOR
0406B5 48          0302**       db %01001000
0406B6 78          0303**       db %01111000
0406B7 84          0304**       db %10000100
0406B8 60          0305**       db %01100000
0406B9 18          0306**       db %00011000
0406BA 84          0307**       db %10000100
0406BB 78          0308**       db %01111000
0406BC 00          0309**       db %00000000
0406BD             0310**   
0406BD             0311**   ; 31 UNIT_SEPARATOR
0406BD 78          0312**       db %01111000
0406BE 00          0313**       db %00000000
0406BF 7C          0314**       db %01111100
0406C0 C0          0315**       db %11000000
0406C1 78          0316**       db %01111000
0406C2 0C          0317**       db %00001100
0406C3 F8          0318**       db %11111000
0406C4 00          0319**       db %00000000
0406C5             0320**   
0406C5             0321**   ; 32
0406C5 00          0322**       db %00000000
0406C6 00          0323**       db %00000000
0406C7 00          0324**       db %00000000
0406C8 00          0325**       db %00000000
0406C9 00          0326**       db %00000000
0406CA 00          0327**       db %00000000
0406CB 00          0328**       db %00000000
0406CC 00          0329**       db %00000000
0406CD             0330**   
0406CD             0331**   ; 33 !
0406CD 30          0332**       db %00110000
0406CE 78          0333**       db %01111000
0406CF 78          0334**       db %01111000
0406D0 30          0335**       db %00110000
0406D1 30          0336**       db %00110000
0406D2 00          0337**       db %00000000
0406D3 30          0338**       db %00110000
0406D4 00          0339**       db %00000000
0406D5             0340**   
0406D5             0341**   ; 34 "
0406D5 6C          0342**       db %01101100
0406D6 6C          0343**       db %01101100
0406D7 00          0344**       db %00000000
0406D8 00          0345**       db %00000000
0406D9 00          0346**       db %00000000
0406DA 00          0347**       db %00000000
0406DB 00          0348**       db %00000000
0406DC 00          0349**       db %00000000
0406DD             0350**   
0406DD             0351**   ; 35 #
0406DD 6C          0352**       db %01101100
0406DE 6C          0353**       db %01101100
0406DF FE          0354**       db %11111110
0406E0 6C          0355**       db %01101100
0406E1 FE          0356**       db %11111110
0406E2 6C          0357**       db %01101100
0406E3 6C          0358**       db %01101100
0406E4 00          0359**       db %00000000
0406E5             0360**   
0406E5             0361**   ; 36 $
0406E5 10          0362**       db %00010000
0406E6 7E          0363**       db %01111110
0406E7 90          0364**       db %10010000
0406E8 7C          0365**       db %01111100
0406E9 12          0366**       db %00010010
0406EA FC          0367**       db %11111100
0406EB 10          0368**       db %00010000
0406EC 00          0369**       db %00000000
0406ED             0370**   
0406ED             0371**   ; 37 %
0406ED 00          0372**       db %00000000
0406EE C6          0373**       db %11000110
0406EF CC          0374**       db %11001100
0406F0 18          0375**       db %00011000
0406F1 30          0376**       db %00110000
0406F2 66          0377**       db %01100110
0406F3 C6          0378**       db %11000110
0406F4 00          0379**       db %00000000
0406F5             0380**   
0406F5             0381**   ; 38 &
0406F5 38          0382**       db %00111000
0406F6 6C          0383**       db %01101100
0406F7 38          0384**       db %00111000
0406F8 76          0385**       db %01110110
0406F9 DC          0386**       db %11011100
0406FA CC          0387**       db %11001100
0406FB 76          0388**       db %01110110
0406FC 00          0389**       db %00000000
0406FD             0390**   
0406FD             0391**   ; 39 '
0406FD 30          0392**       db %00110000
0406FE 30          0393**       db %00110000
0406FF 60          0394**       db %01100000
040700 00          0395**       db %00000000
040701 00          0396**       db %00000000
040702 00          0397**       db %00000000
040703 00          0398**       db %00000000
040704 00          0399**       db %00000000
040705             0400**   
040705             0401**   ; 40 (
040705 18          0402**       db %00011000
040706 30          0403**       db %00110000
040707 60          0404**       db %01100000
040708 60          0405**       db %01100000
040709 60          0406**       db %01100000
04070A 30          0407**       db %00110000
04070B 18          0408**       db %00011000
04070C 00          0409**       db %00000000
04070D             0410**   
04070D             0411**   ; 41 )
04070D 60          0412**       db %01100000
04070E 30          0413**       db %00110000
04070F 18          0414**       db %00011000
040710 18          0415**       db %00011000
040711 18          0416**       db %00011000
040712 30          0417**       db %00110000
040713 60          0418**       db %01100000
040714 00          0419**       db %00000000
040715             0420**   
040715             0421**   ; 42 *
040715 00          0422**       db %00000000
040716 66          0423**       db %01100110
040717 3C          0424**       db %00111100
040718 FF          0425**       db %11111111
040719 3C          0426**       db %00111100
04071A 66          0427**       db %01100110
04071B 00          0428**       db %00000000
04071C 00          0429**       db %00000000
04071D             0430**   
04071D             0431**   ; 43 +
04071D 00          0432**       db %00000000
04071E 30          0433**       db %00110000
04071F 30          0434**       db %00110000
040720 FC          0435**       db %11111100
040721 30          0436**       db %00110000
040722 30          0437**       db %00110000
040723 00          0438**       db %00000000
040724 00          0439**       db %00000000
040725             0440**   
040725             0441**   ; 44 ,
040725 00          0442**       db %00000000
040726 00          0443**       db %00000000
040727 00          0444**       db %00000000
040728 00          0445**       db %00000000
040729 00          0446**       db %00000000
04072A 30          0447**       db %00110000
04072B 30          0448**       db %00110000
04072C 60          0449**       db %01100000
04072D             0450**   
04072D             0451**   ; 45 -
04072D 00          0452**       db %00000000
04072E 00          0453**       db %00000000
04072F 00          0454**       db %00000000
040730 FC          0455**       db %11111100
040731 00          0456**       db %00000000
040732 00          0457**       db %00000000
040733 00          0458**       db %00000000
040734 00          0459**       db %00000000
040735             0460**   
040735             0461**   ; 46 .
040735 00          0462**       db %00000000
040736 00          0463**       db %00000000
040737 00          0464**       db %00000000
040738 00          0465**       db %00000000
040739 00          0466**       db %00000000
04073A 30          0467**       db %00110000
04073B 30          0468**       db %00110000
04073C 00          0469**       db %00000000
04073D             0470**   
04073D             0471**   ; 47 /
04073D 00          0472**       db %00000000
04073E 06          0473**       db %00000110
04073F 0C          0474**       db %00001100
040740 18          0475**       db %00011000
040741 30          0476**       db %00110000
040742 60          0477**       db %01100000
040743 C0          0478**       db %11000000
040744 00          0479**       db %00000000
040745             0480**   
040745             0481**   ; 48 0
040745 7C          0482**       db %01111100
040746 C6          0483**       db %11000110
040747 C6          0484**       db %11000110
040748 D6          0485**       db %11010110
040749 C6          0486**       db %11000110
04074A C6          0487**       db %11000110
04074B 7C          0488**       db %01111100
04074C 00          0489**       db %00000000
04074D             0490**   
04074D             0491**   ; 49 1
04074D 30          0492**       db %00110000
04074E 70          0493**       db %01110000
04074F 30          0494**       db %00110000
040750 30          0495**       db %00110000
040751 30          0496**       db %00110000
040752 30          0497**       db %00110000
040753 FC          0498**       db %11111100
040754 00          0499**       db %00000000
040755             0500**   
040755             0501**   ; 50 2
040755 78          0502**       db %01111000
040756 CC          0503**       db %11001100
040757 0C          0504**       db %00001100
040758 38          0505**       db %00111000
040759 60          0506**       db %01100000
04075A CC          0507**       db %11001100
04075B FC          0508**       db %11111100
04075C 00          0509**       db %00000000
04075D             0510**   
04075D             0511**   ; 51 3
04075D 78          0512**       db %01111000
04075E CC          0513**       db %11001100
04075F 0C          0514**       db %00001100
040760 38          0515**       db %00111000
040761 0C          0516**       db %00001100
040762 CC          0517**       db %11001100
040763 78          0518**       db %01111000
040764 00          0519**       db %00000000
040765             0520**   
040765             0521**   ; 52 4
040765 1C          0522**       db %00011100
040766 3C          0523**       db %00111100
040767 6C          0524**       db %01101100
040768 CC          0525**       db %11001100
040769 FE          0526**       db %11111110
04076A 0C          0527**       db %00001100
04076B 1E          0528**       db %00011110
04076C 00          0529**       db %00000000
04076D             0530**   
04076D             0531**   ; 53 5
04076D FC          0532**       db %11111100
04076E C0          0533**       db %11000000
04076F F8          0534**       db %11111000
040770 0C          0535**       db %00001100
040771 0C          0536**       db %00001100
040772 CC          0537**       db %11001100
040773 78          0538**       db %01111000
040774 00          0539**       db %00000000
040775             0540**   
040775             0541**   ; 54 6
040775 38          0542**       db %00111000
040776 60          0543**       db %01100000
040777 C0          0544**       db %11000000
040778 F8          0545**       db %11111000
040779 CC          0546**       db %11001100
04077A CC          0547**       db %11001100
04077B 78          0548**       db %01111000
04077C 00          0549**       db %00000000
04077D             0550**   
04077D             0551**   ; 55 7
04077D FC          0552**       db %11111100
04077E CC          0553**       db %11001100
04077F 0C          0554**       db %00001100
040780 18          0555**       db %00011000
040781 30          0556**       db %00110000
040782 30          0557**       db %00110000
040783 30          0558**       db %00110000
040784 00          0559**       db %00000000
040785             0560**   
040785             0561**   ; 56 8
040785 78          0562**       db %01111000
040786 CC          0563**       db %11001100
040787 CC          0564**       db %11001100
040788 78          0565**       db %01111000
040789 CC          0566**       db %11001100
04078A CC          0567**       db %11001100
04078B 78          0568**       db %01111000
04078C 00          0569**       db %00000000
04078D             0570**   
04078D             0571**   ; 57 9
04078D 78          0572**       db %01111000
04078E CC          0573**       db %11001100
04078F CC          0574**       db %11001100
040790 7C          0575**       db %01111100
040791 0C          0576**       db %00001100
040792 18          0577**       db %00011000
040793 70          0578**       db %01110000
040794 00          0579**       db %00000000
040795             0580**   
040795             0581**   ; 58 :
040795 00          0582**       db %00000000
040796 30          0583**       db %00110000
040797 30          0584**       db %00110000
040798 00          0585**       db %00000000
040799 00          0586**       db %00000000
04079A 30          0587**       db %00110000
04079B 30          0588**       db %00110000
04079C 00          0589**       db %00000000
04079D             0590**   
04079D             0591**   ; 59 ;
04079D 00          0592**       db %00000000
04079E 30          0593**       db %00110000
04079F 30          0594**       db %00110000
0407A0 00          0595**       db %00000000
0407A1 00          0596**       db %00000000
0407A2 30          0597**       db %00110000
0407A3 30          0598**       db %00110000
0407A4 60          0599**       db %01100000
0407A5             0600**   
0407A5             0601**   ; 60 <
0407A5 18          0602**       db %00011000
0407A6 30          0603**       db %00110000
0407A7 60          0604**       db %01100000
0407A8 C0          0605**       db %11000000
0407A9 60          0606**       db %01100000
0407AA 30          0607**       db %00110000
0407AB 18          0608**       db %00011000
0407AC 00          0609**       db %00000000
0407AD             0610**   
0407AD             0611**   ; 61 =
0407AD 00          0612**       db %00000000
0407AE 00          0613**       db %00000000
0407AF FC          0614**       db %11111100
0407B0 00          0615**       db %00000000
0407B1 00          0616**       db %00000000
0407B2 FC          0617**       db %11111100
0407B3 00          0618**       db %00000000
0407B4 00          0619**       db %00000000
0407B5             0620**   
0407B5             0621**   ; 62 >
0407B5 60          0622**       db %01100000
0407B6 30          0623**       db %00110000
0407B7 18          0624**       db %00011000
0407B8 0C          0625**       db %00001100
0407B9 18          0626**       db %00011000
0407BA 30          0627**       db %00110000
0407BB 60          0628**       db %01100000
0407BC 00          0629**       db %00000000
0407BD             0630**   
0407BD             0631**   ; 63 ?
0407BD 78          0632**       db %01111000
0407BE CC          0633**       db %11001100
0407BF 0C          0634**       db %00001100
0407C0 18          0635**       db %00011000
0407C1 30          0636**       db %00110000
0407C2 00          0637**       db %00000000
0407C3 30          0638**       db %00110000
0407C4 00          0639**       db %00000000
0407C5             0640**   
0407C5             0641**   ; 64 @
0407C5 7C          0642**       db %01111100
0407C6 C6          0643**       db %11000110
0407C7 DE          0644**       db %11011110
0407C8 DE          0645**       db %11011110
0407C9 DE          0646**       db %11011110
0407CA C0          0647**       db %11000000
0407CB 78          0648**       db %01111000
0407CC 00          0649**       db %00000000
0407CD             0650**   
0407CD             0651**   ; 65 A
0407CD 30          0652**       db %00110000
0407CE 78          0653**       db %01111000
0407CF CC          0654**       db %11001100
0407D0 CC          0655**       db %11001100
0407D1 FC          0656**       db %11111100
0407D2 CC          0657**       db %11001100
0407D3 CC          0658**       db %11001100
0407D4 00          0659**       db %00000000
0407D5             0660**   
0407D5             0661**   ; 66 B
0407D5 FC          0662**       db %11111100
0407D6 66          0663**       db %01100110
0407D7 66          0664**       db %01100110
0407D8 7C          0665**       db %01111100
0407D9 66          0666**       db %01100110
0407DA 66          0667**       db %01100110
0407DB FC          0668**       db %11111100
0407DC 00          0669**       db %00000000
0407DD             0670**   
0407DD             0671**   ; 67 C
0407DD 3C          0672**       db %00111100
0407DE 66          0673**       db %01100110
0407DF C0          0674**       db %11000000
0407E0 C0          0675**       db %11000000
0407E1 C0          0676**       db %11000000
0407E2 66          0677**       db %01100110
0407E3 3C          0678**       db %00111100
0407E4 00          0679**       db %00000000
0407E5             0680**   
0407E5             0681**   ; 68 D
0407E5 F8          0682**       db %11111000
0407E6 6C          0683**       db %01101100
0407E7 66          0684**       db %01100110
0407E8 66          0685**       db %01100110
0407E9 66          0686**       db %01100110
0407EA 6C          0687**       db %01101100
0407EB F8          0688**       db %11111000
0407EC 00          0689**       db %00000000
0407ED             0690**   
0407ED             0691**   ; 69 E
0407ED FE          0692**       db %11111110
0407EE 62          0693**       db %01100010
0407EF 68          0694**       db %01101000
0407F0 78          0695**       db %01111000
0407F1 68          0696**       db %01101000
0407F2 62          0697**       db %01100010
0407F3 FE          0698**       db %11111110
0407F4 00          0699**       db %00000000
0407F5             0700**   
0407F5             0701**   ; 70 F
0407F5 FE          0702**       db %11111110
0407F6 62          0703**       db %01100010
0407F7 68          0704**       db %01101000
0407F8 78          0705**       db %01111000
0407F9 68          0706**       db %01101000
0407FA 60          0707**       db %01100000
0407FB F0          0708**       db %11110000
0407FC 00          0709**       db %00000000
0407FD             0710**   
0407FD             0711**   ; 71 G
0407FD 3C          0712**       db %00111100
0407FE 66          0713**       db %01100110
0407FF C0          0714**       db %11000000
040800 C0          0715**       db %11000000
040801 CE          0716**       db %11001110
040802 66          0717**       db %01100110
040803 3E          0718**       db %00111110
040804 00          0719**       db %00000000
040805             0720**   
040805             0721**   ; 72 H
040805 CC          0722**       db %11001100
040806 CC          0723**       db %11001100
040807 CC          0724**       db %11001100
040808 FC          0725**       db %11111100
040809 CC          0726**       db %11001100
04080A CC          0727**       db %11001100
04080B CC          0728**       db %11001100
04080C 00          0729**       db %00000000
04080D             0730**   
04080D             0731**   ; 73 I
04080D 78          0732**       db %01111000
04080E 30          0733**       db %00110000
04080F 30          0734**       db %00110000
040810 30          0735**       db %00110000
040811 30          0736**       db %00110000
040812 30          0737**       db %00110000
040813 78          0738**       db %01111000
040814 00          0739**       db %00000000
040815             0740**   
040815             0741**   ; 74 J
040815 1E          0742**       db %00011110
040816 0C          0743**       db %00001100
040817 0C          0744**       db %00001100
040818 0C          0745**       db %00001100
040819 CC          0746**       db %11001100
04081A CC          0747**       db %11001100
04081B 78          0748**       db %01111000
04081C 00          0749**       db %00000000
04081D             0750**   
04081D             0751**   ; 75 K
04081D E6          0752**       db %11100110
04081E 66          0753**       db %01100110
04081F 6C          0754**       db %01101100
040820 78          0755**       db %01111000
040821 6C          0756**       db %01101100
040822 66          0757**       db %01100110
040823 E6          0758**       db %11100110
040824 00          0759**       db %00000000
040825             0760**   
040825             0761**   ; 76 L
040825 F0          0762**       db %11110000
040826 60          0763**       db %01100000
040827 60          0764**       db %01100000
040828 60          0765**       db %01100000
040829 62          0766**       db %01100010
04082A 66          0767**       db %01100110
04082B FE          0768**       db %11111110
04082C 00          0769**       db %00000000
04082D             0770**   
04082D             0771**   ; 77 M
04082D C6          0772**       db %11000110
04082E EE          0773**       db %11101110
04082F FE          0774**       db %11111110
040830 FE          0775**       db %11111110
040831 D6          0776**       db %11010110
040832 C6          0777**       db %11000110
040833 C6          0778**       db %11000110
040834 00          0779**       db %00000000
040835             0780**   
040835             0781**   ; 78 N
040835 C6          0782**       db %11000110
040836 E6          0783**       db %11100110
040837 F6          0784**       db %11110110
040838 DE          0785**       db %11011110
040839 CE          0786**       db %11001110
04083A C6          0787**       db %11000110
04083B C6          0788**       db %11000110
04083C 00          0789**       db %00000000
04083D             0790**   
04083D             0791**   ; 79 O
04083D 38          0792**       db %00111000
04083E 6C          0793**       db %01101100
04083F C6          0794**       db %11000110
040840 C6          0795**       db %11000110
040841 C6          0796**       db %11000110
040842 6C          0797**       db %01101100
040843 38          0798**       db %00111000
040844 00          0799**       db %00000000
040845             0800**   
040845             0801**   ; 80 P
040845 FC          0802**       db %11111100
040846 66          0803**       db %01100110
040847 66          0804**       db %01100110
040848 7C          0805**       db %01111100
040849 60          0806**       db %01100000
04084A 60          0807**       db %01100000
04084B F0          0808**       db %11110000
04084C 00          0809**       db %00000000
04084D             0810**   
04084D             0811**   ; 81 Q
04084D 78          0812**       db %01111000
04084E CC          0813**       db %11001100
04084F CC          0814**       db %11001100
040850 CC          0815**       db %11001100
040851 DC          0816**       db %11011100
040852 78          0817**       db %01111000
040853 1C          0818**       db %00011100
040854 00          0819**       db %00000000
040855             0820**   
040855             0821**   ; 82 R
040855 FC          0822**       db %11111100
040856 66          0823**       db %01100110
040857 66          0824**       db %01100110
040858 7C          0825**       db %01111100
040859 6C          0826**       db %01101100
04085A 66          0827**       db %01100110
04085B E6          0828**       db %11100110
04085C 00          0829**       db %00000000
04085D             0830**   
04085D             0831**   ; 83 S
04085D 78          0832**       db %01111000
04085E CC          0833**       db %11001100
04085F E0          0834**       db %11100000
040860 70          0835**       db %01110000
040861 1C          0836**       db %00011100
040862 CC          0837**       db %11001100
040863 78          0838**       db %01111000
040864 00          0839**       db %00000000
040865             0840**   
040865             0841**   ; 84 T
040865 FC          0842**       db %11111100
040866 B4          0843**       db %10110100
040867 30          0844**       db %00110000
040868 30          0845**       db %00110000
040869 30          0846**       db %00110000
04086A 30          0847**       db %00110000
04086B 78          0848**       db %01111000
04086C 00          0849**       db %00000000
04086D             0850**   
04086D             0851**   ; 85 U
04086D CC          0852**       db %11001100
04086E CC          0853**       db %11001100
04086F CC          0854**       db %11001100
040870 CC          0855**       db %11001100
040871 CC          0856**       db %11001100
040872 CC          0857**       db %11001100
040873 78          0858**       db %01111000
040874 00          0859**       db %00000000
040875             0860**   
040875             0861**   ; 86 V
040875 CC          0862**       db %11001100
040876 CC          0863**       db %11001100
040877 CC          0864**       db %11001100
040878 CC          0865**       db %11001100
040879 CC          0866**       db %11001100
04087A 78          0867**       db %01111000
04087B 30          0868**       db %00110000
04087C 00          0869**       db %00000000
04087D             0870**   
04087D             0871**   ; 87 W
04087D C6          0872**       db %11000110
04087E C6          0873**       db %11000110
04087F C6          0874**       db %11000110
040880 D6          0875**       db %11010110
040881 FE          0876**       db %11111110
040882 EE          0877**       db %11101110
040883 C6          0878**       db %11000110
040884 00          0879**       db %00000000
040885             0880**   
040885             0881**   ; 88 X
040885 C6          0882**       db %11000110
040886 C6          0883**       db %11000110
040887 6C          0884**       db %01101100
040888 38          0885**       db %00111000
040889 6C          0886**       db %01101100
04088A C6          0887**       db %11000110
04088B C6          0888**       db %11000110
04088C 00          0889**       db %00000000
04088D             0890**   
04088D             0891**   ; 89 Y
04088D CC          0892**       db %11001100
04088E CC          0893**       db %11001100
04088F CC          0894**       db %11001100
040890 78          0895**       db %01111000
040891 30          0896**       db %00110000
040892 30          0897**       db %00110000
040893 78          0898**       db %01111000
040894 00          0899**       db %00000000
040895             0900**   
040895             0901**   ; 90 Z
040895 FE          0902**       db %11111110
040896 C6          0903**       db %11000110
040897 0C          0904**       db %00001100
040898 18          0905**       db %00011000
040899 30          0906**       db %00110000
04089A 66          0907**       db %01100110
04089B FE          0908**       db %11111110
04089C 00          0909**       db %00000000
04089D             0910**   
04089D             0911**   ; 91 [
04089D 78          0912**       db %01111000
04089E 60          0913**       db %01100000
04089F 60          0914**       db %01100000
0408A0 60          0915**       db %01100000
0408A1 60          0916**       db %01100000
0408A2 60          0917**       db %01100000
0408A3 78          0918**       db %01111000
0408A4 00          0919**       db %00000000
0408A5             0920**   
0408A5             0921**   ; 92 \
0408A5 00          0922**       db %00000000
0408A6 C0          0923**       db %11000000
0408A7 60          0924**       db %01100000
0408A8 30          0925**       db %00110000
0408A9 18          0926**       db %00011000
0408AA 0C          0927**       db %00001100
0408AB 06          0928**       db %00000110
0408AC 00          0929**       db %00000000
0408AD             0930**   
0408AD             0931**   ; 93 ]
0408AD 78          0932**       db %01111000
0408AE 18          0933**       db %00011000
0408AF 18          0934**       db %00011000
0408B0 18          0935**       db %00011000
0408B1 18          0936**       db %00011000
0408B2 18          0937**       db %00011000
0408B3 78          0938**       db %01111000
0408B4 00          0939**       db %00000000
0408B5             0940**   
0408B5             0941**   ; 94 ^
0408B5 18          0942**       db %00011000
0408B6 3C          0943**       db %00111100
0408B7 66          0944**       db %01100110
0408B8 00          0945**       db %00000000
0408B9 00          0946**       db %00000000
0408BA 00          0947**       db %00000000
0408BB 00          0948**       db %00000000
0408BC 00          0949**       db %00000000
0408BD             0950**   
0408BD             0951**   ; 95 _
0408BD 00          0952**       db %00000000
0408BE 00          0953**       db %00000000
0408BF 00          0954**       db %00000000
0408C0 00          0955**       db %00000000
0408C1 00          0956**       db %00000000
0408C2 00          0957**       db %00000000
0408C3 00          0958**       db %00000000
0408C4 FF          0959**       db %11111111
0408C5             0960**   
0408C5             0961**   ; 96 `
0408C5 30          0962**       db %00110000
0408C6 30          0963**       db %00110000
0408C7 18          0964**       db %00011000
0408C8 00          0965**       db %00000000
0408C9 00          0966**       db %00000000
0408CA 00          0967**       db %00000000
0408CB 00          0968**       db %00000000
0408CC 00          0969**       db %00000000
0408CD             0970**   
0408CD             0971**   ; 97 a
0408CD 00          0972**       db %00000000
0408CE 00          0973**       db %00000000
0408CF 78          0974**       db %01111000
0408D0 0C          0975**       db %00001100
0408D1 7C          0976**       db %01111100
0408D2 CC          0977**       db %11001100
0408D3 76          0978**       db %01110110
0408D4 00          0979**       db %00000000
0408D5             0980**   
0408D5             0981**   ; 98 b
0408D5 E0          0982**       db %11100000
0408D6 60          0983**       db %01100000
0408D7 60          0984**       db %01100000
0408D8 7C          0985**       db %01111100
0408D9 66          0986**       db %01100110
0408DA 66          0987**       db %01100110
0408DB DC          0988**       db %11011100
0408DC 00          0989**       db %00000000
0408DD             0990**   
0408DD             0991**   ; 99 c
0408DD 00          0992**       db %00000000
0408DE 00          0993**       db %00000000
0408DF 78          0994**       db %01111000
0408E0 CC          0995**       db %11001100
0408E1 C0          0996**       db %11000000
0408E2 CC          0997**       db %11001100
0408E3 78          0998**       db %01111000
0408E4 00          0999**       db %00000000
0408E5             1000**   
0408E5             1001**   ; 100 d
0408E5 1C          1002**       db %00011100
0408E6 0C          1003**       db %00001100
0408E7 0C          1004**       db %00001100
0408E8 7C          1005**       db %01111100
0408E9 CC          1006**       db %11001100
0408EA CC          1007**       db %11001100
0408EB 76          1008**       db %01110110
0408EC 00          1009**       db %00000000
0408ED             1010**   
0408ED             1011**   ; 101 e
0408ED 00          1012**       db %00000000
0408EE 00          1013**       db %00000000
0408EF 78          1014**       db %01111000
0408F0 CC          1015**       db %11001100
0408F1 FC          1016**       db %11111100
0408F2 C0          1017**       db %11000000
0408F3 78          1018**       db %01111000
0408F4 00          1019**       db %00000000
0408F5             1020**   
0408F5             1021**   ; 102 f
0408F5 38          1022**       db %00111000
0408F6 6C          1023**       db %01101100
0408F7 60          1024**       db %01100000
0408F8 F0          1025**       db %11110000
0408F9 60          1026**       db %01100000
0408FA 60          1027**       db %01100000
0408FB F0          1028**       db %11110000
0408FC 00          1029**       db %00000000
0408FD             1030**   
0408FD             1031**   ; 103 g
0408FD 00          1032**       db %00000000
0408FE 00          1033**       db %00000000
0408FF 76          1034**       db %01110110
040900 CC          1035**       db %11001100
040901 CC          1036**       db %11001100
040902 7C          1037**       db %01111100
040903 0C          1038**       db %00001100
040904 F8          1039**       db %11111000
040905             1040**   
040905             1041**   ; 104 h
040905 E0          1042**       db %11100000
040906 60          1043**       db %01100000
040907 6C          1044**       db %01101100
040908 76          1045**       db %01110110
040909 66          1046**       db %01100110
04090A 66          1047**       db %01100110
04090B E6          1048**       db %11100110
04090C 00          1049**       db %00000000
04090D             1050**   
04090D             1051**   ; 105 i
04090D 30          1052**       db %00110000
04090E 00          1053**       db %00000000
04090F 70          1054**       db %01110000
040910 30          1055**       db %00110000
040911 30          1056**       db %00110000
040912 30          1057**       db %00110000
040913 78          1058**       db %01111000
040914 00          1059**       db %00000000
040915             1060**   
040915             1061**   ; 106 j
040915 0C          1062**       db %00001100
040916 00          1063**       db %00000000
040917 0C          1064**       db %00001100
040918 0C          1065**       db %00001100
040919 0C          1066**       db %00001100
04091A CC          1067**       db %11001100
04091B CC          1068**       db %11001100
04091C 78          1069**       db %01111000
04091D             1070**   
04091D             1071**   ; 107 k
04091D E0          1072**       db %11100000
04091E 60          1073**       db %01100000
04091F 66          1074**       db %01100110
040920 6C          1075**       db %01101100
040921 78          1076**       db %01111000
040922 6C          1077**       db %01101100
040923 E6          1078**       db %11100110
040924 00          1079**       db %00000000
040925             1080**   
040925             1081**   ; 108 l
040925 E0          1082**       db %11100000
040926 60          1083**       db %01100000
040927 60          1084**       db %01100000
040928 60          1085**       db %01100000
040929 60          1086**       db %01100000
04092A 68          1087**       db %01101000
04092B 30          1088**       db %00110000
04092C 00          1089**       db %00000000
04092D             1090**   
04092D             1091**   ; 109 m
04092D 00          1092**       db %00000000
04092E 00          1093**       db %00000000
04092F CC          1094**       db %11001100
040930 FE          1095**       db %11111110
040931 FE          1096**       db %11111110
040932 D6          1097**       db %11010110
040933 C6          1098**       db %11000110
040934 00          1099**       db %00000000
040935             1100**   
040935             1101**   ; 110 n
040935 00          1102**       db %00000000
040936 00          1103**       db %00000000
040937 F8          1104**       db %11111000
040938 CC          1105**       db %11001100
040939 CC          1106**       db %11001100
04093A CC          1107**       db %11001100
04093B CC          1108**       db %11001100
04093C 00          1109**       db %00000000
04093D             1110**   
04093D             1111**   ; 111 o
04093D 00          1112**       db %00000000
04093E 00          1113**       db %00000000
04093F 78          1114**       db %01111000
040940 CC          1115**       db %11001100
040941 CC          1116**       db %11001100
040942 CC          1117**       db %11001100
040943 78          1118**       db %01111000
040944 00          1119**       db %00000000
040945             1120**   
040945             1121**   ; 112 p
040945 00          1122**       db %00000000
040946 00          1123**       db %00000000
040947 DC          1124**       db %11011100
040948 66          1125**       db %01100110
040949 66          1126**       db %01100110
04094A 7C          1127**       db %01111100
04094B 60          1128**       db %01100000
04094C F0          1129**       db %11110000
04094D             1130**   
04094D             1131**   ; 113 q
04094D 00          1132**       db %00000000
04094E 00          1133**       db %00000000
04094F 76          1134**       db %01110110
040950 CC          1135**       db %11001100
040951 CC          1136**       db %11001100
040952 7C          1137**       db %01111100
040953 0C          1138**       db %00001100
040954 1E          1139**       db %00011110
040955             1140**   
040955             1141**   ; 114 r
040955 00          1142**       db %00000000
040956 00          1143**       db %00000000
040957 DC          1144**       db %11011100
040958 76          1145**       db %01110110
040959 66          1146**       db %01100110
04095A 60          1147**       db %01100000
04095B F0          1148**       db %11110000
04095C 00          1149**       db %00000000
04095D             1150**   
04095D             1151**   ; 115 s
04095D 00          1152**       db %00000000
04095E 00          1153**       db %00000000
04095F 7C          1154**       db %01111100
040960 C0          1155**       db %11000000
040961 78          1156**       db %01111000
040962 0C          1157**       db %00001100
040963 F8          1158**       db %11111000
040964 00          1159**       db %00000000
040965             1160**   
040965             1161**   ; 116 t
040965 10          1162**       db %00010000
040966 30          1163**       db %00110000
040967 7C          1164**       db %01111100
040968 30          1165**       db %00110000
040969 30          1166**       db %00110000
04096A 34          1167**       db %00110100
04096B 18          1168**       db %00011000
04096C 00          1169**       db %00000000
04096D             1170**   
04096D             1171**   ; 117 u
04096D 00          1172**       db %00000000
04096E 00          1173**       db %00000000
04096F CC          1174**       db %11001100
040970 CC          1175**       db %11001100
040971 CC          1176**       db %11001100
040972 CC          1177**       db %11001100
040973 76          1178**       db %01110110
040974 00          1179**       db %00000000
040975             1180**   
040975             1181**   ; 118 v
040975 00          1182**       db %00000000
040976 00          1183**       db %00000000
040977 CC          1184**       db %11001100
040978 CC          1185**       db %11001100
040979 CC          1186**       db %11001100
04097A 78          1187**       db %01111000
04097B 30          1188**       db %00110000
04097C 00          1189**       db %00000000
04097D             1190**   
04097D             1191**   ; 119 w
04097D 00          1192**       db %00000000
04097E 00          1193**       db %00000000
04097F C6          1194**       db %11000110
040980 D6          1195**       db %11010110
040981 FE          1196**       db %11111110
040982 FE          1197**       db %11111110
040983 6C          1198**       db %01101100
040984 00          1199**       db %00000000
040985             1200**   
040985             1201**   ; 120 x
040985 00          1202**       db %00000000
040986 00          1203**       db %00000000
040987 C6          1204**       db %11000110
040988 6C          1205**       db %01101100
040989 38          1206**       db %00111000
04098A 6C          1207**       db %01101100
04098B C6          1208**       db %11000110
04098C 00          1209**       db %00000000
04098D             1210**   
04098D             1211**   ; 121 y
04098D 00          1212**       db %00000000
04098E 00          1213**       db %00000000
04098F CC          1214**       db %11001100
040990 CC          1215**       db %11001100
040991 CC          1216**       db %11001100
040992 7C          1217**       db %01111100
040993 0C          1218**       db %00001100
040994 F8          1219**       db %11111000
040995             1220**   
040995             1221**   ; 122 z
040995 00          1222**       db %00000000
040996 00          1223**       db %00000000
040997 FC          1224**       db %11111100
040998 98          1225**       db %10011000
040999 30          1226**       db %00110000
04099A 64          1227**       db %01100100
04099B FC          1228**       db %11111100
04099C 00          1229**       db %00000000
04099D             1230**   
04099D             1231**   ; 123 {
04099D 1C          1232**       db %00011100
04099E 30          1233**       db %00110000
04099F 30          1234**       db %00110000
0409A0 E0          1235**       db %11100000
0409A1 30          1236**       db %00110000
0409A2 30          1237**       db %00110000
0409A3 1C          1238**       db %00011100
0409A4 00          1239**       db %00000000
0409A5             1240**   
0409A5             1241**   ; 124 |
0409A5 30          1242**       db %00110000
0409A6 30          1243**       db %00110000
0409A7 30          1244**       db %00110000
0409A8 30          1245**       db %00110000
0409A9 30          1246**       db %00110000
0409AA 30          1247**       db %00110000
0409AB 30          1248**       db %00110000
0409AC 00          1249**       db %00000000
0409AD             1250**   
0409AD             1251**   ; 125 }
0409AD E0          1252**       db %11100000
0409AE 30          1253**       db %00110000
0409AF 30          1254**       db %00110000
0409B0 1C          1255**       db %00011100
0409B1 30          1256**       db %00110000
0409B2 30          1257**       db %00110000
0409B3 E0          1258**       db %11100000
0409B4 00          1259**       db %00000000
0409B5             1260**   
0409B5             1261**   ; 126 ~
0409B5 76          1262**       db %01110110
0409B6 DC          1263**       db %11011100
0409B7 00          1264**       db %00000000
0409B8 00          1265**       db %00000000
0409B9 00          1266**       db %00000000
0409BA 00          1267**       db %00000000
0409BB 00          1268**       db %00000000
0409BC 00          1269**       db %00000000
0409BD             1270**   
0409BD             1271**   ; 127 DELETE
0409BD 7C          1272**       db %01111100
0409BE 82          1273**       db %10000010
0409BF 9A          1274**       db %10011010
0409C0 A2          1275**       db %10100010
0409C1 A2          1276**       db %10100010
0409C2 9A          1277**       db %10011010
0409C3 82          1278**       db %10000010
0409C4 7C          1279**       db %01111100
0409C5             1280**   
0409C5             1281**   ; 128 NON_PRINTABLE_128
0409C5 3C          1282**       db %00111100
0409C6 66          1283**       db %01100110
0409C7 C0          1284**       db %11000000
0409C8 C0          1285**       db %11000000
0409C9 66          1286**       db %01100110
0409CA 3C          1287**       db %00111100
0409CB 0C          1288**       db %00001100
0409CC 78          1289**       db %01111000
0409CD             1290**   
0409CD             1291**   ; 129 NON_PRINTABLE_129
0409CD CC          1292**       db %11001100
0409CE 00          1293**       db %00000000
0409CF CC          1294**       db %11001100
0409D0 CC          1295**       db %11001100
0409D1 CC          1296**       db %11001100
0409D2 CC          1297**       db %11001100
0409D3 76          1298**       db %01110110
0409D4 00          1299**       db %00000000
0409D5             1300**   
0409D5             1301**   ; 130 NON_PRINTABLE_130
0409D5 0C          1302**       db %00001100
0409D6 18          1303**       db %00011000
0409D7 78          1304**       db %01111000
0409D8 CC          1305**       db %11001100
0409D9 FC          1306**       db %11111100
0409DA C0          1307**       db %11000000
0409DB 78          1308**       db %01111000
0409DC 00          1309**       db %00000000
0409DD             1310**   
0409DD             1311**   ; 131 NON_PRINTABLE_131
0409DD 78          1312**       db %01111000
0409DE 84          1313**       db %10000100
0409DF 78          1314**       db %01111000
0409E0 0C          1315**       db %00001100
0409E1 7C          1316**       db %01111100
0409E2 CC          1317**       db %11001100
0409E3 76          1318**       db %01110110
0409E4 00          1319**       db %00000000
0409E5             1320**   
0409E5             1321**   ; 132 NON_PRINTABLE_132
0409E5 6C          1322**       db %01101100
0409E6 00          1323**       db %00000000
0409E7 78          1324**       db %01111000
0409E8 0C          1325**       db %00001100
0409E9 7C          1326**       db %01111100
0409EA CC          1327**       db %11001100
0409EB 76          1328**       db %01110110
0409EC 00          1329**       db %00000000
0409ED             1330**   
0409ED             1331**   ; 133 NON_PRINTABLE_133
0409ED 60          1332**       db %01100000
0409EE 30          1333**       db %00110000
0409EF 78          1334**       db %01111000
0409F0 0C          1335**       db %00001100
0409F1 7C          1336**       db %01111100
0409F2 CC          1337**       db %11001100
0409F3 76          1338**       db %01110110
0409F4 00          1339**       db %00000000
0409F5             1340**   
0409F5             1341**   ; 134 NON_PRINTABLE_134
0409F5 7C          1342**       db %01111100
0409F6 82          1343**       db %10000010
0409F7 B2          1344**       db %10110010
0409F8 AA          1345**       db %10101010
0409F9 B2          1346**       db %10110010
0409FA AA          1347**       db %10101010
0409FB 82          1348**       db %10000010
0409FC 7C          1349**       db %01111100
0409FD             1350**   
0409FD             1351**   ; 135 NON_PRINTABLE_135
0409FD 00          1352**       db %00000000
0409FE 78          1353**       db %01111000
0409FF CC          1354**       db %11001100
040A00 C0          1355**       db %11000000
040A01 CC          1356**       db %11001100
040A02 78          1357**       db %01111000
040A03 18          1358**       db %00011000
040A04 70          1359**       db %01110000
040A05             1360**   
040A05             1361**   ; 136 NON_PRINTABLE_136
040A05 78          1362**       db %01111000
040A06 84          1363**       db %10000100
040A07 78          1364**       db %01111000
040A08 CC          1365**       db %11001100
040A09 FC          1366**       db %11111100
040A0A C0          1367**       db %11000000
040A0B 78          1368**       db %01111000
040A0C 00          1369**       db %00000000
040A0D             1370**   
040A0D             1371**   ; 137 NON_PRINTABLE_137
040A0D CC          1372**       db %11001100
040A0E 00          1373**       db %00000000
040A0F 78          1374**       db %01111000
040A10 CC          1375**       db %11001100
040A11 FC          1376**       db %11111100
040A12 C0          1377**       db %11000000
040A13 78          1378**       db %01111000
040A14 00          1379**       db %00000000
040A15             1380**   
040A15             1381**   ; 138 NON_PRINTABLE_138
040A15 60          1382**       db %01100000
040A16 30          1383**       db %00110000
040A17 78          1384**       db %01111000
040A18 CC          1385**       db %11001100
040A19 FC          1386**       db %11111100
040A1A C0          1387**       db %11000000
040A1B 78          1388**       db %01111000
040A1C 00          1389**       db %00000000
040A1D             1390**   
040A1D             1391**   ; 139 NON_PRINTABLE_139
040A1D 00          1392**       db %00000000
040A1E D8          1393**       db %11011000
040A1F 00          1394**       db %00000000
040A20 70          1395**       db %01110000
040A21 30          1396**       db %00110000
040A22 30          1397**       db %00110000
040A23 78          1398**       db %01111000
040A24 00          1399**       db %00000000
040A25             1400**   
040A25             1401**   ; 140 NON_PRINTABLE_140
040A25 70          1402**       db %01110000
040A26 D8          1403**       db %11011000
040A27 00          1404**       db %00000000
040A28 70          1405**       db %01110000
040A29 30          1406**       db %00110000
040A2A 30          1407**       db %00110000
040A2B 78          1408**       db %01111000
040A2C 00          1409**       db %00000000
040A2D             1410**   
040A2D             1411**   ; 141 NON_PRINTABLE_141
040A2D 6C          1412**       db %01101100
040A2E FE          1413**       db %11111110
040A2F CC          1414**       db %11001100
040A30 18          1415**       db %00011000
040A31 30          1416**       db %00110000
040A32 66          1417**       db %01100110
040A33 FE          1418**       db %11111110
040A34 00          1419**       db %00000000
040A35             1420**   
040A35             1421**   ; 142 NON_PRINTABLE_142
040A35 CC          1422**       db %11001100
040A36 00          1423**       db %00000000
040A37 78          1424**       db %01111000
040A38 CC          1425**       db %11001100
040A39 FC          1426**       db %11111100
040A3A CC          1427**       db %11001100
040A3B CC          1428**       db %11001100
040A3C 00          1429**       db %00000000
040A3D             1430**   
040A3D             1431**   ; 143 NON_PRINTABLE_143
040A3D 78          1432**       db %01111000
040A3E 00          1433**       db %00000000
040A3F FC          1434**       db %11111100
040A40 98          1435**       db %10011000
040A41 30          1436**       db %00110000
040A42 64          1437**       db %01100100
040A43 FC          1438**       db %11111100
040A44 00          1439**       db %00000000
040A45             1440**   
040A45             1441**   ; 144 NON_PRINTABLE_144
040A45 0C          1442**       db %00001100
040A46 18          1443**       db %00011000
040A47 FE          1444**       db %11111110
040A48 62          1445**       db %01100010
040A49 78          1446**       db %01111000
040A4A 62          1447**       db %01100010
040A4B FE          1448**       db %11111110
040A4C 00          1449**       db %00000000
040A4D             1450**   
040A4D             1451**   ; 145 NON_PRINTABLE_145
040A4D 00          1452**       db %00000000
040A4E 00          1453**       db %00000000
040A4F 7E          1454**       db %01111110
040A50 1B          1455**       db %00011011
040A51 7E          1456**       db %01111110
040A52 D8          1457**       db %11011000
040A53 7E          1458**       db %01111110
040A54 00          1459**       db %00000000
040A55             1460**   
040A55             1461**   ; 146 NON_PRINTABLE_146
040A55 3E          1462**       db %00111110
040A56 78          1463**       db %01111000
040A57 D8          1464**       db %11011000
040A58 FC          1465**       db %11111100
040A59 D8          1466**       db %11011000
040A5A D8          1467**       db %11011000
040A5B DE          1468**       db %11011110
040A5C 00          1469**       db %00000000
040A5D             1470**   
040A5D             1471**   ; 147 NON_PRINTABLE_147
040A5D 78          1472**       db %01111000
040A5E CC          1473**       db %11001100
040A5F 00          1474**       db %00000000
040A60 78          1475**       db %01111000
040A61 CC          1476**       db %11001100
040A62 CC          1477**       db %11001100
040A63 78          1478**       db %01111000
040A64 00          1479**       db %00000000
040A65             1480**   
040A65             1481**   ; 148 NON_PRINTABLE_148
040A65 00          1482**       db %00000000
040A66 CC          1483**       db %11001100
040A67 00          1484**       db %00000000
040A68 78          1485**       db %01111000
040A69 CC          1486**       db %11001100
040A6A CC          1487**       db %11001100
040A6B 78          1488**       db %01111000
040A6C 00          1489**       db %00000000
040A6D             1490**   
040A6D             1491**   ; 149 NON_PRINTABLE_149
040A6D 18          1492**       db %00011000
040A6E 30          1493**       db %00110000
040A6F 78          1494**       db %01111000
040A70 CC          1495**       db %11001100
040A71 FC          1496**       db %11111100
040A72 CC          1497**       db %11001100
040A73 CC          1498**       db %11001100
040A74 00          1499**       db %00000000
040A75             1500**   
040A75             1501**   ; 150 NON_PRINTABLE_150
040A75 78          1502**       db %01111000
040A76 CC          1503**       db %11001100
040A77 00          1504**       db %00000000
040A78 CC          1505**       db %11001100
040A79 CC          1506**       db %11001100
040A7A CC          1507**       db %11001100
040A7B 76          1508**       db %01110110
040A7C 00          1509**       db %00000000
040A7D             1510**   
040A7D             1511**   ; 151 NON_PRINTABLE_151
040A7D 60          1512**       db %01100000
040A7E 30          1513**       db %00110000
040A7F CC          1514**       db %11001100
040A80 CC          1515**       db %11001100
040A81 CC          1516**       db %11001100
040A82 CC          1517**       db %11001100
040A83 76          1518**       db %01110110
040A84 00          1519**       db %00000000
040A85             1520**   
040A85             1521**   ; 152 NON_PRINTABLE_152
040A85 CC          1522**       db %11001100
040A86 00          1523**       db %00000000
040A87 CC          1524**       db %11001100
040A88 CC          1525**       db %11001100
040A89 CC          1526**       db %11001100
040A8A 7C          1527**       db %01111100
040A8B 0C          1528**       db %00001100
040A8C F8          1529**       db %11111000
040A8D             1530**   
040A8D             1531**   ; 153 NON_PRINTABLE_153
040A8D CC          1532**       db %11001100
040A8E 00          1533**       db %00000000
040A8F 78          1534**       db %01111000
040A90 CC          1535**       db %11001100
040A91 CC          1536**       db %11001100
040A92 CC          1537**       db %11001100
040A93 78          1538**       db %01111000
040A94 00          1539**       db %00000000
040A95             1540**   
040A95             1541**   ; 154 NON_PRINTABLE_154
040A95 CC          1542**       db %11001100
040A96 00          1543**       db %00000000
040A97 CC          1544**       db %11001100
040A98 CC          1545**       db %11001100
040A99 CC          1546**       db %11001100
040A9A CC          1547**       db %11001100
040A9B 78          1548**       db %01111000
040A9C 00          1549**       db %00000000
040A9D             1550**   
040A9D             1551**   ; 155 NON_PRINTABLE_155
040A9D 30          1552**       db %00110000
040A9E 78          1553**       db %01111000
040A9F CC          1554**       db %11001100
040AA0 C0          1555**       db %11000000
040AA1 CC          1556**       db %11001100
040AA2 78          1557**       db %01111000
040AA3 30          1558**       db %00110000
040AA4 00          1559**       db %00000000
040AA5             1560**   
040AA5             1561**   ; 156 NON_PRINTABLE_156
040AA5 38          1562**       db %00111000
040AA6 6C          1563**       db %01101100
040AA7 64          1564**       db %01100100
040AA8 F0          1565**       db %11110000
040AA9 60          1566**       db %01100000
040AAA E6          1567**       db %11100110
040AAB FC          1568**       db %11111100
040AAC 00          1569**       db %00000000
040AAD             1570**   
040AAD             1571**   ; 157 NON_PRINTABLE_157
040AAD CC          1572**       db %11001100
040AAE CC          1573**       db %11001100
040AAF 78          1574**       db %01111000
040AB0 FC          1575**       db %11111100
040AB1 30          1576**       db %00110000
040AB2 FC          1577**       db %11111100
040AB3 30          1578**       db %00110000
040AB4 30          1579**       db %00110000
040AB5             1580**   
040AB5             1581**   ; 158 NON_PRINTABLE_158
040AB5 78          1582**       db %01111000
040AB6 84          1583**       db %10000100
040AB7 78          1584**       db %01111000
040AB8 CC          1585**       db %11001100
040AB9 FC          1586**       db %11111100
040ABA CC          1587**       db %11001100
040ABB CC          1588**       db %11001100
040ABC 00          1589**       db %00000000
040ABD             1590**   
040ABD             1591**   ; 159 NON_PRINTABLE_159
040ABD 6C          1592**       db %01101100
040ABE 00          1593**       db %00000000
040ABF FE          1594**       db %11111110
040AC0 62          1595**       db %01100010
040AC1 78          1596**       db %01111000
040AC2 62          1597**       db %01100010
040AC3 FE          1598**       db %11111110
040AC4 00          1599**       db %00000000
040AC5             1600**   
040AC5             1601**   ; 160 NON_PRINTABLE_160
040AC5 18          1602**       db %00011000
040AC6 30          1603**       db %00110000
040AC7 78          1604**       db %01111000
040AC8 0C          1605**       db %00001100
040AC9 7C          1606**       db %01111100
040ACA CC          1607**       db %11001100
040ACB 76          1608**       db %01110110
040ACC 00          1609**       db %00000000
040ACD             1610**   
040ACD             1611**   ; 161 NON_PRINTABLE_161
040ACD 18          1612**       db %00011000
040ACE 30          1613**       db %00110000
040ACF 00          1614**       db %00000000
040AD0 70          1615**       db %01110000
040AD1 30          1616**       db %00110000
040AD2 30          1617**       db %00110000
040AD3 78          1618**       db %01111000
040AD4 00          1619**       db %00000000
040AD5             1620**   
040AD5             1621**   ; 162 NON_PRINTABLE_162
040AD5 18          1622**       db %00011000
040AD6 30          1623**       db %00110000
040AD7 00          1624**       db %00000000
040AD8 78          1625**       db %01111000
040AD9 CC          1626**       db %11001100
040ADA CC          1627**       db %11001100
040ADB 78          1628**       db %01111000
040ADC 00          1629**       db %00000000
040ADD             1630**   
040ADD             1631**   ; 163 NON_PRINTABLE_163
040ADD 18          1632**       db %00011000
040ADE 30          1633**       db %00110000
040ADF CC          1634**       db %11001100
040AE0 CC          1635**       db %11001100
040AE1 CC          1636**       db %11001100
040AE2 CC          1637**       db %11001100
040AE3 76          1638**       db %01110110
040AE4 00          1639**       db %00000000
040AE5             1640**   
040AE5             1641**   ; 164 NON_PRINTABLE_164
040AE5 76          1642**       db %01110110
040AE6 DC          1643**       db %11011100
040AE7 F8          1644**       db %11111000
040AE8 CC          1645**       db %11001100
040AE9 CC          1646**       db %11001100
040AEA CC          1647**       db %11001100
040AEB CC          1648**       db %11001100
040AEC 00          1649**       db %00000000
040AED             1650**   
040AED             1651**   ; 165 NON_PRINTABLE_165
040AED 76          1652**       db %01110110
040AEE DC          1653**       db %11011100
040AEF E6          1654**       db %11100110
040AF0 F6          1655**       db %11110110
040AF1 DE          1656**       db %11011110
040AF2 CE          1657**       db %11001110
040AF3 C6          1658**       db %11000110
040AF4 00          1659**       db %00000000
040AF5             1660**   
040AF5             1661**   ; 166 NON_PRINTABLE_166
040AF5 3C          1662**       db %00111100
040AF6 6C          1663**       db %01101100
040AF7 3E          1664**       db %00111110
040AF8 00          1665**       db %00000000
040AF9 7E          1666**       db %01111110
040AFA 00          1667**       db %00000000
040AFB 00          1668**       db %00000000
040AFC 00          1669**       db %00000000
040AFD             1670**   
040AFD             1671**   ; 167 NON_PRINTABLE_167
040AFD 38          1672**       db %00111000
040AFE 6C          1673**       db %01101100
040AFF 38          1674**       db %00111000
040B00 00          1675**       db %00000000
040B01 7C          1676**       db %01111100
040B02 00          1677**       db %00000000
040B03 00          1678**       db %00000000
040B04 00          1679**       db %00000000
040B05             1680**   
040B05             1681**   ; 168 NON_PRINTABLE_168
040B05 00          1682**       db %00000000
040B06 18          1683**       db %00011000
040B07 00          1684**       db %00000000
040B08 18          1685**       db %00011000
040B09 30          1686**       db %00110000
040B0A 60          1687**       db %01100000
040B0B 66          1688**       db %01100110
040B0C 3C          1689**       db %00111100
040B0D             1690**   
040B0D             1691**   ; 169 NON_PRINTABLE_169
040B0D 18          1692**       db %00011000
040B0E 30          1693**       db %00110000
040B0F 78          1694**       db %01111000
040B10 30          1695**       db %00110000
040B11 30          1696**       db %00110000
040B12 30          1697**       db %00110000
040B13 78          1698**       db %01111000
040B14 00          1699**       db %00000000
040B15             1700**   
040B15             1701**   ; 170 NON_PRINTABLE_170
040B15 00          1702**       db %00000000
040B16 00          1703**       db %00000000
040B17 00          1704**       db %00000000
040B18 FC          1705**       db %11111100
040B19 0C          1706**       db %00001100
040B1A 0C          1707**       db %00001100
040B1B 00          1708**       db %00000000
040B1C 00          1709**       db %00000000
040B1D             1710**   
040B1D             1711**   ; 171 NON_PRINTABLE_171
040B1D 00          1712**       db %00000000
040B1E 00          1713**       db %00000000
040B1F 7E          1714**       db %01111110
040B20 DB          1715**       db %11011011
040B21 DE          1716**       db %11011110
040B22 D8          1717**       db %11011000
040B23 7E          1718**       db %01111110
040B24 00          1719**       db %00000000
040B25             1720**   
040B25             1721**   ; 172 NON_PRINTABLE_172
040B25 7E          1722**       db %01111110
040B26 D8          1723**       db %11011000
040B27 D8          1724**       db %11011000
040B28 DC          1725**       db %11011100
040B29 D8          1726**       db %11011000
040B2A D8          1727**       db %11011000
040B2B 7E          1728**       db %01111110
040B2C 00          1729**       db %00000000
040B2D             1730**   
040B2D             1731**   ; 173 NON_PRINTABLE_173
040B2D 00          1732**       db %00000000
040B2E 30          1733**       db %00110000
040B2F 00          1734**       db %00000000
040B30 30          1735**       db %00110000
040B31 30          1736**       db %00110000
040B32 78          1737**       db %01111000
040B33 78          1738**       db %01111000
040B34 30          1739**       db %00110000
040B35             1740**   
040B35             1741**   ; 174 NON_PRINTABLE_174
040B35 00          1742**       db %00000000
040B36 33          1743**       db %00110011
040B37 66          1744**       db %01100110
040B38 CC          1745**       db %11001100
040B39 66          1746**       db %01100110
040B3A 33          1747**       db %00110011
040B3B 00          1748**       db %00000000
040B3C 00          1749**       db %00000000
040B3D             1750**   
040B3D             1751**   ; 175 NON_PRINTABLE_175
040B3D 00          1752**       db %00000000
040B3E CC          1753**       db %11001100
040B3F 66          1754**       db %01100110
040B40 33          1755**       db %00110011
040B41 66          1756**       db %01100110
040B42 CC          1757**       db %11001100
040B43 00          1758**       db %00000000
040B44 00          1759**       db %00000000
040B45             1760**   
040B45             1761**   ; 176 NON_PRINTABLE_176
040B45 22          1762**       db %00100010
040B46 88          1763**       db %10001000
040B47 22          1764**       db %00100010
040B48 88          1765**       db %10001000
040B49 22          1766**       db %00100010
040B4A 88          1767**       db %10001000
040B4B 22          1768**       db %00100010
040B4C 88          1769**       db %10001000
040B4D             1770**   
040B4D             1771**   ; 177 NON_PRINTABLE_177
040B4D 55          1772**       db %01010101
040B4E AA          1773**       db %10101010
040B4F 55          1774**       db %01010101
040B50 AA          1775**       db %10101010
040B51 55          1776**       db %01010101
040B52 AA          1777**       db %10101010
040B53 55          1778**       db %01010101
040B54 AA          1779**       db %10101010
040B55             1780**   
040B55             1781**   ; 178 NON_PRINTABLE_178
040B55 78          1782**       db %01111000
040B56 CC          1783**       db %11001100
040B57 78          1784**       db %01111000
040B58 30          1785**       db %00110000
040B59 30          1786**       db %00110000
040B5A 30          1787**       db %00110000
040B5B 78          1788**       db %01111000
040B5C 00          1789**       db %00000000
040B5D             1790**   
040B5D             1791**   ; 179 NON_PRINTABLE_179
040B5D 18          1792**       db %00011000
040B5E 18          1793**       db %00011000
040B5F 18          1794**       db %00011000
040B60 18          1795**       db %00011000
040B61 18          1796**       db %00011000
040B62 18          1797**       db %00011000
040B63 18          1798**       db %00011000
040B64 18          1799**       db %00011000
040B65             1800**   
040B65             1801**   ; 180 NON_PRINTABLE_180
040B65 18          1802**       db %00011000
040B66 18          1803**       db %00011000
040B67 18          1804**       db %00011000
040B68 F8          1805**       db %11111000
040B69 18          1806**       db %00011000
040B6A 18          1807**       db %00011000
040B6B 18          1808**       db %00011000
040B6C 18          1809**       db %00011000
040B6D             1810**   
040B6D             1811**   ; 181 NON_PRINTABLE_181
040B6D 18          1812**       db %00011000
040B6E 30          1813**       db %00110000
040B6F 78          1814**       db %01111000
040B70 CC          1815**       db %11001100
040B71 CC          1816**       db %11001100
040B72 CC          1817**       db %11001100
040B73 78          1818**       db %01111000
040B74 00          1819**       db %00000000
040B75             1820**   
040B75             1821**   ; 182 NON_PRINTABLE_182
040B75 78          1822**       db %01111000
040B76 CC          1823**       db %11001100
040B77 78          1824**       db %01111000
040B78 CC          1825**       db %11001100
040B79 CC          1826**       db %11001100
040B7A CC          1827**       db %11001100
040B7B 78          1828**       db %01111000
040B7C 00          1829**       db %00000000
040B7D             1830**   
040B7D             1831**   ; 183 NON_PRINTABLE_183
040B7D 00          1832**       db %00000000
040B7E 6C          1833**       db %01101100
040B7F 38          1834**       db %00111000
040B80 38          1835**       db %00111000
040B81 6C          1836**       db %01101100
040B82 00          1837**       db %00000000
040B83 00          1838**       db %00000000
040B84 00          1839**       db %00000000
040B85             1840**   
040B85             1841**   ; 184 NON_PRINTABLE_184
040B85 18          1842**       db %00011000
040B86 30          1843**       db %00110000
040B87 CC          1844**       db %11001100
040B88 CC          1845**       db %11001100
040B89 CC          1846**       db %11001100
040B8A CC          1847**       db %11001100
040B8B 78          1848**       db %01111000
040B8C 00          1849**       db %00000000
040B8D             1850**   
040B8D             1851**   ; 185 NON_PRINTABLE_185
040B8D 18          1852**       db %00011000
040B8E 30          1853**       db %00110000
040B8F CC          1854**       db %11001100
040B90 CC          1855**       db %11001100
040B91 78          1856**       db %01111000
040B92 30          1857**       db %00110000
040B93 78          1858**       db %01111000
040B94 00          1859**       db %00000000
040B95             1860**   
040B95             1861**   ; 186 NON_PRINTABLE_186
040B95 18          1862**       db %00011000
040B96 30          1863**       db %00110000
040B97 CC          1864**       db %11001100
040B98 CC          1865**       db %11001100
040B99 CC          1866**       db %11001100
040B9A 7C          1867**       db %01111100
040B9B 0C          1868**       db %00001100
040B9C F8          1869**       db %11111000
040B9D             1870**   
040B9D             1871**   ; 187 NON_PRINTABLE_187
040B9D 38          1872**       db %00111000
040B9E 6C          1873**       db %01101100
040B9F C6          1874**       db %11000110
040BA0 FE          1875**       db %11111110
040BA1 C6          1876**       db %11000110
040BA2 CE          1877**       db %11001110
040BA3 18          1878**       db %00011000
040BA4 0E          1879**       db %00001110
040BA5             1880**   
040BA5             1881**   ; 188 NON_PRINTABLE_188
040BA5 6C          1882**       db %01101100
040BA6 38          1883**       db %00111000
040BA7 7C          1884**       db %01111100
040BA8 C6          1885**       db %11000110
040BA9 C0          1886**       db %11000000
040BAA C0          1887**       db %11000000
040BAB C6          1888**       db %11000110
040BAC 7C          1889**       db %01111100
040BAD             1890**   
040BAD             1891**   ; 189 NON_PRINTABLE_189
040BAD 00          1892**       db %00000000
040BAE CC          1893**       db %11001100
040BAF 78          1894**       db %01111000
040BB0 78          1895**       db %01111000
040BB1 CC          1896**       db %11001100
040BB2 C0          1897**       db %11000000
040BB3 CC          1898**       db %11001100
040BB4 78          1899**       db %01111000
040BB5             1900**   
040BB5             1901**   ; 190 NON_PRINTABLE_190
040BB5 F8          1902**       db %11111000
040BB6 6C          1903**       db %01101100
040BB7 66          1904**       db %01100110
040BB8 F6          1905**       db %11110110
040BB9 66          1906**       db %01100110
040BBA 6C          1907**       db %01101100
040BBB F8          1908**       db %11111000
040BBC 00          1909**       db %00000000
040BBD             1910**   
040BBD             1911**   ; 191 NON_PRINTABLE_191
040BBD 00          1912**       db %00000000
040BBE 00          1913**       db %00000000
040BBF 00          1914**       db %00000000
040BC0 F8          1915**       db %11111000
040BC1 18          1916**       db %00011000
040BC2 18          1917**       db %00011000
040BC3 18          1918**       db %00011000
040BC4 18          1919**       db %00011000
040BC5             1920**   
040BC5             1921**   ; 192 NON_PRINTABLE_192
040BC5 18          1922**       db %00011000
040BC6 18          1923**       db %00011000
040BC7 18          1924**       db %00011000
040BC8 1F          1925**       db %00011111
040BC9 00          1926**       db %00000000
040BCA 00          1927**       db %00000000
040BCB 00          1928**       db %00000000
040BCC 00          1929**       db %00000000
040BCD             1930**   
040BCD             1931**   ; 193 NON_PRINTABLE_193
040BCD 18          1932**       db %00011000
040BCE 18          1933**       db %00011000
040BCF 18          1934**       db %00011000
040BD0 FF          1935**       db %11111111
040BD1 00          1936**       db %00000000
040BD2 00          1937**       db %00000000
040BD3 00          1938**       db %00000000
040BD4 00          1939**       db %00000000
040BD5             1940**   
040BD5             1941**   ; 194 NON_PRINTABLE_194
040BD5 00          1942**       db %00000000
040BD6 00          1943**       db %00000000
040BD7 00          1944**       db %00000000
040BD8 FF          1945**       db %11111111
040BD9 18          1946**       db %00011000
040BDA 18          1947**       db %00011000
040BDB 18          1948**       db %00011000
040BDC 18          1949**       db %00011000
040BDD             1950**   
040BDD             1951**   ; 195 NON_PRINTABLE_195
040BDD 18          1952**       db %00011000
040BDE 18          1953**       db %00011000
040BDF 18          1954**       db %00011000
040BE0 1F          1955**       db %00011111
040BE1 18          1956**       db %00011000
040BE2 18          1957**       db %00011000
040BE3 18          1958**       db %00011000
040BE4 18          1959**       db %00011000
040BE5             1960**   
040BE5             1961**   ; 196 NON_PRINTABLE_196
040BE5 00          1962**       db %00000000
040BE6 00          1963**       db %00000000
040BE7 00          1964**       db %00000000
040BE8 FF          1965**       db %11111111
040BE9 00          1966**       db %00000000
040BEA 00          1967**       db %00000000
040BEB 00          1968**       db %00000000
040BEC 00          1969**       db %00000000
040BED             1970**   
040BED             1971**   ; 197 NON_PRINTABLE_197
040BED 18          1972**       db %00011000
040BEE 18          1973**       db %00011000
040BEF 18          1974**       db %00011000
040BF0 FF          1975**       db %11111111
040BF1 18          1976**       db %00011000
040BF2 18          1977**       db %00011000
040BF3 18          1978**       db %00011000
040BF4 18          1979**       db %00011000
040BF5             1980**   
040BF5             1981**   ; 198 NON_PRINTABLE_198
040BF5 00          1982**       db %00000000
040BF6 0C          1983**       db %00001100
040BF7 3E          1984**       db %00111110
040BF8 0C          1985**       db %00001100
040BF9 7C          1986**       db %01111100
040BFA CC          1987**       db %11001100
040BFB CC          1988**       db %11001100
040BFC 76          1989**       db %01110110
040BFD             1990**   
040BFD             1991**   ; 199 NON_PRINTABLE_199
040BFD FE          1992**       db %11111110
040BFE 66          1993**       db %01100110
040BFF 60          1994**       db %01100000
040C00 78          1995**       db %01111000
040C01 60          1996**       db %01100000
040C02 66          1997**       db %01100110
040C03 FE          1998**       db %11111110
040C04 1C          1999**       db %00011100
040C05             2000**   
040C05             2001**   ; 200 NON_PRINTABLE_200
040C05 00          2002**       db %00000000
040C06 00          2003**       db %00000000
040C07 7C          2004**       db %01111100
040C08 C6          2005**       db %11000110
040C09 FE          2006**       db %11111110
040C0A C0          2007**       db %11000000
040C0B 7A          2008**       db %01111010
040C0C 1E          2009**       db %00011110
040C0D             2010**   
040C0D             2011**   ; 201 NON_PRINTABLE_201
040C0D 48          2012**       db %01001000
040C0E 78          2013**       db %01111000
040C0F 84          2014**       db %10000100
040C10 60          2015**       db %01100000
040C11 18          2016**       db %00011000
040C12 84          2017**       db %10000100
040C13 78          2018**       db %01111000
040C14 00          2019**       db %00000000
040C15             2020**   
040C15             2021**   ; 202 NON_PRINTABLE_202
040C15 78          2022**       db %01111000
040C16 00          2023**       db %00000000
040C17 7C          2024**       db %01111100
040C18 C0          2025**       db %11000000
040C19 78          2026**       db %01111000
040C1A 0C          2027**       db %00001100
040C1B F8          2028**       db %11111000
040C1C 00          2029**       db %00000000
040C1D             2030**   
040C1D             2031**   ; 203 NON_PRINTABLE_203
040C1D 6C          2032**       db %01101100
040C1E FE          2033**       db %11111110
040C1F CC          2034**       db %11001100
040C20 18          2035**       db %00011000
040C21 30          2036**       db %00110000
040C22 66          2037**       db %01100110
040C23 FE          2038**       db %11111110
040C24 00          2039**       db %00000000
040C25             2040**   
040C25             2041**   ; 204 NON_PRINTABLE_204
040C25 78          2042**       db %01111000
040C26 00          2043**       db %00000000
040C27 FC          2044**       db %11111100
040C28 98          2045**       db %10011000
040C29 30          2046**       db %00110000
040C2A 64          2047**       db %01100100
040C2B FC          2048**       db %11111100
040C2C 00          2049**       db %00000000
040C2D             2050**   
040C2D             2051**   ; 205 NON_PRINTABLE_205
040C2D 6C          2052**       db %01101100
040C2E 38          2053**       db %00111000
040C2F 00          2054**       db %00000000
040C30 00          2055**       db %00000000
040C31 00          2056**       db %00000000
040C32 00          2057**       db %00000000
040C33 00          2058**       db %00000000
040C34 00          2059**       db %00000000
040C35             2060**   
040C35             2061**   ; 206 NON_PRINTABLE_206
040C35 18          2062**       db %00011000
040C36 00          2063**       db %00000000
040C37 00          2064**       db %00000000
040C38 00          2065**       db %00000000
040C39 00          2066**       db %00000000
040C3A 00          2067**       db %00000000
040C3B 00          2068**       db %00000000
040C3C 00          2069**       db %00000000
040C3D             2070**   
040C3D             2071**   ; 207 NON_PRINTABLE_207
040C3D 00          2072**       db %00000000
040C3E 00          2073**       db %00000000
040C3F 00          2074**       db %00000000
040C40 00          2075**       db %00000000
040C41 00          2076**       db %00000000
040C42 00          2077**       db %00000000
040C43 10          2078**       db %00010000
040C44 1C          2079**       db %00011100
040C45             2080**   
040C45             2081**   ; 208 NON_PRINTABLE_208
040C45 00          2082**       db %00000000
040C46 00          2083**       db %00000000
040C47 00          2084**       db %00000000
040C48 00          2085**       db %00000000
040C49 FE          2086**       db %11111110
040C4A 00          2087**       db %00000000
040C4B 00          2088**       db %00000000
040C4C 00          2089**       db %00000000
040C4D             2090**   
040C4D             2091**   ; 209 NON_PRINTABLE_209
040C4D 00          2092**       db %00000000
040C4E 38          2093**       db %00111000
040C4F 30          2094**       db %00110000
040C50 18          2095**       db %00011000
040C51 00          2096**       db %00000000
040C52 00          2097**       db %00000000
040C53 00          2098**       db %00000000
040C54 00          2099**       db %00000000
040C55             2100**   
040C55             2101**   ; 210 NON_PRINTABLE_210
040C55 00          2102**       db %00000000
040C56 38          2103**       db %00111000
040C57 18          2104**       db %00011000
040C58 70          2105**       db %01110000
040C59 00          2106**       db %00000000
040C5A 00          2107**       db %00000000
040C5B 00          2108**       db %00000000
040C5C 00          2109**       db %00000000
040C5D             2110**   
040C5D             2111**   ; 211 NON_PRINTABLE_211
040C5D 00          2112**       db %00000000
040C5E 00          2113**       db %00000000
040C5F 00          2114**       db %00000000
040C60 00          2115**       db %00000000
040C61 00          2116**       db %00000000
040C62 38          2117**       db %00111000
040C63 18          2118**       db %00011000
040C64 70          2119**       db %01110000
040C65             2120**   
040C65             2121**   ; 212 NON_PRINTABLE_212
040C65 66          2122**       db %01100110
040C66 CC          2123**       db %11001100
040C67 EE          2124**       db %11101110
040C68 00          2125**       db %00000000
040C69 00          2126**       db %00000000
040C6A 00          2127**       db %00000000
040C6B 00          2128**       db %00000000
040C6C 00          2129**       db %00000000
040C6D             2130**   
040C6D             2131**   ; 213 NON_PRINTABLE_213
040C6D 00          2132**       db %00000000
040C6E EE          2133**       db %11101110
040C6F 66          2134**       db %01100110
040C70 CC          2135**       db %11001100
040C71 00          2136**       db %00000000
040C72 00          2137**       db %00000000
040C73 00          2138**       db %00000000
040C74 00          2139**       db %00000000
040C75             2140**   
040C75             2141**   ; 214 NON_PRINTABLE_214
040C75 00          2142**       db %00000000
040C76 00          2143**       db %00000000
040C77 00          2144**       db %00000000
040C78 00          2145**       db %00000000
040C79 00          2146**       db %00000000
040C7A EE          2147**       db %11101110
040C7B 66          2148**       db %01100110
040C7C CC          2149**       db %11001100
040C7D             2150**   
040C7D             2151**   ; 215 NON_PRINTABLE_215
040C7D 00          2152**       db %00000000
040C7E 00          2153**       db %00000000
040C7F 18          2154**       db %00011000
040C80 30          2155**       db %00110000
040C81 60          2156**       db %01100000
040C82 30          2157**       db %00110000
040C83 18          2158**       db %00011000
040C84 00          2159**       db %00000000
040C85             2160**   
040C85             2161**   ; 216 NON_PRINTABLE_216
040C85 00          2162**       db %00000000
040C86 00          2163**       db %00000000
040C87 30          2164**       db %00110000
040C88 18          2165**       db %00011000
040C89 0C          2166**       db %00001100
040C8A 18          2167**       db %00011000
040C8B 30          2168**       db %00110000
040C8C 00          2169**       db %00000000
040C8D             2170**   
040C8D             2171**   ; 217 NON_PRINTABLE_217
040C8D 18          2172**       db %00011000
040C8E 18          2173**       db %00011000
040C8F 18          2174**       db %00011000
040C90 F8          2175**       db %11111000
040C91 00          2176**       db %00000000
040C92 00          2177**       db %00000000
040C93 00          2178**       db %00000000
040C94 00          2179**       db %00000000
040C95             2180**   
040C95             2181**   ; 218 NON_PRINTABLE_218
040C95 00          2182**       db %00000000
040C96 00          2183**       db %00000000
040C97 00          2184**       db %00000000
040C98 1F          2185**       db %00011111
040C99 18          2186**       db %00011000
040C9A 18          2187**       db %00011000
040C9B 18          2188**       db %00011000
040C9C 18          2189**       db %00011000
040C9D             2190**   
040C9D             2191**   ; 219 NON_PRINTABLE_219
040C9D FF          2192**       db %11111111
040C9E FF          2193**       db %11111111
040C9F FF          2194**       db %11111111
040CA0 FF          2195**       db %11111111
040CA1 FF          2196**       db %11111111
040CA2 FF          2197**       db %11111111
040CA3 FF          2198**       db %11111111
040CA4 FF          2199**       db %11111111
040CA5             2200**   
040CA5             2201**   ; 220 NON_PRINTABLE_220
040CA5 38          2202**       db %00111000
040CA6 64          2203**       db %01100100
040CA7 F0          2204**       db %11110000
040CA8 60          2205**       db %01100000
040CA9 F0          2206**       db %11110000
040CAA 64          2207**       db %01100100
040CAB 38          2208**       db %00111000
040CAC 00          2209**       db %00000000
040CAD             2210**   
040CAD             2211**   ; 221 NON_PRINTABLE_221
040CAD 00          2212**       db %00000000
040CAE 0C          2213**       db %00001100
040CAF FE          2214**       db %11111110
040CB0 18          2215**       db %00011000
040CB1 30          2216**       db %00110000
040CB2 FE          2217**       db %11111110
040CB3 60          2218**       db %01100000
040CB4 00          2219**       db %00000000
040CB5             2220**   
040CB5             2221**   ; 222 NON_PRINTABLE_222
040CB5 60          2222**       db %01100000
040CB6 30          2223**       db %00110000
040CB7 78          2224**       db %01111000
040CB8 CC          2225**       db %11001100
040CB9 FC          2226**       db %11111100
040CBA CC          2227**       db %11001100
040CBB CC          2228**       db %11001100
040CBC 00          2229**       db %00000000
040CBD             2230**   
040CBD             2231**   ; 223 NON_PRINTABLE_223
040CBD 60          2232**       db %01100000
040CBE 30          2233**       db %00110000
040CBF FE          2234**       db %11111110
040CC0 62          2235**       db %01100010
040CC1 78          2236**       db %01111000
040CC2 62          2237**       db %01100010
040CC3 FE          2238**       db %11111110
040CC4 00          2239**       db %00000000
040CC5             2240**   
040CC5             2241**   ; 224 NON_PRINTABLE_224
040CC5 38          2242**       db %00111000
040CC6 6C          2243**       db %01101100
040CC7 FE          2244**       db %11111110
040CC8 62          2245**       db %01100010
040CC9 78          2246**       db %01111000
040CCA 62          2247**       db %01100010
040CCB FE          2248**       db %11111110
040CCC 00          2249**       db %00000000
040CCD             2250**   
040CCD             2251**   ; 225 NON_PRINTABLE_225
040CCD 7C          2252**       db %01111100
040CCE C6          2253**       db %11000110
040CCF C6          2254**       db %11000110
040CD0 CC          2255**       db %11001100
040CD1 C6          2256**       db %11000110
040CD2 D6          2257**       db %11010110
040CD3 DC          2258**       db %11011100
040CD4 80          2259**       db %10000000
040CD5             2260**   
040CD5             2261**   ; 226 NON_PRINTABLE_226
040CD5 CC          2262**       db %11001100
040CD6 00          2263**       db %00000000
040CD7 78          2264**       db %01111000
040CD8 30          2265**       db %00110000
040CD9 30          2266**       db %00110000
040CDA 30          2267**       db %00110000
040CDB 78          2268**       db %01111000
040CDC 00          2269**       db %00000000
040CDD             2270**   
040CDD             2271**   ; 227 NON_PRINTABLE_227
040CDD 00          2272**       db %00000000
040CDE C0          2273**       db %11000000
040CDF 7C          2274**       db %01111100
040CE0 6E          2275**       db %01101110
040CE1 6C          2276**       db %01101100
040CE2 6C          2277**       db %01101100
040CE3 6C          2278**       db %01101100
040CE4 00          2279**       db %00000000
040CE5             2280**   
040CE5             2281**   ; 228 NON_PRINTABLE_228
040CE5 76          2282**       db %01110110
040CE6 D8          2283**       db %11011000
040CE7 D8          2284**       db %11011000
040CE8 DC          2285**       db %11011100
040CE9 D8          2286**       db %11011000
040CEA D8          2287**       db %11011000
040CEB 76          2288**       db %01110110
040CEC 00          2289**       db %00000000
040CED             2290**   
040CED             2291**   ; 229 NON_PRINTABLE_229
040CED 00          2292**       db %00000000
040CEE 00          2293**       db %00000000
040CEF 6E          2294**       db %01101110
040CF0 D8          2295**       db %11011000
040CF1 DE          2296**       db %11011110
040CF2 D8          2297**       db %11011000
040CF3 6E          2298**       db %01101110
040CF4 00          2299**       db %00000000
040CF5             2300**   
040CF5             2301**   ; 230 NON_PRINTABLE_230
040CF5 00          2302**       db %00000000
040CF6 00          2303**       db %00000000
040CF7 CC          2304**       db %11001100
040CF8 CC          2305**       db %11001100
040CF9 CC          2306**       db %11001100
040CFA CC          2307**       db %11001100
040CFB F6          2308**       db %11110110
040CFC C0          2309**       db %11000000
040CFD             2310**   
040CFD             2311**   ; 231 NON_PRINTABLE_231
040CFD 60          2312**       db %01100000
040CFE 30          2313**       db %00110000
040CFF CC          2314**       db %11001100
040D00 CC          2315**       db %11001100
040D01 CC          2316**       db %11001100
040D02 CC          2317**       db %11001100
040D03 78          2318**       db %01111000
040D04 00          2319**       db %00000000
040D05             2320**   
040D05             2321**   ; 232 NON_PRINTABLE_232
040D05 78          2322**       db %01111000
040D06 CC          2323**       db %11001100
040D07 00          2324**       db %00000000
040D08 CC          2325**       db %11001100
040D09 CC          2326**       db %11001100
040D0A CC          2327**       db %11001100
040D0B 78          2328**       db %01111000
040D0C 00          2329**       db %00000000
040D0D             2330**   
040D0D             2331**   ; 233 NON_PRINTABLE_233
040D0D CC          2332**       db %11001100
040D0E 00          2333**       db %00000000
040D0F CC          2334**       db %11001100
040D10 CC          2335**       db %11001100
040D11 78          2336**       db %01111000
040D12 30          2337**       db %00110000
040D13 78          2338**       db %01111000
040D14 00          2339**       db %00000000
040D15             2340**   
040D15             2341**   ; 234 NON_PRINTABLE_234
040D15 60          2342**       db %01100000
040D16 E0          2343**       db %11100000
040D17 60          2344**       db %01100000
040D18 60          2345**       db %01100000
040D19 F0          2346**       db %11110000
040D1A 00          2347**       db %00000000
040D1B 00          2348**       db %00000000
040D1C 00          2349**       db %00000000
040D1D             2350**   
040D1D             2351**   ; 235 NON_PRINTABLE_235
040D1D 70          2352**       db %01110000
040D1E D8          2353**       db %11011000
040D1F 30          2354**       db %00110000
040D20 D8          2355**       db %11011000
040D21 70          2356**       db %01110000
040D22 00          2357**       db %00000000
040D23 00          2358**       db %00000000
040D24 00          2359**       db %00000000
040D25             2360**   
040D25             2361**   ; 236 NON_PRINTABLE_236
040D25 CC          2362**       db %11001100
040D26 00          2363**       db %00000000
040D27 CC          2364**       db %11001100
040D28 78          2365**       db %01111000
040D29 30          2366**       db %00110000
040D2A 30          2367**       db %00110000
040D2B 78          2368**       db %01111000
040D2C 00          2369**       db %00000000
040D2D             2370**   
040D2D             2371**   ; 237 NON_PRINTABLE_237
040D2D 06          2372**       db %00000110
040D2E 06          2373**       db %00000110
040D2F 36          2374**       db %00110110
040D30 66          2375**       db %01100110
040D31 FE          2376**       db %11111110
040D32 60          2377**       db %01100000
040D33 30          2378**       db %00110000
040D34 00          2379**       db %00000000
040D35             2380**   
040D35             2381**   ; 238 NON_PRINTABLE_238
040D35 10          2382**       db %00010000
040D36 38          2383**       db %00111000
040D37 7C          2384**       db %01111100
040D38 FE          2385**       db %11111110
040D39 7C          2386**       db %01111100
040D3A 38          2387**       db %00111000
040D3B 10          2388**       db %00010000
040D3C 00          2389**       db %00000000
040D3D             2390**   
040D3D             2391**   ; 239 NON_PRINTABLE_239
040D3D A0          2392**       db %10100000
040D3E A0          2393**       db %10100000
040D3F E0          2394**       db %11100000
040D40 AE          2395**       db %10101110
040D41 A4          2396**       db %10100100
040D42 04          2397**       db %00000100
040D43 04          2398**       db %00000100
040D44 04          2399**       db %00000100
040D45             2400**   
040D45             2401**   ; 240 NON_PRINTABLE_240
040D45 80          2402**       db %10000000
040D46 80          2403**       db %10000000
040D47 80          2404**       db %10000000
040D48 8E          2405**       db %10001110
040D49 E8          2406**       db %11101000
040D4A 0C          2407**       db %00001100
040D4B 08          2408**       db %00001000
040D4C 08          2409**       db %00001000
040D4D             2410**   
040D4D             2411**   ; 241 NON_PRINTABLE_241
040D4D 30          2412**       db %00110000
040D4E 30          2413**       db %00110000
040D4F FC          2414**       db %11111100
040D50 30          2415**       db %00110000
040D51 30          2416**       db %00110000
040D52 00          2417**       db %00000000
040D53 FC          2418**       db %11111100
040D54 00          2419**       db %00000000
040D55             2420**   
040D55             2421**   ; 242 NON_PRINTABLE_242
040D55 60          2422**       db %01100000
040D56 30          2423**       db %00110000
040D57 18          2424**       db %00011000
040D58 30          2425**       db %00110000
040D59 60          2426**       db %01100000
040D5A 00          2427**       db %00000000
040D5B FC          2428**       db %11111100
040D5C 00          2429**       db %00000000
040D5D             2430**   
040D5D             2431**   ; 243 NON_PRINTABLE_243
040D5D 18          2432**       db %00011000
040D5E 30          2433**       db %00110000
040D5F 60          2434**       db %01100000
040D60 30          2435**       db %00110000
040D61 18          2436**       db %00011000
040D62 00          2437**       db %00000000
040D63 FC          2438**       db %11111100
040D64 00          2439**       db %00000000
040D65             2440**   
040D65             2441**   ; 244 NON_PRINTABLE_244
040D65 08          2442**       db %00001000
040D66 14          2443**       db %00010100
040D67 10          2444**       db %00010000
040D68 10          2445**       db %00010000
040D69 10          2446**       db %00010000
040D6A 10          2447**       db %00010000
040D6B 10          2448**       db %00010000
040D6C 10          2449**       db %00010000
040D6D             2450**   
040D6D             2451**   ; 245 NON_PRINTABLE_245
040D6D 10          2452**       db %00010000
040D6E 10          2453**       db %00010000
040D6F 10          2454**       db %00010000
040D70 10          2455**       db %00010000
040D71 10          2456**       db %00010000
040D72 50          2457**       db %01010000
040D73 20          2458**       db %00100000
040D74 00          2459**       db %00000000
040D75             2460**   
040D75             2461**   ; 246 NON_PRINTABLE_246
040D75 00          2462**       db %00000000
040D76 30          2463**       db %00110000
040D77 00          2464**       db %00000000
040D78 FC          2465**       db %11111100
040D79 00          2466**       db %00000000
040D7A 30          2467**       db %00110000
040D7B 00          2468**       db %00000000
040D7C 00          2469**       db %00000000
040D7D             2470**   
040D7D             2471**   ; 247 NON_PRINTABLE_247
040D7D 00          2472**       db %00000000
040D7E 76          2473**       db %01110110
040D7F DC          2474**       db %11011100
040D80 00          2475**       db %00000000
040D81 76          2476**       db %01110110
040D82 DC          2477**       db %11011100
040D83 00          2478**       db %00000000
040D84 00          2479**       db %00000000
040D85             2480**   
040D85             2481**   ; 248 NON_PRINTABLE_248
040D85 70          2482**       db %01110000
040D86 D8          2483**       db %11011000
040D87 70          2484**       db %01110000
040D88 00          2485**       db %00000000
040D89 00          2486**       db %00000000
040D8A 00          2487**       db %00000000
040D8B 00          2488**       db %00000000
040D8C 00          2489**       db %00000000
040D8D             2490**   
040D8D             2491**   ; 249 NON_PRINTABLE_249
040D8D 00          2492**       db %00000000
040D8E 00          2493**       db %00000000
040D8F 00          2494**       db %00000000
040D90 30          2495**       db %00110000
040D91 30          2496**       db %00110000
040D92 00          2497**       db %00000000
040D93 00          2498**       db %00000000
040D94 00          2499**       db %00000000
040D95             2500**   
040D95             2501**   ; 250 NON_PRINTABLE_250
040D95 00          2502**       db %00000000
040D96 00          2503**       db %00000000
040D97 00          2504**       db %00000000
040D98 18          2505**       db %00011000
040D99 18          2506**       db %00011000
040D9A 00          2507**       db %00000000
040D9B 00          2508**       db %00000000
040D9C 00          2509**       db %00000000
040D9D             2510**   
040D9D             2511**   ; 251 NON_PRINTABLE_251
040D9D 1F          2512**       db %00011111
040D9E 10          2513**       db %00010000
040D9F 10          2514**       db %00010000
040DA0 90          2515**       db %10010000
040DA1 50          2516**       db %01010000
040DA2 30          2517**       db %00110000
040DA3 10          2518**       db %00010000
040DA4 00          2519**       db %00000000
040DA5             2520**   
040DA5             2521**   ; 252 NON_PRINTABLE_252
040DA5 A0          2522**       db %10100000
040DA6 D0          2523**       db %11010000
040DA7 90          2524**       db %10010000
040DA8 90          2525**       db %10010000
040DA9 90          2526**       db %10010000
040DAA 00          2527**       db %00000000
040DAB 00          2528**       db %00000000
040DAC 00          2529**       db %00000000
040DAD             2530**   
040DAD             2531**   ; 253 NON_PRINTABLE_253
040DAD 70          2532**       db %01110000
040DAE D8          2533**       db %11011000
040DAF 30          2534**       db %00110000
040DB0 60          2535**       db %01100000
040DB1 F8          2536**       db %11111000
040DB2 00          2537**       db %00000000
040DB3 00          2538**       db %00000000
040DB4 00          2539**       db %00000000
040DB5             2540**   
040DB5             2541**   ; 254 NON_PRINTABLE_254
040DB5 00          2542**       db %00000000
040DB6 00          2543**       db %00000000
040DB7 3C          2544**       db %00111100
040DB8 3C          2545**       db %00111100
040DB9 3C          2546**       db %00111100
040DBA 3C          2547**       db %00111100
040DBB 00          2548**       db %00000000
040DBC 00          2549**       db %00000000
040DBD             2550**   
040DBD             2551**   ; 255 NON_PRINTABLE_255
040DBD A0          2552**       db %10100000
040DBE A0          2553**       db %10100000
040DBF A0          2554**       db %10100000
040DC0 AE          2555**       db %10101110
040DC1 44          2556**       db %01000100
040DC2 04          2557**       db %00000100
040DC3 04          2558**       db %00000100
040DC4 04          2559**       db %00000100
040DC5             2560**   
040DC5             0005*        ; incbin "../fonts/Lat2-VGA8_8x8.font"
040DC5             0006*    font_data_end:
040DC5             0007*    font_load:
040DC5             0008*    ; load font into a buffer
040DC5 21 10 FA 00 0009*        ld hl,Lat2_VGA8_8x8
040DC9 11 C5 05 04 0010*        ld de,font_data
040DCD 01 00 08 00 0011*        ld bc,font_data_end-font_data
040DD1 CD EE 1C 04 0012*        call vdu_load_buffer
040DD5             0013*    ; create font from buffer
040DD5 21 10 FA 00 0014*        ld hl,Lat2_VGA8_8x8
040DD9 1E 08       0015*        ld e,8
040DDB 16 08       0016*        ld d,8
040DDD 3E 00       0017*        ld a,0 ; flags
040DDF CD AA 1F 04 0018*        call vdu_font_create
040DE3             0019*    ; all done
040DE3 C9          0020*        ret
040DE4             0036         include "fixed168.inc"
040DE4             0001*    ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040DE4             0002*    ; uses EZ80 MLT instruction for speed
040DE4             0003*    ; operation: UHL * A --> UHL
040DE4             0004*    ; destroys: AF, HL
040DE4             0005*    smul24x8:
040DE4             0006*    ; make hl positive and store sign flag
040DE4 CD 70 04 04 0007*        call hlu_abs
040DE8 F5          0008*        push af
040DE9             0009*    ; do the division
040DE9 CD F4 0D 04 0010*        call mul24x8 ; hl = product
040DED             0011*    ; adjust sign of result
040DED F1          0012*        pop af ; sign de
040DEE F0          0013*        ret p ; hl was positive, nothing to do
040DEF CD 80 04 04 0014*        call neg_hlu ; result is negative
040DF3 C9          0015*        ret
040DF4             0016*    
040DF4             0017*    ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040DF4             0018*    ; uses EZ80 MLT instruction for speed
040DF4             0019*    ; operation: UHL * A --> AUHL
040DF4             0020*    ; destroys: AF, HL
040DF4             0021*    mul24x8:
040DF4 D5          0022*        push de ; preserve de
040DF5             0023*    ; low byte
040DF5 5D          0024*        ld e,l
040DF6 57          0025*        ld d,a
040DF7 ED 5C       0026*        mlt de
040DF9 6B          0027*        ld l,e ; product low byte
040DFA 08          0028*        ex af,af' ; save multiplier
040DFB 7A          0029*        ld a,d ; carry
040DFC 08          0030*        ex af,af' ; save carry, restore multiplier
040DFD             0031*    ; high byte
040DFD 5C          0032*        ld e,h
040DFE 57          0033*        ld d,a
040DFF ED 5C       0034*        mlt de
040E01 08          0035*        ex af,af' ; save multiplier, restore carry
040E02 83          0036*        add a,e ; add carry
040E03 67          0037*        ld h,a ; product middle byte
040E04 7A          0038*        ld a,d ; carry
040E05 08          0039*        ex af,af' ; save carry, restore multiplier
040E06             0040*    ; upper byte
040E06 22 21 0E 04 0041*        ld (@scratch),hl ; 7 cycles
040E0A 5F          0042*        ld e,a
040E0B 3A 23 0E 04 0043*        ld a,(@scratch+2)
040E0F 57          0044*        ld d,a
040E10 ED 5C       0045*        mlt de
040E12 08          0046*        ex af,af' ; restore carry
040E13 8B          0047*        adc a,e ; add carry
040E14 32 23 0E 04 0048*        ld (@scratch+2),a ; 5 cycles
040E18 2A 21 0E 04 0049*        ld hl,(@scratch) ; 7 cycles
040E1C             0050*    ; highest byte
040E1C 3E 00       0051*        ld a,0 ; preserve carry flag
040E1E 8A          0052*        adc a,d ; product highest byte
040E1F D1          0053*        pop de ; restore de
040E20 C9          0054*        ret
040E21             0055*    @scratch: ds 3
040E24             0056*    
       FF FF FF 
040E24 00 00 00 00 0057*    mul24out: blkb 6,0
       00 00       
040E2A             0058*    
040E2A             0059*    ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
040E2A             0060*    ; operation: UHL * UDE --> mul24out
040E2A             0061*    mul24:
040E2A DD E5       0062*        push ix ; preserve
040E2C             0063*    ; point to output buffer and clear it
040E2C DD 21 24 0E 0064*        ld ix,mul24out
       04          
040E31 C5          0065*        push bc
040E32 01 00 00 00 0066*        ld bc,0
040E36 DD 0F 00    0067*        ld (ix),bc
040E39 DD 0F 03    0068*        ld (ix+3),bc
040E3C C1          0069*        pop bc
040E3D             0070*    ; STEP 1: UHL * E
040E3D 7B          0071*        ld a,e
040E3E E5          0072*        push hl
040E3F CD F4 0D 04 0073*        call mul24x8
040E43 DD 2F 00    0074*        ld (ix+0),hl
040E46 DD 77 03    0075*        ld (ix+3),a
040E49             0076*    ; STEP 2: UHL * D
040E49 E1          0077*        pop hl
040E4A E5          0078*        push hl
040E4B 7A          0079*        ld a,d
040E4C CD F4 0D 04 0080*        call mul24x8
040E50 CD 69 0E 04 0081*        call @accumulate
040E54             0082*    ; STEP 3: UHL * DEU
040E54 E1          0083*        pop hl
040E55 ED 53 99 0E 0084*        ld (@de),de
       04          
040E5A 3A 9B 0E 04 0085*        ld a,(@de+2)
040E5E CD F4 0D 04 0086*        call mul24x8
040E62 CD 69 0E 04 0087*        call @accumulate
040E66             0088*    ; all done
040E66 DD E1       0089*        pop ix ; restore
040E68 C9          0090*        ret
040E69             0091*    @accumulate:
040E69 DD 23       0092*        inc ix
040E6B             0093*    ; highest byte of product to carry
040E6B DD 77 03    0094*        ld (ix+3),a
040E6E             0095*    ; low byte of product
040E6E 7D          0096*        ld a,l
040E6F DD 86 00    0097*        add a,(ix+0)
040E72 DD 77 00    0098*        ld (ix+0),a
040E75             0099*    ; high byte of product
040E75 7C          0100*        ld a,h
040E76 DD 8E 01    0101*        adc a,(ix+1)
040E79 DD 77 01    0102*        ld (ix+1),a
040E7C             0103*    ; uppper byte of product
040E7C 22 96 0E 04 0104*        ld (@hl),hl
040E80 3A 98 0E 04 0105*        ld a,(@hl+2)
040E84 DD 8E 02    0106*        adc a,(ix+2)
040E87 DD 77 02    0107*        ld (ix+2),a
040E8A             0108*    ; carry
040E8A 3E 00       0109*        ld a,0 ; preserve flags
040E8C DD 8E 03    0110*        adc a,(ix+3)
040E8F DD 77 03    0111*        ld (ix+3),a
040E92 C9          0112*        ret
040E93             0113*    
040E93 00 00 00    0114*    @ix: dl 0
040E96 00 00 00    0115*    @hl: dl 0
040E99 00 00 00    0116*    @de: dl 0
040E9C             0117*    
040E9C             0118*    ; ; UHL * UDE --> UHL (unsigned)
040E9C             0119*    ; umul24:
040E9C             0120*    ;     call mul24
040E9C             0121*    ;     ld hl,(mul24out)
040E9C             0122*    ;     ret
040E9C             0123*    
040E9C             0124*    ; UH.L = UH.L*UD.E (unsigned)
040E9C             0125*    umul168:
040E9C CD 2A 0E 04 0126*        call mul24
040EA0 2A 25 0E 04 0127*        ld hl,(mul24out+1)
040EA4 C9          0128*        ret
040EA5             0129*    
040EA5             0130*    ; UH.L * UD.E --> UH.L (signed)
040EA5             0131*    smul168:
040EA5             0132*    ; make everything positive and store sign flags
040EA5 CD 70 04 04 0133*        call hlu_abs
040EA9 F5          0134*        push af
040EAA EB          0135*        ex de,hl
040EAB CD 70 04 04 0136*        call hlu_abs
040EAF EB          0137*        ex de,hl
040EB0 F5          0138*        push af
040EB1             0139*    ; do the division
040EB1 CD 9C 0E 04 0140*        call umul168 ; hl = product
040EB5             0141*    ; adjust sign of result
040EB5 F1          0142*        pop af ; sign de
040EB6 FA C1 0E 04 0143*        jp m,@de_neg
040EBA F1          0144*        pop af ; sign hl
040EBB F0          0145*        ret p ; both positive, nothing to do
040EBC             0146*    @hl_neg:
040EBC CD 80 04 04 0147*        call neg_hlu ; de pos, hl neg, result is negative
040EC0 C9          0148*        ret
040EC1             0149*    @de_neg:
040EC1 F1          0150*        pop af
040EC2 F8          0151*        ret m ; both negative, nothing to do
040EC3 CD 80 04 04 0152*        call neg_hlu ; result is negative
040EC7 C9          0153*        ret
040EC8             0154*    
040EC8             0155*    ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040EC8             0156*    ; perform unsigned division of 16.8 fixed place values
040EC8             0157*    ; with an unsigned 16.8 fixed place result and 24-bit remainder
040EC8             0158*    udiv168:
040EC8             0159*    ; back up divisor
040EC8 ED 53 FF 0E 0160*        ld (@ude),de
       04          
040ECD             0161*    ; get the 16-bit integer part of the quotient
040ECD CD 80 03 04 0162*        call udiv24 ; de = quotient, hl = remainder
040ED1             0163*    ; load quotient to upper three bytes of output
040ED1 ED 53 06 0F 0164*        ld (div168_out+1),de
       04          
040ED6             0165*    @div256:
040ED6             0166*    ; multiply remainder by 256
040ED6             0167*        hlu_mul256
                       M1 Args: none
040ED6 29          0001*M1      add hl,hl ; * 2
040ED7 29          0002*M1      add hl,hl ; * 4
040ED8 29          0003*M1      add hl,hl ; * 8
040ED9 29          0004*M1      add hl,hl ; * 16
040EDA 29          0005*M1      add hl,hl ; * 32
040EDB 29          0006*M1      add hl,hl ; * 64
040EDC 29          0007*M1      add hl,hl ; * 128
040EDD 29          0008*M1      add hl,hl ; * 256
040EDE             0168*    ; skip fractional computation if remainder is zero
040EDE             0169*        SIGN_HLU
                       M1 Args: none
040EDE 19          0001*M1      add hl,de ; 1 cycle
040EDF B7          0002*M1      or a ; clear flags ; 1 cycle
040EE0 ED 52       0003*M1      sbc hl,de ; 2 cycles
040EE2             0004*M1      ; 4 cycles total
040EE2 20 03       0170*        jr nz,@div_frac
040EE4 AF          0171*        xor a
040EE5 18 0A       0172*        jr @write_frac
040EE7             0173*    ; now divide the shifted remainder by the divisor
040EE7             0174*    @div_frac:
040EE7 ED 5B FF 0E 0175*        ld de,(@ude) ; get back divisor
       04          
040EEC CD 80 03 04 0176*        call udiv24 ; de = quotient, hl = remainder
040EF0             0177*    ; load low byte of quotient to low byte of output
040EF0 7B          0178*        ld a,e
040EF1             0179*    @write_frac:
040EF1 32 05 0F 04 0180*        ld (div168_out),a
040EF5             0181*    ; load de with return value
040EF5 ED 5B 05 0F 0182*        ld de,(div168_out)
       04          
040EFA             0183*    ; load a with any overflow
040EFA 3A 08 0F 04 0184*        ld a,(div168_out+3)
040EFE C9          0185*        ret ; ud.e is the 16.8 result
040EFF             0186*    @ude: ds 6
040F05             0187*    div168_out: ds 4 ; the extra byte is for overflow
040F09             0188*    
040F09             0189*    ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
040F09             0190*    ; perform signed division of 16.8 fixed place values
040F09             0191*    ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
040F09             0192*    sdiv168:
040F09             0193*    ; make everything positive and store sign flags
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
040F09 CD 70 04 04 0194*        call hlu_abs
040F0D F5          0195*        push af
040F0E EB          0196*        ex de,hl
040F0F CD 70 04 04 0197*        call hlu_abs
040F13 EB          0198*        ex de,hl
040F14 F5          0199*        push af
040F15             0200*    ; do the division
040F15 CD C8 0E 04 0201*        call udiv168 ; de = quotient, hl = remainder
040F19             0202*    ; adjust sign of result
040F19 F1          0203*        pop af ; sign de
040F1A FA 27 0F 04 0204*        jp m,@de_neg
040F1E F1          0205*        pop af ; sign hl
040F1F F0          0206*        ret p ; both positive, nothing to do
040F20             0207*    @hl_neg:
040F20 EB          0208*        ex de,hl ; hl = quotient, de = remainder
040F21 CD 80 04 04 0209*        call neg_hlu ; de pos, hl neg, result is negative
040F25 EB          0210*        ex de,hl ; de = negated quotient, hl = remainder
040F26 C9          0211*        ret
040F27             0212*    @de_neg:
040F27 F1          0213*        pop af
040F28 F8          0214*        ret m ; both negative, nothing to do
040F29 EB          0215*        ex de,hl ; hl = quotient, de = remainder
040F2A CD 80 04 04 0216*        call neg_hlu ; result is negative
040F2E EB          0217*        ex de,hl ; de = negated quotient, hl = remainder
040F2F C9          0218*        ret
040F30             0219*    
040F30             0220*    ; convert signed angles from a 360 to 256 degree circle
040F30             0221*    ; inputs: uh.l is the angle360 in 16.8 fixed format
040F30             0222*    ; outputs: uh.l is the angle256 in 16.8 fixed format
040F30             0223*    ; destroys: TODO
040F30             0224*    deg_360_to_256:
040F30 D5          0225*        push de ; preserve de
040F31             0226*    ; make angle positive and store sign flag
040F31 CD 70 04 04 0227*        call hlu_abs
040F35 F5          0228*        push af
040F36             0229*    ; multiply by coversion factor of 256/360
040F36 11 B6 00 00 0230*        ld de,0x0000B6 ; 0.711
040F3A CD 9C 0E 04 0231*        call umul168 ; uh.l = uh.l * 0.711
040F3E             0232*    ; restore sign flag and adjust output accordingly
040F3E F1          0233*        pop af
040F3F F2 47 0F 04 0234*        jp p,@pos ; positive number
040F43 CD 80 04 04 0235*        call neg_hlu
040F47             0236*    @pos:
040F47             0237*    ; restore de and return uh.l as the result
040F47 D1          0238*        pop de
040F48 C9          0239*        ret
040F49             0240*    
040F49             0241*    ; convert signed angles from a 256 to 360 degree circle
040F49             0242*    ; inputs: uh.l is the angle256 in 16.8 fixed format
040F49             0243*    ; outputs: uh.l is the angle360 in 16.8 fixed format
040F49             0244*    ; destroys: TODO
040F49             0245*    deg_256_to_360:
040F49 D5          0246*        push de ; preserve de
040F4A             0247*    ; make angle positive and store sign flag
040F4A CD 70 04 04 0248*        call hlu_abs
040F4E F5          0249*        push af
040F4F             0250*    ; multiply by coversion factor of 360/256
040F4F 11 68 01 00 0251*        ld de,0x000168 ; 1.406
040F53 CD 9C 0E 04 0252*        call umul168 ; uh.l = uh.l * 1.406
040F57             0253*    ; restore sign flag and adjust output accordingly
040F57 F1          0254*        pop af
040F58 F2 60 0F 04 0255*        jp p,@pos ; positive number
040F5C CD 80 04 04 0256*        call neg_hlu
040F60             0257*    @pos:
040F60             0258*    ; restore de and return uh.l as the result
040F60 D1          0259*        pop de
040F61 C9          0260*        ret
040F62             0261*    
040F62             0262*    ; fixed 16.8 routine
040F62             0263*    ; cos(uh.l) --> uh.l
040F62             0264*    ; destroys: f, hl
040F62             0265*    cos168:
040F62 D5          0266*        push de ; preserve de
040F63             0267*    ; for cos we simply increment the angle by 90 degrees
040F63             0268*    ; or 0x004000 in 16.8 degrees256
040F63             0269*    ; which makes it a sin problem
040F63 11 00 40 00 0270*        ld de,0x004000
040F67 19          0271*        add hl,de ; modulo 256 happens below
040F68 D1          0272*        pop de ; restore de
040F69             0273*    ; fall through to sin168
040F69             0274*    
040F69             0275*    ; ---------------------
040F69             0276*    ; fixed 16.8 routine
040F69             0277*    ; sin(uh.l) --> uh.l
040F69             0278*    ; destroys: f, hl
040F69             0279*    sin168:
040F69 D5          0280*        push de
040F6A             0281*    ; handle negative angles appropriately
040F6A CD 70 04 04 0282*        call hlu_abs
040F6E F2 77 0F 04 0283*        jp p,@F
040F72 11 00 00 FF 0284*        ld de,-256*256
040F76 19          0285*        add hl,de
040F77             0286*    @@:
040F77 2E 03       0287*        ld l,3 ; multiply by 3 to get our lookup index
040F79 ED 6C       0288*        mlt hl
040F7B 11 2F 12 04 0289*        ld de,sin_lut_168 ; grab the lut address
040F7F 19          0290*        add hl,de ; bump hl by the index
040F80 ED 27       0291*        ld hl,(hl) ; don't try this on a z80!
040F82 D1          0292*        pop de
040F83 C9          0293*        ret
040F84             0294*    
040F84             0295*    ; 16.8 fixed inputs / outputs
040F84             0296*    ; takes: uh.l as angle in degrees 256
040F84             0297*    ;        ud.e as radius
040F84             0298*    ; returns ub.c as dx, ud.e as dy, uh.l as radius
040F84             0299*    ;        displacements from origin (0,0)
040F84             0300*    ; destroys: everything except indexes
040F84             0301*    polar_to_cartesian:
040F84             0302*    ; back up input parameters
040F84 22 B3 0F 04 0303*        ld (@angle), hl
040F88 ED 53 B6 0F 0304*        ld (@radius), de
       04          
040F8D             0305*    ; compute dx = sin(uh.l) * ud.e
040F8D CD 69 0F 04 0306*        call sin168 ; uh.l = sin(uh.l)
040F91 ED 5B B6 0F 0307*        ld de,(@radius)
       04          
040F96 CD A5 0E 04 0308*        call smul168 ; uh.l = dx
040F9A E5          0309*        push hl
040F9B             0310*    ; compute dy = -cos(uh.l) * ud.e
040F9B 2A B3 0F 04 0311*        ld hl,(@angle)
040F9F CD 62 0F 04 0312*        call cos168 ; uh.l = cos(uh.l)
040FA3 ED 5B B6 0F 0313*        ld de,(@radius)
       04          
040FA8 CD A5 0E 04 0314*        call smul168 ; uh.l = dy
040FAC CD 80 04 04 0315*        call neg_hlu ; invert dy for screen coords convention
040FB0 EB          0316*        ex de,hl ; de = dy for output
040FB1 C1          0317*        pop bc ; bc = dx for output
040FB2             0318*    ; and out
040FB2 C9          0319*        ret
040FB3             0320*    @angle: ds 3
040FB6             0321*    @radius: ds 3
040FB9             0322*    
040FB9             0323*    ; 16.8 fixed inputs / outputs
040FB9             0324*    ; inputs: ub.c as dx, ud.e as dy
040FB9             0325*    ;        displacements from origin (0,0)
040FB9             0326*    ; returns: uh.l as angle in degrees 256
040FB9             0327*    ;        ud.e as radius
040FB9             0328*    ; destroys: everything except indexes
040FB9             0329*    cartesian_to_polar:
       FF FF FF FF 
       FF FF 
040FB9 ED 43 12 10 0330*        ld (dx168),bc ; dx argument for distance168
       04          
040FBE ED 53 18 10 0331*        ld (dy168),de ; dy argument for distance168
       04          
040FC3             0332*    ; compute radius
040FC3 CD 1E 10 04 0333*        call distance168 ; uh.l = radius
040FC7 E5          0334*        push hl ; save radius
040FC8             0335*    ; compute angle
040FC8 ED 4B 12 10 0336*        ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040FCD ED 5B 18 10 0337*        ld de,(dy168) ; dy argument for atan2_168fast
       04          
040FD2 CD 7E 10 04 0338*        call atan2_168fast ; uh.l = angle
040FD6             0339*    ; return result
040FD6 D1          0340*        pop de ; de = radius (was hl)
040FD7 C9          0341*        ret
040FD8             0342*    ; end cartesian_to_polar
040FD8             0343*    
040FD8             0344*    ; 16.8 fixed inputs / outputs
040FD8             0345*    ; inputs: ub.c as dx, ud.e as dy
040FD8             0346*    ;        displacements from origin (0,0)
040FD8             0347*    ; returns: uh.l as angle in degrees 256
040FD8             0348*    ;        ud.e as radius
040FD8             0349*    ; destroys: everything except indexes
040FD8             0350*    ; note: uses distance168sm which is more accurate for small deltas
040FD8             0351*    cartesian_to_polar_sm:
040FD8 ED 43 12 10 0352*        ld (dx168),bc ; dx argument for distance168
       04          
040FDD ED 53 18 10 0353*        ld (dy168),de ; dy argument for distance168
       04          
040FE2             0354*    ; compute radius
040FE2 CD 59 10 04 0355*        call distance168sm ; uh.l = radius
040FE6 E5          0356*        push hl ; save radius
040FE7             0357*    ; compute angle
040FE7 ED 4B 12 10 0358*        ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040FEC ED 5B 18 10 0359*        ld de,(dy168) ; dy argument for atan2_168fast
       04          
040FF1 CD 7E 10 04 0360*        call atan2_168fast ; uh.l = angle
040FF5             0361*    ; return result
040FF5 D1          0362*        pop de ; de = radius (was hl)
040FF6 C9          0363*        ret
040FF7             0364*    ; end cartesian_to_polar
040FF7             0365*    
040FF7             0366*    ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040FF7             0367*    ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040FF7             0368*    ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040FF7             0369*    ;         also populates scratch locations dx168 and dy168
040FF7             0370*    ; destroys: a,hl,bc,de
040FF7             0371*    dxy168:
040FF7             0372*    ; compute dx = x1-x0
040FF7 AF          0373*        xor a ; clear carry
040FF8 DD E5       0374*        push ix ; move ix to hl via the stack
040FFA E1          0375*        pop hl ; hl = x1
040FFB ED 42       0376*        sbc hl,bc ; hl = dx
040FFD 22 12 10 04 0377*        ld (dx168),hl ; dx to scratch
041001             0378*    ; compute dy = y1-y0
041001 AF          0379*        xor a ; clear carry
041002 FD E5       0380*        push iy ; move iy to hl via the stack
041004 E1          0381*        pop hl ; hl = y1
041005 ED 52       0382*        sbc hl,de ; hl = dy
041007 22 18 10 04 0383*        ld (dy168),hl ; dy to scratch
04100B             0384*    ; populate output registers and return
04100B EB          0385*        ex de,hl ; ud.e = dy
04100C ED 4B 12 10 0386*        ld bc,(dx168) ; ub.c = dx
       04          
041011 C9          0387*        ret
041012 00 00 00 00 0388*    dx168: blkb 6,0
       00 00       
041018 00 00 00 00 0389*    dy168: blkb 6,0
       00 00       
04101E             0390*    
04101E             0391*    ; compute the euclidian distance between two cartesian coordinates
04101E             0392*    ; using the formula d = sqrt(dx^2+dy^2)
04101E             0393*    ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
04101E             0394*    ; output; uh.l is the 16.8 fixed format distance
04101E             0395*    ;         also populates scratch locations dx168 and dy168
04101E             0396*    ; destroys: a,hl,bc,de
04101E             0397*    ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
04101E             0398*    ;       thus the result will always be an integer, albeit in 16.8 format
04101E             0399*    distance168:
04101E             0400*    ; compute dy^2
04101E 2A 18 10 04 0401*        ld hl,(dy168)
041022 CD 70 04 04 0402*        call hlu_abs
041026             0403*        ; call hlu_udiv256 ; make integer to avoid overflow
041026             0404*        SRL_UHL ; make integer to avoid overflow
                       M1 Args: none
041026 3B          0001*M1      dec sp ; 1 cycle
041027 E5          0002*M1      push hl ; 4 cycles
041028 33          0003*M1      inc sp ; 1 cycle
041029 E1          0004*M1      pop hl ; 4 cycles
04102A 23          0005*M1      inc hl ; 1 cycle
04102B 52 2B       0006*M1      dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
04102D             0007*M1      ; 13 cycles total
04102D E5          0405*        push hl
04102E D1          0406*        pop de
04102F CD 67 03 04 0407*        call umul24 ; hl = dy^2
041033 E5          0408*        push hl ; save dy^2
041034             0409*    ; compute dx^2
041034 2A 12 10 04 0410*        ld hl,(dx168)
041038 CD 70 04 04 0411*        call hlu_abs
04103C             0412*        ; call hlu_udiv256 ; make integer to avoid overflow
04103C             0413*        SRL_UHL ; make integer to avoid overflow
                       M1 Args: none
04103C 3B          0001*M1      dec sp ; 1 cycle
04103D E5          0002*M1      push hl ; 4 cycles
04103E 33          0003*M1      inc sp ; 1 cycle
04103F E1          0004*M1      pop hl ; 4 cycles
041040 23          0005*M1      inc hl ; 1 cycle
041041 52 2B       0006*M1      dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
041043             0007*M1      ; 13 cycles total
041043 E5          0414*        push hl
041044 D1          0415*        pop de
041045 CD 67 03 04 0416*        call umul24 ; hl = dx^2
041049             0417*    ; add dx^2 and dy^2
041049 D1          0418*        pop de ; de = dy^2 (was hl)
04104A 19          0419*        add hl,de ; hl = dx^2 + dy^2
04104B             0420*    ; compute the square root
04104B CD 49 11 04 0421*        call sqrt24 ; de = sqrt(dx^2 + dy^2)
04104F EB          0422*        ex de,hl ; hl = distance
041050             0423*        hlu_mul256 ; convert back to 16.8 fixed
                       M1 Args: none
041050 29          0001*M1      add hl,hl ; * 2
041051 29          0002*M1      add hl,hl ; * 4
041052 29          0003*M1      add hl,hl ; * 8
041053 29          0004*M1      add hl,hl ; * 16
041054 29          0005*M1      add hl,hl ; * 32
041055 29          0006*M1      add hl,hl ; * 64
041056 29          0007*M1      add hl,hl ; * 128
041057 29          0008*M1      add hl,hl ; * 256
041058 C9          0424*        ret
041059             0425*    
041059             0426*    ; compute the euclidian distance between two cartesian coordinates
041059             0427*    ; using the formula d = sqrt(dx^2+dy^2)
041059             0428*    ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
041059             0429*    ; output; uh.l is the 16.8 fixed format distance
041059             0430*    ;         also populates scratch locations dx168 and dy168
041059             0431*    ; destroys: a,hl,bc,de
041059             0432*    ; NOTE: sm means 'small' because it doesn't round down the deltas
041059             0433*    ;       making it more accurate for small deltas,
041059             0434*    ;       but will overflow if used for screen-sized deltas
041059             0435*    distance168sm:
041059             0436*    ; compute dy^2
041059 2A 18 10 04 0437*        ld hl,(dy168)
04105D CD 70 04 04 0438*        call hlu_abs
041061 E5          0439*        push hl
041062 D1          0440*        pop de
041063 CD 67 03 04 0441*        call umul24 ; hl = dy^2
041067 E5          0442*        push hl ; save dy^2
041068             0443*    ; compute dx^2
041068 2A 12 10 04 0444*        ld hl,(dx168)
04106C CD 70 04 04 0445*        call hlu_abs
041070 E5          0446*        push hl
041071 D1          0447*        pop de
041072 CD 67 03 04 0448*        call umul24 ; hl = dx^2
041076             0449*    ; add dx^2 and dy^2
041076 D1          0450*        pop de ; de = dy^2 (was hl)
041077 19          0451*        add hl,de ; hl = dx^2 + dy^2
041078             0452*    ; compute the square root
041078 CD 49 11 04 0453*        call sqrt24 ; de = sqrt(dx^2 + dy^2)
04107C EB          0454*        ex de,hl ; hl = distance
04107D C9          0455*        ret
04107E             0456*    
04107E             0457*    ; atan2_(ub.c,ud.e) --> uh.l
04107E             0458*    ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
04107E             0459*    ;   whether inputs are integers or fractional doesn't matter
04107E             0460*    ;   so long as the sign bit of the upper byte is correct
04107E             0461*    ; output: uh.l is the 16.8 fixed angle in degrees 256
04107E             0462*    ; angles are COMPASS HEADINGS based on
04107E             0463*    ; screen coordinate conventions,where the y axis is flipped
04107E             0464*    ; #E0 224      0       32 #20
04107E             0465*    ;        -x,-y | +x,-y
04107E             0466*    ; #C0 192------+------ 64 #40
04107E             0467*    ;        -x,+y | +x,+y
04107E             0468*    ; #A0 160   128 #80   96 #60
04107E             0469*    atan2_168fast:
04107E             0470*    ; get signs and make everything positive
04107E             0471*    ; get abs(x) and store its original sign
04107E C5          0472*        push bc
04107F E1          0473*        pop hl
041080 CD 70 04 04 0474*        call hlu_abs ; if x was negative this also sets the sign flag
041084 E5          0475*        push hl ; store abs(x)
041085 C1          0476*        pop bc ; bc = abs(x)
041086 F5          0477*        push af ; store sign of x
041087             0478*    ; get abs(y) and store its original sign
041087 EB          0479*        ex de,hl ; hl = y
041088 CD 70 04 04 0480*        call hlu_abs ; if y was negative this also sets the sign flag
04108C EB          0481*        ex de,hl ; de = abs(y)
04108D F5          0482*        push af ; store sign of y
04108E             0483*    ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
04108E             0484*    ; this ensures that our lookup value is between 0 and 1 inclusive
04108E AF          0485*        xor a ; clear the carry flag
04108F D5          0486*        push de
041090 E1          0487*        pop hl
041091 ED 42       0488*        sbc hl,bc
041093 F5          0489*        push af ; save sign of de - bc
041094 F2 9D 10 04 0490*        jp p,@1 ; bc <= de, so we skip ahead
041098             0491*    ; otherwise we swap bc and de
041098 C5          0492*        push bc
041099 E1          0493*        pop hl
04109A EB          0494*        ex de,hl
04109B E5          0495*        push hl
04109C C1          0496*        pop bc
04109D             0497*    @1:
04109D             0498*    ; now we're ready to snag our preliminary result
04109D C5          0499*        push bc
04109E E1          0500*        pop hl
04109F CD 0D 11 04 0501*        call atan_168fast ; uh.l comes back with prelim result
0410A3             0502*    ; now we adjust uh.l based on sign of de - bc
0410A3 F1          0503*        pop af
0410A4 F2 B0 10 04 0504*        jp p,@2 ; bc <= de,so we skip ahead
0410A8 EB          0505*        ex de,hl
0410A9 21 00 40 00 0506*        ld hl,64*256 ; subtract from 64 (90) degrees
0410AD AF          0507*        xor a ; clear the carry flag
0410AE ED 52       0508*        sbc hl,de
0410B0             0509*    @2:
0410B0             0510*    ; adjust the result based on quadrant
0410B0             0511*    ; #E0 224      0       32 #20
0410B0             0512*    ;        -x,-y | +x,-y
0410B0             0513*    ; #C0 192------+------ 64 #40
0410B0             0514*    ;        -x,+y | +x,+y
0410B0             0515*    ; #A0 160   128 #80   96 #60
0410B0 F1          0516*        pop af ; sign of y
0410B1 CA EE 10 04 0517*        jp z,@y_zero
0410B5 F2 CE 10 04 0518*        jp p,@y_pos
0410B9             0519*    ; y neg,check x
0410B9 F1          0520*        pop af ; sign of x
0410BA CA C8 10 04 0521*        jp z,@y_neg_x_zero
0410BE F2 CD 10 04 0522*        jp p,@y_neg_x_pos
0410C2             0523*    ; y neg,x neg
0410C2             0524*    ; angle is 128 to 256 (270 to 360)
0410C2             0525*    ; negating the intermediate does the trick
0410C2 CD 80 04 04 0526*        call neg_hlu
0410C6 18 31       0527*        jr @zero_hlu
0410C8             0528*    
0410C8             0529*    @y_neg_x_zero:
0410C8             0530*    ; y neg,x zero
0410C8             0531*    ; angle is 0
0410C8 21 00 00 00 0532*        ld hl,0
0410CC C9          0533*        ret
0410CD             0534*    @y_neg_x_pos:
0410CD             0535*    ; y neg,x pos
0410CD             0536*    ; angle is 0 to 64 (0 to 90)
0410CD             0537*    ; so we're good
0410CD C9          0538*        ret
0410CE             0539*    
0410CE             0540*    @y_pos:
0410CE F1          0541*        pop af ; sign of x
0410CF CA DE 10 04 0542*        jp z,@y_pos_x_zero
0410D3 F2 E3 10 04 0543*        jp p,@y_pos_x_pos
0410D7             0544*    ; y pos,x neg
0410D7             0545*    ; angle is 128 to 192 (180-270)
0410D7             0546*    ; so we add 128 to intermediate
0410D7 11 00 80 00 0547*        ld de,128*256
0410DB 19          0548*        add hl,de
0410DC 18 1B       0549*        jr @zero_hlu
0410DE             0550*    @y_pos_x_zero:
0410DE             0551*    ; y pos,x zero
0410DE             0552*    ; angle is 128 (180)
0410DE 21 00 80 00 0553*        ld hl,128*256
0410E2 C9          0554*        ret
0410E3             0555*    @y_pos_x_pos:
0410E3             0556*    ; y pos,x pos
0410E3             0557*    ; angle is 64 to 128 (90 to 180)
0410E3             0558*    ; neg the intermediate and add 180 degrees
0410E3 CD 80 04 04 0559*        call neg_hlu
0410E7 11 00 80 00 0560*        ld de,128*256
0410EB 19          0561*        add hl,de
0410EC 18 0B       0562*        jr @zero_hlu
0410EE             0563*    
0410EE             0564*    @y_zero:
0410EE F1          0565*        pop af ; sign of x
0410EF FA F4 10 04 0566*        jp m,@y_zero_x_neg
0410F3             0567*    ; y zero,x pos
0410F3             0568*    ; angle is 64 (90),nothing to do
0410F3 C9          0569*        ret
0410F4             0570*    @y_zero_x_neg:
0410F4             0571*    ; y zero ,x neg
0410F4             0572*    ; angle is 192 (270)
0410F4 21 00 C0 00 0573*        ld hl,192*256
0410F8 C9          0574*        ret
0410F9             0575*    @zero_hlu:
0410F9 AF          0576*        xor a
0410FA 22 07 11 04 0577*        ld (@scratch),hl
0410FE 32 09 11 04 0578*        ld (@scratch+2),a
041102 2A 07 11 04 0579*        ld hl,(@scratch)
041106 C9          0580*        ret
041107             0581*    @scratch: ds 6
04110D             0582*    
04110D             0583*    ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
04110D             0584*    ; output: uh.l is the 16.8 fixed format angle in degrees 256
04110D             0585*    ; destroys: a,hl,bc,de
04110D             0586*    ; note: only works for angles from 0 to 32 (45) degrees
04110D             0587*    ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
04110D             0588*    atan_168fast:
04110D             0589*    ; because we use compass headings instead of geometric angles
04110D             0590*    ; we compute dx/dy which is 1/tan(theta) in the maths world
04110D             0591*    ; we can do faster unsigned division here because we know dx and dy are positive
       FF FF FF FF 
       FF FF 
04110D CD C8 0E 04 0592*        call udiv168 ; ud.e = dx/dy
041111 EB          0593*        ex de,hl ; uh.l = dx/dy
041112             0594*    ; test uh.l for 0
041112 19          0595*        add hl,de
041113 B7          0596*        or a
041114 ED 52       0597*        sbc hl,de
041116 28 22       0598*        jr z,@is_zero
041118             0599*    ; test uh.l for 1
041118 AF          0600*        xor a ; clear carry
041119 EB          0601*        ex de,hl
04111A 21 00 01 00 0602*        ld hl,1*256 ; 1 in 16.8 fixed format
04111E ED 52       0603*        sbc hl,de
041120 28 13       0604*        jr z,@is_45
041122 EB          0605*        ex de,hl
041123             0606*    ; no special cases so we move on
041123             0607*    ; l contains the fractional portion of tan(uh.l)
041123             0608*    ; we multiply it by three to get our lookup table index
041123 26 03       0609*        ld h,3
041125 ED 6C       0610*        mlt hl ; index into lut
041127 11 00 00 00 0611*        ld de,0 ; clear deu
04112B 54          0612*        ld d,h ; copy hl to de
04112C 5D          0613*        ld e,l ; de contains our index
04112D 21 32 15 04 0614*        ld hl,atan_lut_168 ; grab the lut address
041131 19          0615*        add hl,de ; bump hl by the index
041132 ED 27       0616*        ld hl,(hl) ; don't try this on a z80!
041134 C9          0617*        ret ; and out
041135             0618*    @is_45:
041135 21 00 20 00 0619*        ld hl,32*256
041139 C9          0620*        ret
04113A             0621*    ; for the case tan(0)
04113A             0622*    @is_zero:
04113A 21 00 00 00 0623*        ld hl,0*256
04113E C9          0624*        ret
04113F             0625*    
04113F             0626*    ; Expects  ADL mode
04113F             0627*    ; Inputs:  UH.L
04113F             0628*    ; Outputs: UH.L is the 16.8 square root
04113F             0629*    ;          UDE is the integer difference inputHL-DE^2
04113F             0630*    sqrt168:
04113F CD 49 11 04 0631*        call sqrt24
041143 EB          0632*        ex de,hl
041144 29          0633*        add hl,hl
041145 29          0634*        add hl,hl
041146 29          0635*        add hl,hl
041147 29          0636*        add hl,hl
041148 C9          0637*        ret
041149             0638*    
041149             0639*    ; credit: xeda112358
041149             0640*    ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
041149             0641*    sqrt24:
041149             0642*    ; Expects ADL mode
041149             0643*    ; Inputs: HL
041149             0644*    ; Outputs: DE is the integer square root
041149             0645*    ;  HL is the difference inputHL-DE^2
041149             0646*    ;  c flag reset
041149 01 00 00 00 0647*        ld bc,0 ; clear bcu
04114D 11 00 00 00 0648*        ld de,0 ; clear deu
041151 AF          0649*        xor a
041152 45          0650*        ld b,l
041153 C5          0651*        push bc
041154 47          0652*        ld b,a
041155 6F          0653*        ld l,a
041156             0654*    ; Iteration 1
041156 29          0655*        add hl,hl
041157 CB 11       0656*        rl c
041159 29          0657*        add hl,hl
04115A CB 11       0658*        rl c
04115C 91          0659*        sub c
04115D 30 04       0660*        jr nc,$+6
04115F 1C          0661*        inc e
041160 1C          0662*        inc e
041161 2F          0663*        cpl
041162 4F          0664*        ld c,a
041163             0665*    ; Iteration 2
041163 29          0666*        add hl,hl
041164 CB 11       0667*        rl c
041166 29          0668*        add hl,hl
041167 CB 11       0669*        rl c
041169 CB 13       0670*        rl e
04116B 7B          0671*        ld a,e
04116C 91          0672*        sub c
04116D 30 04       0673*        jr nc,$+6
04116F 1C          0674*        inc e
041170 1C          0675*        inc e
041171 2F          0676*        cpl
041172 4F          0677*        ld c,a
041173             0678*    ; Iteration 3
041173 29          0679*        add hl,hl
041174 CB 11       0680*        rl c
041176 29          0681*        add hl,hl
041177 CB 11       0682*        rl c
041179 CB 13       0683*        rl e
04117B 7B          0684*        ld a,e
04117C 91          0685*        sub c
04117D 30 04       0686*        jr nc,$+6
04117F 1C          0687*        inc e
041180 1C          0688*        inc e
041181 2F          0689*        cpl
041182 4F          0690*        ld c,a
041183             0691*    ; Iteration 4
041183 29          0692*        add hl,hl
041184 CB 11       0693*        rl c
041186 29          0694*        add hl,hl
041187 CB 11       0695*        rl c
041189 CB 13       0696*        rl e
04118B 7B          0697*        ld a,e
04118C 91          0698*        sub c
04118D 30 04       0699*        jr nc,$+6
04118F 1C          0700*        inc e
041190 1C          0701*        inc e
041191 2F          0702*        cpl
041192 4F          0703*        ld c,a
041193             0704*    ; Iteration 5
041193 29          0705*        add hl,hl
041194 CB 11       0706*        rl c
041196 29          0707*        add hl,hl
041197 CB 11       0708*        rl c
041199 CB 13       0709*        rl e
04119B 7B          0710*        ld a,e
04119C 91          0711*        sub c
04119D 30 04       0712*        jr nc,$+6
04119F 1C          0713*        inc e
0411A0 1C          0714*        inc e
0411A1 2F          0715*        cpl
0411A2 4F          0716*        ld c,a
0411A3             0717*    ; Iteration 6
0411A3 29          0718*        add hl,hl
0411A4 CB 11       0719*        rl c
0411A6 29          0720*        add hl,hl
0411A7 CB 11       0721*        rl c
0411A9 CB 13       0722*        rl e
0411AB 7B          0723*        ld a,e
0411AC 91          0724*        sub c
0411AD 30 04       0725*        jr nc,$+6
0411AF 1C          0726*        inc e
0411B0 1C          0727*        inc e
0411B1 2F          0728*        cpl
0411B2 4F          0729*        ld c,a
0411B3             0730*    ; Iteration 7
0411B3 29          0731*        add hl,hl
0411B4 CB 11       0732*        rl c
0411B6 29          0733*        add hl,hl
0411B7 CB 11       0734*        rl c
0411B9 CB 10       0735*        rl b
0411BB EB          0736*        ex de,hl
0411BC 29          0737*        add hl,hl
0411BD E5          0738*        push hl
0411BE ED 42       0739*        sbc hl,bc
0411C0 30 06       0740*        jr nc,$+8
0411C2 7C          0741*        ld a,h
0411C3 2F          0742*        cpl
0411C4 47          0743*        ld b,a
0411C5 7D          0744*        ld a,l
0411C6 2F          0745*        cpl
0411C7 4F          0746*        ld c,a
0411C8 E1          0747*        pop hl
0411C9 30 02       0748*        jr nc,$+4
0411CB 23          0749*        inc hl
0411CC 23          0750*        inc hl
0411CD EB          0751*        ex de,hl
0411CE             0752*    ; Iteration 8
0411CE 29          0753*        add hl,hl
0411CF 69          0754*        ld l,c
0411D0 60          0755*        ld h,b
0411D1 ED 6A       0756*        adc hl,hl
0411D3 ED 6A       0757*        adc hl,hl
0411D5 EB          0758*        ex de,hl
0411D6 29          0759*        add hl,hl
0411D7 ED 52       0760*        sbc hl,de
0411D9 19          0761*        add hl,de
0411DA EB          0762*        ex de,hl
0411DB 30 04       0763*        jr nc,$+6
0411DD ED 52       0764*        sbc hl,de
0411DF 13          0765*        inc de
0411E0 13          0766*        inc de
0411E1             0767*    ; Iteration 9
0411E1 F1          0768*        pop af
0411E2 17          0769*        rla
0411E3 ED 6A       0770*        adc hl,hl
0411E5 17          0771*        rla
0411E6 ED 6A       0772*        adc hl,hl
0411E8 EB          0773*        ex de,hl
0411E9 29          0774*        add hl,hl
0411EA ED 52       0775*        sbc hl,de
0411EC 19          0776*        add hl,de
0411ED EB          0777*        ex de,hl
0411EE 30 04       0778*        jr nc,$+6
0411F0 ED 52       0779*        sbc hl,de
0411F2 13          0780*        inc de
0411F3 13          0781*        inc de
0411F4             0782*    ; Iteration 10
0411F4 17          0783*        rla
0411F5 ED 6A       0784*        adc hl,hl
0411F7 17          0785*        rla
0411F8 ED 6A       0786*        adc hl,hl
0411FA EB          0787*        ex de,hl
0411FB 29          0788*        add hl,hl
0411FC ED 52       0789*        sbc hl,de
0411FE 19          0790*        add hl,de
0411FF EB          0791*        ex de,hl
041200 30 04       0792*        jr nc,$+6
041202 ED 52       0793*        sbc hl,de
041204 13          0794*        inc de
041205 13          0795*        inc de
041206             0796*    ; Iteration 11
041206 17          0797*        rla
041207 ED 6A       0798*        adc hl,hl
041209 17          0799*        rla
04120A ED 6A       0800*        adc hl,hl
04120C EB          0801*        ex de,hl
04120D 29          0802*        add hl,hl
04120E ED 52       0803*        sbc hl,de
041210 19          0804*        add hl,de
041211 EB          0805*        ex de,hl
041212 30 04       0806*        jr nc,$+6
041214 ED 52       0807*        sbc hl,de
041216 13          0808*        inc de
041217 13          0809*        inc de
041218             0810*    ; Iteration 12
041218 17          0811*        rla
041219 ED 6A       0812*        adc hl,hl
04121B 17          0813*        rla
04121C ED 6A       0814*        adc hl,hl
04121E EB          0815*        ex de,hl
04121F 29          0816*        add hl,hl
041220 ED 52       0817*        sbc hl,de
041222 19          0818*        add hl,de
041223 EB          0819*        ex de,hl
041224 30 04       0820*        jr nc,$+6
041226 ED 52       0821*        sbc hl,de
041228 13          0822*        inc de
041229 13          0823*        inc de
04122A CB 1A       0824*        rr d
04122C CB 1B       0825*        rr e
04122E C9          0826*        ret
04122F             0827*    
04122F             0828*    sin_lut_168:
04122F 00 00 00    0829*        dl 0x000000 ; 0.000 00, 0.000
041232 06 00 00    0830*        dl 0x000006 ; 1.406 01, 0.025
041235 0C 00 00    0831*        dl 0x00000C ; 2.813 02, 0.049
041238 12 00 00    0832*        dl 0x000012 ; 4.219 03, 0.074
04123B 19 00 00    0833*        dl 0x000019 ; 5.625 04, 0.098
04123E 1F 00 00    0834*        dl 0x00001F ; 7.031 05, 0.122
041241 25 00 00    0835*        dl 0x000025 ; 8.438 06, 0.147
041244 2B 00 00    0836*        dl 0x00002B ; 9.844 07, 0.171
041247 31 00 00    0837*        dl 0x000031 ; 11.250 08, 0.195
04124A 38 00 00    0838*        dl 0x000038 ; 12.656 09, 0.219
04124D 3E 00 00    0839*        dl 0x00003E ; 14.063 0A, 0.243
041250 44 00 00    0840*        dl 0x000044 ; 15.469 0B, 0.267
041253 4A 00 00    0841*        dl 0x00004A ; 16.875 0C, 0.290
041256 50 00 00    0842*        dl 0x000050 ; 18.281 0D, 0.314
041259 56 00 00    0843*        dl 0x000056 ; 19.688 0E, 0.337
04125C 5C 00 00    0844*        dl 0x00005C ; 21.094 0F, 0.360
04125F 61 00 00    0845*        dl 0x000061 ; 22.500 10, 0.383
041262 67 00 00    0846*        dl 0x000067 ; 23.906 11, 0.405
041265 6D 00 00    0847*        dl 0x00006D ; 25.313 12, 0.428
041268 73 00 00    0848*        dl 0x000073 ; 26.719 13, 0.450
04126B 78 00 00    0849*        dl 0x000078 ; 28.125 14, 0.471
04126E 7E 00 00    0850*        dl 0x00007E ; 29.531 15, 0.493
041271 83 00 00    0851*        dl 0x000083 ; 30.938 16, 0.514
041274 88 00 00    0852*        dl 0x000088 ; 32.344 17, 0.535
041277 8E 00 00    0853*        dl 0x00008E ; 33.750 18, 0.556
04127A 93 00 00    0854*        dl 0x000093 ; 35.156 19, 0.576
04127D 98 00 00    0855*        dl 0x000098 ; 36.563 1A, 0.596
041280 9D 00 00    0856*        dl 0x00009D ; 37.969 1B, 0.615
041283 A2 00 00    0857*        dl 0x0000A2 ; 39.375 1C, 0.634
041286 A7 00 00    0858*        dl 0x0000A7 ; 40.781 1D, 0.653
041289 AB 00 00    0859*        dl 0x0000AB ; 42.188 1E, 0.672
04128C B0 00 00    0860*        dl 0x0000B0 ; 43.594 1F, 0.690
04128F B5 00 00    0861*        dl 0x0000B5 ; 45.000 20, 0.707
041292 B9 00 00    0862*        dl 0x0000B9 ; 46.406 21, 0.724
041295 BD 00 00    0863*        dl 0x0000BD ; 47.813 22, 0.741
041298 C1 00 00    0864*        dl 0x0000C1 ; 49.219 23, 0.757
04129B C5 00 00    0865*        dl 0x0000C5 ; 50.625 24, 0.773
04129E C9 00 00    0866*        dl 0x0000C9 ; 52.031 25, 0.788
0412A1 CD 00 00    0867*        dl 0x0000CD ; 53.438 26, 0.803
0412A4 D1 00 00    0868*        dl 0x0000D1 ; 54.844 27, 0.818
0412A7 D4 00 00    0869*        dl 0x0000D4 ; 56.250 28, 0.831
0412AA D8 00 00    0870*        dl 0x0000D8 ; 57.656 29, 0.845
0412AD DB 00 00    0871*        dl 0x0000DB ; 59.063 2A, 0.858
0412B0 DE 00 00    0872*        dl 0x0000DE ; 60.469 2B, 0.870
0412B3 E1 00 00    0873*        dl 0x0000E1 ; 61.875 2C, 0.882
0412B6 E4 00 00    0874*        dl 0x0000E4 ; 63.281 2D, 0.893
0412B9 E7 00 00    0875*        dl 0x0000E7 ; 64.688 2E, 0.904
0412BC EA 00 00    0876*        dl 0x0000EA ; 66.094 2F, 0.914
0412BF EC 00 00    0877*        dl 0x0000EC ; 67.500 30, 0.924
0412C2 EE 00 00    0878*        dl 0x0000EE ; 68.906 31, 0.933
0412C5 F1 00 00    0879*        dl 0x0000F1 ; 70.313 32, 0.942
0412C8 F3 00 00    0880*        dl 0x0000F3 ; 71.719 33, 0.950
0412CB F4 00 00    0881*        dl 0x0000F4 ; 73.125 34, 0.957
0412CE F6 00 00    0882*        dl 0x0000F6 ; 74.531 35, 0.964
0412D1 F8 00 00    0883*        dl 0x0000F8 ; 75.938 36, 0.970
0412D4 F9 00 00    0884*        dl 0x0000F9 ; 77.344 37, 0.976
0412D7 FB 00 00    0885*        dl 0x0000FB ; 78.750 38, 0.981
0412DA FC 00 00    0886*        dl 0x0000FC ; 80.156 39, 0.985
0412DD FD 00 00    0887*        dl 0x0000FD ; 81.563 3A, 0.989
0412E0 FE 00 00    0888*        dl 0x0000FE ; 82.969 3B, 0.992
0412E3 FE 00 00    0889*        dl 0x0000FE ; 84.375 3C, 0.995
0412E6 FF 00 00    0890*        dl 0x0000FF ; 85.781 3D, 0.997
0412E9 FF 00 00    0891*        dl 0x0000FF ; 87.188 3E, 0.999
0412EC FF 00 00    0892*        dl 0x0000FF ; 88.594 3F, 1.000
0412EF 00 01 00    0893*        dl 0x000100 ; 90.000 40, 1.000
0412F2 FF 00 00    0894*        dl 0x0000FF ; 91.406 41, 1.000
0412F5 FF 00 00    0895*        dl 0x0000FF ; 92.813 42, 0.999
0412F8 FF 00 00    0896*        dl 0x0000FF ; 94.219 43, 0.997
0412FB FE 00 00    0897*        dl 0x0000FE ; 95.625 44, 0.995
0412FE FE 00 00    0898*        dl 0x0000FE ; 97.031 45, 0.992
041301 FD 00 00    0899*        dl 0x0000FD ; 98.438 46, 0.989
041304 FC 00 00    0900*        dl 0x0000FC ; 99.844 47, 0.985
041307 FB 00 00    0901*        dl 0x0000FB ; 101.250 48, 0.981
04130A F9 00 00    0902*        dl 0x0000F9 ; 102.656 49, 0.976
04130D F8 00 00    0903*        dl 0x0000F8 ; 104.063 4A, 0.970
041310 F6 00 00    0904*        dl 0x0000F6 ; 105.469 4B, 0.964
041313 F4 00 00    0905*        dl 0x0000F4 ; 106.875 4C, 0.957
041316 F3 00 00    0906*        dl 0x0000F3 ; 108.281 4D, 0.950
041319 F1 00 00    0907*        dl 0x0000F1 ; 109.688 4E, 0.942
04131C EE 00 00    0908*        dl 0x0000EE ; 111.094 4F, 0.933
04131F EC 00 00    0909*        dl 0x0000EC ; 112.500 50, 0.924
041322 EA 00 00    0910*        dl 0x0000EA ; 113.906 51, 0.914
041325 E7 00 00    0911*        dl 0x0000E7 ; 115.313 52, 0.904
041328 E4 00 00    0912*        dl 0x0000E4 ; 116.719 53, 0.893
04132B E1 00 00    0913*        dl 0x0000E1 ; 118.125 54, 0.882
04132E DE 00 00    0914*        dl 0x0000DE ; 119.531 55, 0.870
041331 DB 00 00    0915*        dl 0x0000DB ; 120.938 56, 0.858
041334 D8 00 00    0916*        dl 0x0000D8 ; 122.344 57, 0.845
041337 D4 00 00    0917*        dl 0x0000D4 ; 123.750 58, 0.831
04133A D1 00 00    0918*        dl 0x0000D1 ; 125.156 59, 0.818
04133D CD 00 00    0919*        dl 0x0000CD ; 126.563 5A, 0.803
041340 C9 00 00    0920*        dl 0x0000C9 ; 127.969 5B, 0.788
041343 C5 00 00    0921*        dl 0x0000C5 ; 129.375 5C, 0.773
041346 C1 00 00    0922*        dl 0x0000C1 ; 130.781 5D, 0.757
041349 BD 00 00    0923*        dl 0x0000BD ; 132.188 5E, 0.741
04134C B9 00 00    0924*        dl 0x0000B9 ; 133.594 5F, 0.724
04134F B5 00 00    0925*        dl 0x0000B5 ; 135.000 60, 0.707
041352 B0 00 00    0926*        dl 0x0000B0 ; 136.406 61, 0.690
041355 AB 00 00    0927*        dl 0x0000AB ; 137.813 62, 0.672
041358 A7 00 00    0928*        dl 0x0000A7 ; 139.219 63, 0.653
04135B A2 00 00    0929*        dl 0x0000A2 ; 140.625 64, 0.634
04135E 9D 00 00    0930*        dl 0x00009D ; 142.031 65, 0.615
041361 98 00 00    0931*        dl 0x000098 ; 143.438 66, 0.596
041364 93 00 00    0932*        dl 0x000093 ; 144.844 67, 0.576
041367 8E 00 00    0933*        dl 0x00008E ; 146.250 68, 0.556
04136A 88 00 00    0934*        dl 0x000088 ; 147.656 69, 0.535
04136D 83 00 00    0935*        dl 0x000083 ; 149.063 6A, 0.514
041370 7E 00 00    0936*        dl 0x00007E ; 150.469 6B, 0.493
041373 78 00 00    0937*        dl 0x000078 ; 151.875 6C, 0.471
041376 73 00 00    0938*        dl 0x000073 ; 153.281 6D, 0.450
041379 6D 00 00    0939*        dl 0x00006D ; 154.688 6E, 0.428
04137C 67 00 00    0940*        dl 0x000067 ; 156.094 6F, 0.405
04137F 61 00 00    0941*        dl 0x000061 ; 157.500 70, 0.383
041382 5C 00 00    0942*        dl 0x00005C ; 158.906 71, 0.360
041385 56 00 00    0943*        dl 0x000056 ; 160.313 72, 0.337
041388 50 00 00    0944*        dl 0x000050 ; 161.719 73, 0.314
04138B 4A 00 00    0945*        dl 0x00004A ; 163.125 74, 0.290
04138E 44 00 00    0946*        dl 0x000044 ; 164.531 75, 0.267
041391 3E 00 00    0947*        dl 0x00003E ; 165.938 76, 0.243
041394 38 00 00    0948*        dl 0x000038 ; 167.344 77, 0.219
041397 31 00 00    0949*        dl 0x000031 ; 168.750 78, 0.195
04139A 2B 00 00    0950*        dl 0x00002B ; 170.156 79, 0.171
04139D 25 00 00    0951*        dl 0x000025 ; 171.563 7A, 0.147
0413A0 1F 00 00    0952*        dl 0x00001F ; 172.969 7B, 0.122
0413A3 19 00 00    0953*        dl 0x000019 ; 174.375 7C, 0.098
0413A6 12 00 00    0954*        dl 0x000012 ; 175.781 7D, 0.074
0413A9 0C 00 00    0955*        dl 0x00000C ; 177.188 7E, 0.049
0413AC 06 00 00    0956*        dl 0x000006 ; 178.594 7F, 0.025
0413AF 00 00 00    0957*        dl 0x000000 ; 180.000 80, 0.000
0413B2 FA FF FF    0958*        dl 0xFFFFFA ; 181.406 81, -0.025
0413B5 F4 FF FF    0959*        dl 0xFFFFF4 ; 182.813 82, -0.049
0413B8 EE FF FF    0960*        dl 0xFFFFEE ; 184.219 83, -0.074
0413BB E7 FF FF    0961*        dl 0xFFFFE7 ; 185.625 84, -0.098
0413BE E1 FF FF    0962*        dl 0xFFFFE1 ; 187.031 85, -0.122
0413C1 DB FF FF    0963*        dl 0xFFFFDB ; 188.438 86, -0.147
0413C4 D5 FF FF    0964*        dl 0xFFFFD5 ; 189.844 87, -0.171
0413C7 CF FF FF    0965*        dl 0xFFFFCF ; 191.250 88, -0.195
0413CA C8 FF FF    0966*        dl 0xFFFFC8 ; 192.656 89, -0.219
0413CD C2 FF FF    0967*        dl 0xFFFFC2 ; 194.063 8A, -0.243
0413D0 BC FF FF    0968*        dl 0xFFFFBC ; 195.469 8B, -0.267
0413D3 B6 FF FF    0969*        dl 0xFFFFB6 ; 196.875 8C, -0.290
0413D6 B0 FF FF    0970*        dl 0xFFFFB0 ; 198.281 8D, -0.314
0413D9 AA FF FF    0971*        dl 0xFFFFAA ; 199.688 8E, -0.337
0413DC A4 FF FF    0972*        dl 0xFFFFA4 ; 201.094 8F, -0.360
0413DF 9F FF FF    0973*        dl 0xFFFF9F ; 202.500 90, -0.383
0413E2 99 FF FF    0974*        dl 0xFFFF99 ; 203.906 91, -0.405
0413E5 93 FF FF    0975*        dl 0xFFFF93 ; 205.313 92, -0.428
0413E8 8D FF FF    0976*        dl 0xFFFF8D ; 206.719 93, -0.450
0413EB 88 FF FF    0977*        dl 0xFFFF88 ; 208.125 94, -0.471
0413EE 82 FF FF    0978*        dl 0xFFFF82 ; 209.531 95, -0.493
0413F1 7D FF FF    0979*        dl 0xFFFF7D ; 210.938 96, -0.514
0413F4 78 FF FF    0980*        dl 0xFFFF78 ; 212.344 97, -0.535
0413F7 72 FF FF    0981*        dl 0xFFFF72 ; 213.750 98, -0.556
0413FA 6D FF FF    0982*        dl 0xFFFF6D ; 215.156 99, -0.576
0413FD 68 FF FF    0983*        dl 0xFFFF68 ; 216.563 9A, -0.596
041400 63 FF FF    0984*        dl 0xFFFF63 ; 217.969 9B, -0.615
041403 5E FF FF    0985*        dl 0xFFFF5E ; 219.375 9C, -0.634
041406 59 FF FF    0986*        dl 0xFFFF59 ; 220.781 9D, -0.653
041409 55 FF FF    0987*        dl 0xFFFF55 ; 222.188 9E, -0.672
04140C 50 FF FF    0988*        dl 0xFFFF50 ; 223.594 9F, -0.690
04140F 4B FF FF    0989*        dl 0xFFFF4B ; 225.000 A0, -0.707
041412 47 FF FF    0990*        dl 0xFFFF47 ; 226.406 A1, -0.724
041415 43 FF FF    0991*        dl 0xFFFF43 ; 227.813 A2, -0.741
041418 3F FF FF    0992*        dl 0xFFFF3F ; 229.219 A3, -0.757
04141B 3B FF FF    0993*        dl 0xFFFF3B ; 230.625 A4, -0.773
04141E 37 FF FF    0994*        dl 0xFFFF37 ; 232.031 A5, -0.788
041421 33 FF FF    0995*        dl 0xFFFF33 ; 233.438 A6, -0.803
041424 2F FF FF    0996*        dl 0xFFFF2F ; 234.844 A7, -0.818
041427 2C FF FF    0997*        dl 0xFFFF2C ; 236.250 A8, -0.831
04142A 28 FF FF    0998*        dl 0xFFFF28 ; 237.656 A9, -0.845
04142D 25 FF FF    0999*        dl 0xFFFF25 ; 239.063 AA, -0.858
041430 22 FF FF    1000*        dl 0xFFFF22 ; 240.469 AB, -0.870
041433 1F FF FF    1001*        dl 0xFFFF1F ; 241.875 AC, -0.882
041436 1C FF FF    1002*        dl 0xFFFF1C ; 243.281 AD, -0.893
041439 19 FF FF    1003*        dl 0xFFFF19 ; 244.688 AE, -0.904
04143C 16 FF FF    1004*        dl 0xFFFF16 ; 246.094 AF, -0.914
04143F 14 FF FF    1005*        dl 0xFFFF14 ; 247.500 B0, -0.924
041442 12 FF FF    1006*        dl 0xFFFF12 ; 248.906 B1, -0.933
041445 0F FF FF    1007*        dl 0xFFFF0F ; 250.313 B2, -0.942
041448 0D FF FF    1008*        dl 0xFFFF0D ; 251.719 B3, -0.950
04144B 0C FF FF    1009*        dl 0xFFFF0C ; 253.125 B4, -0.957
04144E 0A FF FF    1010*        dl 0xFFFF0A ; 254.531 B5, -0.964
041451 08 FF FF    1011*        dl 0xFFFF08 ; 255.938 B6, -0.970
041454 07 FF FF    1012*        dl 0xFFFF07 ; 257.344 B7, -0.976
041457 05 FF FF    1013*        dl 0xFFFF05 ; 258.750 B8, -0.981
04145A 04 FF FF    1014*        dl 0xFFFF04 ; 260.156 B9, -0.985
04145D 03 FF FF    1015*        dl 0xFFFF03 ; 261.563 BA, -0.989
041460 02 FF FF    1016*        dl 0xFFFF02 ; 262.969 BB, -0.992
041463 02 FF FF    1017*        dl 0xFFFF02 ; 264.375 BC, -0.995
041466 01 FF FF    1018*        dl 0xFFFF01 ; 265.781 BD, -0.997
041469 01 FF FF    1019*        dl 0xFFFF01 ; 267.188 BE, -0.999
04146C 01 FF FF    1020*        dl 0xFFFF01 ; 268.594 BF, -1.000
04146F 00 FF FF    1021*        dl 0xFFFF00 ; 270.000 C0, -1.000
041472 01 FF FF    1022*        dl 0xFFFF01 ; 271.406 C1, -1.000
041475 01 FF FF    1023*        dl 0xFFFF01 ; 272.813 C2, -0.999
041478 01 FF FF    1024*        dl 0xFFFF01 ; 274.219 C3, -0.997
04147B 02 FF FF    1025*        dl 0xFFFF02 ; 275.625 C4, -0.995
04147E 02 FF FF    1026*        dl 0xFFFF02 ; 277.031 C5, -0.992
041481 03 FF FF    1027*        dl 0xFFFF03 ; 278.438 C6, -0.989
041484 04 FF FF    1028*        dl 0xFFFF04 ; 279.844 C7, -0.985
041487 05 FF FF    1029*        dl 0xFFFF05 ; 281.250 C8, -0.981
04148A 07 FF FF    1030*        dl 0xFFFF07 ; 282.656 C9, -0.976
04148D 08 FF FF    1031*        dl 0xFFFF08 ; 284.063 CA, -0.970
041490 0A FF FF    1032*        dl 0xFFFF0A ; 285.469 CB, -0.964
041493 0C FF FF    1033*        dl 0xFFFF0C ; 286.875 CC, -0.957
041496 0D FF FF    1034*        dl 0xFFFF0D ; 288.281 CD, -0.950
041499 0F FF FF    1035*        dl 0xFFFF0F ; 289.688 CE, -0.942
04149C 12 FF FF    1036*        dl 0xFFFF12 ; 291.094 CF, -0.933
04149F 14 FF FF    1037*        dl 0xFFFF14 ; 292.500 D0, -0.924
0414A2 16 FF FF    1038*        dl 0xFFFF16 ; 293.906 D1, -0.914
0414A5 19 FF FF    1039*        dl 0xFFFF19 ; 295.313 D2, -0.904
0414A8 1C FF FF    1040*        dl 0xFFFF1C ; 296.719 D3, -0.893
0414AB 1F FF FF    1041*        dl 0xFFFF1F ; 298.125 D4, -0.882
0414AE 22 FF FF    1042*        dl 0xFFFF22 ; 299.531 D5, -0.870
0414B1 25 FF FF    1043*        dl 0xFFFF25 ; 300.938 D6, -0.858
0414B4 28 FF FF    1044*        dl 0xFFFF28 ; 302.344 D7, -0.845
0414B7 2C FF FF    1045*        dl 0xFFFF2C ; 303.750 D8, -0.831
0414BA 2F FF FF    1046*        dl 0xFFFF2F ; 305.156 D9, -0.818
0414BD 33 FF FF    1047*        dl 0xFFFF33 ; 306.563 DA, -0.803
0414C0 37 FF FF    1048*        dl 0xFFFF37 ; 307.969 DB, -0.788
0414C3 3B FF FF    1049*        dl 0xFFFF3B ; 309.375 DC, -0.773
0414C6 3F FF FF    1050*        dl 0xFFFF3F ; 310.781 DD, -0.757
0414C9 43 FF FF    1051*        dl 0xFFFF43 ; 312.188 DE, -0.741
0414CC 47 FF FF    1052*        dl 0xFFFF47 ; 313.594 DF, -0.724
0414CF 4B FF FF    1053*        dl 0xFFFF4B ; 315.000 E0, -0.707
0414D2 50 FF FF    1054*        dl 0xFFFF50 ; 316.406 E1, -0.690
0414D5 55 FF FF    1055*        dl 0xFFFF55 ; 317.813 E2, -0.672
0414D8 59 FF FF    1056*        dl 0xFFFF59 ; 319.219 E3, -0.653
0414DB 5E FF FF    1057*        dl 0xFFFF5E ; 320.625 E4, -0.634
0414DE 63 FF FF    1058*        dl 0xFFFF63 ; 322.031 E5, -0.615
0414E1 68 FF FF    1059*        dl 0xFFFF68 ; 323.438 E6, -0.596
0414E4 6D FF FF    1060*        dl 0xFFFF6D ; 324.844 E7, -0.576
0414E7 72 FF FF    1061*        dl 0xFFFF72 ; 326.250 E8, -0.556
0414EA 78 FF FF    1062*        dl 0xFFFF78 ; 327.656 E9, -0.535
0414ED 7D FF FF    1063*        dl 0xFFFF7D ; 329.063 EA, -0.514
0414F0 82 FF FF    1064*        dl 0xFFFF82 ; 330.469 EB, -0.493
0414F3 88 FF FF    1065*        dl 0xFFFF88 ; 331.875 EC, -0.471
0414F6 8D FF FF    1066*        dl 0xFFFF8D ; 333.281 ED, -0.450
0414F9 93 FF FF    1067*        dl 0xFFFF93 ; 334.688 EE, -0.428
0414FC 99 FF FF    1068*        dl 0xFFFF99 ; 336.094 EF, -0.405
0414FF 9F FF FF    1069*        dl 0xFFFF9F ; 337.500 F0, -0.383
041502 A4 FF FF    1070*        dl 0xFFFFA4 ; 338.906 F1, -0.360
041505 AA FF FF    1071*        dl 0xFFFFAA ; 340.313 F2, -0.337
041508 B0 FF FF    1072*        dl 0xFFFFB0 ; 341.719 F3, -0.314
04150B B6 FF FF    1073*        dl 0xFFFFB6 ; 343.125 F4, -0.290
04150E BC FF FF    1074*        dl 0xFFFFBC ; 344.531 F5, -0.267
041511 C2 FF FF    1075*        dl 0xFFFFC2 ; 345.938 F6, -0.243
041514 C8 FF FF    1076*        dl 0xFFFFC8 ; 347.344 F7, -0.219
041517 CF FF FF    1077*        dl 0xFFFFCF ; 348.750 F8, -0.195
04151A D5 FF FF    1078*        dl 0xFFFFD5 ; 350.156 F9, -0.171
04151D DB FF FF    1079*        dl 0xFFFFDB ; 351.563 FA, -0.147
041520 E1 FF FF    1080*        dl 0xFFFFE1 ; 352.969 FB, -0.122
041523 E7 FF FF    1081*        dl 0xFFFFE7 ; 354.375 FC, -0.098
041526 EE FF FF    1082*        dl 0xFFFFEE ; 355.781 FD, -0.074
041529 F4 FF FF    1083*        dl 0xFFFFF4 ; 357.188 FE, -0.049
04152C FA FF FF    1084*        dl 0xFFFFFA ; 358.594 FF, -0.025
04152F 00 00 00    1085*        dl 0x000000 ; 0.000 00, 0.000 for interpolation
041532             1086*    
041532             1087*    atan_lut_168:
041532 00 00 00    1088*        dl 0x000000 ; 000000, 0.000
041535 28 00 00    1089*        dl 0x000028 ; 000001, 0.224
041538 51 00 00    1090*        dl 0x000051 ; 000002, 0.448
04153B 7A 00 00    1091*        dl 0x00007A ; 000003, 0.671
04153E A2 00 00    1092*        dl 0x0000A2 ; 000004, 0.895
041541 CB 00 00    1093*        dl 0x0000CB ; 000005, 1.119
041544 F4 00 00    1094*        dl 0x0000F4 ; 000006, 1.343
041547 1D 01 00    1095*        dl 0x00011D ; 000007, 1.566
04154A 45 01 00    1096*        dl 0x000145 ; 000008, 1.790
04154D 6E 01 00    1097*        dl 0x00016E ; 000009, 2.013
041550 97 01 00    1098*        dl 0x000197 ; 00000A, 2.237
041553 BF 01 00    1099*        dl 0x0001BF ; 00000B, 2.460
041556 E8 01 00    1100*        dl 0x0001E8 ; 00000C, 2.684
041559 11 02 00    1101*        dl 0x000211 ; 00000D, 2.907
04155C 39 02 00    1102*        dl 0x000239 ; 00000E, 3.130
04155F 62 02 00    1103*        dl 0x000262 ; 00000F, 3.353
041562 8B 02 00    1104*        dl 0x00028B ; 000010, 3.576
041565 B3 02 00    1105*        dl 0x0002B3 ; 000011, 3.799
041568 DC 02 00    1106*        dl 0x0002DC ; 000012, 4.022
04156B 04 03 00    1107*        dl 0x000304 ; 000013, 4.245
04156E 2D 03 00    1108*        dl 0x00032D ; 000014, 4.467
041571 55 03 00    1109*        dl 0x000355 ; 000015, 4.690
041574 7E 03 00    1110*        dl 0x00037E ; 000016, 4.912
041577 A6 03 00    1111*        dl 0x0003A6 ; 000017, 5.134
04157A CE 03 00    1112*        dl 0x0003CE ; 000018, 5.356
04157D F7 03 00    1113*        dl 0x0003F7 ; 000019, 5.578
041580 1F 04 00    1114*        dl 0x00041F ; 00001A, 5.799
041583 48 04 00    1115*        dl 0x000448 ; 00001B, 6.021
041586 70 04 00    1116*        dl 0x000470 ; 00001C, 6.242
041589 98 04 00    1117*        dl 0x000498 ; 00001D, 6.463
04158C C0 04 00    1118*        dl 0x0004C0 ; 00001E, 6.684
04158F E8 04 00    1119*        dl 0x0004E8 ; 00001F, 6.905
041592 11 05 00    1120*        dl 0x000511 ; 000020, 7.125
041595 39 05 00    1121*        dl 0x000539 ; 000021, 7.345
041598 61 05 00    1122*        dl 0x000561 ; 000022, 7.565
04159B 89 05 00    1123*        dl 0x000589 ; 000023, 7.785
04159E B1 05 00    1124*        dl 0x0005B1 ; 000024, 8.005
0415A1 D9 05 00    1125*        dl 0x0005D9 ; 000025, 8.224
0415A4 01 06 00    1126*        dl 0x000601 ; 000026, 8.443
0415A7 28 06 00    1127*        dl 0x000628 ; 000027, 8.662
0415AA 50 06 00    1128*        dl 0x000650 ; 000028, 8.881
0415AD 78 06 00    1129*        dl 0x000678 ; 000029, 9.099
0415B0 A0 06 00    1130*        dl 0x0006A0 ; 00002A, 9.317
0415B3 C7 06 00    1131*        dl 0x0006C7 ; 00002B, 9.535
0415B6 EF 06 00    1132*        dl 0x0006EF ; 00002C, 9.752
0415B9 16 07 00    1133*        dl 0x000716 ; 00002D, 9.970
0415BC 3E 07 00    1134*        dl 0x00073E ; 00002E, 10.187
0415BF 65 07 00    1135*        dl 0x000765 ; 00002F, 10.403
0415C2 8D 07 00    1136*        dl 0x00078D ; 000030, 10.620
0415C5 B4 07 00    1137*        dl 0x0007B4 ; 000031, 10.836
0415C8 DB 07 00    1138*        dl 0x0007DB ; 000032, 11.051
0415CB 03 08 00    1139*        dl 0x000803 ; 000033, 11.267
0415CE 2A 08 00    1140*        dl 0x00082A ; 000034, 11.482
0415D1 51 08 00    1141*        dl 0x000851 ; 000035, 11.697
0415D4 78 08 00    1142*        dl 0x000878 ; 000036, 11.911
0415D7 9F 08 00    1143*        dl 0x00089F ; 000037, 12.125
0415DA C6 08 00    1144*        dl 0x0008C6 ; 000038, 12.339
0415DD ED 08 00    1145*        dl 0x0008ED ; 000039, 12.553
0415E0 13 09 00    1146*        dl 0x000913 ; 00003A, 12.766
0415E3 3A 09 00    1147*        dl 0x00093A ; 00003B, 12.978
0415E6 61 09 00    1148*        dl 0x000961 ; 00003C, 13.191
0415E9 87 09 00    1149*        dl 0x000987 ; 00003D, 13.403
0415EC AE 09 00    1150*        dl 0x0009AE ; 00003E, 13.614
0415EF D4 09 00    1151*        dl 0x0009D4 ; 00003F, 13.825
0415F2 FB 09 00    1152*        dl 0x0009FB ; 000040, 14.036
0415F5 21 0A 00    1153*        dl 0x000A21 ; 000041, 14.247
0415F8 47 0A 00    1154*        dl 0x000A47 ; 000042, 14.457
0415FB 6D 0A 00    1155*        dl 0x000A6D ; 000043, 14.666
0415FE 94 0A 00    1156*        dl 0x000A94 ; 000044, 14.876
041601 BA 0A 00    1157*        dl 0x000ABA ; 000045, 15.085
041604 E0 0A 00    1158*        dl 0x000AE0 ; 000046, 15.293
041607 05 0B 00    1159*        dl 0x000B05 ; 000047, 15.501
04160A 2B 0B 00    1160*        dl 0x000B2B ; 000048, 15.709
04160D 51 0B 00    1161*        dl 0x000B51 ; 000049, 15.916
041610 77 0B 00    1162*        dl 0x000B77 ; 00004A, 16.123
041613 9C 0B 00    1163*        dl 0x000B9C ; 00004B, 16.329
041616 C2 0B 00    1164*        dl 0x000BC2 ; 00004C, 16.535
041619 E7 0B 00    1165*        dl 0x000BE7 ; 00004D, 16.740
04161C 0C 0C 00    1166*        dl 0x000C0C ; 00004E, 16.945
04161F 32 0C 00    1167*        dl 0x000C32 ; 00004F, 17.150
041622 57 0C 00    1168*        dl 0x000C57 ; 000050, 17.354
041625 7C 0C 00    1169*        dl 0x000C7C ; 000051, 17.558
041628 A1 0C 00    1170*        dl 0x000CA1 ; 000052, 17.761
04162B C6 0C 00    1171*        dl 0x000CC6 ; 000053, 17.964
04162E EB 0C 00    1172*        dl 0x000CEB ; 000054, 18.166
041631 0F 0D 00    1173*        dl 0x000D0F ; 000055, 18.368
041634 34 0D 00    1174*        dl 0x000D34 ; 000056, 18.569
041637 58 0D 00    1175*        dl 0x000D58 ; 000057, 18.770
04163A 7D 0D 00    1176*        dl 0x000D7D ; 000058, 18.970
04163D A1 0D 00    1177*        dl 0x000DA1 ; 000059, 19.170
041640 C6 0D 00    1178*        dl 0x000DC6 ; 00005A, 19.370
041643 EA 0D 00    1179*        dl 0x000DEA ; 00005B, 19.569
041646 0E 0E 00    1180*        dl 0x000E0E ; 00005C, 19.767
041649 32 0E 00    1181*        dl 0x000E32 ; 00005D, 19.965
04164C 56 0E 00    1182*        dl 0x000E56 ; 00005E, 20.163
04164F 7A 0E 00    1183*        dl 0x000E7A ; 00005F, 20.360
041652 9E 0E 00    1184*        dl 0x000E9E ; 000060, 20.556
041655 C1 0E 00    1185*        dl 0x000EC1 ; 000061, 20.752
041658 E5 0E 00    1186*        dl 0x000EE5 ; 000062, 20.947
04165B 08 0F 00    1187*        dl 0x000F08 ; 000063, 21.142
04165E 2C 0F 00    1188*        dl 0x000F2C ; 000064, 21.337
041661 4F 0F 00    1189*        dl 0x000F4F ; 000065, 21.531
041664 72 0F 00    1190*        dl 0x000F72 ; 000066, 21.724
041667 95 0F 00    1191*        dl 0x000F95 ; 000067, 21.917
04166A B8 0F 00    1192*        dl 0x000FB8 ; 000068, 22.109
04166D DB 0F 00    1193*        dl 0x000FDB ; 000069, 22.301
041670 FE 0F 00    1194*        dl 0x000FFE ; 00006A, 22.493
041673 21 10 00    1195*        dl 0x001021 ; 00006B, 22.683
041676 44 10 00    1196*        dl 0x001044 ; 00006C, 22.874
041679 66 10 00    1197*        dl 0x001066 ; 00006D, 23.063
04167C 89 10 00    1198*        dl 0x001089 ; 00006E, 23.253
04167F AB 10 00    1199*        dl 0x0010AB ; 00006F, 23.441
041682 CD 10 00    1200*        dl 0x0010CD ; 000070, 23.629
041685 EF 10 00    1201*        dl 0x0010EF ; 000071, 23.817
041688 11 11 00    1202*        dl 0x001111 ; 000072, 24.004
04168B 33 11 00    1203*        dl 0x001133 ; 000073, 24.191
04168E 55 11 00    1204*        dl 0x001155 ; 000074, 24.376
041691 77 11 00    1205*        dl 0x001177 ; 000075, 24.562
041694 99 11 00    1206*        dl 0x001199 ; 000076, 24.747
041697 BA 11 00    1207*        dl 0x0011BA ; 000077, 24.931
04169A DC 11 00    1208*        dl 0x0011DC ; 000078, 25.115
04169D FD 11 00    1209*        dl 0x0011FD ; 000079, 25.298
0416A0 1E 12 00    1210*        dl 0x00121E ; 00007A, 25.481
0416A3 3F 12 00    1211*        dl 0x00123F ; 00007B, 25.663
0416A6 60 12 00    1212*        dl 0x001260 ; 00007C, 25.844
0416A9 81 12 00    1213*        dl 0x001281 ; 00007D, 26.025
0416AC A2 12 00    1214*        dl 0x0012A2 ; 00007E, 26.206
0416AF C3 12 00    1215*        dl 0x0012C3 ; 00007F, 26.386
0416B2 E4 12 00    1216*        dl 0x0012E4 ; 000080, 26.565
0416B5 04 13 00    1217*        dl 0x001304 ; 000081, 26.744
0416B8 25 13 00    1218*        dl 0x001325 ; 000082, 26.922
0416BB 45 13 00    1219*        dl 0x001345 ; 000083, 27.100
0416BE 65 13 00    1220*        dl 0x001365 ; 000084, 27.277
0416C1 85 13 00    1221*        dl 0x001385 ; 000085, 27.453
0416C4 A5 13 00    1222*        dl 0x0013A5 ; 000086, 27.629
0416C7 C5 13 00    1223*        dl 0x0013C5 ; 000087, 27.805
0416CA E5 13 00    1224*        dl 0x0013E5 ; 000088, 27.979
0416CD 05 14 00    1225*        dl 0x001405 ; 000089, 28.154
0416D0 24 14 00    1226*        dl 0x001424 ; 00008A, 28.327
0416D3 44 14 00    1227*        dl 0x001444 ; 00008B, 28.501
0416D6 63 14 00    1228*        dl 0x001463 ; 00008C, 28.673
0416D9 83 14 00    1229*        dl 0x001483 ; 00008D, 28.845
0416DC A2 14 00    1230*        dl 0x0014A2 ; 00008E, 29.017
0416DF C1 14 00    1231*        dl 0x0014C1 ; 00008F, 29.187
0416E2 E0 14 00    1232*        dl 0x0014E0 ; 000090, 29.358
0416E5 FF 14 00    1233*        dl 0x0014FF ; 000091, 29.527
0416E8 1E 15 00    1234*        dl 0x00151E ; 000092, 29.697
0416EB 3C 15 00    1235*        dl 0x00153C ; 000093, 29.865
0416EE 5B 15 00    1236*        dl 0x00155B ; 000094, 30.033
0416F1 79 15 00    1237*        dl 0x001579 ; 000095, 30.201
0416F4 98 15 00    1238*        dl 0x001598 ; 000096, 30.368
0416F7 B6 15 00    1239*        dl 0x0015B6 ; 000097, 30.534
0416FA D4 15 00    1240*        dl 0x0015D4 ; 000098, 30.700
0416FD F2 15 00    1241*        dl 0x0015F2 ; 000099, 30.865
041700 10 16 00    1242*        dl 0x001610 ; 00009A, 31.030
041703 2E 16 00    1243*        dl 0x00162E ; 00009B, 31.194
041706 4C 16 00    1244*        dl 0x00164C ; 00009C, 31.357
041709 6A 16 00    1245*        dl 0x00166A ; 00009D, 31.520
04170C 87 16 00    1246*        dl 0x001687 ; 00009E, 31.682
04170F A5 16 00    1247*        dl 0x0016A5 ; 00009F, 31.844
041712 C2 16 00    1248*        dl 0x0016C2 ; 0000A0, 32.005
041715 DF 16 00    1249*        dl 0x0016DF ; 0000A1, 32.166
041718 FC 16 00    1250*        dl 0x0016FC ; 0000A2, 32.326
04171B 19 17 00    1251*        dl 0x001719 ; 0000A3, 32.486
04171E 36 17 00    1252*        dl 0x001736 ; 0000A4, 32.645
041721 53 17 00    1253*        dl 0x001753 ; 0000A5, 32.803
041724 70 17 00    1254*        dl 0x001770 ; 0000A6, 32.961
041727 8C 17 00    1255*        dl 0x00178C ; 0000A7, 33.118
04172A A9 17 00    1256*        dl 0x0017A9 ; 0000A8, 33.275
04172D C5 17 00    1257*        dl 0x0017C5 ; 0000A9, 33.431
041730 E2 17 00    1258*        dl 0x0017E2 ; 0000AA, 33.587
041733 FE 17 00    1259*        dl 0x0017FE ; 0000AB, 33.742
041736 1A 18 00    1260*        dl 0x00181A ; 0000AC, 33.896
041739 36 18 00    1261*        dl 0x001836 ; 0000AD, 34.050
04173C 52 18 00    1262*        dl 0x001852 ; 0000AE, 34.203
04173F 6E 18 00    1263*        dl 0x00186E ; 0000AF, 34.356
041742 8A 18 00    1264*        dl 0x00188A ; 0000B0, 34.509
041745 A5 18 00    1265*        dl 0x0018A5 ; 0000B1, 34.660
041748 C1 18 00    1266*        dl 0x0018C1 ; 0000B2, 34.811
04174B DC 18 00    1267*        dl 0x0018DC ; 0000B3, 34.962
04174E F7 18 00    1268*        dl 0x0018F7 ; 0000B4, 35.112
041751 13 19 00    1269*        dl 0x001913 ; 0000B5, 35.262
041754 2E 19 00    1270*        dl 0x00192E ; 0000B6, 35.410
041757 49 19 00    1271*        dl 0x001949 ; 0000B7, 35.559
04175A 64 19 00    1272*        dl 0x001964 ; 0000B8, 35.707
04175D 7F 19 00    1273*        dl 0x00197F ; 0000B9, 35.854
041760 99 19 00    1274*        dl 0x001999 ; 0000BA, 36.001
041763 B4 19 00    1275*        dl 0x0019B4 ; 0000BB, 36.147
041766 CE 19 00    1276*        dl 0x0019CE ; 0000BC, 36.293
041769 E9 19 00    1277*        dl 0x0019E9 ; 0000BD, 36.438
04176C 03 1A 00    1278*        dl 0x001A03 ; 0000BE, 36.582
04176F 1D 1A 00    1279*        dl 0x001A1D ; 0000BF, 36.726
041772 37 1A 00    1280*        dl 0x001A37 ; 0000C0, 36.870
041775 51 1A 00    1281*        dl 0x001A51 ; 0000C1, 37.013
041778 6B 1A 00    1282*        dl 0x001A6B ; 0000C2, 37.155
04177B 85 1A 00    1283*        dl 0x001A85 ; 0000C3, 37.297
04177E 9F 1A 00    1284*        dl 0x001A9F ; 0000C4, 37.439
041781 B9 1A 00    1285*        dl 0x001AB9 ; 0000C5, 37.579
041784 D2 1A 00    1286*        dl 0x001AD2 ; 0000C6, 37.720
041787 EC 1A 00    1287*        dl 0x001AEC ; 0000C7, 37.859
04178A 05 1B 00    1288*        dl 0x001B05 ; 0000C8, 37.999
04178D 1E 1B 00    1289*        dl 0x001B1E ; 0000C9, 38.137
041790 37 1B 00    1290*        dl 0x001B37 ; 0000CA, 38.276
041793 50 1B 00    1291*        dl 0x001B50 ; 0000CB, 38.413
041796 69 1B 00    1292*        dl 0x001B69 ; 0000CC, 38.550
041799 82 1B 00    1293*        dl 0x001B82 ; 0000CD, 38.687
04179C 9B 1B 00    1294*        dl 0x001B9B ; 0000CE, 38.823
04179F B4 1B 00    1295*        dl 0x001BB4 ; 0000CF, 38.959
0417A2 CC 1B 00    1296*        dl 0x001BCC ; 0000D0, 39.094
0417A5 E5 1B 00    1297*        dl 0x001BE5 ; 0000D1, 39.228
0417A8 FD 1B 00    1298*        dl 0x001BFD ; 0000D2, 39.362
0417AB 16 1C 00    1299*        dl 0x001C16 ; 0000D3, 39.496
0417AE 2E 1C 00    1300*        dl 0x001C2E ; 0000D4, 39.629
0417B1 46 1C 00    1301*        dl 0x001C46 ; 0000D5, 39.762
0417B4 5E 1C 00    1302*        dl 0x001C5E ; 0000D6, 39.894
0417B7 76 1C 00    1303*        dl 0x001C76 ; 0000D7, 40.025
0417BA 8E 1C 00    1304*        dl 0x001C8E ; 0000D8, 40.156
0417BD A5 1C 00    1305*        dl 0x001CA5 ; 0000D9, 40.286
0417C0 BD 1C 00    1306*        dl 0x001CBD ; 0000DA, 40.416
0417C3 D5 1C 00    1307*        dl 0x001CD5 ; 0000DB, 40.546
0417C6 EC 1C 00    1308*        dl 0x001CEC ; 0000DC, 40.675
0417C9 04 1D 00    1309*        dl 0x001D04 ; 0000DD, 40.803
0417CC 1B 1D 00    1310*        dl 0x001D1B ; 0000DE, 40.931
0417CF 32 1D 00    1311*        dl 0x001D32 ; 0000DF, 41.059
0417D2 49 1D 00    1312*        dl 0x001D49 ; 0000E0, 41.186
0417D5 60 1D 00    1313*        dl 0x001D60 ; 0000E1, 41.312
0417D8 77 1D 00    1314*        dl 0x001D77 ; 0000E2, 41.438
0417DB 8E 1D 00    1315*        dl 0x001D8E ; 0000E3, 41.564
0417DE A5 1D 00    1316*        dl 0x001DA5 ; 0000E4, 41.689
0417E1 BB 1D 00    1317*        dl 0x001DBB ; 0000E5, 41.814
0417E4 D2 1D 00    1318*        dl 0x001DD2 ; 0000E6, 41.938
0417E7 E9 1D 00    1319*        dl 0x001DE9 ; 0000E7, 42.061
0417EA FF 1D 00    1320*        dl 0x001DFF ; 0000E8, 42.184
0417ED 15 1E 00    1321*        dl 0x001E15 ; 0000E9, 42.307
0417F0 2C 1E 00    1322*        dl 0x001E2C ; 0000EA, 42.429
0417F3 42 1E 00    1323*        dl 0x001E42 ; 0000EB, 42.551
0417F6 58 1E 00    1324*        dl 0x001E58 ; 0000EC, 42.672
0417F9 6E 1E 00    1325*        dl 0x001E6E ; 0000ED, 42.793
0417FC 84 1E 00    1326*        dl 0x001E84 ; 0000EE, 42.913
0417FF 99 1E 00    1327*        dl 0x001E99 ; 0000EF, 43.033
041802 AF 1E 00    1328*        dl 0x001EAF ; 0000F0, 43.152
041805 C5 1E 00    1329*        dl 0x001EC5 ; 0000F1, 43.271
041808 DA 1E 00    1330*        dl 0x001EDA ; 0000F2, 43.390
04180B F0 1E 00    1331*        dl 0x001EF0 ; 0000F3, 43.508
04180E 05 1F 00    1332*        dl 0x001F05 ; 0000F4, 43.625
041811 1B 1F 00    1333*        dl 0x001F1B ; 0000F5, 43.742
041814 30 1F 00    1334*        dl 0x001F30 ; 0000F6, 43.859
041817 45 1F 00    1335*        dl 0x001F45 ; 0000F7, 43.975
04181A 5A 1F 00    1336*        dl 0x001F5A ; 0000F8, 44.091
04181D 6F 1F 00    1337*        dl 0x001F6F ; 0000F9, 44.206
041820 84 1F 00    1338*        dl 0x001F84 ; 0000FA, 44.321
041823 99 1F 00    1339*        dl 0x001F99 ; 0000FB, 44.435
041826 AD 1F 00    1340*        dl 0x001FAD ; 0000FC, 44.549
041829 C2 1F 00    1341*        dl 0x001FC2 ; 0000FD, 44.662
04182C D7 1F 00    1342*        dl 0x001FD7 ; 0000FE, 44.775
04182F EB 1F 00    1343*        dl 0x001FEB ; 0000FF, 44.888
041832 00 20 00    1344*        dl 0x002000 ; 000100, 45.000 only needed for interpolation
041835             0037         include "time.inc"
041835             0001*    ; Convert seconds to HH:MM:SS format.
041835             0002*    ; inputs: hl = seconds
041835             0003*    ; outputs: hl = pointer to zero-terminated string representation of HH:MM:SS
041835             0004*    ; destroys: a,bc,de
041835             0005*    seconds_to_hhmmss:
041835             0006*    ; Divide the total seconds into hours, minutes, and seconds.
041835             0007*    ; Hours = Total seconds ÷ 3600.
041835 11 10 0E 00 0008*        ld de,3600
041839 CD 80 03 04 0009*        call udiv24 ; de = hours, hl = remaining seconds
04183D E5          0010*        push hl ; save remainder
04183E EB          0011*        ex de,hl ; hl = hours
04183F 11 98 18 04 0012*        ld de,@bin2asc
041843 CD 28 01 04 0013*        call u8_to_ascii ; answer in @bin2asc
041847 3A 9A 18 04 0014*        ld a,(@bin2asc+2)
04184B 32 A2 18 04 0015*        ld (hhmmss+0),a
04184F 3A 9B 18 04 0016*        ld a,(@bin2asc+3)
041853 32 A3 18 04 0017*        ld (hhmmss+1),a
041857             0018*    ; Minutes = Remaining seconds ÷ 60.
041857 E1          0019*        pop hl ; restore remainder
041858 11 3C 00 00 0020*        ld de,60
04185C CD 80 03 04 0021*        call udiv24 ; de = minutes, hl = remaining seconds
041860 E5          0022*        push hl ; save remainder
041861 EB          0023*        ex de,hl ; hl = minutes
041862 11 98 18 04 0024*        ld de,@bin2asc
041866 CD 28 01 04 0025*        call u8_to_ascii ; answer in @bin2asc
04186A 3A 9A 18 04 0026*        ld a,(@bin2asc+2)
04186E 32 A5 18 04 0027*        ld (hhmmss+3),a
041872 3A 9B 18 04 0028*        ld a,(@bin2asc+3)
041876 32 A6 18 04 0029*        ld (hhmmss+4),a
04187A             0030*    ; Seconds = Remaining seconds.
04187A E1          0031*        pop hl ; restore remainder
04187B 11 98 18 04 0032*        ld de,@bin2asc
04187F CD 28 01 04 0033*        call u8_to_ascii ; answer in @bin2asc
041883 3A 9A 18 04 0034*        ld a,(@bin2asc+2)
041887 32 A8 18 04 0035*        ld (hhmmss+6),a
04188B 3A 9B 18 04 0036*        ld a,(@bin2asc+3)
04188F 32 A9 18 04 0037*        ld (hhmmss+7),a
041893 21 A2 18 04 0038*        ld hl,hhmmss
041897 C9          0039*        ret
041898 00 00 00 00 0040*    @bin2asc: blkw 5,0 ; scratch space for binary to ascii decimal conversion
       00 00 00 00 
       00 00       
0418A2 30 30 3A 30 0041*    hhmmss: asciz "00:00:00" ; buffer for output string
       30 3A 30 30 
       00          
0418AB             0042*    ; end seconds_to_hhmmss
0418AB             0038         include "timer.inc"
0418AB             0001*    ; Table 32. Timer Control Registers
0418AB             0002*    TMR0_CTL: equ 80h
0418AB             0003*    TMR1_CTL: equ 83h
0418AB             0004*    TMR2_CTL: equ 86h
0418AB             0005*    TMR3_CTL: equ 89h
0418AB             0006*    TMR4_CTL: equ 8Ch
0418AB             0007*    TMR5_CTL: equ 8Fh
0418AB             0008*    
0418AB             0009*    ; each timer register takes three bytes:
0418AB             0010*    ;   0: control register
0418AB             0011*    ;   1: low byte of timer reset value
0418AB             0012*    ;   2: high byte of timer reset value
0418AB             0013*    ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0418AB             0014*    ; which correctly force the high and upper bytes of the address bus to zero
0418AB             0015*    
0418AB             0016*    TMR_REG_CTL: equ 0
0418AB             0017*    TMR_RES_LOW: equ 1
0418AB             0018*    TMR_RES_HIGH: equ 2
0418AB             0019*    
0418AB             0020*    ; Timer Control Register Bit Definitions
0418AB             0021*    PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0418AB             0022*                                ; This bit is reset to 0 every time the TMRx_CTL register is read.
0418AB             0023*    PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0418AB             0024*                                ; an interrupt signal is sent to the CPU. This bit remains 1 until
0418AB             0025*                                ; the TMRx_CTL register is read.
0418AB             0026*    
0418AB             0027*    IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0418AB             0028*    IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0418AB             0029*    
0418AB             0030*    PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0418AB             0031*                                ;  0,and counting stops when the end-of-count value is reached.
0418AB             0032*    PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0418AB             0033*                                ; written to the counter when the end-of-count value is reached.
0418AB             0034*    
0418AB             0035*    ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0418AB             0036*    CLK_DIV_256:  equ %00001100 ;
0418AB             0037*    CLK_DIV_64:   equ %00001000 ;
0418AB             0038*    CLK_DIV_16:   equ %00000100 ;
0418AB             0039*    CLK_DIV_4:    equ %00000000 ;
0418AB             0040*    
0418AB             0041*    RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0418AB             0042*    RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0418AB             0043*                                ; When a 1 is written to this bit,the values in the reload registers
0418AB             0044*                                ;  are loaded into the downcounter when the timer restarts. The
0418AB             0045*                                ; programmer must ensure that this bit is set to 1 each time
0418AB             0046*                                ; SINGLE-PASS mode is used.
0418AB             0047*    
0418AB             0048*    ; disable/enable the programmable reload timer
0418AB             0049*    PRT_EN_0:     equ %00000000 ;
0418AB             0050*    PRT_EN_1:     equ %00000001 ;
0418AB             0051*    
0418AB             0052*    ; Table 37. Timer Input Source Select Register
0418AB             0053*    ; Each of the 4 timers are allocated two bits of the 8-bit register
0418AB             0054*    ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0418AB             0055*    ;   00: System clock / CLK_DIV
0418AB             0056*    ;   01: RTC / CLK_DIV
0418AB             0057*    ;   NOTE: these are the values given in the manual,but it may be a typo
0418AB             0058*    ;   10: GPIO port B pin 1.
0418AB             0059*    ;   11: GPIO port B pin 1.
0418AB             0060*    TMR_ISS:   equ 92h ; register address
0418AB             0061*    
0418AB             0062*    ; Table 51. Real-Time Clock Control Register
0418AB             0063*    RTC_CTRL: equ EDh ; register address
0418AB             0064*    
0418AB             0065*    ; alarm interrupt disable/enable
0418AB             0066*    RTC_ALARM_0:    equ %00000000
0418AB             0067*    RTC_ALARM_1:    equ %10000000
0418AB             0068*    
0418AB             0069*    ; interrupt on alarm disable/enable
0418AB             0070*    RTC_INT_ENT_0:  equ %00000000
0418AB             0071*    RTC_INT_ENT_1:  equ %01000000
0418AB             0072*    
0418AB             0073*    RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0418AB             0074*    RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0418AB             0075*    
0418AB             0076*    RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0418AB             0077*                                    ; On-chip 32768 Hz oscillator is enabled.
0418AB             0078*    RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0418AB             0079*                                    ; On-chip 32768 Hz oscillator is disabled.
0418AB             0080*    
0418AB             0081*    RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0418AB             0082*    RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0418AB             0083*    
0418AB             0084*    RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0418AB             0085*    RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0418AB             0086*    
0418AB             0087*    RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0418AB             0088*                                    ; RTC counter is enabled.
0418AB             0089*    RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0418AB             0090*                                    ; RTC counter is disabled.
0418AB             0091*    
0418AB             0092*    ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0418AB             0093*    
0418AB             0094*    prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0418AB             0095*    prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0418AB 00 00 00    0096*    prt_reload: dl 0x000000
0418AE             0097*    
0418AE             0098*    ; returns: a = 0 if running on hardware,1 if running on emulator
0418AE             0099*    ;          de = number PRT interrupts during test interval
0418AE             0100*    prt_calibrate:
0418AE CD BD 1B 04 0101*        call vdu_vblank
0418B2             0102*    ; set a MOS timer
0418B2 21 78 00 00 0103*        ld hl,120*1 ; 1 second
0418B6 FD 21 36 1A 0104*        ld iy,tmr_test
       04          
0418BB CD 14 1A 04 0105*        call tmr_set
0418BF             0106*    ; set a PRT timer
0418BF             0107*        ; ld hl,prt_reload_hardware
0418BF             0108*        ; ld hl,prt_reload_emulator
0418BF 21 05 2D 00 0109*        ld hl,prt_reload_emulator + prt_reload_hardware / 2
0418C3 22 AB 18 04 0110*        ld (prt_reload),hl
0418C7 CD 4F 19 04 0111*        call prt_set
0418CB             0112*    @loop:
0418CB             0113*    ; check time remaining on MOS timer
0418CB CD 22 1A 04 0114*        call tmr_get
0418CF CA D9 18 04 0115*        jp z,@done ; time expired,so quit
0418D3 FA D9 18 04 0116*        jp m,@done ; time past expiration (negative),so quit
0418D7 18 F2       0117*        jr @loop
0418D9             0118*    @done:
0418D9 ED 5B 9D 19 0119*        ld de,(prt_irq_counter)
       04          
0418DE 01 0C 2D 00 0120*        ld bc,prt_reload_hardware ; default value for running on hardware
0418E2 ED 43 AB 18 0121*        ld (prt_reload),bc
       04          
0418E7 21 64 00 00 0122*        ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
0418EB AF          0123*        xor a ; clear carry,zero is default value for running on hardware
0418EC 32 0E 19 04 0124*        ld (is_emulator),a
0418F0 ED 52       0125*        sbc hl,de
0418F2 21 0F 19 04 0126*        ld hl,on_hardware ; default message for running on hardware
0418F6 CA AE 18 04 0127*        jp z,prt_calibrate ; zero result is indeterminate so we try again
0418FA F8          0128*        ret m ; negative result means we're on hardware
0418FB 3C          0129*        inc a ; we're on emulator
0418FC 32 0E 19 04 0130*        ld (is_emulator),a
041900 01 FF 2C 00 0131*        ld bc,prt_reload_emulator
041904 ED 43 AB 18 0132*        ld (prt_reload),bc
       04          
041909 21 25 19 04 0133*        ld hl,on_emulator
04190D C9          0134*        ret
04190E 00          0135*    is_emulator: db 0
04190F 52 75 6E 6E 0136*    on_hardware: defb "Running on hardware\r\n",0
       69 6E 67 20 
       6F 6E 20 68 
       61 72 64 77 
       61 72 65 0D 
       0A 00       
041925 52 75 6E 6E 0137*    on_emulator: defb "Running on emulator\r\n",0
       69 6E 67 20 
       6F 6E 20 65 
       6D 75 6C 61 
       74 6F 72 0D 
       0A 00       
04193B             0138*    
04193B 43 61 6C 69 0139*    calibrating_timer: defb "Calibrating timer\r\n",0
       62 72 61 74 
       69 6E 67 20 
       74 69 6D 65 
       72 0D 0A 00 
04194F             0140*    
04194F             0141*    ; set PRT timer
04194F             0142*    prt_set:
04194F 21 00 00 00 0143*        ld hl,0
041953 22 9D 19 04 0144*        ld (prt_irq_counter),hl
041957 2A AB 18 04 0145*        ld hl,(prt_reload)
04195B ED 29 84    0146*        out0 (TMR1_CTL+TMR_RES_LOW),l
04195E ED 21 85    0147*    	out0 (TMR1_CTL+TMR_RES_HIGH),h
041961             0148*    ; disable timer
041961 3E 06       0149*        ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
041963 ED 39 83    0150*    	out0 (TMR1_CTL+TMR_REG_CTL),a
041966             0151*    ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
041966 3E 57       0152*        ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
041968 ED 39 83    0153*    	out0 (TMR1_CTL+TMR_REG_CTL),a
04196B C9          0154*        ret
04196C             0155*    
04196C             0156*    ; ===============================================
04196C             0157*    ; PRT Timer Interrupt Handling
04196C             0158*    ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
04196C             0159*    ; -----------------------------------------------
04196C             0160*    prt_irq_init:
04196C             0161*        ; set up interrupt vector table 2
04196C 21 00 00 00 0162*    	ld hl,0
041970 3A 0C 01 00 0163*    	ld a,($10c)
041974 6F          0164*    	ld l,a
041975 3A 0D 01 00 0165*    	ld a,($10d)
041979 67          0166*    	ld h,a
04197A             0167*    
04197A             0168*    	; skip over CALL ($c3)
04197A 23          0169*    	inc hl
04197B             0170*    	; load address of jump into vector table 2 (in ram)
04197B ED 27       0171*    	ld hl,(hl)
04197D             0172*    
04197D             0173*    	; write CALL prt_irq_handler to vector table 2
04197D 3E C3       0174*    	ld a,$c3
04197F 77          0175*    	ld (hl),a
041980 23          0176*    	inc hl
041981 11 88 19 04 0177*    	ld de,prt_irq_handler
041985 ED 1F       0178*    	ld (hl),de
041987             0179*    
041987 C9          0180*        ret
041988             0181*    
041988             0182*    prt_irq_handler:
041988 F3          0183*    	di
041989 F5          0184*    	push af
04198A E5          0185*        push hl
04198B ED 38 83    0186*    	in0 a,(TMR1_CTL+TMR_REG_CTL)
04198E 2A 9D 19 04 0187*    	ld hl,(prt_irq_counter)
041992 23          0188*    	inc hl
041993 22 9D 19 04 0189*    	ld (prt_irq_counter),hl
041997 E1          0190*        pop hl
041998 F1          0191*    	pop af
041999 FB          0192*    	ei
04199A 5B ED 4D    0193*    	reti.l
04199D             0194*    
04199D             0195*    prt_irq_counter:
04199D 00 00 00    0196*    	.dl 0
0419A0             0197*    prt_irq_counter_saved:
0419A0 00 00 00    0198*        .dl 0
0419A3             0199*    
0419A3             0200*    prt_loop_reset:
0419A3 E5          0201*        push hl
0419A4 21 00 00 00 0202*    	ld hl,0
0419A8 22 9D 19 04 0203*    	ld (prt_irq_counter),hl
0419AC 22 0E 1A 04 0204*        ld (prt_loop_counter),hl
0419B0 22 11 1A 04 0205*        ld (prt_loops),hl
0419B4 CD 4F 19 04 0206*        call prt_set
0419B8 E1          0207*        pop hl
0419B9 C9          0208*        ret
0419BA             0209*    
0419BA             0210*    prt_loop_start:
0419BA E5          0211*        push hl
0419BB 21 00 00 00 0212*    	ld hl,0
0419BF 22 9D 19 04 0213*    	ld (prt_irq_counter),hl
0419C3 E1          0214*        pop hl
0419C4 C9          0215*        ret
0419C5             0216*    
0419C5             0217*    prt_loop_stop:
0419C5 E5          0218*        push hl
0419C6 D5          0219*        push de
0419C7 2A 9D 19 04 0220*        ld hl,(prt_irq_counter)
0419CB ED 5B 0E 1A 0221*        ld de,(prt_loop_counter)
       04          
0419D0 19          0222*        add hl,de
0419D1 22 0E 1A 04 0223*        ld (prt_loop_counter),hl
0419D5 21 00 00 00 0224*        ld hl,0
0419D9 22 9D 19 04 0225*        ld (prt_irq_counter),hl
0419DD 2A 11 1A 04 0226*        ld hl,(prt_loops)
0419E1 23          0227*        inc hl
0419E2 22 11 1A 04 0228*        ld (prt_loops),hl
0419E6 D1          0229*        pop de
0419E7 E1          0230*        pop hl
0419E8 C9          0231*        ret
0419E9             0232*    
0419E9             0233*    ; inputs: bc = y,x text coordinates to print
0419E9             0234*    prt_loop_print:
0419E9 F5          0235*        push af
0419EA E5          0236*        push hl
0419EB C5          0237*        push bc
0419EC D5          0238*        push de
0419ED DD E5       0239*        push ix
0419EF FD E5       0240*        push iy
0419F1 CD 21 1B 04 0241*        call vdu_move_cursor
0419F5             0242*    
0419F5 2A 0E 1A 04 0243*        ld hl,(prt_loop_counter)
0419F9 CD CC 00 04 0244*        call printDec
0419FD             0245*    
0419FD 2A 11 1A 04 0246*        ld hl,(prt_loops)
041A01 CD CC 00 04 0247*        call printDec
041A05             0248*    
041A05 FD E1       0249*        pop iy
041A07 DD E1       0250*        pop ix
041A09 D1          0251*        pop de
041A0A C1          0252*        pop bc
041A0B E1          0253*        pop hl
041A0C F1          0254*        pop af
041A0D C9          0255*        ret
041A0E             0256*    
041A0E             0257*    prt_loop_counter:
041A0E 00 00 00    0258*        .dl 0
041A11             0259*    prt_loops:
041A11 00 00 00    0260*        .dl 0
041A14             0261*    
041A14             0262*    ; ===============================================
041A14             0263*    ; Timer functions
041A14             0264*    ; -----------------------------------------------
041A14             0265*    ; set a countdown timer
041A14             0266*    ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041A14             0267*    ; returns: hl = current time
041A14             0268*    tmr_set:
041A14 FD 2F 03    0269*        ld (iy+3),hl            ; set time remaining
041A17             0270*        MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041A17 3E 08       0001*M1  			LD	A, function
041A19 5B CF       0002*M1  			RST.LIL	08h
041A1B DD 27 00    0271*        ld hl,(ix+sysvar_time)  ; get current time
041A1E FD 2F 00    0272*        ld (iy+0),hl            ; set start time
041A21 C9          0273*        ret
041A22             0274*    
041A22             0275*    ; gets time remaining on a countdown timer
041A22             0276*    ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041A22             0277*    ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041A22             0278*    ;          sign flags: pos = time not expired,zero or neg = time expired
041A22             0279*    tmr_get:
041A22             0280*        MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041A22 3E 08       0001*M1  			LD	A, function
041A24 5B CF       0002*M1  			RST.LIL	08h
041A26 DD 17 00    0281*        ld de,(ix+sysvar_time)  ; get current time
041A29 FD 27 00    0282*        ld hl,(iy+0)            ; get start time
041A2C AF          0283*        xor a                   ; clear carry
041A2D ED 52       0284*        sbc hl,de               ; hl = time elapsed (will always be zero or negative)
041A2F FD 17 03    0285*        ld de,(iy+3)            ; get timer set value
041A32 AF          0286*        xor a                   ; clear carry
041A33 ED 5A       0287*        adc hl,de               ; hl = time remaining
041A35             0288*                                ; (we do adc because add hl,rr doesn't set sign or zero flags)
041A35 C9          0289*        ret
041A36             0290*    
041A36             0291*    tmr_test: ds 6 ; example of a buffer to hold timer data
041A3C             0292*    
       FF FF FF FF 
       FF FF 
041A3C 00 00 00    0293*    timestamp_now: dl 0
041A3F 00 00 00    0294*    timestamp_old: dl 0
041A42 00 00 00    0295*    timestamp_chg: dl 0
041A45             0296*    
041A45             0297*    ; update the global timestamp from the system clock
041A45             0298*    ; inputs: none
041A45             0299*    ; returns: hl = time elapsed in 1/120ths of a second
041A45             0300*    ;          de = current time
041A45             0301*    ;          ix = pointer to syvars table
041A45             0302*    ; destroys: af,hl,de,ix
041A45             0303*    timestamp_tick:
041A45 ED 5B 3C 1A 0304*        ld de,(timestamp_now)   ; get previous time
       04          
041A4A ED 53 3F 1A 0305*        ld (timestamp_old),de   ; save previous time
       04          
041A4F             0306*        MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041A4F 3E 08       0001*M1  			LD	A, function
041A51 5B CF       0002*M1  			RST.LIL	08h
041A53 DD 27 00    0307*        ld hl,(ix+sysvar_time)  ; get current time
041A56 22 3C 1A 04 0308*        ld (timestamp_now),hl   ; save current time
041A5A AF          0309*        xor a                   ; clear carry
041A5B ED 52       0310*        sbc hl,de               ; hl = time elapsed
041A5D 22 42 1A 04 0311*        ld (timestamp_chg),hl   ; save elapsed time
041A61 C9          0312*        ret
041A62             0313*    
041A62             0314*    ; set a countdown timer
041A62             0315*    ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041A62             0316*    ; requires: timestamp_tick to be called at least once before this function
041A62             0317*    ; returns: hl = current time
041A62             0318*    ; destroys: hl
041A62             0319*    timestamp_tmr_set:
041A62 FD 2F 03    0320*        ld (iy+3),hl            ; set time remaining
041A65 2A 3C 1A 04 0321*        ld hl,(timestamp_now)   ; get current timestamp
041A69 FD 2F 00    0322*        ld (iy+0),hl            ; set start time
041A6C C9          0323*        ret
041A6D             0324*    
041A6D             0325*    ; gets time remaining on a countdown timer following the global timestamp
041A6D             0326*    ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041A6D             0327*    ; requires: timestamp_tick to be called at least once before this function
041A6D             0328*    ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041A6D             0329*    ;          sign flags: pos = time not expired,zero or neg = time expired
041A6D             0330*    ; destroys: af,hl,de
041A6D             0331*    timestamp_tmr_get:
041A6D ED 5B 3C 1A 0332*        ld de,(timestamp_now)   ; get current timestamp
       04          
041A72 FD 27 00    0333*        ld hl,(iy+0)            ; get start time
041A75 AF          0334*        xor a                   ; clear carry
041A76 ED 52       0335*        sbc hl,de               ; hl = time elapsed (will always be zero or negative)
041A78 FD 17 03    0336*        ld de,(iy+3)            ; get timer set value
041A7B AF          0337*        xor a                   ; clear carry
041A7C ED 5A       0338*        adc hl,de               ; hl = time remaining
041A7E             0339*                                ; (we do adc because add hl,rr doesn't set sign or zero flags)
041A7E C9          0340*        ret
041A7F             0341*    
041A7F             0342*    ; set a stopwatch
041A7F             0343*    ; returns: hl = start time
041A7F             0344*    ; destroys: hl,ix
041A7F             0345*    stopwatch_set:
041A7F             0346*        MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041A7F 3E 08       0001*M1  			LD	A, function
041A81 5B CF       0002*M1  			RST.LIL	08h
041A83 DD 27 00    0347*        ld hl,(ix+sysvar_time)  ; get current time
041A86 22 9B 1A 04 0348*        ld (stopwatch_started),hl            ; set start time
041A8A C9          0349*        ret
041A8B             0350*    
041A8B             0351*    ; gets time elapsed on a stopwatch
041A8B             0352*    ; returns: hl = time elapsed in 1/120ths of a second
041A8B             0353*    ; destroys: af,hl,de,ix
041A8B             0354*    stopwatch_get:
041A8B             0355*        MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041A8B 3E 08       0001*M1  			LD	A, function
041A8D 5B CF       0002*M1  			RST.LIL	08h
041A8F DD 27 00    0356*        ld hl,(ix+sysvar_time)  ; get current time
041A92 ED 5B 9B 1A 0357*        ld de,(stopwatch_started)            ; get start time
       04          
041A97 AF          0358*        xor a                   ; clear carry
041A98 ED 52       0359*        sbc hl,de               ; hl = time elapsed (will always be zero or positive)
041A9A C9          0360*        ret
041A9B             0361*    
041A9B             0362*    stopwatch_started: ds 3 ; buffer to hold stopwatch start time
041A9E             0363*    
041A9E             0364*    ; ------------------
041A9E             0365*    ; delay routine
041A9E             0366*    ; Author: Richard Turrnidge
041A9E             0367*    ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.asm
041A9E             0368*    ; routine waits a fixed time,then returns
041A9E             0369*    ; arrive with A =  the delay byte. One bit to be set only.
041A9E             0370*    ; eg. ld A,00000100b
041A9E             0371*    
041A9E             0372*    multiPurposeDelay:
       FF FF FF 
041A9E F5          0373*        push af
041A9F C5          0374*        push bc
041AA0 DD E5       0375*        push ix
041AA2 47          0376*        ld b,a
041AA3 3E 08       0377*        ld a,$08
041AA5 5B CF       0378*        RST.LIL	08h                 ; get IX pointer to sysvars
041AA7             0379*    
041AA7             0380*    waitLoop:
041AA7             0381*    
041AA7 DD 7E 00    0382*        ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
041AAA             0383*    
041AAA             0384*                                    ;   we check if bit set is same as last time we checked.
041AAA             0385*                                    ;   bit 0 - don't use
041AAA             0386*                                    ;   bit 1 - changes 64 times per second
041AAA             0387*                                    ;   bit 2 - changes 32 times per second
041AAA             0388*                                    ;   bit 3 - changes 16 times per second
041AAA             0389*    
041AAA             0390*                                    ;   bit 4 - changes 8 times per second
041AAA             0391*                                    ;   bit 5 - changes 4 times per second
041AAA             0392*                                    ;   bit 6 - changes 2 times per second
041AAA             0393*                                    ;   bit 7 - changes 1 times per second
041AAA A0          0394*        and b
041AAB 4F          0395*        ld c,a
041AAC 3A BD 1A 04 0396*        ld a,(oldTimeStamp)
041AB0 B9          0397*        cp c                        ; is A same as last value?
041AB1 28 F4       0398*        jr z,waitLoop              ; loop here if it is
041AB3 79          0399*        ld a,c
041AB4 32 BD 1A 04 0400*        ld (oldTimeStamp),a        ; set new value
041AB8             0401*    
041AB8 DD E1       0402*        pop ix
041ABA C1          0403*        pop bc
041ABB F1          0404*        pop af
041ABC C9          0405*        ret
041ABD             0406*    
041ABD 00          0407*    oldTimeStamp:   .db 00h
041ABE             0039         include "vdu.inc"
041ABE             0001*    ; VDU 30: Home cursor
041ABE             0002*    vdu_home_cursor:
041ABE 3E 1E       0003*        ld a,30
041AC0 5B D7       0004*    	rst.lil $10
041AC2 C9          0005*    	ret
041AC3             0006*    
041AC3             0007*    vdu_cursor_on:
041AC3 21 CE 1A 04 0008*    	ld hl,@cmd
041AC7 01 03 00 00 0009*    	ld bc,@end-@cmd
041ACB 5B DF       0010*    	rst.lil $18
041ACD C9          0011*    	ret
041ACE             0012*    @cmd:
041ACE 17 01 01    0013*    	db 23,1,1
041AD1             0014*    @end:
041AD1             0015*    
041AD1             0016*    vdu_cursor_off:
041AD1 21 DC 1A 04 0017*    	ld hl,@cmd
041AD5 01 03 00 00 0018*    	ld bc,@end-@cmd
041AD9 5B DF       0019*    	rst.lil $18
041ADB C9          0020*    	ret
041ADC             0021*    @cmd:
041ADC 17 01 00    0022*    	db 23,1,0
041ADF             0023*    @end:
041ADF             0024*    
041ADF             0025*    ; VDU 4: Write text at text cursor
041ADF             0026*    ; This causes text to be written at th current text cursor position. This is the default mode for text display.
041ADF             0027*    ; inputs: none
041ADF             0028*    ; prerequisites: the text cursor at the intended position on screen
041ADF             0029*    ; outputs: none
041ADF             0030*    ; destroys: af
041ADF             0031*    vdu_text_to_text_cursor:
041ADF 3E 04       0032*        ld a,4
041AE1 5B D7       0033*        rst.lil $10
041AE3 C9          0034*        ret
041AE4             0035*    ; end vdu_text_to_text_cursor
041AE4             0036*    
041AE4             0037*    ; set the text cursor to a specified location and print a string there
041AE4             0038*    ; inputs: hl = address of string to print, c,b = x,y text coordinates
041AE4             0039*    ; outputs: text
041AE4             0040*    ; destroys: af, bc, hl
041AE4             0041*    ; affects: moves text cursor to position after final char printed by default
041AE4             0042*    ;          unless overridden by VDU 23, 16 cursor control command settings
041AE4             0043*    ;          all subsequent print commands (rst.lil $10 or $18) will go to the text cursor
041AE4             0044*    vdu_print_to_text_location:
041AE4 E5          0045*        push hl ; preserve string pointer
041AE5 3E 04       0046*        ld a,4 ; VDU 4 char to text cursor
041AE7 5B D7       0047*        rst.lil $10
041AE9 CD 21 1B 04 0048*        call vdu_move_cursor
041AED E1          0049*        pop hl ; restore string pointer
041AEE CD 67 00 04 0050*        call printString
041AF2 C9          0051*        ret
041AF3             0052*    ; end vdu_print_at_text_location
041AF3             0053*    
041AF3             0054*    ; VDU 5: Write text at graphics cursor
041AF3             0055*    ; inputs: none
041AF3             0056*    ; prerequisites: the graphics cursor at the intended position on screen
041AF3             0057*    ; outputs: none
041AF3             0058*    ; destroys: af
041AF3             0059*    vdu_text_to_gfx_cursor:
041AF3 3E 05       0060*        ld a,5
041AF5 5B D7       0061*    	rst.lil $10
041AF7 C9          0062*    	ret
041AF8             0063*    ; end vdu_char_to_gfx_cursor
041AF8             0064*    
041AF8             0065*    ; set the graphics cursor to a specified location and print a string there
041AF8             0066*    ; inputs: hl = address of string to print, bc,de = x,y graphics coordinates
041AF8             0067*    ; outputs: text
041AF8             0068*    ; destroys: af, bc, de, hl
041AF8             0069*    ; affects: moves graphics cursor to position after final char printed by default
041AF8             0070*    ;          unless overridden by setting bit 6 of the cursor control register (VDU 23, 16)
041AF8             0071*    ;          all subsequent print commands (rst.lil $10 or $18) will go to the graphics cursor
041AF8             0072*    vdu_print_to_gfx_location:
041AF8 E5          0073*        push hl ; preserve string pointer
041AF9 3E 44       0074*        ld a,plot_pt+mv_abs
041AFB CD 23 20 04 0075*        call vdu_plot ; moves the graphics cursor to the specified location
041AFF 3E 05       0076*        ld a,5 ; VDU 5 char to gfx cursor
041B01 5B D7       0077*        rst.lil $10
041B03 E1          0078*        pop hl ; restore string pointer
041B04 01 00 00 00 0079*        ld bc,0
041B08 3E 00       0080*        ld a,0
041B0A 5B DF       0081*        rst.lil $18 ; print the string
041B0C C9          0082*        ret
041B0D             0083*    ; end vdu_print_at_gfx_location
041B0D             0084*    
041B0D             0085*    ; VDU 8: Move cursor back one character
041B0D             0086*    vdu_cursor_back:
041B0D 3E 08       0087*        ld a,8
041B0F 5B D7       0088*        rst.lil $10
041B11 C9          0089*        ret
041B12             0090*    ; end vdu_cursor_back
041B12             0091*    
041B12             0092*    ; VDU 9: Move cursor forward one character
041B12             0093*    vdu_cursor_forward:
041B12 3E 09       0094*        ld a,9
041B14 5B D7       0095*    	rst.lil $10
041B16 C9          0096*    	ret
041B17             0097*    ; end vdu_cursor_forward
041B17             0098*    
041B17             0099*    ; VDU 10: Move cursor down one line
041B17             0100*    vdu_cursor_down:
041B17 3E 0A       0101*        ld a,10
041B19 5B D7       0102*        rst.lil $10
041B1B C9          0103*        ret
041B1C             0104*    ; end vdu_cursor_down
041B1C             0105*    
041B1C             0106*    ; VDU 11: Move cursor up one line
041B1C             0107*    vdu_cursor_up:
041B1C 3E 0B       0108*        ld a,11
041B1E 5B D7       0109*        rst.lil $10
041B20 C9          0110*        ret
041B21             0111*    ; end vdu_cursor_up
041B21             0112*    
041B21             0113*    
041B21             0114*    ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041B21             0115*    ; inputs: c=x, b=y 8-bit unsigned integers
041B21             0116*    vdu_move_cursor:
041B21 ED 43 32 1B 0117*        ld (@x0),bc
       04          
041B26 21 31 1B 04 0118*    	ld hl,@cmd
041B2A 01 03 00 00 0119*    	ld bc,@end-@cmd
041B2E 5B DF       0120*    	rst.lil $18
041B30 C9          0121*    	ret
041B31 1F          0122*    @cmd: 	db 31
041B32 00          0123*    @x0:	db 0
041B33 00          0124*    @y0: 	db 0
041B34 00          0125*    @end: 	db 0 ; padding
041B35             0126*    
041B35             0127*    ; https://agonconsole8.github.io/agon-docs/vdp/VDU-Commands/#vdu-23-1-n-cursor-control
041B35             0128*    ; VDU 23, 16, setting, mask: Define cursor movement behaviour
041B35             0129*    ; inputs: l = setting, h = mask
041B35             0130*    ; new_setting = (current_setting AND mask) EOR setting
041B35             0131*    ; in English: mask controls which bit to turn on or off, setting is the value of the bits to set or reset
041B35             0132*    vdu_cursor_behaviour:
041B35 22 46 1B 04 0133*        ld (@setting),hl ; little-endian!
041B39 21 44 1B 04 0134*        ld hl,@cmd
041B3D 01 04 00 00 0135*        ld bc,@end-@cmd
041B41 5B DF       0136*        rst.lil $18
041B43 C9          0137*        ret
041B44 17 10       0138*    @cmd: db 23,16
041B46 00          0139*    @setting: db 0
041B47 00          0140*    @mask: db 0
041B48 00          0141*    @end: db 0 ; padding
041B49             0142*    
041B49             0143*    ; VDU 12: Clear text area (CLS)
041B49             0144*    vdu_cls:
041B49 3E 0C       0145*        ld a,12
041B4B 5B D7       0146*    	rst.lil $10
041B4D C9          0147*    	ret
041B4E             0148*    
041B4E             0149*    vdu_flip:
041B4E 21 59 1B 04 0150*    	ld hl,@cmd
041B52 01 03 00 00 0151*    	ld bc,@end-@cmd
041B56 5B DF       0152*    	rst.lil $18
041B58 C9          0153*    	ret
041B59 17 00 C3    0154*    @cmd: db 23,0,0xC3
041B5C             0155*    @end:
041B5C             0156*    
041B5C             0157*    ; VDU 16: Clear graphics area (CLG)
041B5C             0158*    vdu_clg:
041B5C 3E 10       0159*        ld a,16
041B5E 5B D7       0160*    	rst.lil $10
041B60 C9          0161*    	ret
041B61             0162*    
041B61             0163*    ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
041B61             0164*    ; VDU 23, 7: Scrolling
041B61             0165*    ;     VDU 23, 7, extent, direction, speed: Scroll the screen
041B61             0166*    ; inputs: a, extent; l, direction; h; speed
041B61             0167*    vdu_scroll_down:
041B61 32 76 1B 04 0168*    	ld (@extent),a
041B65 22 77 1B 04 0169*    	ld (@dir),hl ; implicitly populates @speed
041B69 21 74 1B 04 0170*    	ld hl,@cmd
041B6D 01 05 00 00 0171*    	ld bc,@end-@cmd
041B71 5B DF       0172*    	rst.lil $18     ;; Sending command to VDP
041B73 C9          0173*    	ret
041B74 17 07       0174*    @cmd:       db 23,7
041B76 00          0175*    @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
041B77 00          0176*    @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
041B78 00          0177*    @speed:     db 0x00 ; pixels
041B79 00          0178*    @end:		db 0x00 ; padding
041B7A             0179*    
041B7A             0180*    ; COLOUR MODES
041B7A             0181*    ; Mode	Effect
041B7A             0182*    ; 0	Set on-screen pixel to target colour value
041B7A             0183*    ; 1	OR value with the on-screen pixel
041B7A             0184*    ; 2	AND value with the on-screen pixel
041B7A             0185*    ; 3	XOR value with the on-screen pixel
041B7A             0186*    ; 4	Invert the on-screen pixel
041B7A             0187*    ; 5	No operation
041B7A             0188*    ; 6	AND the inverse of the specified colour with the on-screen pixel
041B7A             0189*    ; 7	OR the inverse of the specified colour with the on-screen pixel
041B7A             0190*    
041B7A             0191*    ; VDU 17, colour: Define text colour (COLOUR)
041B7A             0192*    vdu_colour_text:
041B7A 32 8A 1B 04 0193*    	ld (@arg),a
041B7E 21 89 1B 04 0194*    	ld hl,@cmd
041B82 01 02 00 00 0195*    	ld bc,@end-@cmd
041B86 5B DF       0196*    	rst.lil $18
041B88 C9          0197*    	ret
041B89 11          0198*    @cmd: db 17
041B8A 00          0199*    @arg: db 0
041B8B             0200*    @end:
041B8B             0201*    
041B8B             0202*    ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
041B8B             0203*    ; inputs: a=mode, c=colour (add 128 to set background colour)
041B8B             0204*    vdu_gcol:
041B8B 32 A0 1B 04 0205*    	ld (@mode),a
041B8F 79          0206*        ld a,c
041B90 32 A1 1B 04 0207*        ld (@col),a
041B94 21 9F 1B 04 0208*    	ld hl,@cmd
041B98 01 03 00 00 0209*    	ld bc,@end-@cmd
041B9C 5B DF       0210*    	rst.lil $18
041B9E C9          0211*    	ret
041B9F 12          0212*    @cmd:  db 18
041BA0 00          0213*    @mode: db 0
041BA1 00          0214*    @col:  db 0
041BA2             0215*    @end:
041BA2             0216*    
041BA2             0217*    
041BA2             0218*    ; VDU 28, left, bottom, right, top: Set text viewport **
041BA2             0219*    ; MIND THE LITTLE-ENDIANESS
041BA2             0220*    ; inputs: c=left,b=bottom,e=right,d=top
041BA2             0221*    ; outputs; nothing
041BA2             0222*    ; destroys: af, hl, bc, de
041BA2             0223*    vdu_set_txt_viewport:
041BA2 ED 43 B8 1B 0224*        ld (@lb),bc
       04          
041BA7 ED 53 BA 1B 0225*    	ld (@rt),de
       04          
041BAC 21 B7 1B 04 0226*    	ld hl,@cmd
041BB0 01 05 00 00 0227*    	ld bc,@end-@cmd
041BB4 5B DF       0228*    	rst.lil $18
041BB6 C9          0229*    	ret
041BB7 1C          0230*    @cmd:   db 28 ; set text viewport command
041BB8 00 00       0231*    @lb: 	dw 0x0000 ; set by bc
041BBA 00 00       0232*    @rt: 	dw 0x0000 ; set by de
041BBC 00          0233*    @end:   db 0x00	  ; padding
041BBD             0234*    
041BBD             0235*    ; Wait for VBLANK interrupt
041BBD             0236*    vdu_vblank:
041BBD DD E5       0237*        PUSH 	IX
041BBF             0238*    	MOSCALL	mos_sysvars
                       M1 Args: function=mos_sysvars 
041BBF 3E 08       0001*M1  			LD	A, function
041BC1 5B CF       0002*M1  			RST.LIL	08h
041BC3 DD 7E 00    0239*    	LD	A, (IX + sysvar_time + 0)
041BC6             0240*    @wait:
041BC6 DD BE 00    0241*        CP 	A, (IX + sysvar_time + 0)
041BC9 28 FB       0242*        JR	Z, @wait
041BCB DD E1       0243*        POP	IX
041BCD C9          0244*        RET
041BCE             0245*    
041BCE             0246*    ; VDU 29, x; y;: Set graphics origin
041BCE             0247*    ; This command sets the graphics origin.
041BCE             0248*    ; The origin is the point on the screen where the coordinates (0,0) are located.
041BCE             0249*    ; inputs: bc=x0,de=y0
041BCE             0250*    ; outputs; nothing
041BCE             0251*    ; destroys: a might make it out alive
041BCE             0252*    vdu_set_gfx_origin:
041BCE ED 43 E4 1B 0253*        ld (@x0),bc
       04          
041BD3 ED 53 E6 1B 0254*        ld (@y0),de
       04          
041BD8 21 E3 1B 04 0255*        ld hl,@cmd
041BDC 01 05 00 00 0256*        ld bc,@end-@cmd
041BE0 5B DF       0257*        rst.lil $18
041BE2 C9          0258*        ret
041BE3 1D          0259*    @cmd:   db 29 ; set graphics origin command
041BE4 00 00       0260*    @x0: 	dw 0x0000 ; set by bc
041BE6 00 00       0261*    @y0: 	dw 0x0000 ; set by de
041BE8 00          0262*    @end:   db 0x00	  ; padding
041BE9             0263*    
041BE9             0264*    ; VDU 24, left; bottom; right; top;: Set graphics viewport
041BE9             0265*    ; NOTE: the order of the y-coordinate parameters are inverted
041BE9             0266*    ; 	because we have turned off logical screen scaling
041BE9             0267*    ; NOTE: coordinates are relative to current gfx origin
041BE9             0268*    ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041BE9             0269*    ; outputs; nothing
041BE9             0270*    ; destroys: a might make it out alive
041BE9             0271*    vdu_set_gfx_viewport:
041BE9 ED 43 09 1C 0272*        ld (@x0),bc
       04          
041BEE FD 22 0B 1C 0273*        ld (@y1),iy
       04          
041BF3 DD 22 0D 1C 0274*    	ld (@x1),ix
       04          
041BF8 ED 53 0F 1C 0275*    	ld (@y0),de
       04          
041BFD 21 08 1C 04 0276*    	ld hl,@cmd
041C01 01 09 00 00 0277*    	ld bc,@end-@cmd
041C05 5B DF       0278*    	rst.lil $18
041C07 C9          0279*    	ret
041C08 18          0280*    @cmd:   db 24 ; set graphics viewport command
041C09 00 00       0281*    @x0: 	dw 0x0000 ; set by bc
041C0B 00 00       0282*    @y1: 	dw 0x0000 ; set by iy
041C0D 00 00       0283*    @x1: 	dw 0x0000 ; set by ix
041C0F 00 00       0284*    @y0: 	dw 0x0000 ; set by de
041C11 00          0285*    @end:   db 0x00	  ; padding
041C12             0286*    
041C12             0287*    ; VDU 26: Reset graphics and text viewports
041C12             0288*    vdu_reset_viewports:
041C12 3E 1A       0289*        ld a,26
041C14 5B D7       0290*        rst.lil $10
041C16 C9          0291*        ret
041C17             0292*    
041C17             0293*    ; SCREEN MODES
041C17             0294*    ; ===============================
041C17             0295*    ; Mode  Horz  Vert  Cols  Refresh
041C17             0296*    ; ---   ----  ----  ----  -------
041C17             0297*    ; 11    320   240   2     60hz
041C17             0298*    ; 139   320   240   2     60hz
041C17             0299*    ; 23    512   384   2     60hz
041C17             0300*    ; 151   512   384   2     60hz
041C17             0301*    ; 6     640   240   2     60hz
041C17             0302*    ; 134   640   240   2     60hz
041C17             0303*    ; 2     640   480   2     60hz
041C17             0304*    ; 130   640   480   2     60hz
041C17             0305*    ; 17    800   600   2     60hz
041C17             0306*    ; 145   800   600   2     60hz
041C17             0307*    ; 18    1024  768   2     60hz
041C17             0308*    ; 146   1024  768   2     60hz
041C17             0309*    ; ---   ----  ----  ----  -------
041C17             0310*    ; 10    320   240   4     60hz
041C17             0311*    ; 138   320   240   4     60hz
041C17             0312*    ; 22    512   384   4     60hz
041C17             0313*    ; 150   512   384   4     60hz
041C17             0314*    ; 5     640   240   4     60hz
041C17             0315*    ; 133   640   240   4     60hz
041C17             0316*    ; 1     640   480   4     60hz
041C17             0317*    ; 129   640   480   4     60hz
041C17             0318*    ; 16    800   600   4     60hz
041C17             0319*    ; 19    1024  768   4     60hz
041C17             0320*    ; ---   ----  ----  ----  -------
041C17             0321*    ; 9     320   240   16    60hz
041C17             0322*    ; 137   320   240   16    60hz
041C17             0323*    ; 21    512   384   16    60hz
041C17             0324*    ; 149   512   384   16    60hz
041C17             0325*    ; 4     640   240   16    60hz
041C17             0326*    ; 132   640   240   16    60hz
041C17             0327*    ; 0     640   480   16    60hz
041C17             0328*    ; 7     n/a   n/a   16    60hz
041C17             0329*    ; ---   ----  ----  ----  -------
041C17             0330*    ; 8     320   240   64    60hz
041C17             0331*    ; 136   320   240   64    60hz
041C17             0332*    ; 20    512   384   64    60hz
041C17             0333*    ; 3     640   240   64    60hz
041C17             0334*    ; ---   ----  ----  ----  -------
041C17             0335*    vdu_set_screen_mode:
041C17 32 27 1C 04 0336*    	ld (@arg),a
041C1B 21 26 1C 04 0337*    	ld hl,@cmd
041C1F 01 02 00 00 0338*    	ld bc,@end-@cmd
041C23 5B DF       0339*    	rst.lil $18
041C25 C9          0340*    	ret
041C26 16          0341*    @cmd: db 22 ; set screen mode
041C27 00          0342*    @arg: db 0  ; screen mode parameter
041C28             0343*    @end:
041C28             0344*    
041C28             0345*    ; get the current screen mode
041C28             0346*    ; inputs: none
041C28             0347*    ; outputs: a=screen mode
041C28             0348*    ; destroys: af, ix
041C28             0349*    vdu_get_screen_mode:
041C28             0350*        MOSCALL mos_sysvars
                       M1 Args: function=mos_sysvars 
041C28 3E 08       0001*M1  			LD	A, function
041C2A 5B CF       0002*M1  			RST.LIL	08h
041C2C DD 7E 27    0351*        ld a,(IX+sysvar_scrMode)
041C2F C9          0352*        ret
041C30             0353*    ; end vdu_get_screen_mode
041C30             0354*    
041C30             0355*    ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041C30             0356*    ; inputs: a is scaling mode, 1=on, 0=off
041C30             0357*    ; note: default setting on boot is scaling ON
041C30             0358*    vdu_set_scaling:
041C30 32 42 1C 04 0359*    	ld (@arg),a
041C34 21 3F 1C 04 0360*    	ld hl,@cmd
041C38 01 04 00 00 0361*    	ld bc,@end-@cmd
041C3C 5B DF       0362*    	rst.lil $18
041C3E C9          0363*    	ret
041C3F 17 00 C0    0364*    @cmd: db 23,0,0xC0
041C42 00          0365*    @arg: db 0  ; scaling on/off
041C43             0366*    @end:
041C43             0367*    
041C43             0368*    ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041C43             0369*    ; inputs: hl=bufferId
041C43             0370*    vdu_buff_select:
041C43 22 55 1C 04 0371*    	ld (@bufferId),hl
041C47 21 52 1C 04 0372*    	ld hl,@cmd
041C4B 01 05 00 00 0373*    	ld bc,@end-@cmd
041C4F 5B DF       0374*    	rst.lil $18
041C51 C9          0375*    	ret
041C52 17 1B 20    0376*    @cmd: db 23,27,0x20
041C55 00 00       0377*    @bufferId: dw 0x0000
041C57 00          0378*    @end: db 0x00 ; padding
041C58             0379*    
041C58             0380*    ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
041C58             0381*    ; inputs: a=format; bc=width; de=height
041C58             0382*    ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
041C58             0383*    ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
041C58             0384*    ; 0 	RGBA8888 (4-bytes per pixel)
041C58             0385*    ; 1 	RGBA2222 (1-bytes per pixel)
041C58             0386*    ; 2 	Mono/Mask (1-bit per pixel)
041C58             0387*    ; 3 	Reserved for internal use by VDP (“native” format)
041C58             0388*    vdu_bmp_create:
041C58 ED 43 74 1C 0389*        ld (@width),bc
       04          
041C5D ED 53 76 1C 0390*        ld (@height),de
       04          
041C62 32 78 1C 04 0391*        ld (@fmt),a
041C66 21 71 1C 04 0392*    	ld hl,@cmd
041C6A 01 08 00 00 0393*    	ld bc,@end-@cmd
041C6E 5B DF       0394*    	rst.lil $18
041C70 C9          0395*    	ret
041C71 17 1B 21    0396*    @cmd:       db 23,27,0x21
041C74 00 00       0397*    @width:     dw 0x0000
041C76 00 00       0398*    @height:    dw 0x0000
041C78 00          0399*    @fmt:       db 0x00
041C79             0400*    @end:
041C79             0401*    
041C79             0402*    ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
041C79             0403*    ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
041C79             0404*    vdu_load_img_rgba2_to_8:
041C79             0405*    ; backup the target buffer id and image dimensions
041C79 E5          0406*        push hl
041C7A D5          0407*        push de
041C7B C5          0408*        push bc
041C7C             0409*    ; load the rgba2 image to working buffer 65534
041C7C 21 FE FF 00 0410*        ld hl,65534 ; temporary working buffer id
041C80 CD 57 1D 04 0411*    	call vdu_load_buffer_from_file
041C84             0412*    ; restore the image dimensions and target buffer id
041C84 C1          0413*        pop bc
041C85 D1          0414*        pop de
041C86 E1          0415*        pop hl
041C87             0416*    ; fall through to vdu_rgba2_to_8
041C87             0417*    
041C87             0418*    ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
041C87             0419*    ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
041C87             0420*    ; the "expand bitmap" command is:
041C87             0421*    ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041C87             0422*    ; and then to reverse the byte order to fix endian-ness:
041C87             0423*    ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041C87             0424*    ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041C87             0425*    ; VDU 23,27,&20,targetBufferID%;
041C87             0426*    ; VDU 23,27,&21,width%;height%;0
041C87             0427*    ; -------------------------------------------------------------------
041C87             0428*    ; inputs: bc,de image width,height ; hl = targetBufferId
041C87             0429*    ; prerequisites: rgba2 image data loaded into workingBufferId 65534
041C87             0430*    vdu_rgba2_to_8:
041C87             0431*    ; load the image dimensions and buffer id parameters
041C87 ED 43 E3 1C 0432*        ld (@width),bc
       04          
041C8C ED 53 E5 1C 0433*        ld (@height),de
       04          
041C91 22 C8 1C 04 0434*        ld (@bufferId0),hl
041C95 22 D5 1C 04 0435*        ld (@bufferId2),hl
041C99 22 DE 1C 04 0436*        ld (@bufferId1),hl
041C9D             0437*    ; clean up bytes that got stomped on by the ID loads
041C9D 3E 48       0438*        ld a,0x48
041C9F 32 CA 1C 04 0439*        ld (@bufferId0+2),a
041CA3 3E 17       0440*        ld a,23
041CA5 32 E0 1C 04 0441*        ld (@bufferId1+2),a
041CA9 3E 18       0442*        ld a,24
041CAB 32 D7 1C 04 0443*        ld (@bufferId2+2),a
041CAF AF          0444*        xor a
041CB0 32 E7 1C 04 0445*        ld (@height+2),a
041CB4             0446*    ; send the vdu command strings
041CB4 21 BF 1C 04 0447*        ld hl,@beg
041CB8 01 29 00 00 0448*        ld bc,@end-@beg
041CBC 5B DF       0449*        rst.lil $18
041CBE C9          0450*        ret
041CBF             0451*    @beg:
041CBF             0452*    ; Command 14: Consolidate blocks in a buffer
041CBF             0453*    ; VDU 23, 0, &A0, bufferId; 14
041CBF 17 00 A0    0454*        db 23,0,0xA0
041CC2 FE FF       0455*        dw 65534 ; workingBufferId
041CC4 0E          0456*        db 14 ; consolidate blocks
041CC5             0457*    ; the "expand bitmap" command is:
041CC5             0458*    ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041CC5 17 00 A0    0459*        db 23,0,0xA0
041CC8 00 00       0460*    @bufferId0: dw 0x0000 ; targetBufferId
041CCA 48          0461*        db 0x48 ; given as decimal command 72 in the docs
041CCB 02          0462*        db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
041CCC FE FF       0463*        dw 65534 ; sourceBufferId
041CCE 00 7F BF FF 0464*        db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041CD2             0465*    ; reverse the byte order to fix endian-ness:
041CD2             0466*    ; Command 24: Reverse the order of data of blocks within a buffer
041CD2             0467*    ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041CD2             0468*    ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041CD2 17 00 A0    0469*        db 23,0,0xA0
041CD5 00 00       0470*    @bufferId2:    dw 0x0000 ; targetBufferId
041CD7 18          0471*        db 24 ; reverse byte order
041CD8 04          0472*        db 4 ; option: Reverse data of the value size within chunk of data of the specified size
041CD9 04 00       0473*        dw 4 ; size (4 bytes)
041CDB             0474*    ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041CDB             0475*    ; VDU 23,27,&20,targetBufferID%;
041CDB 17 1B 20    0476*        db 23,27,0x20 ; select bitmap
041CDE 00 00       0477*    @bufferId1: dw 0x0000 ; targetBufferId
041CE0             0478*    ; VDU 23,27,&21,width%;height%;0
041CE0 17 1B 21    0479*        db 23,27,0x21 ; create bitmap from buffer
041CE3 00 00       0480*    @width: dw 0x0000
041CE5 00 00       0481*    @height: dw 0x0000
041CE7 00          0482*        db 0x00 ; rgba8888 format
041CE8             0483*    @end:
041CE8             0484*    
041CE8             0485*    ; scratch variables
041CE8 00 00 00    0486*    bufferId0: dl 0x000000
041CEB 00 00 00    0487*    bufferId1: dl 0x000000
041CEE             0488*    
041CEE             0489*    ; load a vdu buffer from local memory
041CEE             0490*    ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041CEE             0491*    vdu_load_buffer:
041CEE ED 43 17 1D 0492*        ld (@length),bc
       04          
041CF3 D5          0493*        push de ; save data pointer
041CF4             0494*    ; send the vdu command string
041CF4 7D          0495*        ld a,l
041CF5 32 14 1D 04 0496*        ld (@bufferId),a
041CF9 7C          0497*        ld a,h
041CFA 32 15 1D 04 0498*        ld (@bufferId+1),a
041CFE 21 11 1D 04 0499*        ld hl,@cmd
041D02 01 08 00 00 0500*        ld bc,@end-@cmd
041D06 5B DF       0501*        rst.lil $18
041D08             0502*    ; send the buffer data
041D08 E1          0503*        pop hl ; pointer to data
041D09 ED 4B 17 1D 0504*        ld bc,(@length)
       04          
041D0E 5B DF       0505*        rst.lil $18 ; send it
041D10 C9          0506*        ret
041D11             0507*    ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041D11 17 00 A0    0508*    @cmd:       db 23,0,0xA0
041D14 00 00       0509*    @bufferId:	dw 0x0000
041D16 00          0510*    		    db 0 ; load buffer
041D17 00 00       0511*    @length:	dw 0x0000
041D19 00          0512*    @end: db 0 ; padding
041D1A             0513*    
041D1A             0514*    ; Command 14: Consolidate blocks in a buffer
041D1A             0515*    vdu_consolidate_buffer:
041D1A             0516*    ; set parameters for vdu call
041D1A 7D          0517*        ld a,l
041D1B 32 32 1D 04 0518*        ld (@bufferId),a
041D1F 7C          0519*        ld a,h
041D20 32 33 1D 04 0520*        ld (@bufferId+1),a
041D24 21 2F 1D 04 0521*        ld hl,@beg
041D28 01 06 00 00 0522*        ld bc,@end-@beg
041D2C 5B DF       0523*        rst.lil $18
041D2E C9          0524*        ret
041D2F             0525*    ; VDU 23, 0, &A0, bufferId; 14
041D2F 17 00 A0    0526*    @beg: db 23,0,0xA0
041D32 00 00       0527*    @bufferId: dw 0x0000
041D34 0E          0528*               db 14
041D35             0529*    @end:
041D35             0530*    
041D35             0531*    ; load an image file to a buffer and make it a bitmap
041D35             0532*    ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
041D35             0533*    vdu_load_img:
041D35             0534*    ; back up image type and dimension parameters
041D35 22 E8 1C 04 0535*        ld (bufferId0),hl
041D39 F5          0536*        push af
041D3A C5          0537*    	push bc
041D3B D5          0538*    	push de
041D3C             0539*    ; load the image
041D3C CD 57 1D 04 0540*    	call vdu_load_buffer_from_file
041D40             0541*    ; now make it a bitmap
041D40 2A E8 1C 04 0542*        ld hl,(bufferId0)
041D44 CD 1A 1D 04 0543*        call vdu_consolidate_buffer
041D48 2A E8 1C 04 0544*        ld hl,(bufferId0)
041D4C CD 43 1C 04 0545*        call vdu_buff_select
041D50 D1          0546*    	pop de ; image height
041D51 C1          0547*    	pop bc ; image width
041D52 F1          0548*    	pop af ; image type
041D53 C3 58 1C 04 0549*    	jp vdu_bmp_create ; will return to caller from there
041D57             0550*    
041D57             0551*    ; inputs: hl = bufferId; iy = pointer to filename
041D57             0552*    vdu_load_buffer_from_file:
041D57 22 E8 1C 04 0553*        ld (bufferId0),hl
041D5B             0554*    
041D5B             0555*    ; clear target buffer
041D5B CD 03 1F 04 0556*        call vdu_clear_buffer
041D5F             0557*    
041D5F             0558*    ; open the file in read mode
041D5F             0559*    ; Open a file
041D5F             0560*    ; HLU: Filename
041D5F             0561*    ;   C: Mode
041D5F             0562*    ; Returns:
041D5F             0563*    ;   A: Filehandle, or 0 if couldn't open
041D5F FD E5       0564*    	push iy ; pointer to filename
041D61 E1          0565*    	pop hl
041D62 0E 01       0566*    	ld c,fa_read
041D64             0567*        MOSCALL mos_fopen
                       M1 Args: function=mos_fopen 
041D64 3E 0A       0001*M1  			LD	A, function
041D66 5B CF       0002*M1  			RST.LIL	08h
041D68 32 A3 1D 04 0568*        ld (@filehandle),a
041D6C             0569*    
041D6C             0570*    @read_file:
041D6C             0571*    ; Read a block of data from a file
041D6C             0572*    ;   C: Filehandle
041D6C             0573*    ; HLU: Pointer to where to write the data to
041D6C             0574*    ; DEU: Number of bytes to read
041D6C             0575*    ; Returns:
041D6C             0576*    ; DEU: Number of bytes read
041D6C 3A A3 1D 04 0577*        ld a,(@filehandle)
041D70 4F          0578*        ld c,a
041D71 21 00 E0 B7 0579*        ld hl,filedata
041D75 11 00 20 00 0580*        ld de,8192 ; max we can read into onboard sram at one time
041D79             0581*        MOSCALL mos_fread
                       M1 Args: function=mos_fread 
041D79 3E 1A       0001*M1  			LD	A, function
041D7B 5B CF       0002*M1  			RST.LIL	08h
041D7D             0582*    
041D7D             0583*    ; test de for zero bytes read
041D7D 21 00 00 00 0584*        ld hl,0
041D81 AF          0585*        xor a ; clear carry
041D82 ED 52       0586*        sbc hl,de
041D84 CA 9A 1D 04 0587*        jp z,@close_file
041D88             0588*    
041D88             0589*    ; load a vdu buffer from local memory
041D88             0590*    ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041D88 2A E8 1C 04 0591*        ld hl,(bufferId0)
041D8C D5          0592*        push de ; chunksize
041D8D C1          0593*        pop bc
041D8E 11 00 E0 B7 0594*        ld de,filedata
041D92 CD EE 1C 04 0595*        call vdu_load_buffer
041D96             0596*    
041D96             0597*    ; read the next block
041D96 C3 6C 1D 04 0598*        jp @read_file
041D9A             0599*    
041D9A             0600*    ; close the file
041D9A             0601*    @close_file:
041D9A 3A A3 1D 04 0602*        ld a,(@filehandle)
041D9E             0603*        MOSCALL mos_fclose
                       M1 Args: function=mos_fclose 
041D9E 3E 0B       0001*M1  			LD	A, function
041DA0 5B CF       0002*M1  			RST.LIL	08h
041DA2 C9          0604*        ret ; vdu_load_buffer_from_file
041DA3             0605*    
041DA3 00          0606*    @filehandle: db 0 ; file handle
041DA4 00 00 00    0607*    @fil: dl 0 ; pointer to FIL struct
041DA7             0608*    
041DA7 00 00 00    0609*    @chunkpointer: dl 0 ; pointer to current chunk
041DAA             0610*    
041DAA             0611*    ; File information structure (FILINFO)
041DAA             0612*    @filinfo:
041DAA 00 00 00 00 0613*    @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
041DAE 00 00       0614*    @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
041DB0 00 00       0615*    @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041DB2 00          0616*    @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041DB3 00 00 00 00 0617*    @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
041DC0 00 00 00 00 0618*    @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041EC0             0040         include "vdu_buffered_api.inc"
041EC0             0001*    ; https://agonconsole8.github.io/agon-docs/vdp/Buffered-Commands-API/
041EC0             0002*    
041EC0             0003*    ; Command 0: Write block to a buffer
041EC0             0004*    ; VDU 23, 0, &A0, bufferId; 0, length; <buffer-data>
041EC0             0005*    ; inputs: hl = bufferId, bc = length of data, de = pointer to data
041EC0             0006*    vdu_write_block_to_buffer:
041EC0             0007*    ; back up input parameters
041EC0 D5          0008*        push de ; pointer to data
041EC1 C5          0009*        push bc ; length of data
041EC2             0010*    ; set up the vdu command string
041EC2 22 E2 1E 04 0011*        ld (@bufferId),hl
041EC6 ED 43 E5 1E 0012*        ld (@length),bc
       04          
041ECB AF          0013*        xor a ; load buffer
041ECC 32 E4 1E 04 0014*        ld (@bufferId+2),a
041ED0 21 DF 1E 04 0015*        ld hl,@cmd0
041ED4 01 08 00 00 0016*        ld bc,@end0-@cmd0
041ED8 5B DF       0017*        rst.lil $18
041EDA             0018*    ; send the buffer data
041EDA C1          0019*        pop bc ; length of data
041EDB E1          0020*        pop hl ; pointer to data (was de)
041EDC 5B DF       0021*        rst.lil $18 ; send it
041EDE C9          0022*        ret
041EDF             0023*    ; command string data
041EDF 17 00 A0    0024*    @cmd0:      db 23,0,0xA0
041EE2 00 00       0025*    @bufferId:	dw 0x0000
041EE4 00          0026*                db 0 ; load buffer
041EE5 00 00       0027*    @length:	dw 0x0000
041EE7 00          0028*    @end0:      db 0x00 ; padding
041EE8             0029*    ; end vdu_write_block_to_buffer
041EE8             0030*    
041EE8             0031*    ; Command 1: Call a buffer
041EE8             0032*    ; VDU 23, 0, &A0, bufferId; 1
041EE8             0033*    ; inputs: hl = bufferId
041EE8             0034*    vdu_call_buffer:
041EE8 22 00 1F 04 0035*        ld (@bufferId),hl
041EEC 3E 01       0036*        ld a,1 ; call buffer
041EEE 32 02 1F 04 0037*        ld (@bufferId+2),a
041EF2 21 FD 1E 04 0038*        ld hl,@cmd
041EF6 01 06 00 00 0039*        ld bc,@end-@cmd
041EFA 5B DF       0040*        rst.lil $18
041EFC C9          0041*        ret
041EFD 17 00 A0    0042*    @cmd:     db 23,0,0xA0
041F00 00 00       0043*    @bufferId: dw 0x0000
041F02 01          0044*               db 1 ; call buffer
041F03             0045*    @end:
041F03             0046*    ; end vdu_call_buffer
041F03             0047*    
041F03             0048*    ; Command 2: Clear a buffer
041F03             0049*    ; VDU 23, 0 &A0, bufferId; 2
041F03             0050*    ; inputs: hl = bufferId
041F03             0051*    vdu_clear_buffer:
041F03 22 1B 1F 04 0052*        ld (@bufferId),hl
041F07 3E 02       0053*        ld a,2 ; clear buffer
041F09 32 1D 1F 04 0054*        ld (@bufferId+2),a
041F0D 21 18 1F 04 0055*        ld hl,@cmd
041F11 01 06 00 00 0056*        ld bc,@end-@cmd
041F15 5B DF       0057*        rst.lil $18
041F17 C9          0058*        ret
041F18 17 00 A0    0059*    @cmd:     db 23,0,0xA0
041F1B 00 00       0060*    @bufferId: dw 0x0000
041F1D 02          0061*               db 2 ; clear buffer
041F1E             0062*    @end:
041F1E             0063*    ; end vdu_clear_buffer
041F1E             0064*    
041F1E             0065*    ; Clear all buffers
041F1E             0066*    ; inputs: none
041F1E             0067*    vdu_clear_all_buffers:
041F1E             0068*    ; clear all buffers
041F1E 21 29 1F 04 0069*        ld hl,@beg
041F22 01 06 00 00 0070*        ld bc,@end-@beg
041F26 5B DF       0071*        rst.lil $18
041F28 C9          0072*        ret
041F29 17 00 A0    0073*    @beg: db 23,0,$A0
041F2C FF FF       0074*          dw -1 ; bufferId -1 (65535) means clear all buffers
041F2E 02          0075*          db 2  ; command 2: clear a buffer
041F2F             0076*    @end:
041F2F             0077*    ; end vdu_clear_all_buffers
041F2F             0078*    
041F2F             0079*    ; Command 3: Create a writeable buffer
041F2F             0080*    ; VDU 23, 0 &A0, bufferId; 3, length;
041F2F             0081*    ; inputs: hl = bufferId, bc = length
041F2F             0082*    vdu_create_writeable_buffer:
041F2F 22 4C 1F 04 0083*        ld (@bufferId),hl
041F33 ED 43 4F 1F 0084*        ld (@length),bc
       04          
041F38 3E 03       0085*        ld a,3 ; create writeable buffer
041F3A 32 4E 1F 04 0086*        ld (@bufferId+2),a
041F3E 21 49 1F 04 0087*        ld hl,@cmd
041F42 01 08 00 00 0088*        ld bc,@end-@cmd
041F46 5B DF       0089*        rst.lil $18
041F48 C9          0090*        ret
041F49 17 00 A0    0091*    @cmd:     db 23,0,0xA0
041F4C 00 00       0092*    @bufferId: dw 0x0000
041F4E 03          0093*               db 3 ; create writeable buffer
041F4F 00 00       0094*    @length: dw 0x0000
041F51 00          0095*    @end:     db 0x00 ; padding
041F52             0096*    ; end vdu_create_writeable_buffer
041F52             0097*    
041F52             0098*    ; Command 4: Set output stream to a buffer
041F52             0099*    ; VDU 23, 0 &A0, bufferId; 4
041F52             0100*    ; inputs: hl = bufferId
041F52             0101*    vdu_set_output_stream_buffer:
041F52 22 6A 1F 04 0102*        ld (@bufferId),hl
041F56 3E 04       0103*        ld a,4 ; set output stream to buffer
041F58 32 6C 1F 04 0104*        ld (@bufferId+2),a
041F5C 21 67 1F 04 0105*        ld hl,@cmd
041F60 01 06 00 00 0106*        ld bc,@end-@cmd
041F64 5B DF       0107*        rst.lil $18
041F66 C9          0108*        ret
041F67 17 00 A0    0109*    @cmd:     db 23,0,0xA0
041F6A 00 00       0110*    @bufferId: dw 0x0000
041F6C 04          0111*               db 4 ; set output stream to buffer
041F6D 00          0112*    @end:     db 0x00 ; padding
041F6E             0113*    ; end vdu_set_output_stream_buffer
041F6E             0114*    
041F6E             0115*    ; Command 5: Adjust buffer contents
041F6E             0116*    ; VDU 23, 0, &A0, bufferId; 5, operation, offset; [count;] <operand>, [arguments]
041F6E             0117*    vdu_adjust_buffer:
041F6E C9          0118*        ret ; TODO: implement
041F6F             0119*    ; end vdu_adjust_buffer
041F6F             0120*    
041F6F             0121*    ; Command 6: Conditionally call a buffer
041F6F             0122*    ; VDU 23, 0, &A0, bufferId; 6, operation, checkBufferId; checkOffset; [arguments]
041F6F             0123*    vdu_call_buffer_conditional:
041F6F C9          0124*        ret ; TODO: implement
041F70             0125*    ; end vdu_call_buffer_conditional
041F70             0126*    
041F70             0127*    ; Command 7: Jump to a buffer
041F70             0128*    ; VDU 23, 0, &A0, bufferId; 7
041F70             0129*    ; inputs: hl = bufferId
041F70             0130*    vdu_jump_to_buffer:
041F70 22 88 1F 04 0131*        ld (@bufferId),hl
041F74 3E 07       0132*        ld a,7 ; jump to buffer
041F76 32 8A 1F 04 0133*        ld (@bufferId+2),a
041F7A 21 85 1F 04 0134*        ld hl,@cmd
041F7E 01 06 00 00 0135*        ld bc,@end-@cmd
041F82 5B DF       0136*        rst.lil $18
041F84 C9          0137*        ret
041F85 17 00 A0    0138*    @cmd:     db 23,0,0xA0
041F88 00 00       0139*    @bufferId: dw 0x0000
041F8A 07          0140*               db 7 ; jump to buffer
041F8B 00          0141*    @end:     db 0x00 ; padding
041F8C             0142*    ; end vdu_jump_to_buffer
041F8C             0143*    
041F8C             0144*    ; Command 8: Conditional Jump to a buffer
041F8C             0145*    ; VDU 23, 0, &A0, bufferId; 8, operation, checkBufferId; checkOffset; [arguments]
041F8C             0146*    vdu_jump_to_buffer_conditional:
041F8C C9          0147*        ret ; TODO: implement
041F8D             0148*    ; end vdu_jump_to_buffer_conditional
041F8D             0149*    
041F8D             0150*    ; Command 9: Jump to an offset in a buffer
041F8D             0151*    ; VDU 23, 0, &A0, bufferId; 9, offset; offsetHighByte, [blockNumber;]
041F8D             0152*    vdu_jump_to_buffer_offset:
041F8D C9          0153*        ret ; TODO: implement
041F8E             0154*    ; end vdu_jump_to_buffer_offset
041F8E             0155*    
041F8E             0156*    ; Command 10: Conditional jump to an offset in a buffer
041F8E             0157*    ; VDU 23, 0, &A0, bufferId; 10, offset; offsetHighByte, [blockNumber;] [arguments]
041F8E             0158*    vdu_jump_to_buffer_offset_conditional:
041F8E C9          0159*        ret ; TODO: implement
041F8F             0160*    ; end vdu_jump_to_buffer_offset_conditional
041F8F             0161*    
041F8F             0162*    ; Command 11: Call buffer with an offset
041F8F             0163*    ; VDU 23, 0, &A0, bufferId; 11, offset; offsetHighByte, [blockNumber;]
041F8F             0164*    vdu_call_buffer_offset:
041F8F C9          0165*        ret ; TODO: implement
041F90             0166*    ; end vdu_call_buffer_offset
041F90             0167*    
041F90             0041         include "vdu_fonts.inc"
041F90             0001*    ; select font
041F90             0002*    ; inputs: hl = bufferId, a = font flags
041F90             0003*    ; Flags:
041F90             0004*    ; Bit	Description
041F90             0005*    ; 0	Adjust cursor position to ensure text baseline is aligned
041F90             0006*    ;   0: Do not adjust cursor position (best for changing font on a new line)
041F90             0007*    ;   1: Adjust cursor position (best for changing font in the middle of a line)
041F90             0008*    ; 1-7	Reserved for future use
041F90             0009*    ; VDU 23, 0, &95, 0, bufferId; flags: Select font
041F90             0010*    vdu_font_select:
041F90 22 A7 1F 04 0011*        ld (@bufferId),hl
041F94 32 A9 1F 04 0012*        ld (@flags),a
041F98 21 A3 1F 04 0013*        ld hl,@cmd
041F9C 01 07 00 00 0014*        ld bc,@end-@cmd
041FA0 5B DF       0015*        rst.lil $18
041FA2 C9          0016*        ret
041FA3 17 00 95 00 0017*    @cmd: db 23, 0, 0x95, 0
041FA7 00 00       0018*    @bufferId: dw 0x0000
041FA9 00          0019*    @flags: db 0x00
041FAA             0020*    @end:
041FAA             0021*    
041FAA             0022*    ; create font from buffer
041FAA             0023*    ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041FAA             0024*    ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041FAA             0025*    vdu_font_create:
041FAA 22 CF 1F 04 0026*        ld (@bufferId),hl
041FAE ED 53 D1 1F 0027*        ld (@width),de ; also loads height
       04          
041FB3 32 D4 1F 04 0028*        ld (@flags),a
041FB7 7A          0029*        ld a,d ; height
041FB8 32 D3 1F 04 0030*        ld (@ascent),a ; ascent = height
041FBC             0031*    ; consolidate buffer
041FBC CD 1A 1D 04 0032*        call vdu_consolidate_buffer
041FC0             0033*    ; create font
041FC0 21 CB 1F 04 0034*        ld hl,@cmd
041FC4 01 0A 00 00 0035*        ld bc,@end-@cmd
041FC8 5B DF       0036*        rst.lil $18
041FCA C9          0037*        ret
041FCB 17 00 95 01 0038*    @cmd: db 23, 0, 0x95, 1
041FCF 00 00       0039*    @bufferId: dw 0x0000
041FD1 00          0040*    @width: db 0x00
041FD2 00          0041*    @height: db 0x00
041FD3 00          0042*    @ascent: db 0x00
041FD4 00          0043*    @flags: db 0x00
041FD5             0044*    @end:
041FD5             0045*    
041FD5             0046*    ; set or adjust font property
041FD5             0047*    ; inputs: hl = bufferId, a = field, de = value
041FD5             0048*    ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041FD5             0049*    vdu_font_property:
041FD5 22 F1 1F 04 0050*        ld (@bufferId),hl
041FD9 32 F3 1F 04 0051*        ld (@field),a
041FDD ED 53 F4 1F 0052*        ld (@value),de
       04          
041FE2 21 ED 1F 04 0053*        ld hl,@cmd
041FE6 01 09 00 00 0054*        ld bc,@end-@cmd
041FEA 5B DF       0055*        rst.lil $18
041FEC C9          0056*        ret
041FED 17 00 95 02 0057*    @cmd: db 23, 0, 0x95, 2
041FF1 00 00       0058*    @bufferId: dw 0x0000
041FF3 00          0059*    @field: db 0x00
041FF4 00 00       0060*    @value: dw 0x0000
041FF6 00          0061*    @end: db 0x00 ; padding
041FF7             0062*    
041FF7             0063*    ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
041FF7             0064*    
041FF7             0065*    ; Clear/Delete font
041FF7             0066*    ; inputs: hl = bufferId
041FF7             0067*    ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
041FF7             0068*    vdu_font_clear:
041FF7 22 0A 20 04 0069*        ld (@bufferId),hl
041FFB 21 06 20 04 0070*        ld hl,@cmd
041FFF 01 06 00 00 0071*        ld bc,@end-@cmd
042003 5B DF       0072*        rst.lil $18
042005 C9          0073*        ret
042006 17 00 95 04 0074*    @cmd: db 23, 0, 0x95, 4
04200A 00 00       0075*    @bufferId: dw 0x0000
04200C 00          0076*    @end: db 0x00 ; padding
04200D             0077*    
04200D             0078*    ; Copy system font to buffer
04200D             0079*    ; inputs: hl = bufferId
04200D             0080*    ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
04200D             0081*    vdu_font_copy_system:
04200D 22 20 20 04 0082*        ld (@bufferId),hl
042011 21 1C 20 04 0083*        ld hl,@cmd
042015 01 06 00 00 0084*        ld bc,@end-@cmd
042019 5B DF       0085*        rst.lil $18
04201B C9          0086*        ret
04201C 17 00 95 05 0087*    @cmd: db 23, 0, 0x95, 5
042020 00 00       0088*    @bufferId: dw 0x0000
042022 00          0089*    @end: db 0x00 ; padding
042023             0042         include "vdu_plot.inc"
042023             0001*    ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
042023             0002*    ; PLOT code 	(Decimal) 	Effect
042023             0003*    ; &00-&07 	0-7 	Solid line, includes both ends
042023             0004*    plot_sl_both: equ 0x00
042023             0005*    
042023             0006*    ; &08-&0F 	8-15 	Solid line, final point omitted
042023             0007*    plot_sl_first: equ 0x08
042023             0008*    
042023             0009*    ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
042023             0010*    ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
042023             0011*    
042023             0012*    ; &20-&27 	32-39 	Solid line, first point omitted
042023             0013*    plot_sl_last: equ 0x20
042023             0014*    
042023             0015*    ; &28-&2F 	40-47 	Solid line, both points omitted
042023             0016*    plot_sl_none: equ 0x28
042023             0017*    
042023             0018*    ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
042023             0019*    ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
042023             0020*    
042023             0021*    ; &40-&47 	64-71 	Point plot
042023             0022*    plot_pt: equ 0x40
042023             0023*    
042023             0024*    ; &48-&4F 	72-79 	Line fill left and right to non-background §§
042023             0025*    plot_lf_lr_non_bg: equ 0x48
042023             0026*    
042023             0027*    ; &50-&57 	80-87 	Triangle fill
042023             0028*    plot_tf: equ 0x50
042023             0029*    
042023             0030*    ; &58-&5F 	88-95 	Line fill right to background §§
042023             0031*    plot_lf_r_bg: equ 0x58
042023             0032*    
042023             0033*    ; &60-&67 	96-103 	Rectangle fill
042023             0034*    plot_rf: equ 0x60
042023             0035*    
042023             0036*    ; &68-&6F 	104-111 	Line fill left and right to foreground §§
042023             0037*    plot_lf_lr_fg: equ 0x60
042023             0038*    
042023             0039*    ; &70-&77 	112-119 	Parallelogram fill
042023             0040*    plot_pf: equ 0x70
042023             0041*    
042023             0042*    ; &78-&7F 	120-127 	Line fill right to non-foreground §§
042023             0043*    plot_lf_r_non_fg: equ 0x78
042023             0044*    
042023             0045*    ; &80-&87 	128-135 	Not supported (Flood until non-background)
042023             0046*    ; &88-&8F 	136-143 	Not supported (Flood until foreground)
042023             0047*    
042023             0048*    ; &90-&97 	144-151 	Circle outline
042023             0049*    plot_co: equ 0x90
042023             0050*    
042023             0051*    ; &98-&9F 	152-159 	Circle fill
042023             0052*    plot_cf: equ 0x98
042023             0053*    
042023             0054*    ; &A0-&A7 	160-167 	Not supported (Circular arc)
042023             0055*    ; &A8-&AF 	168-175 	Not supported (Circular segment)
042023             0056*    ; &B0-&B7 	176-183 	Not supported (Circular sector)
042023             0057*    
042023             0058*    ; &B8-&BF 	184-191 	Rectangle copy/move
042023             0059*    plot_rcm: equ 0xB8
042023             0060*    
042023             0061*    ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
042023             0062*    ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
042023             0063*    ; &D0-&D7 	208-215 	Not defined
042023             0064*    ; &D8-&DF 	216-223 	Not defined
042023             0065*    ; &E0-&E7 	224-231 	Not defined
042023             0066*    
042023             0067*    ; &E8-&EF 	232-239 	Bitmap plot §
042023             0068*    plot_bmp: equ 0xE8
042023             0069*    
042023             0070*    ; &F0-&F7 	240-247 	Not defined
042023             0071*    ; &F8-&FF 	248-255 	Not defined
042023             0072*    
042023             0073*    ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
042023             0074*    ; Agon Console8 VDP 2.2.0
042023             0075*    
042023             0076*    ; Within each group of eight plot codes, the effects are as follows:
042023             0077*    ; Plot code 	Effect
042023             0078*    ; 0 	Move relative
042023             0079*    mv_rel: equ 0
042023             0080*    
042023             0081*    ; 1 	Plot relative in current foreground colour
042023             0082*    dr_rel_fg: equ 1
042023             0083*    
042023             0084*    ; 2 	Not supported (Plot relative in logical inverse colour)
042023             0085*    ; 3 	Plot relative in current background colour
042023             0086*    dr_rel_bg: equ 3
042023             0087*    
042023             0088*    ; 4 	Move absolute
042023             0089*    mv_abs: equ 4
042023             0090*    
042023             0091*    ; 5 	Plot absolute in current foreground colour
042023             0092*    dr_abs_fg: equ 5
042023             0093*    
042023             0094*    ; 6 	Not supported (Plot absolute in logical inverse colour)
042023             0095*    ; 7 	Plot absolute in current background colour
042023             0096*    dr_abs_bg: equ 7
042023             0097*    
042023             0098*    ; Codes 0-3 use the position data provided as part of the command
042023             0099*    ; as a relative position, adding the position given to the current
042023             0100*    ; graphical cursor position. Codes 4-7 use the position data provided
042023             0101*    ; as part of the command as an absolute position, setting the current
042023             0102*    ; graphical cursor position to the position given.
042023             0103*    
042023             0104*    ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
042023             0105*    ; current pixel colour. These operations cannot currently be supported
042023             0106*    ; by the graphics system the Agon VDP uses, so these codes are not
042023             0107*    ; supported. Support for these codes may be added in a future version
042023             0108*    ; of the VDP firmware.
042023             0109*    
042023             0110*    ; 16 colour palette constants
042023             0111*    c_black: equ 0
042023             0112*    c_red_dk: equ 1
042023             0113*    c_green_dk: equ 2
042023             0114*    c_yellow_dk: equ 3
042023             0115*    c_blue_dk: equ 4
042023             0116*    c_magenta_dk: equ 5
042023             0117*    c_cyan_dk: equ 6
042023             0118*    c_grey: equ 7
042023             0119*    c_grey_dk: equ 8
042023             0120*    c_red: equ 9
042023             0121*    c_green: equ 10
042023             0122*    c_yellow: equ 11
042023             0123*    c_blue: equ 12
042023             0124*    c_magenta: equ 13
042023             0125*    c_cyan: equ 14
042023             0126*    c_white: equ 15
042023             0127*    
042023             0128*    ; VDU 25, mode, x; y;: PLOT command
042023             0129*    ; inputs: a=mode, bc=x0, de=y0
042023             0130*    vdu_plot:
042023 32 3D 20 04 0131*        ld (@mode),a
042027 ED 43 3E 20 0132*        ld (@x0),bc
       04          
04202C ED 53 40 20 0133*        ld (@y0),de
       04          
042031 21 3C 20 04 0134*    	ld hl,@cmd
042035 01 06 00 00 0135*    	ld bc,@end-@cmd
042039 5B DF       0136*    	rst.lil $18
04203B C9          0137*    	ret
04203C 19          0138*    @cmd:   db 25
04203D 00          0139*    @mode:  db 0
04203E 00 00       0140*    @x0: 	dw 0
042040 00 00       0141*    @y0: 	dw 0
042042 00          0142*    @end:   db 0 ; extra byte to soak up deu
042043             0143*    
042043             0144*    ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
042043             0145*    ; &E8-&EF 	232-239 	Bitmap plot §
042043             0146*    ; VDU 25, mode, x; y;: PLOT command
042043             0147*    ; inputs: bc=x0, de=y0
042043             0148*    ; prerequisites: vdu_buff_select
042043             0149*    vdu_plot_bmp:
042043 ED 43 5A 20 0150*        ld (@x0),bc
       04          
042048 ED 53 5C 20 0151*        ld (@y0),de
       04          
04204D 21 58 20 04 0152*    	ld hl,@cmd
042051 01 06 00 00 0153*    	ld bc,@end-@cmd
042055 5B DF       0154*    	rst.lil $18
042057 C9          0155*    	ret
042058 19          0156*    @cmd:   db 25
042059 ED          0157*    @mode:  db plot_bmp+dr_abs_fg ; 0xED
04205A 00 00       0158*    @x0: 	dw 0x0000
04205C 00 00       0159*    @y0: 	dw 0x0000
04205E 00          0160*    @end:   db 0x00 ; padding
04205F             0161*    
04205F             0162*    ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04205F             0163*    ; &E8-&EF 	232-239 	Bitmap plot §
04205F             0164*    ; VDU 25, mode, x; y;: PLOT command
04205F             0165*    ; inputs: bc=x0, de=y0
04205F             0166*    ; USING 16.8 FIXED POINT COORDINATES
04205F             0167*    ; inputs: ub.c is x coordinate, ud.e is y coordinate
04205F             0168*    ;   the fractional portiion of the inputs are truncated
04205F             0169*    ;   leaving only the 16-bit integer portion
04205F             0170*    ; prerequisites: vdu_buff_select
04205F             0171*    vdu_plot_bmp168:
04205F             0172*    ; populate in the reverse of normal to keep the
04205F             0173*    ; inputs from stomping on each other
04205F ED 53 7D 20 0174*        ld (@y0-1),de
       04          
042064 ED 43 7B 20 0175*        ld (@x0-1),bc
       04          
042069 3E ED       0176*        ld a,plot_bmp+dr_abs_fg ; 0xED
04206B 32 7B 20 04 0177*        ld (@mode),a ; restore the mode byte that got stomped on by bcu
04206F 21 7A 20 04 0178*    	ld hl,@cmd
042073 01 06 00 00 0179*    	ld bc,@end-@cmd
042077 5B DF       0180*    	rst.lil $18
042079 C9          0181*    	ret
04207A 19          0182*    @cmd:   db 25
04207B ED          0183*    @mode:  db plot_bmp+dr_abs_fg ; 0xED
04207C 00 00       0184*    @x0: 	dw 0x0000
04207E 00 00       0185*    @y0: 	dw 0x0000
042080             0186*    @end:  ; no padding required b/c we shifted de right
042080             0187*    
042080             0188*    ; draw a filled rectangle
042080             0189*    vdu_plot_rf:
042080 ED 43 A7 20 0190*        ld (@x0),bc
       04          
042085 ED 53 A9 20 0191*        ld (@y0),de
       04          
04208A DD 22 AD 20 0192*        ld (@x1),ix
       04          
04208F FD 22 AF 20 0193*        ld (@y1),iy
       04          
042094 3E 19       0194*        ld a,25 ; we have to reload the 2nd plot command
042096 32 AB 20 04 0195*        ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04209A 21 A5 20 04 0196*    	ld hl,@cmd0
04209E 01 0C 00 00 0197*    	ld bc,@end-@cmd0
0420A2 5B DF       0198*    	rst.lil $18
0420A4 C9          0199*        ret
0420A5 19          0200*    @cmd0:  db 25 ; plot
0420A6 04          0201*    @arg0:  db plot_sl_both+mv_abs
0420A7 00 00       0202*    @x0:    dw 0x0000
0420A9 00 00       0203*    @y0:    dw 0x0000
0420AB 19          0204*    @cmd1:  db 25 ; plot
0420AC 65          0205*    @arg1:  db plot_rf+dr_abs_fg
0420AD 00 00       0206*    @x1:    dw 0x0000
0420AF 00 00       0207*    @y1:    dw 0x0000
0420B1 00          0208*    @end:   db 0x00 ; padding
0420B2             0209*    
0420B2             0210*    ; draw a filled circle
0420B2             0211*    vdu_plot_cf:
0420B2 ED 43 D9 20 0212*        ld (@x0),bc
       04          
0420B7 ED 53 DB 20 0213*        ld (@y0),de
       04          
0420BC DD 22 DF 20 0214*        ld (@x1),ix
       04          
0420C1 FD 22 E1 20 0215*        ld (@y1),iy
       04          
0420C6 3E 19       0216*        ld a,25 ; we have to reload the 2nd plot command
0420C8 32 DD 20 04 0217*        ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0420CC 21 D7 20 04 0218*    	ld hl,@cmd0
0420D0 01 0C 00 00 0219*    	ld bc,@end-@cmd0
0420D4 5B DF       0220*    	rst.lil $18
0420D6 C9          0221*        ret
0420D7 19          0222*    @cmd0:  db 25 ; plot
0420D8 04          0223*    @arg0:  db plot_sl_both+mv_abs
0420D9 00 00       0224*    @x0:    dw 0x0000
0420DB 00 00       0225*    @y0:    dw 0x0000
0420DD 19          0226*    @cmd1:  db 25 ; plot
0420DE 9D          0227*    @arg1:  db plot_cf+dr_abs_fg
0420DF 00 00       0228*    @x1:    dw 0x0000
0420E1 00 00       0229*    @y1:    dw 0x0000
0420E3 00          0230*    @end:   db 0x00 ; padding
0420E4             0043         include "vdu_sound.inc"
0420E4             0001*    ; enable enough additional channels so that total enabled = max_channels
0420E4             0002*    ; inputs: max_channels set
0420E4             0003*    ; returns: nothing
0420E4             0004*    ; destroys: af, bc, hl
0420E4             0005*    vdu_enable_channels:
0420E4 3E 01       0006*        ld a,max_channels
0420E6 D6 03       0007*        sub 3 ; subtract number of default channels already enabled
0420E8 F2 EF 20 04 0008*        jp p,@loop
0420EC C9          0009*        ret
0420ED 3E 03       0010*        ld a,3 ; first non-default channel
0420EF             0011*    @loop:
0420EF 32 0A 21 04 0012*        ld (@channel),a
0420F3 21 07 21 04 0013*        ld hl,@beg
0420F7 01 05 00 00 0014*        ld bc,@end-@beg
0420FB F5          0015*        push af
0420FC 5B DF       0016*        rst.lil $18
0420FE F1          0017*        pop af
0420FF 3C          0018*        inc a
042100 FE 01       0019*        cp max_channels
042102 C2 EF 20 04 0020*        jp nz,@loop
042106 C9          0021*        ret
042107             0022*    @beg:
042107 17 00 85    0023*                db 23, 0, $85
04210A 00          0024*    @channel:   db 0
04210B 08          0025*                db 8 ; command 8: enable channel
04210C             0026*    @end:
04210C             0027*    
04210C             0028*    ; disable all but the three default sound channels
04210C             0029*    ; inputs: max_channels set
04210C             0030*    ; outputs: none
04210C             0031*    ; destroys: ah,hl,bc
04210C             0032*    vdu_disable_channels:
04210C 3E 01       0033*        ld a,max_channels
04210E D6 03       0034*        sub 3 ; subtract number of default channels already enabled
042110 F2 17 21 04 0035*        jp p,@loop
042114 C9          0036*        ret
042115 3E 03       0037*        ld a,3 ; first non-default channel
042117             0038*    @loop:
042117 32 32 21 04 0039*        ld (@channel),a
04211B 21 2F 21 04 0040*        ld hl,@beg
04211F 01 05 00 00 0041*        ld bc,@end-@beg
042123 F5          0042*        push af
042124 5B DF       0043*        rst.lil $18
042126 F1          0044*        pop af
042127 3C          0045*        inc a
042128 FE 01       0046*        cp max_channels
04212A C2 17 21 04 0047*        jp nz,@loop
04212E C9          0048*        ret
04212F             0049*    @beg:
04212F 17 00 85    0050*        db 23, 0, $85
042132 00          0051*    @channel: db 0
042133 09          0052*        db 9 ; command 9: disable channel
042134             0053*    @end:
042134             0054*    
042134             0055*    
042134             0056*    ; ############################################################
042134             0057*    ; VDU SOUND API
042134             0058*    ; ############################################################
042134             0059*    ; Command 0: Play note
042134             0060*    ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
042134             0061*        MACRO PLAY_NOTE channel, volume, frequency, duration
042134             0062*        ld hl, @PLAY_NOTE_CMD        ; Start of command block
042134             0063*        ld bc, @PLAY_NOTE_END - @PLAY_NOTE_CMD  ; Command block size
042134             0064*        rst.lil $18
042134             0065*        jr @PLAY_NOTE_END
042134             0066*    @PLAY_NOTE_CMD:  db 23, 0, 0x85               ; Command header
042134             0067*                     db channel                  ; Channel, 0 (commented out)
042134             0068*                     db 0                        ; Play note command
042134             0069*                     db volume                   ; Volume
042134             0070*                     dw frequency                ; Frequency
042134             0071*                     dw duration                 ; Duration
042134             0072*    @PLAY_NOTE_END:
042134             0073*        ENDMACRO
042134             0074*    
042134             0075*        MACRO MUTE_CHANNEL channel
042134             0076*        ld hl, @MUTE_CHANNEL_CMD     ; Start of command block
042134             0077*        ld bc, @MUTE_CHANNEL_END - @MUTE_CHANNEL_CMD  ; Command block size
042134             0078*        rst.lil $18
042134             0079*        jr @MUTE_CHANNEL_END
042134             0080*    @MUTE_CHANNEL_CMD: db 23, 0, 0x85             ; Command header
042134             0081*                       db channel                ; Channel, 0 (commented out)
042134             0082*                       db 2                      ; Set volume command
042134             0083*                       db 0                      ; Volume (mute)
042134             0084*    @MUTE_CHANNEL_END:
042134             0085*        ENDMACRO
042134             0086*    
042134             0087*    ; inputs: c = channel, b = volume, hl = frequency; de = duration;
042134             0088*    vdu_play_note:
042134 79          0089*        ld a,c
042135 32 55 21 04 0090*        ld (@channel),a
042139 78          0091*        ld a,b
04213A 32 57 21 04 0092*        ld (@volume),a
04213E 22 58 21 04 0093*        ld (@frequency),hl
042142 ED 53 5A 21 0094*        ld (@duration),de
       04          
042147 21 52 21 04 0095*        ld hl,@cmd
04214B 01 0A 00 00 0096*        ld bc,@end-@cmd
04214F 5B DF       0097*        rst.lil $18
042151 C9          0098*        ret
042152 17 00 85    0099*    @cmd:       db 23, 0, 0x85
042155 00          0100*    @channel:   db 0x00
042156 00          0101*                db 0x00 ; play note command
042157 00          0102*    @volume:    db 0x00
042158 00 00       0103*    @frequency: dw 0x0000
04215A 00 00       0104*    @duration:  dw 0x0000
04215C 00          0105*    @end:       db 0x00 ; padding
04215D             0106*    
04215D             0107*    ; Command 1: Status
04215D             0108*    ; VDU 23, 0, &85, channel, 1
04215D             0109*    ; inputs: a = channel
04215D             0110*    ; Returns a bit mask indicating the status of the specified channel, or 255 if the channel is not valid, or has been disabled. The bit mask is as follows:
04215D             0111*    ; Bit 	Name 	Meaning
04215D             0112*    ; 0 	Active 	When set this indicates the channel is in use (has an active waveform)
04215D             0113*    ; 1 	Playing 	Indicates the channel is actively playing a note, and thus will reject calls to play a new note
04215D             0114*    ; 2 	Indefinite 	Set if the channel is playing an indefinite duration note
04215D             0115*    ; 3 	Has Volume Envelope 	Set if the channel has a volume envelope
04215D             0116*    ; 4 	Has Frequency Envelope 	Set if the channel has a frequency envelope
04215D             0117*    
04215D             0118*    ; Bits 5-7 are reserved for future use and, for enabled channels, will currently always be zero.
04215D             0119*    vdu_channel_status:
04215D 32 6F 21 04 0120*        ld (@channel),a
042161 21 6C 21 04 0121*        ld hl,@cmd
042165 01 05 00 00 0122*        ld bc,@end-@cmd
042169 5B DF       0123*        rst.lil $18
04216B C9          0124*        ret
04216C 17 00 85    0125*    @cmd:       db 23, 0, 0x85
04216F 00          0126*    @channel:   db 0x00
042170 01          0127*                db 0x01 ; get channel status command
042171             0128*    @end:
042171             0129*    
042171             0130*    ; VDU 23, 0, &85, channel, 2, volume
042171             0131*    ; inputs: c = channel, b = volume
042171             0132*    ; Sets the volume of the specified channel. The volume is a value from 0 to 127, where 0 is silent and 127 is full volume. Values over 127 will be treated as 127 (with one exception described later).
042171             0133*    
042171             0134*    ; Specifying a channel of -1 (or 255) will set the global sound system volume level. (Requires Console8 VDP 2.5.0 or later.)
042171             0135*    
042171             0136*    ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the volume of a channel that is already playing a note.
042171             0137*    vdu_channel_volume:
042171 79          0138*        ld a,c
042172 32 89 21 04 0139*        ld (@channel),a
042176 78          0140*        ld a,b
042177 32 8B 21 04 0141*        ld (@volume),a
04217B 21 86 21 04 0142*        ld hl,@cmd
04217F 01 06 00 00 0143*        ld bc,@end-@cmd
042183 5B DF       0144*        rst.lil $18
042185 C9          0145*        ret
042186 17 00 85    0146*    @cmd:       db 23, 0, 0x85
042189 00          0147*    @channel:   db 0x00
04218A 02          0148*                db 0x02 ; set volume command
04218B 00          0149*    @volume:    db 0x00
04218C             0150*    @end:
04218C             0151*    
04218C             0152*    ; VDU 23, 0, &85, channel, 3, frequency;
04218C             0153*    
04218C             0154*    ; Sets the frequency of the specified channel. The frequency is a 16-bit value specifying in Hz the frequency of the note to be played.
04218C             0155*    
04218C             0156*    ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the frequency of a channel that is already playing a note.
04218C             0157*    
04218C             0158*    ; Returns 1 on success, 0 for failure.
04218C             0159*    vdu_channel_frequency:
04218C 79          0160*        ld a,c
04218D 32 A4 21 04 0161*        ld (@channel),a
042191 ED 53 A6 21 0162*        ld (@frequency),de
       04          
042196 21 A1 21 04 0163*        ld hl,@cmd
04219A 01 07 00 00 0164*        ld bc,@end-@cmd
04219E 5B DF       0165*        rst.lil $18
0421A0 C9          0166*        ret
0421A1 17 00 85    0167*    @cmd:       db 23, 0, 0x85
0421A4 00          0168*    @channel:   db 0x00
0421A5 03          0169*                db 0x03 ; set frequency command
0421A6 00 00       0170*    @frequency: dw 0x0000
0421A8 00          0171*    @end:       db 0x00 ; padding
0421A9             0172*    
0421A9             0173*    
0421A9             0174*    ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
0421A9             0175*    ; inputs: c = channel, b = waveformOrSample, [hl = bufferId]
0421A9             0176*    ; Sets the waveform type for a channel to use. The waveformOrSample value is a single byte treated as a signed value.
0421A9             0177*    
0421A9             0178*    ; Using a negative value for the waveform indicates that a sample should be used instead. For more information see the documentation for the sample command.
0421A9             0179*    
0421A9             0180*    ; By default a channel is set to use waveform 0 (square wave).
0421A9             0181*    
0421A9             0182*    ; Valid waveform values are as follows:
0421A9             0183*    ; Value 	Waveform
0421A9             0184*    ; 0 	Square wave
0421A9             0185*    ; 1 	Triangle wave
0421A9             0186*    ; 2 	Sawtooth wave
0421A9             0187*    ; 3 	Sine wave
0421A9             0188*    ; 4 	Noise (simple white noise with no frequency support)
0421A9             0189*    ; 5 	VIC Noise (emulates a VIC6561; supports frequency)
0421A9             0190*    ; 8 	Sample (specifying a 16-bit buffer ID for sample data)
0421A9             0191*    
0421A9             0192*    vdu_channel_waveform:
0421A9 79          0193*        ld a,c
0421AA 32 CF 21 04 0194*        ld (@channel),a
0421AE 78          0195*        ld a,b
0421AF 32 D1 21 04 0196*        ld (@waveform),a
0421B3 FE 08       0197*        cp 8 ; check if the waveform is a sample
0421B5 28 06       0198*        jr z, @sample
0421B7 01 06 00 00 0199*        ld bc,@bufferId-@cmd
0421BB 18 08       0200*        jr @sendToVdu
0421BD             0201*    @sample:
0421BD 22 D2 21 04 0202*        ld (@bufferId),hl
0421C1 01 08 00 00 0203*        ld bc,@end-@cmd
0421C5             0204*    @sendToVdu:
0421C5 21 CC 21 04 0205*        ld hl,@cmd
0421C9 5B DF       0206*        rst.lil $18
0421CB C9          0207*        ret
0421CC 17 00 85    0208*    @cmd:       db 23, 0, 0x85
0421CF 00          0209*    @channel:   db 0x00
0421D0 04          0210*                db 0x04 ; set waveform command
0421D1 00          0211*    @waveform:  db 0x00
0421D2 00 00       0212*    @bufferId:  dw 0x0000
0421D4 00          0213*    @end:       db 0x00 ; padding
0421D5             0214*    
0421D5             0215*    ; VDU 23, 0, &85, channel (ignored), 5, 2, bufferId; format, [sampleRate;]
0421D5             0216*    ; inputs: hl = bufferId; a = format, de = sample rate in Hz
0421D5             0217*    ; The format is a single byte giving the format of the sample data. The following formats are supported:
0421D5             0218*    ; Value	Description
0421D5             0219*    ; 0	8-bit signed
0421D5             0220*    ; 1	8-bit unsigned
0421D5             0221*    ; The format value can also have modifier bits set to modify the behaviour of the sample. The following modifier bits are supported:
0421D5             0222*    ; Value	Description
0421D5             0223*    ; 8	sample rate is sent in the next 16-bits
0421D5             0224*    ; 16	sample is tuneable
0421D5             0225*    ; The default sample rate for samples on the VDP is 16kHz (actually 16.384kHz to be precise).
0421D5             0226*    vdu_buffer_to_sound:
0421D5 22 F5 21 04 0227*        ld (@bufferId),hl
0421D9 C6 08       0228*        add a,8 ; modify format byte to indicate sample rate argument is given
0421DB 32 F7 21 04 0229*        ld (@format),a
0421DF ED 53 F8 21 0230*        ld (@sampleRate),de
       04          
0421E4 21 EF 21 04 0231*        ld hl,@cmd
0421E8 01 0B 00 00 0232*        ld bc,@end-@cmd
0421EC 5B DF       0233*        rst.lil $18
0421EE C9          0234*        ret
0421EF 17 00 85    0235*    @cmd:       db 23, 0, 0x85
0421F2 00          0236*    @channel:   db 0x00 ; ignored
0421F3 05          0237*                db 0x05 ; buffer to sound command
0421F4 02          0238*                db 0x02 ; command 2 create sample
0421F5 00 00       0239*    @bufferId:  dw 0x0000
0421F7 00          0240*    @format:    db 0x00
0421F8 00 00       0241*    @sampleRate: dw 0x0000
0421FA 00          0242*    @end:       db 0x00 ; padding
0421FB             0243*    
0421FB             0244*    ; Command 13: Set sample rate
0421FB             0245*    ; VDU 23, 0, &85, channel, 13, sampleRate;
0421FB             0246*    ; inputs: c = channel, hl = sampleRate (Hz)
0421FB             0247*    vdu_set_sample_rate:
0421FB 79          0248*        ld a,c
0421FC 32 12 22 04 0249*        ld (@channel),a
042200 22 14 22 04 0250*        ld (@sampleRate),hl
042204 21 0F 22 04 0251*        ld hl,@cmd
042208 01 07 00 00 0252*        ld bc,@end-@cmd
04220C 5B DF       0253*        rst.lil $18
04220E C9          0254*        ret
04220F 17 00 85    0255*    @cmd:       db 23, 0, 0x85
042212 00          0256*    @channel:   db 0x00
042213 0D          0257*                db 13 ; set sample rate command
042214 00 00       0258*    @sampleRate: dw 0x0000
042216 00          0259*    @end:       db 0x00 ; padding
042217             0260*    
042217             0261*    ; load a sound file to a buffer
042217             0262*    ; inputs: hl = bufferId ; de = sampleRate in Hz ; iy = pointer to filename
042217             0263*    vdu_load_sfx:
042217             0264*    ; back up input parameters
042217 E5          0265*        push hl ; bufferId
042218 D5          0266*        push de ; sample rate
042219             0267*    ; load the sound
042219 CD 57 1D 04 0268*        call vdu_load_buffer_from_file
04221D             0269*    ; now make the buffer a sound sample
04221D D1          0270*        pop de ; sample rate
04221E E1          0271*        pop hl ; bufferId
04221F AF          0272*        xor a ; zero is the magic number for mono 8-bit signed PCM
042220 CD D5 21 04 0273*        call vdu_buffer_to_sound
042224 C9          0274*        ret
042225             0275*    
042225             0276*    
042225 00          0277*    last_channel: db 0
042226             0278*    max_channels: equ 1
042226             0279*    
042226             0280*    ; play a sound effect from an already loaded buffer
042226             0281*    ; inputs: hl = bufferId ; bc = duration in milliseconds
042226             0282*    vdu_play_sfx:
042226 22 5E 22 04 0283*        ld (@bufferId),hl
04222A ED 43 68 22 0284*        ld (@duration),bc
       04          
04222F 3E 17       0285*        ld a,23
042231 32 60 22 04 0286*        ld (@bufferId+2),a
042235 3A 25 22 04 0287*        ld a,(last_channel)
042239 3C          0288*        inc a
04223A             0289*        ; and 31 ; modulo 32
04223A FE 01       0290*        cp max_channels
04223C C2 41 22 04 0291*        jp nz,@load_channel
042240 AF          0292*        xor a
042241             0293*    @load_channel:
042241 32 25 22 04 0294*        ld (last_channel),a
042245 32 5B 22 04 0295*        ld (@channel0),a
042249 32 63 22 04 0296*        ld (@channel1),a
04224D 21 58 22 04 0297*        ld hl, @sample
042251 01 12 00 00 0298*        ld bc, @sample_end - @sample
042255 5B DF       0299*        rst.lil $18
042257 C9          0300*        ret
042258             0301*    @sample:
042258             0302*    ; Command 4: Set waveform
042258             0303*    ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
042258 17 00 85    0304*        .db 23,0,$85                        ; do sound
04225B             0305*    @channel0:
04225B 00 04 08    0306*        .db 0,4,8 ; channel, command, waveform
04225E             0307*    @bufferId:
04225E 00 00       0308*        .dw 0x0000
042260             0309*    ; Command 0: Play note
042260             0310*    ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
042260 17 00 85    0311*        .db 23,0,$85                        ; do sound
042263             0312*    @channel1:
042263 00 00 7F    0313*        .db 0,0,127                ; channel, volume
042266 00 00       0314*        .dw 0
042268             0315*    @duration:                              ; freq (tuneable samples only)
042268 00 00       0316*        .dw 0x0000                        ; duration
04226A             0317*    @sample_end:
04226A 00          0318*        .db 0x00 ; padding
04226B             0319*    
04226B             0320*    ; inputs: c = channel, b = volume, de = sample rate; hl = bufferId;
04226B             0321*    vdu_play_sample:
04226B             0322*        ; populate input parameters
04226B 79          0323*        ld a,c
04226C 32 9E 22 04 0324*        ld (@channel0),a
042270 32 A6 22 04 0325*        ld (@channel1),a
042274 32 AD 22 04 0326*        ld (@channel2),a
042278 78          0327*        ld a,b
042279 32 AF 22 04 0328*        ld (@volume),a
04227D ED 53 A8 22 0329*        ld (@sampleRate),de
       04          
042282 22 A1 22 04 0330*        ld (@bufferId),hl
042286 3E 17       0331*        ld a,23
042288 32 A3 22 04 0332*        ld (@cmd1),a
04228C 32 AA 22 04 0333*        ld (@cmd2),a
042290             0334*        ; prep the vdu command string
042290 21 9B 22 04 0335*        ld hl, @cmd0
042294 01 19 00 00 0336*        ld bc, @end - @cmd0
042298 5B DF       0337*        rst.lil $18
04229A C9          0338*        ret
04229B             0339*    ; set waveform command
04229B 17 00 85    0340*    @cmd0:       db 23, 0, 0x85
04229E 00          0341*    @channel0:   db 0x00
04229F 04          0342*                 db 0x04 ; set waveform command
0422A0 08          0343*    @waveform:   db 0x08 ; sample
0422A1 00 00       0344*    @bufferId:   dw 0x0000
0422A3             0345*    ; set sample rate command
0422A3 17 00 85    0346*    @cmd1:       db 23, 0, 0x85
0422A6 00          0347*    @channel1:   db 0x00
0422A7 0D          0348*                db 13 ; set sample rate command
0422A8 00 00       0349*    @sampleRate: dw 0x0000
0422AA             0350*    ; play note command
0422AA 17 00 85    0351*    @cmd2:       db 23, 0, 0x85
0422AD 00          0352*    @channel2:   db 0x00
0422AE 00          0353*                 db 0x00 ; play note command
0422AF 00          0354*    @volume:     db 0x00
0422B0 00 00       0355*    @frequency:  dw 0x00 ; no effect unless buffer has been set to tuneable sample
0422B2 00 00       0356*    @duration:   dw 0x0000 ; milliseconds: set to -1 to loop indefinitely, 0 to play full duration once
0422B4 00          0357*    @end:        db 0x00 ; padding
0422B5             0044     
0422B5             0045     ; APPLICATION INCLUDES
0422B5             0046         include "layout.inc"
0422B5             0001*    text_top: equ 0
0422B5             0002*    text_left: equ 0
0422B5             0003*    text_bottom: equ 47      ; 48 rows, zero-based
0422B5             0004*    text_right: equ 63       ; 64 columns, zero-based
0422B5             0005*    
0422B5 00          0006*    original_screen_mode: db 0 ; screen mode when app started so we can return to it on exit
0422B6             0007*    
0422B6 2D 2D 2D 2D 0008*    str_dashes_thin: asciz  "----------------------------------------------------------------"
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       00          
0422F7 3D 3D 3D 3D 0009*    str_dashes_thick: asciz "================================================================"
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       00          
042338             0010*    
042338             0011*    ; set text viewport for current playing song
042338             0012*    vp_now_playing_top: equ 34
042338             0013*    vp_now_playing:
042338 0E 00       0014*        ld c, text_left
04233A 16 22       0015*        ld d, vp_now_playing_top
04233C 1E 3F       0016*        ld e, text_right
04233E 06 22       0017*        ld b, vp_now_playing_top
042340 CD A2 1B 04 0018*        call vdu_set_txt_viewport
042344 C9          0019*        ret
042345             0020*    ; end vp_now_playing
042345             0021*    
042345             0022*    ; set text viewport for elapsed time
042345             0023*    vp_elapsed_top: equ vp_now_playing_top+1
042345             0024*    vp_elapsed_right: equ text_left+7 ; 8 chars for HH:MM:SS
042345             0025*    vp_elapsed:
042345 0E 00       0026*        ld c, text_left
042347 16 23       0027*        ld d, vp_elapsed_top
042349 1E 07       0028*        ld e, vp_elapsed_right
04234B 06 23       0029*        ld b, vp_elapsed_top
04234D CD A2 1B 04 0030*        call vdu_set_txt_viewport
042351 C9          0031*        ret
042352             0032*    ; end vp_elapsed
042352             0033*    
042352             0034*    ; set text viewport for song duration
042352             0035*    vp_duration_left: equ text_right-7 ; 8 chars for HH:MM:SS
042352             0036*    vp_duration_top: equ vp_now_playing_top+1
042352             0037*    vp_duration:
042352 0E 38       0038*        ld c, vp_duration_left
042354 16 23       0039*        ld d, vp_duration_top
042356 1E 3F       0040*        ld e, text_right
042358 06 23       0041*        ld b, vp_duration_top
04235A CD A2 1B 04 0042*        call vdu_set_txt_viewport
04235E C9          0043*        ret
04235F             0044*    ; end vp_duration
04235F             0045*    
04235F             0046*    ; set text viewport for playing breadcrumbs
04235F             0047*    vp_playhead_left: equ vp_elapsed_right+2 ; leave room for left bracket
04235F             0048*    vp_playhead_top: equ vp_now_playing_top+1
04235F             0049*    vp_playhead_right: equ vp_duration_left-2 ; leave room for right bracket
04235F             0050*    vp_playhead:
04235F 0E 09       0051*        ld c, vp_playhead_left
042361 16 23       0052*        ld d, vp_playhead_top
042363 1E 36       0053*        ld e, vp_playhead_right
042365 06 23       0054*        ld b, vp_playhead_top
042367 CD A2 1B 04 0055*        call vdu_set_txt_viewport
04236B C9          0056*        ret
04236C             0057*    ; end vp_playhead
04236C             0058*    
04236C             0059*    vp_dir_hdr_top: equ 20
04236C             0060*    vp_dir_hdr:
04236C 0E 00       0061*        ld c,text_left
04236E 16 14       0062*        ld d,vp_dir_hdr_top
042370 1E 3F       0063*        ld e,text_right
042372 06 14       0064*        ld b,vp_dir_hdr_top
042374 CD A2 1B 04 0065*        call vdu_set_txt_viewport
042378 C9          0066*        ret
042379             0067*    
042379             0068*    vp_dir_name_top: equ vp_dir_hdr_top+1
042379             0069*    vp_dir_name:
042379 0E 00       0070*        ld c,text_left
04237B 16 15       0071*        ld d,vp_dir_name_top
04237D 1E 3F       0072*        ld e,text_right
04237F 06 15       0073*        ld b,vp_dir_name_top
042381 CD A2 1B 04 0074*        call vdu_set_txt_viewport
042385 C9          0075*        ret
042386             0076*    
042386             0077*    ; set text viewport for directory listing
042386             0078*    vp_dir_top: equ vp_dir_hdr_top+3
042386             0079*    vp_dir_bottom: equ vp_dir_top+9
042386             0080*    vp_dir:
042386 0E 00       0081*        ld c,text_left
042388 16 17       0082*        ld d,vp_dir_top
04238A 1E 3F       0083*        ld e,text_right
04238C 06 20       0084*        ld b,vp_dir_bottom
04238E CD A2 1B 04 0085*        call vdu_set_txt_viewport
042392 C9          0086*        ret
042393             0087*    
042393             0088*    vp_legend_top: equ vp_playhead_top+2
042393             0089*    vp_legend:
042393 0E 00       0090*        ld c,text_left
042395 16 25       0091*        ld d,vp_legend_top
042397 1E 3F       0092*        ld e,text_right
042399 06 27       0093*        ld b,vp_legend_top+2
04239B CD A2 1B 04 0094*        call vdu_set_txt_viewport
04239F C9          0095*        ret
0423A0             0096*    
0423A0             0097*    vp_legend_page_num_top: equ vp_legend_top
0423A0             0098*    vp_legend_page_num_left: equ text_left+29
0423A0             0099*    vp_legend_page_num:
0423A0 0E 1D       0100*        ld c,vp_legend_page_num_left
0423A2 16 25       0101*        ld d,vp_legend_page_num_top
0423A4 1E 1E       0102*        ld e,vp_legend_page_num_left+1
0423A6 06 25       0103*        ld b,vp_legend_page_num_top
0423A8 CD A2 1B 04 0104*        call vdu_set_txt_viewport
0423AC C9          0105*        ret
0423AD             0106*    
0423AD             0107*    vp_legend_num_pages_top: equ vp_legend_top
0423AD             0108*    vp_legend_num_pages_left: equ text_left+36
0423AD             0109*    vp_legend_num_pages:
0423AD 0E 24       0110*        ld c,vp_legend_num_pages_left
0423AF 16 25       0111*        ld d,vp_legend_num_pages_top
0423B1 1E 25       0112*        ld e,vp_legend_num_pages_left+1
0423B3 06 25       0113*        ld b,vp_legend_num_pages_top
0423B5 CD A2 1B 04 0114*        call vdu_set_txt_viewport
0423B9 C9          0115*        ret
0423BA             0116*    
0423BA             0117*    vp_legend_shuffle_top: equ vp_legend_top+1
0423BA             0118*    vp_legend_shuffle_left: equ text_left+34
0423BA             0119*    vp_legend_shuffle:
0423BA 0E 22       0120*        ld c,vp_legend_shuffle_left
0423BC 16 26       0121*        ld d,vp_legend_shuffle_top
0423BE 1E 24       0122*        ld e,vp_legend_shuffle_left+2
0423C0 06 26       0123*        ld b,vp_legend_shuffle_top
0423C2 CD A2 1B 04 0124*        call vdu_set_txt_viewport
0423C6 C9          0125*        ret
0423C7             0126*    
0423C7             0127*    vp_legend_loop_top: equ vp_legend_top+1
0423C7             0128*    vp_legend_loop_left: equ text_left+51
0423C7             0129*    vp_legend_loop:
0423C7 0E 33       0130*        ld c,vp_legend_loop_left
0423C9 16 26       0131*        ld d,vp_legend_loop_top
0423CB 1E 35       0132*        ld e,vp_legend_loop_left+2
0423CD 06 26       0133*        ld b,vp_legend_loop_top
0423CF CD A2 1B 04 0134*        call vdu_set_txt_viewport
0423D3 C9          0135*        ret
0423D4             0136*    
0423D4             0137*    vp_messages_top: equ vp_playhead_top+6
0423D4             0138*    vp_messages_bottom: equ text_bottom
0423D4             0139*    ; set text viewport for messages
0423D4             0140*    vp_messages:
0423D4 0E 00       0141*        ld c,text_left
0423D6 16 29       0142*        ld d,vp_messages_top
0423D8 1E 3F       0143*        ld e,text_right
0423DA 06 2F       0144*        ld b,vp_messages_bottom
0423DC CD A2 1B 04 0145*        call vdu_set_txt_viewport
0423E0 C9          0146*        ret
0423E1             0147*    
0423E1             0148*    set_text_colours_normal:
0423E1             0149*    ; set text background color
0423E1 3E 84       0150*        ld a,c_blue_dk+128
0423E3 CD 7A 1B 04 0151*        call vdu_colour_text
0423E7             0152*    ; set text foreground color
0423E7 3E 0F       0153*        ld a,c_white
0423E9 CD 7A 1B 04 0154*        call vdu_colour_text
0423ED C9          0155*        ret
0423EE             0156*    ; end set_text_colours_normal
0423EE             0157*    
0423EE             0158*    set_text_colours_inverse:
0423EE             0159*    ; set text background color
0423EE 3E 8F       0160*        ld a,c_white+128
0423F0 CD 7A 1B 04 0161*        call vdu_colour_text
0423F4             0162*    ; set text foreground color
0423F4 3E 04       0163*        ld a,c_blue_dk
0423F6 CD 7A 1B 04 0164*        call vdu_colour_text
0423FA C9          0165*        ret
0423FB             0166*    ; end set_text_colours_inverse
0423FB             0167*    
0423FB             0168*    ui_init:
0423FB             0169*    ; get current screen mode and save it so we can return to it on exit
0423FB CD 28 1C 04 0170*        call vdu_get_screen_mode
0423FF 32 B5 22 04 0171*        ld (original_screen_mode),a
042403             0172*    ; set up display
042403 3E 14       0173*        ld a,20 ; 512x384x64 single-buffered
042405 CD 17 1C 04 0174*        call vdu_set_screen_mode
042409 AF          0175*        xor a
04240A CD 30 1C 04 0176*        call vdu_set_scaling
04240E             0177*    ; load fonts and select one
04240E CD 1E 1F 04 0178*        call vdu_clear_all_buffers
042412 CD C5 0D 04 0179*    	call font_load
042416 21 10 FA 00 0180*        ld hl,Lat2_VGA8_8x8
04241A 3E 01       0181*        ld a,1
04241C CD 90 1F 04 0182*        call vdu_font_select
042420             0183*    ; set text fg and bg colours to normal
042420 CD E1 23 04 0184*        call set_text_colours_normal
042424             0185*    ; set cursor behaviuor
042424 CD D1 1A 04 0186*        call vdu_cursor_off
042428 26 10       0187*        ld h,%00010000 ; bit 4 controls cursor scroll at bottom of screen
04242A 2E 10       0188*        ld l,%00010000 ; bit 4 set means cursor wraps to top of screen
04242C CD 35 1B 04 0189*        call vdu_cursor_behaviour
042430             0190*    ; reset text viewports and clear the screen
042430 CD 12 1C 04 0191*        call vdu_reset_viewports
042434 CD 49 1B 04 0192*        call vdu_cls
042438             0193*    
042438             0194*    ; tippy top border
042438 0E 00       0195*        ld c,text_left ; x
04243A 06 00       0196*        ld b,text_top ; y
04243C CD 21 1B 04 0197*        call vdu_move_cursor
042440 21 F7 22 04 0198*        ld hl,str_dashes_thick
042444 CD 67 00 04 0199*        call printString
042448             0200*    
042448             0201*    ; print ascii art splash screen
042448 0E 00       0202*        ld c,text_left ; x
04244A 06 01       0203*        ld b,text_top+1 ; y
04244C CD 21 1B 04 0204*        call vdu_move_cursor
042450 21 B9 25 04 0205*        ld hl,agon_jukebox_ascii
042454 CD 67 00 04 0206*        call printString
042458             0207*    
042458             0208*    ; below logo border
042458 0E 00       0209*        ld c,text_left ; x
04245A 06 13       0210*        ld b,vp_dir_hdr_top-1 ; y
04245C CD 21 1B 04 0211*        call vdu_move_cursor
042460 21 F7 22 04 0212*        ld hl,str_dashes_thick
042464 CD 67 00 04 0213*        call printString
042468             0214*    
042468             0215*    ; print the directory header
042468 0E 00       0216*        ld c,text_left ; x
04246A 06 14       0217*        ld b,vp_dir_hdr_top ; y
04246C CD 21 1B 04 0218*        call vdu_move_cursor
042470 CD 60 00 04 0219*        call printInline
042474 4F 75 72 20 0220*        asciz "Our current directory is:"
       63 75 72 72 
       65 6E 74 20 
       64 69 72 65 
       63 74 6F 72 
       79 20 69 73 
       3A 00       
04248E             0221*    
04248E             0222*    ; file list top border
04248E 0E 00       0223*        ld c,text_left ; x
042490 06 16       0224*        ld b,vp_dir_top-1 ; y
042492 CD 21 1B 04 0225*        call vdu_move_cursor
042496 21 B6 22 04 0226*        ld hl,str_dashes_thin
04249A CD 67 00 04 0227*        call printString
04249E             0228*    
04249E             0229*    ; file list bottom border
04249E 0E 00       0230*        ld c,text_left ; x
0424A0 06 21       0231*        ld b,vp_dir_bottom+1 ; y
0424A2 CD 21 1B 04 0232*        call vdu_move_cursor
0424A6 21 B6 22 04 0233*        ld hl,str_dashes_thin
0424AA CD 67 00 04 0234*        call printString
0424AE             0235*    
0424AE             0236*    ; below the breadcrumbs border
0424AE 0E 00       0237*        ld c,text_left ; x
0424B0 06 24       0238*        ld b,vp_playhead_top+1 ; y
0424B2 CD 21 1B 04 0239*        call vdu_move_cursor
0424B6 21 F7 22 04 0240*        ld hl,str_dashes_thick
0424BA CD 67 00 04 0241*        call printString
0424BE             0242*    
0424BE             0243*    ; print the navigation and song control instructions
0424BE 0E 00       0244*        ld c,text_left ; x
0424C0 06 25       0245*        ld b,vp_playhead_top+2 ; y
0424C2 CD 21 1B 04 0246*        call vdu_move_cursor
0424C6 CD 60 00 04 0247*        call printInline
0424CA 20 53 6F 6E 0248*        db " Song \e",24," \e",25," \e",237," or 0-9   | Page \e",27,"00\e",26," of 00   | [U]p directory\r\n"
       67 20 1B 18 
       20 1B 19 20 
       1B ED 20 6F 
       72 20 30 2D 
       39 20 20 20 
       7C 20 50 61 
       67 65 20 1B 
       1B 30 30 1B 
       1A 20 6F 66 
       20 30 30 20 
       20 20 7C 20 
       5B 55 5D 70 
       20 64 69 72 
       65 63 74 6F 
       72 79 0D 0A 
04250A 20 5B 52 5D 0249*        db " [R]andom song       | [S]huffle: OFF    | [L]oop: OFF\r\n"
       61 6E 64 6F 
       6D 20 73 6F 
       6E 67 20 20 
       20 20 20 20 
       20 7C 20 5B 
       53 5D 68 75 
       66 66 6C 65 
       3A 20 4F 46 
       46 20 20 20 
       20 7C 20 5B 
       4C 5D 6F 6F 
       70 3A 20 4F 
       46 46 0D 0A 
042542 20 5B 45 53 0250*        db " [ESC] or [Q]uit     |                   | v0.9.3 beta\r\n"
       43 5D 20 6F 
       72 20 5B 51 
       5D 75 69 74 
       20 20 20 20 
       20 7C 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 7C 20 76 
       30 2E 39 2E 
       33 20 62 65 
       74 61 0D 0A 
04257A 00          0251*        db 0 ; null terminator
04257B             0252*    
04257B             0253*    ; below the detailed instructions / status border
04257B 0E 00       0254*        ld c,text_left ; x
04257D 06 28       0255*        ld b,vp_playhead_top+5 ; y
04257F CD 21 1B 04 0256*        call vdu_move_cursor
042583 21 F7 22 04 0257*        ld hl,str_dashes_thick
042587 CD 67 00 04 0258*        call printString
04258B             0259*    
04258B             0260*    ; print the current directory path and first page of files
04258B CD A5 2A 04 0261*        call bf_print_dir_name
04258F 21 00 00 00 0262*        ld hl,0
042593 22 0A 00 07 0263*        ld (bf_page_cur),hl
042597 AF          0264*        xor a
042598 32 00 00 07 0265*        ld (bf_file_idx),a ; reset the file index
04259C CD 51 2A 04 0266*        call bf_highlight_file ; highlight the first file
0425A0             0267*    
0425A0             0268*    ; load logo and plot it
0425A0 CD E9 2C 04 0269*        call load_ui_images
0425A4 21 00 20 00 0270*        ld hl,BUF_UI_LOGO
0425A8 CD 43 1C 04 0271*        call vdu_buff_select
0425AC 01 80 01 00 0272*        ld bc,384 ; x
0425B0 11 14 00 00 0273*        ld de,20 ; y
0425B4 CD 43 20 04 0274*        call vdu_plot_bmp
0425B8             0275*    
0425B8 C9          0276*        ret
0425B9             0277*    ; end ui_init
0425B9             0278*    
0425B9             0279*    agon_jukebox_ascii:
0425B9 20 20 20 5F 0280*        db 32,32,32,95,95,95,95,95,32,32,32,32,95,95,95,95,95,95,95,95,32,95,95,95,95,95,95,95,95,32,32,32,32,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       20 20 20 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 20 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       0D 0A       
0425E3 20 20 2F 20 0281*        db 32,32,47,32,32,95,32,32,92,32,32,47,32,32,95,95,95,95,95,47,32,92,95,95,95,95,95,32,32,92,32,32,32,92,32,32,32,32,32,32,92,13,10
       20 5F 20 20 
       5C 20 20 2F 
       20 20 5F 5F 
       5F 5F 5F 2F 
       20 5C 5F 5F 
       5F 5F 5F 20 
       20 5C 20 20 
       20 5C 20 20 
       20 20 20 20 
       5C 0D 0A    
04260E 20 2F 20 20 0282*        db 32,47,32,32,47,95,92,32,32,92,47,32,32,32,92,32,32,95,95,95,32,32,47,32,32,32,124,32,32,32,92,32,32,47,32,32,32,124,32,32,32,92,13,10
       2F 5F 5C 20 
       20 5C 2F 20 
       20 20 5C 20 
       20 5F 5F 5F 
       20 20 2F 20 
       20 20 7C 20 
       20 20 5C 20 
       20 2F 20 20 
       20 7C 20 20 
       20 5C 0D 0A 
04263A 2F 20 20 20 0283*        db 47,32,32,32,32,124,32,32,32,32,92,32,32,32,32,92,95,92,32,32,92,47,32,32,32,32,124,32,32,32,32,92,47,32,32,32,32,124,32,32,32,32,92,13,10
       20 7C 20 20 
       20 20 5C 20 
       20 20 20 5C 
       5F 5C 20 20 
       5C 2F 20 20 
       20 20 7C 20 
       20 20 20 5C 
       2F 20 20 20 
       20 7C 20 20 
       20 20 5C 0D 
       0A          
042667 5C 5F 5F 5F 0284*        db 92,95,95,95,95,124,95,95,32,32,47,92,95,95,95,95,95,95,32,32,47,92,95,95,95,95,95,95,95,32,32,47,92,95,95,95,95,124,95,95,32,32,47,13,10
       5F 7C 5F 5F 
       20 20 2F 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       2F 5C 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       5C 5F 5F 5F 
       5F 7C 5F 5F 
       20 20 2F 0D 
       0A          
042694 20 20 20 20 0285*        db 32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,92,47,13,10
       20 20 20 20 
       5C 2F 20 20 
       20 20 20 20 
       20 20 5C 2F 
       20 20 20 20 
       20 20 20 20 
       20 5C 2F 20 
       20 20 20 20 
       20 20 20 20 
       5C 2F 0D 0A 
0426C0 20 20 20 20 0286*        db 32,32,32,32,32,95,95,95,95,32,95,95,95,95,32,95,95,95,32,95,95,95,95,32,32,95,95,32,95,95,95,95,95,95,95,95,95,95,95,13,10
       20 5F 5F 5F 
       5F 20 5F 5F 
       5F 5F 20 5F 
       5F 5F 20 5F 
       5F 5F 5F 20 
       20 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 0D 
       0A          
0426E9 20 20 20 20 0287*        db 32,32,32,32,124,32,32,32,32,124,32,32,32,32,124,32,32,32,92,32,32,32,32,124,47,32,95,124,92,95,32,32,32,95,95,95,95,95,47,13,10
       7C 20 20 20 
       20 7C 20 20 
       20 20 7C 20 
       20 20 5C 20 
       20 20 20 7C 
       2F 20 5F 7C 
       5C 5F 20 20 
       20 5F 5F 5F 
       5F 5F 2F 0D 
       0A          
042712 20 20 20 20 0288*        db 32,32,32,32,124,32,32,32,32,124,32,32,32,32,124,32,32,32,47,32,32,32,32,32,32,60,32,32,32,124,32,32,32,32,95,95,41,95,13,10
       7C 20 20 20 
       20 7C 20 20 
       20 20 7C 20 
       20 20 2F 20 
       20 20 20 20 
       20 3C 20 20 
       20 7C 20 20 
       20 20 5F 5F 
       29 5F 0D 0A 
04273A 2F 5C 5F 5F 0289*        db 47,92,95,95,124,32,32,32,32,124,32,32,32,32,124,32,32,47,124,32,32,32,32,124,32,32,92,32,32,124,32,32,32,32,32,32,32,32,92,13,10
       7C 20 20 20 
       20 7C 20 20 
       20 20 7C 20 
       20 2F 7C 20 
       20 20 20 7C 
       20 20 5C 20 
       20 7C 20 20 
       20 20 20 20 
       20 20 5C 0D 
       0A          
042763 5C 5F 5F 5F 0290*        db 92,95,95,95,95,95,95,95,95,124,95,95,95,95,95,95,47,32,124,95,95,95,95,124,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 5F 5F 5F 
       5F 7C 5F 5F 
       5F 5F 5F 5F 
       2F 20 7C 5F 
       5F 5F 5F 7C 
       5F 5F 20 5C 
       2F 5F 5F 5F 
       5F 5F 5F 5F 
       20 20 2F 0D 
       0A          
04278C 20 20 20 20 0291*        db 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,13,10
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 5C 2F 
       20 20 20 20 
       20 20 20 20 
       5C 2F 0D 0A 
0427B4 20 20 20 20 0292*        db 32,32,32,32,95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,95,95,95,95,32,32,95,95,95,95,32,32,95,95,95,13,10
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 20 5F 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       20 5F 5F 5F 
       5F 20 20 5F 
       5F 5F 0D 0A 
0427D8 20 20 20 20 0293*        db 32,32,32,32,92,95,95,95,95,95,95,32,32,32,92,92,95,95,95,95,95,32,32,92,32,92,32,32,32,92,47,32,32,47,13,10
       5C 5F 5F 5F 
       5F 5F 5F 20 
       20 20 5C 5C 
       5F 5F 5F 5F 
       5F 20 20 5C 
       20 5C 20 20 
       20 5C 2F 20 
       20 2F 0D 0A 
0427FC 20 20 20 20 0294*        db 32,32,32,32,32,124,32,32,32,32,124,32,32,95,47,32,47,32,32,32,124,32,32,32,92,32,92,32,32,32,32,32,47,13,10
       20 7C 20 20 
       20 20 7C 20 
       20 5F 2F 20 
       2F 20 20 20 
       7C 20 20 20 
       5C 20 5C 20 
       20 20 20 20 
       2F 0D 0A    
04281F 20 20 20 20 0295*        db 32,32,32,32,32,124,32,32,32,32,124,32,32,32,92,47,32,32,32,32,124,32,32,32,32,92,47,32,32,32,32,32,92,13,10
       20 7C 20 20 
       20 20 7C 20 
       20 20 5C 2F 
       20 20 20 20 
       7C 20 20 20 
       20 5C 2F 20 
       20 20 20 20 
       5C 0D 0A    
042842 20 20 20 20 0296*        db 32,32,32,32,32,124,95,95,95,95,95,95,32,32,47,92,95,95,95,95,95,95,95,32,32,47,95,95,95,47,92,32,32,92,13,10
       20 7C 5F 5F 
       5F 5F 5F 5F 
       20 20 2F 5C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       20 2F 5F 5F 
       5F 2F 5C 20 
       20 5C 0D 0A 
042866 20 20 20 20 0297*        db 32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,92,95,47,13,10
       20 20 20 20 
       20 20 20 20 
       5C 2F 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 5C 
       5F 2F 0D 0A 
04288A 00          0298*        db 0 ; list terminator
04288B             0047         include "browse.inc"
04288B             0001*    bf_files_per_pg: equ 10 ; number of directories / files to display per page
04288B             0002*    
04288B             0003*    bf_get_dir:
04288B             0004*    ; initialize counters
04288B 21 00 00 00 0005*        ld hl,0
04288F 22 01 00 07 0006*        ld (bf_dir_num_files),hl
042893             0007*    
042893             0008*    ; initialize pointers to store directory info and print directory name
042893 21 10 00 07 0009*        ld hl,bf_dir_path  ; where to store result
042897 01 FF 00 00 0010*        ld bc,255          ; max length (final byte is zero terminator) [has no effect]
04289B             0011*        FFSCALL ffs_getcwd ; MOS api get current working directory
                       M1 Args: function=ffs_getcwd 
04289B FD E5       0001*M1  			PUSH IY
04289D 3E 9E       0002*M1  			LD	A, function
04289F 5B CF       0003*M1  			RST.LIL	08h
0428A1 FD E1       0004*M1  			POP IY
0428A3             0012*    
0428A3             0013*    ; get dir info
0428A3 21 00 02 07 0014*        ld hl,bf_dir_struct ; define where to store directory info
0428A7 11 10 00 07 0015*        ld de,bf_dir_path   ; this is pointer to the path to the directory
0428AB AF          0016*        xor a               ; tell MOS to expect zero-terminated string
0428AC             0017*        FFSCALL ffs_dopen   ; open dir
                       M1 Args: function=ffs_dopen 
0428AC FD E5       0001*M1  			PUSH IY
0428AE 3E 91       0002*M1  			LD	A, function
0428B0 5B CF       0003*M1  			RST.LIL	08h
0428B2 FD E1       0004*M1  			POP IY
0428B4             0018*    
0428B4             0019*    ; set up pointers
0428B4 DD 21 00 06 0020*        ld ix,bf_dir_fil_list ; this is the pointer to the filinfo structs
       07          
0428B9 FD 21 00 03 0021*        ld iy,bf_filinfo_ptrs ; where to store pointers to filinfo structs
       07          
0428BE             0022*    
0428BE             0023*    @readFileInfo:               ; we will loop here until all files have been processed
0428BE 21 00 02 07 0024*        ld hl,bf_dir_struct      ; HL is where to get directory info
0428C2 ED 12 00    0025*        lea de,ix                ; DE is where to store filinfo struct
0428C5             0026*        FFSCALL ffs_dread        ; read next item from dir into filinfo struct
                       M1 Args: function=ffs_dread 
0428C5 FD E5       0001*M1  			PUSH IY
0428C7 3E 93       0002*M1  			LD	A, function
0428C9 5B CF       0003*M1  			RST.LIL	08h
0428CB FD E1       0004*M1  			POP IY
0428CD             0027*    
0428CD DD 7E 16    0028*        ld a,(ix+filinfo_fname)  ; get first char of file name
0428D0 B7          0029*        or a                     ; if zero then we are at the end of the listing
0428D1 CA 2C 29 04 0030*        jp z,@allDone
0428D5             0031*    
0428D5 DD 7E 08    0032*        ld a,(ix+filinfo_fattrib) ; get the file attribute
0428D8 CB AF       0033*        res AM_ARC,a ; clear bit 5 (archive) see: https://discord.com/channels/1158535358624039014/1158536667670511726/1328466726098309173
0428DA B7          0034*        or a ; if zero this is a file
0428DB C2 E4 28 04 0035*        jp nz,@F ; not zero so this is some other file type
0428DF CB EF       0036*        set AM_ARC,a ; set bit 5 (archive) so will be consistent btw emulator and hardware
0428E1 DD 77 08    0037*        ld (ix+filinfo_fattrib),a ; update so we don't have to do this every time downstream
0428E4             0038*    
0428E4             0039*    @@: ; skip over writing hidden and system files
0428E4 CB 4F       0040*        bit AM_HID,a ; hidden file
0428E6 C2 BE 28 04 0041*        jp nz,@readFileInfo
0428EA CB 57       0042*        bit AM_SYS,a ; system file
0428EC C2 BE 28 04 0043*        jp nz,@readFileInfo
0428F0             0044*    
0428F0             0045*    ; check for valid directory
0428F0 CB 67       0046*        bit AM_DIR,a ; directory
0428F2 C2 0E 29 04 0047*        jp nz,@isDir ; is directory so skip .wav file check
0428F6             0048*    
0428F6             0049*    ; is file so check for valid .wav format
0428F6 21 00 FF 06 0050*        ld hl,bf_fil_struct ; hl = pointer to fil struct
0428FA ED 12 16    0051*        lea de,ix+filinfo_fname ; de = pointer to filename
0428FD CD 09 56 04 0052*        call verify_wav
042901 C2 BE 28 04 0053*        jp nz,@readFileInfo ; not a .wav file, so skip it
042905             0054*    ; set the last byte of filinfo_faltname to 1 to indicate this is a file for filename sorting
042905 3E 31       0055*        ld a,'1'
042907 DD 77 15    0056*        ld (ix+filinfo_fname-1),a
04290A C3 13 29 04 0057*        jp @goodPath
04290E             0058*    @isDir:
04290E             0059*    ; set the last byte of filinfo_faltname to 0 to indicate this is a directory for filename sorting
04290E 3E 30       0060*        ld a,'0'
042910 DD 77 15    0061*        ld (ix+filinfo_fname-1),a
042913             0062*        ; fall through to @goodPath
042913             0063*    @goodPath:
042913             0064*    ; valid file or directory
042913 FD 3E 00    0065*        ld (iy),ix ; store pointer to filinfo struct
042916 2A 01 00 07 0066*        ld hl,(bf_dir_num_files) ; get the current file counter
04291A 23          0067*        inc hl                  ; increment the counter
04291B 22 01 00 07 0068*        ld (bf_dir_num_files),hl
04291F             0069*    ; bump pointers
04291F ED 33 03    0070*        lea iy,iy+3
042922 11 16 01 00 0071*        ld de,filinfo_struct_size ; length of filinfo record
042926 DD 19       0072*        add ix,de
042928 C3 BE 28 04 0073*        jp @readFileInfo         ; loop around to check next entry
04292C             0074*    @allDone:
04292C             0075*    ; compute page statistics
04292C 11 0A 00 00 0076*        ld de,bf_files_per_pg    ; number of files per page
042930 2A 01 00 07 0077*        ld hl,(bf_dir_num_files) ; get the number of files
042934             0078*        SIGN_HLU ; check for zero
                       M1 Args: none
042934 19          0001*M1      add hl,de ; 1 cycle
042935 B7          0002*M1      or a ; clear flags ; 1 cycle
042936 ED 52       0003*M1      sbc hl,de ; 2 cycles
042938             0004*M1      ; 4 cycles total
042938 C2 48 29 04 0079*        jp nz,@not_zero
04293C 11 00 00 00 0080*        ld de,0 ; number of pages, will increment by 1 later
042940 21 00 00 00 0081*        ld hl,0 ; number of files on last page
042944 C3 59 29 04 0082*        jp @write_stats
042948             0083*    @not_zero:
042948 CD 80 03 04 0084*        call udiv24 ; de = hl/bf_files_per_pg, hl = mod(hl,bf_files_per_pg)
04294C             0085*        SIGN_HLU ; check remainder for zero
                       M1 Args: none
04294C 19          0001*M1      add hl,de ; 1 cycle
04294D B7          0002*M1      or a ; clear flags ; 1 cycle
04294E ED 52       0003*M1      sbc hl,de ; 2 cycles
042950             0004*M1      ; 4 cycles total
042950 C2 59 29 04 0086*        jp nz,@write_stats
042954 21 0A 00 00 0087*        ld hl,bf_files_per_pg ; if zero then we have exactly bf_files_per_pg files on the last page ...
042958 1B          0088*        dec de ; ... and we don't need an additional page for the remainder
042959             0089*    @write_stats:
042959 22 07 00 07 0090*        ld (bf_files_last_pg),hl ; save the number of files on the last page
04295D 13          0091*        inc de ; bump the page count
04295E ED 53 0D 00 0092*        ld (bf_dir_num_pages),de ; save the number of pages
       07          
042963 21 00 00 00 0093*        ld hl,0 ; reset the page number
042967 22 0A 00 07 0094*        ld (bf_page_cur),hl
04296B             0095*    ; sort the filenames
04296B FD 21 00 03 0096*        ld iy,bf_filinfo_ptrs ; get the pointer to the fileinfo pointer table
       07          
042970 3A 01 00 07 0097*        ld a,(bf_dir_num_files) ; get the number of files
042974 47          0098*        ld b,a ; loop counter
042975 CD 60 55 04 0099*        call selection_sort_asc_filinfo ; sort the filenames
042979             0100*    ; close the directory
042979 21 00 02 07 0101*        ld hl,bf_dir_struct      ; load H: with address of the DIR struct
04297D             0102*        FFSCALL ffs_dclose       ; close dir
                       M1 Args: function=ffs_dclose 
04297D FD E5       0001*M1  			PUSH IY
04297F 3E 92       0002*M1  			LD	A, function
042981 5B CF       0003*M1  			RST.LIL	08h
042983 FD E1       0004*M1  			POP IY
042985             0103*    ; fall through to bf_get_page_num_files
042985             0104*    
042985             0105*    bf_get_page_num_files:
042985             0106*    ; check whether we're at last page
042985 2A 0A 00 07 0107*        ld hl,(bf_page_cur)
042989 ED 5B 0D 00 0108*        ld de,(bf_dir_num_pages)
       07          
04298E 1B          0109*        dec de ; zero-based
04298F B7          0110*        or a ; clear carry
042990 ED 52       0111*        sbc hl,de
042992 3E 0A       0112*        ld a,bf_files_per_pg ; a = default number of files per page
042994 C2 9C 29 04 0113*        jp nz,@F ; not the last page
042998 3A 07 00 07 0114*        ld a,(bf_files_last_pg) ; get the number of files on the last page
04299C             0115*    @@:
04299C 32 04 00 07 0116*        ld (bf_files_cur_pg),a ; save the number of files on the page
0429A0 C9          0117*        ret
0429A1             0118*    ; end bf_get_page_num_files
0429A1             0119*    ; end bf_get_dir
0429A1             0120*    
0429A1             0121*    ; print the directory listing for the current directory page
0429A1             0122*    ; inputs: none
0429A1             0123*    ; prerequisites: bf_get_dir must have been called to populate bf_dir_fil_list
0429A1             0124*    ; destroys: everything
0429A1             0125*    bf_print_dir_page:
0429A1             0126*    ; set text viewport for directory listing
0429A1 CD 86 23 04 0127*        call vp_dir
0429A5 CD 49 1B 04 0128*        call vdu_cls
0429A9             0129*    ; check for zero files in directory
0429A9 2A 01 00 07 0130*        ld hl,(bf_dir_num_files)
0429AD             0131*        SIGN_HLU
                       M1 Args: none
0429AD 19          0001*M1      add hl,de ; 1 cycle
0429AE B7          0002*M1      or a ; clear flags ; 1 cycle
0429AF ED 52       0003*M1      sbc hl,de ; 2 cycles
0429B1             0004*M1      ; 4 cycles total
0429B1 CA EF 29 04 0132*        jp z,@no_files ; no files to display so update ui with page stats and return
0429B5             0133*    ; set pointer to the correct index in the fileinfo pointer table
0429B5 2A 0A 00 07 0134*        ld hl,(bf_page_cur) ; get the current page
0429B9 11 1E 00 00 0135*        ld de,bf_files_per_pg*3 ; number of files per page * 3 bytes per pointer
0429BD CD 67 03 04 0136*        call umul24 ; hl = page * num_files_per_page
0429C1 EB          0137*        ex de,hl ; can't add ix,hl ...
0429C2 DD 21 00 03 0138*        ld ix,bf_filinfo_ptrs ; get the pointer to the fileinfo pointer table
       07          
0429C7 DD 19       0139*        add ix,de ; ix points to the correct index in the fileinfo pointer table
0429C9             0140*    ; loop through the fileinfo pointer table and print out the filenames
0429C9 3A 04 00 07 0141*        ld a,(bf_files_cur_pg)
0429CD 47          0142*        ld b,a ; loop counter
0429CE AF          0143*        xor a ; song index
0429CF             0144*    @loop:
0429CF C5          0145*        push bc ; save loop counter
0429D0 F5          0146*        push af ; save song index
0429D1 CD 01 57 04 0147*        call printHexA ; print the song index
0429D5 DD 31 00    0148*        ld iy,(ix) ; iy points to filinfo struct
0429D8 CD 8A 2A 04 0149*        call bf_print_dir_or_file
0429DC             0150*    @bump_counters:
0429DC ED 32 03    0151*        lea ix,ix+3 ; bump the filename pointer
0429DF F1          0152*        pop af ; restore song index
0429E0 3C          0153*        inc a ; increment the song index
0429E1 C1          0154*        pop bc ; restore loop counter
0429E2 05          0155*        dec b
0429E3 CA 02 2A 04 0156*        jp z,@done ; if zero, we're done
0429E7 CD 7C 00 04 0157*        call printNewLine
0429EB C3 CF 29 04 0158*        jp @loop
0429EF             0159*    @no_files:
0429EF AF          0160*        xor a ; reset the page number to zero
0429F0 32 0A 00 07 0161*        ld (bf_page_cur),a
0429F4 21 01 00 00 0162*        ld hl,1 ; an empty page is still a page
0429F8 22 0D 00 07 0163*        ld (bf_dir_num_pages),hl
0429FC CD 37 2A 04 0164*        call bf_update_pages_ui
042A00 AF          0165*        xor a ; set zero flag indicating there were no files to display
042A01 C9          0166*        ret
042A02             0167*    @done:
042A02             0168*    ; update ui and return to caller
042A02 CD 37 2A 04 0169*        call bf_update_pages_ui
042A06 F6 01       0170*        or a,1 ; reset zero flag indicating there were files to display
042A08 C9          0171*        ret
042A09             0172*    ; end bf_print_dir_page
042A09             0173*    
042A09             0174*    ; print the entire directory (for debugging, not in-app use)
042A09             0175*    ; inputs: none
042A09             0176*    ; prerequisites: bf_get_dir must have been called to populate bf_dir_fil_list
042A09             0177*    ; destroys: everything
042A09             0178*    bf_print_dir:
042A09             0179*    ; set pointer to the correct index in the fileinfo pointer table
042A09 DD 21 00 03 0180*        ld ix,bf_filinfo_ptrs ; get the pointer to the fileinfo pointer table
       07          
042A0E             0181*    ; loop through the fileinfo pointer table and print out the filenames
042A0E 3A 01 00 07 0182*        ld a,(bf_dir_num_files)
042A12 47          0183*        ld b,a ; loop counter
042A13 A7          0184*        and a ; check for zero files in the directory
042A14 C8          0185*        ret z ; nothing to see here, move along
042A15 AF          0186*        xor a ; song index
042A16             0187*    @loop:
042A16 C5          0188*        push bc ; save loop counter
042A17 F5          0189*        push af ; save song index
042A18 CD 01 57 04 0190*        call printHexA ; print the song index
042A1C DD 31 00    0191*        ld iy,(ix) ; iy points to filinfo struct
042A1F CD 8A 2A 04 0192*        call bf_print_dir_or_file
042A23             0193*    @bump_counters:
042A23 ED 32 03    0194*        lea ix,ix+3 ; bump the filename pointer
042A26 F1          0195*        pop af ; restore song index
042A27 3C          0196*        inc a ; increment the song index
042A28 C1          0197*        pop bc ; restore loop counter
042A29 05          0198*        dec b
042A2A CA 36 2A 04 0199*        jp z,@done ; if zero, we're done
042A2E CD 7C 00 04 0200*        call printNewLine
042A32 C3 16 2A 04 0201*        jp @loop
042A36             0202*    @done:
042A36 C9          0203*        ret
042A37             0204*    ; end bf_print_dir
042A37             0205*    
042A37             0206*    bf_update_pages_ui:
042A37             0207*    ; update the directory page ui widgets
042A37 CD A0 23 04 0208*        call vp_legend_page_num
042A3B 3A 0A 00 07 0209*        ld a,(bf_page_cur)
042A3F 3C          0210*        inc a ; pages are zero-based, users are not
042A40 CD AE 00 04 0211*        call printHex8
042A44 CD AD 23 04 0212*        call vp_legend_num_pages
042A48 3A 0D 00 07 0213*        ld a,(bf_dir_num_pages)
042A4C CD AE 00 04 0214*        call printHex8
042A50 C9          0215*        ret
042A51             0216*    ; end bf_update_pages_ui
042A51             0217*    
042A51             0218*    bf_highlight_file:
042A51             0219*    ; refresh the directory listing
042A51 CD A1 29 04 0220*        call bf_print_dir_page
042A55 C8          0221*        ret z ; no files to display so we're done
042A56             0222*    ; highlight the song being played in the directory listing
042A56 3A 00 00 07 0223*        ld a,(bf_file_idx)
042A5A 16 17       0224*        ld d,vp_dir_top
042A5C 82          0225*        add a,d
042A5D 0E 00       0226*        ld c,text_left
042A5F 57          0227*        ld d,a
042A60 1E 3F       0228*        ld e,text_right
042A62 47          0229*        ld b,a
042A63 CD A2 1B 04 0230*        call vdu_set_txt_viewport
042A67 CD 49 1B 04 0231*        call vdu_cls
042A6B             0232*    ; set text colours to inverse
042A6B CD EE 23 04 0233*        call set_text_colours_inverse
042A6F             0234*    ; print the index and song filename
042A6F 3A 00 00 07 0235*        ld a,(bf_file_idx)
042A73 CD 01 57 04 0236*        call printHexA
042A77 CD 11 2C 04 0237*        call bf_get_filinfo_from_pg_idx ; iy = pointer to the filinfo struct
042A7B CD 8A 2A 04 0238*        call bf_print_dir_or_file
042A7F             0239*    ; set text colours to normal
042A7F CD E1 23 04 0240*        call set_text_colours_normal
042A83 C9          0241*        ret
042A84             0242*    ; end bf_highlight_file
042A84             0243*    
042A84             0244*    bf_check_dir_or_file:
042A84 FD 7E 08    0245*        ld a,(iy+filinfo_fattrib)
042A87 CB 67       0246*        bit AM_DIR,a ; if not zero, is directory
042A89 C9          0247*        ret
042A8A             0248*    ; end bf_check_dir_or_file
042A8A             0249*    
042A8A             0250*    bf_print_dir_or_file:
042A8A CD 84 2A 04 0251*        call bf_check_dir_or_file
042A8E CA 9D 2A 04 0252*        jp z,@print_file ; not directory so just write filename
042A92 CD 60 00 04 0253*        call printInline
042A96 3C 44 49 52 0254*        asciz "<DIR> "
       3E 20 00    
042A9D             0255*    @print_file:
042A9D ED 23 16    0256*        lea hl,iy+filinfo_fname
042AA0 CD 67 00 04 0257*        call printString ; print the filename
042AA4 C9          0258*        ret
042AA5             0259*    ; end bf_print_dir_or_file
042AA5             0260*    
042AA5             0261*    bf_print_dir_name:
042AA5 CD 79 23 04 0262*        call vp_dir_name
042AA9 CD 49 1B 04 0263*        call vdu_cls
042AAD 21 10 00 07 0264*        ld hl,bf_dir_path
042AB1 CD 67 00 04 0265*        call printString
042AB5 C9          0266*        ret
042AB6             0267*    ; end bf_print_dir_name
042AB6             0048         include "input.inc"
042AB6             0001*    get_input:
042AB6             0002*    ; wait for the user to push a button
042AB6 FB          0003*        ei ; enable interrupts
042AB7             0004*        MOSCALL mos_getkey ; a = ascii code of key pressed
                       M1 Args: function=mos_getkey 
042AB7 3E 00       0001*M1  			LD	A, function
042AB9 5B CF       0002*M1  			RST.LIL	08h
042ABB F3          0005*        di ; disable interrupts
042ABC             0006*    
042ABC             0007*    ; RETURN TO MAIN, which re-enables interrupts and exits app
042ABC FE 1B       0008*        cp '\e' ; escape
042ABE C8          0009*        ret z
042ABF FE 71       0010*        cp 'q' ; quit
042AC1 C8          0011*        ret z
042AC2             0012*    
042AC2             0013*    ; FILE BROWSER COMMANDS
042AC2 FE 0B       0014*        cp 0x0B ; up arrow
042AC4 CA 4B 2B 04 0015*        jp z,bf_prev_file
042AC8 FE 0A       0016*        cp 0x0A ; down arrow
042ACA CA 6C 2B 04 0017*        jp z,bf_next_file
042ACE FE 15       0018*        cp 0x15 ; right arrow
042AD0 CA 78 2B 04 0019*        jp z,bf_next_page
042AD4 FE 08       0020*        cp 0x08 ; left arrow
042AD6 CA A4 2B 04 0021*        jp z,bf_prev_page
042ADA FE 75       0022*        cp 'u' ; go up one directory
042ADC CA CE 2B 04 0023*        jp z,bf_up_dir
042AE0             0024*    
042AE0             0025*    ; SONG PLAYING COMMANDS
042AE0             0026*    ; toggle play / pause
042AE0 FE 70       0027*        cp 'p'
042AE2 CA 33 2C 04 0028*        jp z,ps_toggle_pause
042AE6             0029*    ; toggle loop
042AE6 FE 6C       0030*        cp 'l'
042AE8 CA B0 2C 04 0031*        jp z,ps_toggle_loop
042AEC             0032*    ; toggle shuffle
042AEC FE 73       0033*        cp 's'
042AEE CA 77 2C 04 0034*        jp z,ps_toggle_shuffle
042AF2             0035*    ; play random song
042AF2 FE 72       0036*        cp 'r'
042AF4 CA 5B 54 04 0037*        jp z,ps_play_random
042AF8             0038*    ; select song or directory
042AF8 FE 0D       0039*        cp '\r' ; ENTER key
042AFA CA F3 2B 04 0040*        jp z,bf_select_file
042AFE             0041*    ; number key selections
042AFE FE 30       0042*        cp '0'
042B00 DA 14 2B 04 0043*        jp c,@no_cmd ; not a song command
042B04 FE 3A       0044*        cp '9'+1
042B06 D2 14 2B 04 0045*        jp nc,@no_cmd ; not a song command
042B0A             0046*    ; select song or directory
042B0A D6 30       0047*        sub '0' ; a = file index
042B0C 32 00 00 07 0048*        ld (bf_file_idx),a
042B10 C3 F3 2B 04 0049*        jp bf_select_file
042B14             0050*    @no_cmd: ; no valid commands so loop
042B14 C3 B6 2A 04 0051*        jp get_input
042B18             0052*    @play_song:
042B18 CD 51 2A 04 0053*        call bf_highlight_file ; highlight the selected file
042B1C C3 AA 52 04 0054*        jp play_song ; play the song
042B20             0055*    ; end get_input
042B20             0056*    
042B20             0057*    get_rand_file_idx:
042B20 3A 04 00 07 0058*        ld a,(bf_files_cur_pg)
042B24 B7          0059*        or a
042B25 C8          0060*        ret z ; no files on page
042B26 6F          0061*        ld l,a
042B27 CD 38 05 04 0062*        call rand_8 ; a = 0-255
042B2B 67          0063*        ld h,a
042B2C CD 74 05 04 0064*        call udiv8 ; a = mod(a,bf_files_per_pg)
042B30 32 00 00 07 0065*        ld (bf_file_idx),a
042B34 C9          0066*        ret
042B35             0067*    
042B35             0068*    get_prev_file_idx:
042B35             0069*    ; get number of files on current page
042B35 3A 04 00 07 0070*        ld a,(bf_files_cur_pg)
042B39 47          0071*        ld b,a
042B3A             0072*    ; decrement the file index
042B3A 3A 00 00 07 0073*        ld a,(bf_file_idx)
042B3E 3D          0074*        dec a
042B3F B8          0075*        cp b
042B40 DA 46 2B 04 0076*        jp c,@F ; check for wraparound
042B44 78          0077*        ld a,b ; get the number of files this page
042B45 3D          0078*        dec a ; zero-based
042B46             0079*    @@:
042B46 32 00 00 07 0080*        ld (bf_file_idx),a
042B4A C9          0081*        ret
042B4B             0082*    ; end get_prev_file_idx
042B4B             0083*    
042B4B             0084*    bf_prev_file:
042B4B CD 35 2B 04 0085*        call get_prev_file_idx
042B4F CD 51 2A 04 0086*        call bf_highlight_file ; highlight the file
042B53 C3 B6 2A 04 0087*        jp get_input
042B57             0088*    ; end bf_prev_file
042B57             0089*    
042B57             0090*    get_next_file_idx:
042B57             0091*    ; get number of files on current page
042B57 3A 04 00 07 0092*        ld a,(bf_files_cur_pg)
042B5B 47          0093*        ld b,a
042B5C             0094*    ; increment the file index
042B5C 3A 00 00 07 0095*        ld a,(bf_file_idx)
042B60 3C          0096*        inc a
042B61 B8          0097*        cp b
042B62 DA 67 2B 04 0098*        jp c,@F ; check for wraparound
042B66 AF          0099*        xor a ; wrap around to the first file
042B67             0100*    @@:
042B67 32 00 00 07 0101*        ld (bf_file_idx),a
042B6B C9          0102*        ret
042B6C             0103*    ; end get_next_file_idx
042B6C             0104*    
042B6C             0105*    bf_next_file:
042B6C CD 57 2B 04 0106*        call get_next_file_idx
042B70 CD 51 2A 04 0107*        call bf_highlight_file ; highlight the file
042B74 C3 B6 2A 04 0108*        jp get_input
042B78             0109*    ; end bf_next_file
042B78             0110*    
042B78             0111*    bf_next_page:
042B78             0112*    ; advance the page number
042B78 ED 5B 0A 00 0113*        ld de,(bf_page_cur) ; get the current page number
       07          
042B7D 13          0114*        inc de ; increment the page number
042B7E 2A 0D 00 07 0115*        ld hl,(bf_dir_num_pages) ; get the number of pages
042B82 2B          0116*        dec hl ; zero-based
042B83 B7          0117*        or a ; clear carry
042B84 ED 52       0118*        sbc hl,de
042B86 F2 8E 2B 04 0119*        jp p,@F ; not the last page
042B8A 11 00 00 00 0120*        ld de,0 ; wrap around to the first page
042B8E             0121*    @@:
042B8E             0122*    ; print the new page
042B8E ED 53 0A 00 0123*        ld (bf_page_cur),de
       07          
042B93 AF          0124*        xor a
042B94 32 00 00 07 0125*        ld (bf_file_idx),a ; reset the file index
042B98 CD 85 29 04 0126*        call bf_get_page_num_files ; get the number of files on the new page and store it
042B9C CD 51 2A 04 0127*        call bf_highlight_file ; highlight the first file
042BA0 C3 B6 2A 04 0128*        jp get_input
042BA4             0129*    ; end bf_next_page
042BA4             0130*    
042BA4             0131*    bf_prev_page:
042BA4             0132*    ; decrement the page number
042BA4 2A 0A 00 07 0133*        ld hl,(bf_page_cur) ; get the current page number
042BA8 2B          0134*        dec hl ; decrement the page number
042BA9             0135*        SIGN_HLU
                       M1 Args: none
042BA9 19          0001*M1      add hl,de ; 1 cycle
042BAA B7          0002*M1      or a ; clear flags ; 1 cycle
042BAB ED 52       0003*M1      sbc hl,de ; 2 cycles
042BAD             0004*M1      ; 4 cycles total
042BAD F2 B6 2B 04 0136*        jp p,@F ; not time to wrap around
042BB1 2A 0D 00 07 0137*        ld hl,(bf_dir_num_pages) ; get the number of pages
042BB5 2B          0138*        dec hl ; zero-based
042BB6             0139*    @@:
042BB6             0140*    ; print the new page
042BB6 22 0A 00 07 0141*        ld (bf_page_cur),hl
042BBA AF          0142*        xor a
042BBB 32 00 00 07 0143*        ld (bf_file_idx),a ; reset the file index
042BBF CD 85 29 04 0144*        call bf_get_page_num_files ; get the number of files on the new page and store it
042BC3 CD 51 2A 04 0145*        call bf_highlight_file ; highlight the first file
042BC7 C3 B6 2A 04 0146*        jp get_input
042BCB             0147*    ; end bf_prev_page
042BCB             0148*    
042BCB 2E 2E 00    0149*    str_up_dir: asciz ".."
042BCE             0150*    ; change directory one level up
042BCE             0151*    ; inputs: none
042BCE             0152*    bf_up_dir:
042BCE 21 CB 2B 04 0153*        ld hl,str_up_dir
042BD2             0154*    ; change directory
042BD2             0155*    ; inputs: hl = pointer to directory name
042BD2             0156*    bf_change_dir:
042BD2             0157*        MOSCALL mos_cd ; change to the directory
                       M1 Args: function=mos_cd 
042BD2 3E 03       0001*M1  			LD	A, function
042BD4 5B CF       0002*M1  			RST.LIL	08h
042BD6 CD 8B 28 04 0158*        call bf_get_dir ; get directory listing
042BDA 21 00 00 00 0159*        ld hl,0
042BDE 22 0A 00 07 0160*        ld (bf_page_cur),hl ; reset the page number
042BE2 AF          0161*        xor a
042BE3 32 00 00 07 0162*        ld (bf_file_idx),a ; reset the file index
042BE7 CD 51 2A 04 0163*        call bf_highlight_file ; highlight the first file
042BEB CD A5 2A 04 0164*        call bf_print_dir_name ; print the directory name
042BEF C3 B6 2A 04 0165*        jp get_input ; back to main loop
042BF3             0166*    ; end bf_change_dir
042BF3             0167*    ; end bf_up_dir
042BF3             0168*    
042BF3             0169*    bf_select_file:
042BF3             0170*    ; set up pointers to the fileinfo struct and filename
042BF3 CD 11 2C 04 0171*        call bf_get_filinfo_from_pg_idx ; iy = pointer to filinfo struct
042BF7 21 00 FF 06 0172*        ld hl,bf_fil_struct ; hl = pointer to fil struct
042BFB ED 13 16    0173*        lea de,iy+filinfo_fname ; de = pointer to filename
042BFE CD 09 56 04 0174*        call verify_wav
042C02 ED 23 16    0175*        lea hl,iy+filinfo_fname ; hl = pointer to filename
042C05 C2 D2 2B 04 0176*        jp nz,bf_change_dir ; not a .wav file, so must be a directory
042C09             0177*    ; play the .wav file
042C09 CD 51 2A 04 0178*        call bf_highlight_file ; highlight the selected file
042C0D C3 AA 52 04 0179*        jp play_song
042C11             0180*    ; end bf_select_file
042C11             0181*    
042C11             0182*    ; get a pointer to a filinfo struct from a directory page index
042C11             0183*    ; inputs: none
042C11             0184*    ; outputs: iy = pointer to the filinfo struct
042C11             0185*    bf_get_filinfo_from_pg_idx:
042C11             0186*    ; get the fileinfo pointer from the fileinfo pointer table
042C11 2A 0A 00 07 0187*        ld hl,(bf_page_cur) ; get the current page number
042C15 11 1E 00 00 0188*        ld de,bf_files_per_pg*3 ; number of files per page * 3 bytes per pointer
042C19 CD 67 03 04 0189*        call umul24 ; hl = page * num_files_per_page
042C1D 3A 00 00 07 0190*        ld a,(bf_file_idx) ; get the file index
042C21 5F          0191*        ld e,a ; file index
042C22 16 03       0192*        ld d,3 ; 3 bytes per pointer
042C24 ED 5C       0193*        mlt de ; de = file index * 3
042C26 19          0194*        add hl,de
042C27 EB          0195*        ex de,hl ; can't add iy,hl ...
042C28 FD 21 00 03 0196*        ld iy,bf_filinfo_ptrs ; get the pointer to the fileinfo pointer table
       07          
042C2D FD 19       0197*        add iy,de ; iy points to the first fileinfo pointer in the current page
042C2F FD 37 00    0198*        ld iy,(iy) ; iy points to the filinfo record
042C32 C9          0199*        ret
042C33             0200*    ; end bf_get_filinfo_from_pg_idx
042C33             0201*    
042C33             0202*    ps_toggle_pause:
042C33 CD 38 23 04 0203*        call vp_now_playing
042C37 CD 49 1B 04 0204*        call vdu_cls
042C3B 21 97 52 04 0205*        ld hl,ps_mode
042C3F CB 46       0206*        bit ps_mode_playing,(hl)
042C41 C2 5A 2C 04 0207*        jp nz,@playing
042C45 CB C6       0208*        set ps_mode_playing,(hl)
042C47 CD 60 00 04 0209*        call printInline
042C4B 28 50 29 6C 0210*        asciz "(P)laying "
       61 79 69 6E 
       67 20 00    
042C56 C3 6B 2C 04 0211*        jp @print
042C5A             0212*    @playing:
042C5A CB 86       0213*        res ps_mode_playing,(hl)
042C5C CD 60 00 04 0214*        call printInline
042C60 28 50 29 61 0215*        asciz "(P)aused  "
       75 73 65 64 
       20 20 00    
042C6B             0216*    @print:
042C6B 21 16 01 09 0217*        ld hl,ps_filinfo_fname
042C6F CD 67 00 04 0218*        call printString ; print the song filename
042C73 C3 B6 2A 04 0219*        jp get_input
042C77             0220*    ; end ps_toggle_pause
042C77             0221*    
042C77             0222*    ps_toggle_shuffle:
042C77 CD BA 23 04 0223*        call vp_legend_shuffle
042C7B CD 49 1B 04 0224*        call vdu_cls
042C7F 21 97 52 04 0225*        ld hl,ps_mode
042C83 CB 56       0226*        bit ps_mode_shuffle,(hl)
042C85 C2 A2 2C 04 0227*        jp nz,@shuffling
042C89 CD EE 23 04 0228*        call set_text_colours_inverse
042C8D 21 97 52 04 0229*        ld hl,ps_mode
042C91 CB D6       0230*        set ps_mode_shuffle,(hl)
042C93 CD 60 00 04 0231*        call printInline
042C97 4F 4E 00    0232*        asciz "ON"
042C9A CD E1 23 04 0233*        call set_text_colours_normal
042C9E C3 B6 2A 04 0234*        jp get_input
042CA2             0235*    @shuffling:
042CA2 CB 96       0236*        res ps_mode_shuffle,(hl)
042CA4 CD 60 00 04 0237*        call printInline
042CA8 4F 46 46 00 0238*        asciz "OFF"
042CAC C3 B6 2A 04 0239*        jp get_input
042CB0             0240*    ; end ps_toggle_shuffle
042CB0             0241*    
042CB0             0242*    ps_toggle_loop:
042CB0 CD C7 23 04 0243*        call vp_legend_loop
042CB4 CD 49 1B 04 0244*        call vdu_cls
042CB8 21 97 52 04 0245*        ld hl,ps_mode
042CBC CB 4E       0246*        bit ps_mode_loop,(hl)
042CBE C2 DB 2C 04 0247*        jp nz,@looping
042CC2 CD EE 23 04 0248*        call set_text_colours_inverse
042CC6 21 97 52 04 0249*        ld hl,ps_mode
042CCA CB CE       0250*        set ps_mode_loop,(hl)
042CCC CD 60 00 04 0251*        call printInline
042CD0 4F 4E 00    0252*        asciz "ON"
042CD3 CD E1 23 04 0253*        call set_text_colours_normal
042CD7 C3 B6 2A 04 0254*        jp get_input
042CDB             0255*    @looping:
042CDB CB 8E       0256*        res ps_mode_loop,(hl)
042CDD CD 60 00 04 0257*        call printInline
042CE1 4F 46 46 00 0258*        asciz "OFF"
042CE5 C3 B6 2A 04 0259*        jp get_input
042CE9             0260*    ; end ps_toggle_loop
042CE9             0049         include "logo.inc"
042CE9             0001*    ; Bitmap indices:
042CE9             0002*    BUF_UI_LOGO: equ 0x2000
042CE9             0003*    
042CE9             0004*    ; Import .rgba2 bitmap files and load them into VDP buffers
042CE9             0005*    load_ui_images:
042CE9             0006*    ; load a vdu buffer from local memory
042CE9 21 00 20 00 0007*        ld hl,BUF_UI_LOGO
042CED 11 17 2D 04 0008*        ld de,F_UI_logo
042CF1 01 80 25 00 0009*        ld bc,F_UI_logo_end-F_UI_logo
042CF5 CD EE 1C 04 0010*        call vdu_load_buffer
042CF9             0011*    ; now make it a bitmap
042CF9 21 00 20 00 0012*    	ld hl,BUF_UI_LOGO
042CFD CD 1A 1D 04 0013*        call vdu_consolidate_buffer
042D01 21 00 20 00 0014*    	ld hl,BUF_UI_LOGO
042D05 CD 43 1C 04 0015*        call vdu_buff_select
042D09 01 50 00 00 0016*    	ld bc,80
042D0D 11 78 00 00 0017*    	ld de,120
042D11 3E 01       0018*    	ld a,1 ; image type 1 = rgba2222
042D13 C3 58 1C 04 0019*    	jp vdu_bmp_create
042D17             0020*    
042D17             0021*    F_UI_logo:
042D17             0022*        ; incbin "../assets/images/logo.rgba2"
042D17 00 00 00 00 0023*        incbin "../images/logo.rgba2"
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 EA FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 EA 
       FF FF FF FF 
       FF FF FF EA 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 EA FF FF 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA 00 00 00 
       00 00 FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF EA 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF EA 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 EA FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       EA FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       00 00 00 00 
       00 00 FF FF 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 FF FF 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA 00 00 
       00 00 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       FF FF FF FF 
       FF FF FF EA 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 FF 
       FF FF FF FF 
       FF FF EA 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA 00 
       00 00 00 00 
       FF FF FF FF 
       FF EA 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       00 00 00 00 
       00 00 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 EA 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 EA FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 EA 
       FF FF FF FF 
       FF EA 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 EA 
       EA EA FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       EA 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       EA 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       00 EA FF FF 
       FF FF 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 EA FF FF 
       FF FF EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       00 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA 00 00 
       00 00 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 FF FF 
       FF FF FF FF 
       FF EA 00 00 
       00 00 00 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 EA FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       EA FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       EA 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       FF FF 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       FF FF 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF 00 00 
       00 00 00 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA 00 00 
       00 00 00 00 
       EA FF FF FF 
       FF EA 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 EA 
       FF FF FF FF 
       FF FF FF FF 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 FF FF 
       FF EA 00 00 
       00 00 00 00 
045297             0024*    F_UI_logo_end:
045297             0050         include "play.inc"
045297             0001*    ; stream a song from the SD card
045297             0002*    ; inputs: hl = pointer to filename
045297             0003*    ; requirements: the file must be 8-bit signed PCM mono
045297             0004*    ; uses: sound channels 0 and 1, buffers 0x3000 and 0x3001
045297             0005*    ; play_song constants
045297             0006*    ch0_buffer: equ 0x3000
045297             0007*    ch1_buffer: equ 0x3001
045297             0008*    cmd0_buffer: equ 0x3002
045297             0009*    cmd1_buffer: equ 0x3003
045297             0010*    
045297             0011*    ; ps_mode bits
045297             0012*    ps_mode_playing: equ 0 ; 0 = paused 1 = playing, p key toggles
045297             0013*    ps_mode_loop:    equ 1 ; 0 = no loop 1 = loop (overrides ps_mode_shuffle if on), l key toggles
045297             0014*    ps_mode_shuffle: equ 2 ; 0 = shuffle off 1 = on, s key toggles
045297             0015*    
045297             0016*    ; play_song state variables
045297             0017*    ; current active channel and bufferId's
045297 00          0018*    ps_mode: db 0 ; playback mode bitmask
045298 00          0019*    ps_channel: db 0 ; channel number
045299 00 00 00    0020*    ps_cmdId: dl 0 ; command bufferId
04529C 00 00 00    0021*    ps_sampleId: dl 0 ; sample bufferId
04529F 00 00 00    0022*    ps_chunkpointer: dl 0 ; pointer to current chunk
0452A2 00 00 00    0023*    ps_playhead: dl 0 ; current playhead position in the song in seconds from the start
0452A5 00 00 00 00 0024*    ps_song_duration: blkb 5,0 ; duration of the current song in seconds (32-bit word plus a padding byte)
       00          
0452AA             0025*    
0452AA             0026*    play_song:
0452AA             0027*    ; stop the PRT timer and close any currently playing file
0452AA CD DA 53 04 0028*        call ps_close_file ; also stops prt timer
0452AE             0029*    
0452AE             0030*    ; clear now playing viewport
0452AE CD 38 23 04 0031*        call vp_now_playing
0452B2 CD 49 1B 04 0032*        call vdu_cls
0452B6             0033*    
0452B6             0034*    ; open the file and verify it's a playable .wav file
0452B6 CD 83 56 04 0035*        call open_wav
0452BA CA ED 52 04 0036*        jp z,@F ; valid .wav file so continue
0452BE CD 60 00 04 0037*        call printInline
0452C2 49 6E 76 61 0038*        asciz "Invalid .wav file selected, try again."
       6C 69 64 20 
       2E 77 61 76 
       20 66 69 6C 
       65 20 73 65 
       6C 65 63 74 
       65 64 2C 20 
       74 72 79 20 
       61 67 61 69 
       6E 2E 00    
0452E9 C3 B6 2A 04 0039*        jp get_input ; return to user input loop
0452ED             0040*    
0452ED             0041*    @@: ; copy the directory filinfo struct to ps_filinfo_struct
0452ED ED 23 00    0042*        lea hl,iy ; open_wav set iy to the directory's filinfo struct
0452F0 11 00 01 09 0043*        ld de,ps_filinfo_struct ; destination address
0452F4 01 16 01 00 0044*        ld bc,filinfo_struct_size
0452F8 ED B0       0045*        ldir
0452FA             0046*    
0452FA             0047*    ; tell the user what they've won
0452FA CD 60 00 04 0048*        call printInline
0452FE 28 50 29 6C 0049*        asciz "(P)laying "
       61 79 69 6E 
       67 20 00    
045309 21 16 01 09 0050*        ld hl,ps_filinfo_fname
04530D CD 67 00 04 0051*        call printString ; print the song filename
045311             0052*    
045311             0053*    ; compute the song duration from the file size and sample rate and print it
045311             0054*    ; technically we should account for the .wav header, but at 76 bytes it's negligible
045311 CD 52 23 04 0055*        call vp_duration ; set viewport to duration window
045315 3A 07 03 09 0056*        ld a,(ps_wav_header+wav_file_size+3) ; upper byte
045319 DD 2A 04 03 0057*        ld ix,(ps_wav_header+wav_file_size+0) ; lower word
       09          
04531E ED 5B 18 03 0058*        ld de,(ps_wav_header+wav_sample_rate)
       09          
045323 CD A5 05 04 0059*        call udiv3223 ; auix = duration in seconds
045327 DD 22 A5 52 0060*        ld (ps_song_duration),ix ; duration low word
       04          
04532C 32 A8 52 04 0061*        ld (ps_song_duration+3),a ; duration high byte
045330 2A A5 52 04 0062*        ld hl,(ps_song_duration) ; ls 24 bits of duration is sufficient and all we're prepared for
045334 CD 35 18 04 0063*        call seconds_to_hhmmss ; hl pointer to string representation of HH:MM:SS
045338 CD 67 00 04 0064*        call printString ; print the duration
04533C             0065*    ; reset the playhead counter to zero
04533C 21 00 00 00 0066*        ld hl,0
045340 22 A2 52 04 0067*        ld (ps_playhead),hl
045344             0068*    ; load the command buffers and read the first block of data
045344 CD 9D 54 04 0069*        call ps_load_command_buffers
045348 CD 5A 53 04 0070*        call ps_read_sample
04534C             0071*    ; set ps_mode_playing
04534C 21 97 52 04 0072*        ld hl,ps_mode
045350 CB C6       0073*        set ps_mode_playing,(hl)
045352             0074*    ; enable interrupts and start the PRT timer
045352 CD 9C 55 04 0075*        call ps_prt_start
045356             0076*    ; jump to user input loop (enables interrupts)
045356             0077*    ; the play sample interrupt will return to there
045356             0078*    ; and exit app will return to main from there as well
045356 C3 B6 2A 04 0079*        jp get_input
04535A             0080*    ; end play_song
04535A             0081*    
04535A             0082*    ; read the next 1-second's worth of sound data from the file
04535A             0083*    ; and upload it to the sample buffer
04535A             0084*    ps_read_sample:
04535A             0085*    ; disable interrupts so load is guaranteed to complete
04535A F3          0086*        di
04535B             0087*    
04535B             0088*    ; 0x82: ffs_fread
04535B             0089*    ; Read from a file (Requires MOS 1.03 or above)
04535B             0090*    ; Parameters:
04535B             0091*    ; HL(U): Pointer to a FIL structure
04535B             0092*    ; DE(U): Pointer to a buffer to store the data in
04535B             0093*    ; BC(U): Number of bytes to read (typically the size of the buffer)
04535B             0094*    ; Preserves: HL(U), DE(U)
04535B             0095*    ; Returns:
04535B             0096*    ; BC(U): Number of bytes read
04535B             0097*    ; A: FRESULT
04535B 21 00 00 09 0098*        ld hl,ps_fil_struct
04535F 11 00 04 09 0099*        ld de,ps_wav_data
045363 ED 4B 18 03 0100*        ld bc,(ps_wav_header+wav_sample_rate)
       09          
045368             0101*        FFSCALL ffs_fread
                       M1 Args: function=ffs_fread 
045368 FD E5       0001*M1  			PUSH IY
04536A 3E 82       0002*M1  			LD	A, function
04536C 5B CF       0003*M1  			RST.LIL	08h
04536E FD E1       0004*M1  			POP IY
045370             0102*    
045370             0103*    ; test bc for zero bytes read
045370 21 00 00 00 0104*        ld hl,0
045374 AF          0105*        xor a ; clear carry
045375 ED 42       0106*        sbc hl,bc ; hl = 0-chunksize
045377 C2 83 53 04 0107*        jp nz,@load ; we read some data
04537B             0108*    
04537B             0109*    ; no data read so close file and play next song
04537B CD DA 53 04 0110*        call ps_close_file
04537F C3 EB 53 04 0111*        jp ps_song_over
045383             0112*    
045383             0113*    ; load a vdu buffer from local memory
045383             0114*    ; inputs: hl = bufferId ; bc = length ; de = pointer to data
045383             0115*    @load:
045383 C5          0116*        push bc ; save how much data to load
045384 3A 98 52 04 0117*        ld a,(ps_channel)
045388 3C          0118*        inc a
045389 E6 01       0119*        and 1
04538B 32 98 52 04 0120*        ld (ps_channel),a
04538F 21 00 30 00 0121*        ld hl,ch0_buffer
045393 6F          0122*        ld l,a
045394 22 9C 52 04 0123*        ld (ps_sampleId),hl
045398 CD 03 1F 04 0124*        call vdu_clear_buffer
04539C 2A 9C 52 04 0125*        ld hl,(ps_sampleId)
0453A0 C1          0126*        pop bc ; restore how much data to load
0453A1 11 00 04 09 0127*        ld de,ps_wav_data ; pointer to data
0453A5 CD EE 1C 04 0128*        call vdu_load_buffer
0453A9             0129*    ; update the playhead counter and display the time elapsed
0453A9 CD 45 23 04 0130*        call vp_elapsed
0453AD 2A A2 52 04 0131*        ld hl,(ps_playhead)
0453B1 23          0132*        inc hl
0453B2 22 A2 52 04 0133*        ld (ps_playhead),hl
0453B6 CD 35 18 04 0134*        call seconds_to_hhmmss ; hl pointer to string representation of HH:MM:SS
0453BA CD 67 00 04 0135*        call printString ; print the playhead position
0453BE             0136*    ; print a playing breadcrumb
0453BE CD 5F 23 04 0137*        call vp_playhead
0453C2 3E 2E       0138*        ld a,'.'
0453C4 5B D7       0139*        rst.lil 10h
0453C6 C9          0140*        ret
0453C7             0141*    ; end ps_read_sample
0453C7             0142*    
0453C7             0143*    ; this is called by the PRT timer interrupt
0453C7             0144*    ps_play_sample:
0453C7             0145*    ; call the command buffer to play the sound
0453C7 2A 9C 52 04 0146*        ld hl,(ps_sampleId)
0453CB 2C          0147*        inc l
0453CC 2C          0148*        inc l
0453CD 22 99 52 04 0149*        ld (ps_cmdId),hl ; TODO: perhaps not needed
0453D1 CD E8 1E 04 0150*        call vdu_call_buffer
0453D5             0151*    ; load the next chunk of data
0453D5 CD 5A 53 04 0152*        call ps_read_sample
0453D9             0153*    ; return to the interrupt handler
0453D9 C9          0154*        ret
0453DA             0155*    ; end ps_play_sample
0453DA             0156*    
0453DA             0157*    ; close the file
0453DA             0158*    ps_close_file:
0453DA CD B9 55 04 0159*        call ps_prt_stop ; stop the PRT timer
0453DE             0160*    ; 0x81: ffs_fclose
0453DE             0161*    ; Close a file (Requires MOS 1.03 or above)
0453DE             0162*    ; Parameters:
0453DE             0163*    ; HL(U): Pointer to a FIL structure
0453DE             0164*    ; Preserves: HL(U)
0453DE             0165*    ; Returns:
0453DE             0166*    ; A: FRESULT
0453DE 21 00 00 09 0167*        ld hl,ps_fil_struct
0453E2             0168*        FFSCALL ffs_fclose
                       M1 Args: function=ffs_fclose 
0453E2 FD E5       0001*M1  			PUSH IY
0453E4 3E 81       0002*M1  			LD	A, function
0453E6 5B CF       0003*M1  			RST.LIL	08h
0453E8 FD E1       0004*M1  			POP IY
0453EA C9          0169*        ret
0453EB             0170*    ; end ps_close_file
0453EB             0171*    
0453EB             0172*    ps_song_over:
0453EB             0173*    ; get playback mode
0453EB 21 97 52 04 0174*        ld hl,ps_mode
0453EF             0175*    
0453EF             0176*    ; are we in loop mode?
0453EF CB 4E       0177*        bit ps_mode_loop,(hl)
0453F1 CA FD 53 04 0178*        jp z,@F ; no so check next mode
0453F5 21 16 01 09 0179*        ld hl,ps_filinfo_fname ; get current song filename
0453F9 C3 AA 52 04 0180*        jp play_song ; and play it again, Sam
0453FD             0181*    
0453FD             0182*    @@: ; are we in shuffle mode?
0453FD CB 56       0183*        bit ps_mode_shuffle,(hl)
0453FF C2 5B 54 04 0184*        jp nz,ps_play_random ; yes so play a random song
045403             0185*    
045403             0186*    ; loop and shuffle are off so play next song
045403 C3 07 54 04 0187*        jp ps_play_next_song
045407             0188*    ; end ps_song_over
045407             0189*    
045407             0190*    ps_play_next_song:
045407 3A 04 00 07 0191*        ld a,(bf_files_cur_pg)
04540B B7          0192*        or a ; check for zero files
04540C CA B6 2A 04 0193*        jp z,get_input ; no files to play so return to user input loop
045410 47          0194*        ld b,a ; loop counter
045411             0195*    @next_file:
045411 C5          0196*        push bc ; save loop counter
045412 CD 57 2B 04 0197*        call get_next_file_idx ; (bf_file_idx)++ with wraparound
045416 CD 11 2C 04 0198*        call bf_get_filinfo_from_pg_idx ; iy points to filinfo struct
04541A CD 84 2A 04 0199*        call bf_check_dir_or_file ; if zero then it's a song
04541E C1          0200*        pop bc ; restore loop counter
04541F CA 29 54 04 0201*        jp z,@play_song ; is a file so play song
045423 10 EC       0202*        djnz @next_file ; try the next file
045425 C3 B6 2A 04 0203*        jp get_input ; no files in this directory so return to user input loop
045429             0204*    @play_song:
045429 CD 51 2A 04 0205*        call bf_highlight_file ; highlight the selected file
04542D C3 AA 52 04 0206*        jp play_song
045431             0207*    ; end ps_play_next_song
045431             0208*    
045431             0209*    ps_play_prev_song:
045431 3A 04 00 07 0210*        ld a,(bf_files_cur_pg)
045435 B7          0211*        or a ; check for zero files
045436 CA B6 2A 04 0212*        jp z,get_input ; no files to play so return to user input loop
04543A 47          0213*        ld b,a ; loop counter
04543B             0214*    @next_file:
04543B C5          0215*        push bc ; save loop counter
04543C CD 57 2B 04 0216*        call get_next_file_idx ; (bf_file_idx)++ with wraparound
045440 CD 11 2C 04 0217*        call bf_get_filinfo_from_pg_idx ; iy points to filinfo struct
045444 CD 84 2A 04 0218*        call bf_check_dir_or_file ; if zero then it's a song
045448 C1          0219*        pop bc ; restore loop counter
045449 CA 53 54 04 0220*        jp z,@play_song ; is a file so play song
04544D 10 EC       0221*        djnz @next_file ; try the next file
04544F C3 B6 2A 04 0222*        jp get_input ; no files in this directory so return to user input loop
045453             0223*    @play_song:
045453 CD 51 2A 04 0224*        call bf_highlight_file ; highlight the selected file
045457 C3 AA 52 04 0225*        jp play_song
04545B             0226*    ; end ps_play_prev_song
04545B             0227*    
04545B             0228*    ; queue a random song on the current page to play next
04545B             0229*    ps_play_random:
04545B 3A 04 00 07 0230*        ld a,(bf_files_cur_pg)
04545F B7          0231*        or a ; check for zero files
045460 CA B6 2A 04 0232*        jp z,get_input ; no files to play so return to user input loop
045464 47          0233*        ld b,a ; loop counter
045465 3A 00 00 07 0234*        ld a,(bf_file_idx) ; save current song index
045469 32 9C 54 04 0235*        ld (@file_idx),a
04546D             0236*    @next_file:
04546D C5          0237*        push bc ; save loop counter
04546E CD 20 2B 04 0238*        call get_rand_file_idx ; a->(bf_file_idx)
045472 21 9C 54 04 0239*        ld hl,@file_idx
045476 BE          0240*        cp (hl) ; check for same song
045477 CA 8E 54 04 0241*        jp z,@same ; same song so try again
04547B CD 11 2C 04 0242*        call bf_get_filinfo_from_pg_idx ; iy points to filinfo struct
04547F CD 84 2A 04 0243*        call bf_check_dir_or_file ; if zero then it's a song
045483             0244*    @bump_counter:
045483 C1          0245*        pop bc ; restore loop counter
045484 CA 94 54 04 0246*        jp z,@play_song ; is a file so play song
045488 10 E3       0247*        djnz @next_file ; try the next file
04548A C3 B6 2A 04 0248*        jp get_input ; no files in this directory so return to user input loop
04548E             0249*    @same:
04548E F6 01       0250*        or a,1 ; reset zero flag
045490 C3 83 54 04 0251*        jp @bump_counter
045494             0252*    @play_song:
045494 CD 51 2A 04 0253*        call bf_highlight_file ; highlight the selected file
045498 C3 AA 52 04 0254*        jp play_song
04549C 00          0255*    @file_idx: db 0
04549D             0256*    ; end ps_play_random
04549D             0257*    
04549D             0258*    ps_load_command_buffers:
04549D 21 02 30 00 0259*        ld hl,cmd0_buffer
0454A1 CD 03 1F 04 0260*        call vdu_clear_buffer
0454A5 2A 18 03 09 0261*        ld hl,(ps_wav_header+wav_sample_rate)
0454A9 22 F3 54 04 0262*        ld (ps_sr0),hl
0454AD 3E 17       0263*        ld a,23
0454AF 32 F5 54 04 0264*        ld (ps_sr0+2),a
0454B3 21 02 30 00 0265*        ld hl,cmd0_buffer
0454B7 01 1D 00 00 0266*        ld bc,ps_cmd0_end-ps_cmd0
0454BB 11 EA 54 04 0267*        ld de,ps_cmd0
0454BF CD C0 1E 04 0268*        call vdu_write_block_to_buffer
0454C3             0269*    
0454C3 21 03 30 00 0270*        ld hl,cmd1_buffer
0454C7 CD 03 1F 04 0271*        call vdu_clear_buffer
0454CB 2A 18 03 09 0272*        ld hl,(ps_wav_header+wav_sample_rate)
0454CF 22 10 55 04 0273*        ld (ps_sr1),hl
0454D3 3E 17       0274*        ld a,23
0454D5 32 12 55 04 0275*        ld (ps_sr1+2),a
0454D9 21 03 30 00 0276*        ld hl,cmd1_buffer
0454DD 01 1D 00 00 0277*        ld bc,ps_cmd1_end-ps_cmd1
0454E1 11 07 55 04 0278*        ld de,ps_cmd1
0454E5 CD C0 1E 04 0279*        call vdu_write_block_to_buffer
0454E9 C9          0280*        ret
0454EA             0281*    ps_cmd0:
0454EA             0282*    ; vdu_buffer_to_sound command string
0454EA             0283*    ; Command 5: Buffer to sound
0454EA             0284*    ; VDU 23, 0, &85, channel (ignored), 5, 2, bufferId; format, [sampleRate;]
0454EA 17 00 85    0285*        db 23,0,0x85 ; vdu sound command header
0454ED 00          0286*        db 0x00 ; channel (ignored)
0454EE 05          0287*        db 0x05 ; buffer to sound command
0454EF 02          0288*        db 0x02 ; command 2 create sample
0454F0 00 30       0289*        dw ch0_buffer
0454F2 09          0290*        db 1+8 ; 8-bit unsigned PCM mono, 8 = sample rate argument follows
0454F3             0291*    ps_sr0:
0454F3 00 00       0292*        dw 0x0000 ; sample rate Hz
0454F5             0293*    ; vdu_play_sfx command string
0454F5             0294*    ; Command 4: Set waveform
0454F5             0295*    ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
0454F5 17 00 85    0296*        db 23,0,$85 ; vdu sound command header
0454F8 00          0297*        db 0 ; channel
0454F9 04          0298*        db 4 ; set waveform command
0454FA 08          0299*        db 8 ; waveform 8 = sample
0454FB 00 30       0300*        dw ch0_buffer ; sample bufferId
0454FD             0301*    ; Command 0: Play note
0454FD             0302*    ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
0454FD 17 00 85    0303*        db 23,0,$85 ; vdu sound command header
045500 00          0304*        db 0 ; channel
045501 00          0305*        db 0 ; play note command
045502 7F          0306*        db 127  ; volume 127 = max
045503 00 00       0307*        dw 0 ; frequency (relevant only for tuneable samples)
045505 00 00       0308*        dw 0 ; duration (ms), zero means play one time in full
045507             0309*    ps_cmd0_end:
045507             0310*    
045507             0311*    ps_cmd1:
045507             0312*    ; vdu_buffer_to_sound command string
045507             0313*    ; Command 5: Buffer to sound
045507             0314*    ; VDU 23, 0, &85, channel (ignored), 5, 2, bufferId; format, [sampleRate;]
045507 17 00 85    0315*        db 23,0,0x85 ; vdu sound command header
04550A 00          0316*        db 0x00 ; channel (ignored)
04550B 05          0317*        db 0x05 ; buffer to sound command
04550C 02          0318*        db 0x02 ; command 2 create sample
04550D 01 30       0319*        dw ch1_buffer
04550F 09          0320*        db 1+8 ; 8-bit unsigned PCM mono, 8 = sample rate argument follows
045510             0321*    ps_sr1:
045510 00 00       0322*        dw 0x0000 ; sample rate Hz
045512             0323*    ; vdu_play_sfx command string
045512             0324*    ; Command 4: Set waveform
045512             0325*    ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
045512 17 00 85    0326*        db 23,0,$85 ; vdu sound command header
045515 01          0327*        db 1 ; channel
045516 04          0328*        db 4 ; set waveform command
045517 08          0329*        db 8 ; waveform 8 = sample
045518 01 30       0330*        dw ch1_buffer ; sample bufferId
04551A             0331*    ; Command 0: Play note
04551A             0332*    ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
04551A 17 00 85    0333*        db 23,0,$85 ; vdu sound command header
04551D 01          0334*        db 1 ; channel
04551E 00          0335*        db 0 ; play note command
04551F 7F          0336*        db 127  ; volume 127 = max
045520 00 00       0337*        dw 0 ; frequency (relevant only for tuneable samples)
045522 00 00       0338*        dw 0 ; duration (ms), zero means play one time in full
045524             0339*    ps_cmd1_end:
045524             0340*    ; end ps_load_command_buffers
045524             0051         include "sort.inc"
045524             0001*    ; Determines the ascending lexical order of two zero-terminated strings
045524             0002*    ; Inputs: HL, DE = pointers to strings
045524             0003*    ; Returns:
045524             0004*    ;   - HL points to the lexically smaller string, DE to the larger (swapped if HL > DE).
045524             0005*    ; Flags:
045524             0006*    ;   - Z set,   C reset: Strings are equal.
045524             0007*    ;   - Z reset, C reset: DE is lexically larger than HL.
045524             0008*    ;   - Z reset, C set: DE is lexically smaller than HL.
045524             0009*    ; Destroys: A
045524             0010*    ; Notes:
045524             0011*    ;   - Comparisons are based on ASCII values: punctuation/numbers < uppercase < lowercase.
045524             0012*    alpha_asc:
045524 E5          0013*        push hl
045525 D5          0014*        push de
045526             0015*    @loop:
045526 1A          0016*        ld a,(de)
045527 BE          0017*        cp a,(hl)
045528 20 05       0018*        jr nz,@done
04552A 13          0019*        inc de
04552B 23          0020*        inc hl
04552C B7          0021*        or a,a
04552D 20 F7       0022*        jr nz,@loop
04552F             0023*    @done:
04552F D1          0024*        pop de
045530 E1          0025*        pop hl
045531 D0          0026*        ret nc
045532 EB          0027*        ex de,hl
045533 C9          0028*        ret
045534             0029*    ; end alpha_asc
045534             0030*    
045534             0031*    ; Sorts a list of pointers to zero-terminated strings in ascending lexical order
045534             0032*    ; using the selection sort algorithm, which is in-place and stable.
045534             0033*    ; Inputs:
045534             0034*    ;   - IY: Pointer to the list of string pointers.
045534             0035*    ;   - B: Number of items in the list (max 255).
045534             0036*    ; Outputs:
045534             0037*    ;   - Sorted list of pointers in ascending lexical order.
045534             0038*    ; Destroys:
045534             0039*    ;   - A, BC, DE, HL, IX.
045534             0040*    ; Notes:
045534             0041*    ;   - Strings are compared using an unsigned comparison (ASCII-based).
045534             0042*    ;   - The algorithm assumes all strings are properly null-terminated.
045534             0043*    ;   - The sorting is performed in-place by swapping pointers in the list.
045534             0044*    selection_sort_asc:
045534 A0          0045*        and a,b                  ; Check if B is zero
045535 C8          0046*        ret z                    ; No need to sort an empty list
045536 05          0047*        dec b                    ; We only need to do n-1 loops
045537 C8          0048*        ret z                    ; No need to sort a single item
045538 FD E5       0049*        push iy                  ; Save pointer to the list of pointers
04553A             0050*    @outer_loop:
04553A ED 54 03    0051*        lea ix,iy+3              ; IX = pointer to the next string in the list
04553D C5          0052*        push bc                  ; Save the outer loop counter
04553E             0053*    @inner_loop:
04553E C5          0054*        push bc                  ; Save the inner loop counter
04553F FD 27 00    0055*        ld hl,(iy)               ; HL = address of the current string
045542 DD 17 00    0056*        ld de,(ix)               ; DE = address of the next string to compare
045545 CD 24 55 04 0057*        call alpha_asc           ; Compare (HL) and (DE)
045549 30 06       0058*        jr nc,@skip_swap         ; If (HL) <= (DE), skip swapping the strings
04554B FD 2F 00    0059*        ld (iy),hl               ; alpha_asc already did the swap ...
04554E DD 1F 00    0060*        ld (ix),de               ; ... so we just load as is
045551             0061*    @skip_swap:
045551 ED 32 03    0062*        lea ix,ix+3              ; Move to the next pointer
045554 C1          0063*        pop bc                   ; Restore the inner loop counter
045555 10 E7       0064*        djnz @inner_loop         ; Continue the inner loop
045557 ED 33 03    0065*        lea iy,iy+3              ; Move to the next pointer in the list
04555A C1          0066*        pop bc                   ; Restore the outer loop counter
04555B 10 DD       0067*        djnz @outer_loop         ; Continue the outer loop
04555D FD E1       0068*        pop iy                   ; Restore pointer to the list of pointers
04555F C9          0069*        ret
045560             0070*    ; end selection_sort_asc
045560             0071*    
045560             0072*    ; same as selection_sort_asc, but for sorting fileinfo structs by filename
045560             0073*    selection_sort_asc_filinfo:
045560 A0          0074*        and a,b                  ; Check if B is zero
045561 C8          0075*        ret z                    ; No need to sort an empty list
045562 05          0076*        dec b                    ; We only need to do n-1 loops
045563 C8          0077*        ret z                    ; No need to sort a single item
045564 FD E5       0078*        push iy                  ; Save pointer to the list of pointers
045566             0079*    @outer_loop:
045566 ED 54 03    0080*        lea ix,iy+3              ; IX = pointer to the next string in the list
045569 C5          0081*        push bc                  ; Save the outer loop counter
04556A             0082*    @inner_loop:
04556A C5          0083*        push bc                  ; Save the inner loop counter
04556B FD 27 00    0084*        ld hl,(iy)               ; HL = address of the current string
04556E 11 15 00 00 0085*        ld de,filinfo_fname-1      ; offset to the filename in the FILINFO struct
045572 19          0086*        add hl,de                ; HL = address of the filename
045573 E5          0087*        push hl                  ; Save the address of the filename
045574 DD 27 00    0088*        ld hl,(ix)               ; HL = address of the next string to compare
045577 19          0089*        add hl,de                ; HL = address of the filename (DE already has the offset)
045578 EB          0090*        ex de,hl                 ; DE = address of the filename
045579 E1          0091*        pop hl                   ; HL = address of the current filename
04557A CD 24 55 04 0092*        call alpha_asc           ; Compare (HL) and (DE)
04557E 30 0D       0093*        jr nc,@skip_swap         ; If (HL) <= (DE), skip swapping the strings
045580 01 EB FF FF 0094*        ld bc,-filinfo_fname+1     ; -offset to the filename in the FILINFO struct
045584 09          0095*        add hl,bc                ; HL = address of the FILINFO struct
045585 FD 2F 00    0096*        ld (iy),hl
045588 EB          0097*        ex de,hl                 ; HL = address of the filename
045589 09          0098*        add hl,bc                ; HL = address of the FILINFO struct
04558A DD 2F 00    0099*        ld (ix),hl
04558D             0100*    @skip_swap:
04558D ED 32 03    0101*        lea ix,ix+3              ; Move to the next pointer
045590 C1          0102*        pop bc                   ; Restore the inner loop counter
045591 10 D7       0103*        djnz @inner_loop         ; Continue the inner loop
045593 ED 33 03    0104*        lea iy,iy+3              ; Move to the next pointer in the list
045596 C1          0105*        pop bc                   ; Restore the outer loop counter
045597 10 CD       0106*        djnz @outer_loop         ; Continue the outer loop
045599 FD E1       0107*        pop iy                   ; Restore pointer to the list of pointers
04559B C9          0108*        ret
04559C             0109*    ; end selection_sort_asc_filinfo
04559C             0052         include "timer_jukebox.inc"
04559C             0001*    ps_prt_reload: equ [72000/2] ; 36000 = 2 ticks per second at 18.432 MHz with a 256 clock divider
04559C             0002*    
04559C             0003*    ; start PRT timer
04559C             0004*    ps_prt_start:
04559C 21 00 00 00 0005*        ld hl,0
0455A0 22 DB 55 04 0006*        ld (ps_prt_irq_counter),hl
0455A4 21 A0 8C 00 0007*        ld hl,ps_prt_reload
0455A8 ED 29 84    0008*        out0 (TMR1_CTL+TMR_RES_LOW),l
0455AB ED 21 85    0009*    	out0 (TMR1_CTL+TMR_RES_HIGH),h
0455AE             0010*    ; disable timer (in effect, reset it)
0455AE 3E 0E       0011*        ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_256 | RST_EN_1 | PRT_EN_0
0455B0 ED 39 83    0012*    	out0 (TMR1_CTL+TMR_REG_CTL),a
0455B3             0013*    ; enable timer,with interrupt and CONTINUOUS mode,clock divider 256
0455B3 3E 5F       0014*        ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_256 | RST_EN_1 | PRT_EN_1
0455B5 ED 39 83    0015*    	out0 (TMR1_CTL+TMR_REG_CTL),a
0455B8 C9          0016*        ret
0455B9             0017*    
0455B9             0018*    ; stop PRT timer
0455B9             0019*    ps_prt_stop:
0455B9 3E 0E       0020*        ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_256 | RST_EN_1 | PRT_EN_0
0455BB ED 39 83    0021*    	out0 (TMR1_CTL+TMR_REG_CTL),a
0455BE C9          0022*        ret
0455BF             0023*    
0455BF             0024*    ; ===============================================
0455BF             0025*    ; PRT Timer Interrupt Handling
0455BF             0026*    ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
0455BF             0027*    ; -----------------------------------------------
0455BF             0028*    ps_prt_irq_init:
0455BF             0029*        ; set up interrupt vector table 2
0455BF 21 00 00 00 0030*    	ld hl,0
0455C3 3A 0C 01 00 0031*    	ld a,($10c)
0455C7 6F          0032*    	ld l,a
0455C8 3A 0D 01 00 0033*    	ld a,($10d)
0455CC 67          0034*    	ld h,a
0455CD             0035*    
0455CD             0036*    	; skip over CALL ($c3)
0455CD 23          0037*    	inc hl
0455CE             0038*    	; load address of jump into vector table 2 (in ram)
0455CE ED 27       0039*    	ld hl,(hl)
0455D0             0040*    
0455D0             0041*    	; write CALL ps_prt_irq_handler to vector table 2
0455D0 3E C3       0042*    	ld a,$c3
0455D2 77          0043*    	ld (hl),a
0455D3 23          0044*    	inc hl
0455D4 11 DC 55 04 0045*    	ld de,ps_prt_irq_handler
0455D8 ED 1F       0046*    	ld (hl),de
0455DA             0047*    
0455DA C9          0048*        ret
0455DB             0049*    ; end ps_prt_irq_init
0455DB             0050*    
0455DB             0051*    ; interrupt routine for playing the next sample
0455DB             0052*    ps_prt_irq_counter:
0455DB 00          0053*    	db 0
0455DC             0054*    ps_prt_irq_handler:
0455DC F3          0055*        di
0455DD 08          0056*        ex af,af'
0455DE D9          0057*        exx
0455DF             0058*    ; clear sysvar_keyascii
0455DF             0059*    	MOSCALL mos_sysvars
                       M1 Args: function=mos_sysvars 
0455DF 3E 08       0001*M1  			LD	A, function
0455E1 5B CF       0002*M1  			RST.LIL	08h
0455E3 AF          0060*    	xor a
0455E4 DD 77 05    0061*    	ld (IX+sysvar_keyascii),a
0455E7             0062*    ; read the timer interrupt and bump the counter
0455E7 ED 38 83    0063*        in0 a,(TMR1_CTL+TMR_REG_CTL)
0455EA 3A DB 55 04 0064*        ld a,(ps_prt_irq_counter)
0455EE 3C          0065*        inc a
0455EF E6 01       0066*        and 1 ; modulo 2
0455F1 32 DB 55 04 0067*        ld (ps_prt_irq_counter),a
0455F5             0068*    ; if counter zero, play the next sample
0455F5 C2 03 56 04 0069*        jp nz,@F
0455F9 21 97 52 04 0070*        ld hl,ps_mode
0455FD CB 46       0071*        bit ps_mode_playing,(hl)
0455FF C4 C7 53 04 0072*        call nz,ps_play_sample
045603             0073*    @@:
045603 D9          0074*        exx
045604 08          0075*        ex af,af'
045605 FB          0076*        ei
045606 5B ED 4D    0077*        reti.l
045609             0078*    ; end ps_prt_irq_handler
045609             0053         include "wav.inc"
045609             0001*    ; WAV File Structure Offsets and Descriptions
045609             0002*    wav_riff:          EQU 0    ; 4 bytes: "RIFF" identifier
045609             0003*    wav_file_size:     EQU 4    ; 4 bytes: Total file size minus 8 bytes for RIFF header
045609             0004*    wav_wave:          EQU 8    ; 4 bytes: "WAVE" identifier
045609             0005*    wav_fmt_marker:    EQU 12   ; 4 bytes: "fmt " subchunk marker
045609             0006*    wav_fmt_size:      EQU 16   ; 4 bytes: Format chunk size (16 for PCM)
045609             0007*    wav_audio_format:  EQU 20   ; 2 bytes: Audio format (1 = PCM)
045609             0008*    wav_num_channels:  EQU 22   ; 2 bytes: Number of channels (1 = mono, 2 = stereo)
045609             0009*    wav_sample_rate:   EQU 24   ; 4 bytes: Sample rate in Hz (e.g., 32768)
045609             0010*    wav_byte_rate:     EQU 28   ; 4 bytes: Bytes per second (SampleRate * NumChannels * BitsPerSample / 8)
045609             0011*    wav_block_align:   EQU 32   ; 2 bytes: Bytes per sample block (NumChannels * BitsPerSample / 8)
045609             0012*    wav_bits_per_sample: EQU 34 ; 2 bytes: Bits per sample (e.g., 8 or 16)
045609             0013*    
045609             0014*    ; LIST Chunk (Extra Metadata)
045609             0015*    wav_list_marker:   EQU 36   ; 4 bytes: "LIST" marker
045609             0016*    wav_list_size:     EQU 40   ; 4 bytes: Size of the LIST chunk (e.g., 26)
045609             0017*    wav_info_marker:   EQU 44   ; 4 bytes: "INFO" marker
045609             0018*    wav_isft_marker:   EQU 48   ; 4 bytes: "ISFT" marker (software identifier)
045609             0019*    wav_isft_data:     EQU 52   ; 14 bytes: Software info string (e.g., "Lavf59.27.100")
045609             0020*    wav_isft_padding:  EQU 66   ; 2 bytes: Padding/NULL terminator for alignment
045609             0021*    
045609             0022*    ; Data Chunk
045609             0023*    wav_data_marker:   EQU 68   ; 4 bytes: "data" subchunk marker
045609             0024*    wav_data_size:     EQU 72   ; 4 bytes: Size of the audio data in bytes
045609             0025*    wav_data_start:    EQU 76   ; Start of audio data
045609             0026*    wav_header_size:   EQU wav_data_start ; Total Header Size: 76 bytes
045609             0027*    
045609             0028*    ; verify that a file is a .wav file
045609             0029*    ; inputs: hl = pointer to fil struct, de = pointer to filename
045609             0030*    ; returns: zero flag set if a .wav file we can read
045609             0031*    ; destroys: af
045609             0032*    verify_wav:
045609             0033*    ; back up registers
045609 E5          0034*        push hl
04560A C5          0035*        push bc
04560B D5          0036*        push de
04560C DD E5       0037*        push ix
04560E FD E5       0038*        push iy
045610             0039*    
045610             0040*    ; clear the .wav header buffer
045610 E5          0041*        push hl
045611 D5          0042*        push de
045612 01 4C 00 00 0043*        ld bc,wav_header_size
045616 21 00 1C 08 0044*        ld hl,bf_wav_header
04561A CD 5F 03 04 0045*        call clear_mem
04561E D1          0046*        pop de
04561F E1          0047*        pop hl
045620             0048*    
045620             0049*    ; open the file
045620 0E 01       0050*        ld c,fa_read
045622             0051*        FFSCALL ffs_fopen
                       M1 Args: function=ffs_fopen 
045622 FD E5       0001*M1  			PUSH IY
045624 3E 80       0002*M1  			LD	A, function
045626 5B CF       0003*M1  			RST.LIL	08h
045628 FD E1       0004*M1  			POP IY
04562A             0052*    
04562A             0053*    ; read the header
04562A 01 4C 00 00 0054*        ld bc,wav_header_size
04562E 11 00 1C 08 0055*        ld de,bf_wav_header
045632             0056*        FFSCALL ffs_fread
                       M1 Args: function=ffs_fread 
045632 FD E5       0001*M1  			PUSH IY
045634 3E 82       0002*M1  			LD	A, function
045636 5B CF       0003*M1  			RST.LIL	08h
045638 FD E1       0004*M1  			POP IY
04563A             0057*    
04563A             0058*    ; close the file
04563A             0059*        FFSCALL ffs_fclose
                       M1 Args: function=ffs_fclose 
04563A FD E5       0001*M1  			PUSH IY
04563C 3E 81       0002*M1  			LD	A, function
04563E 5B CF       0003*M1  			RST.LIL	08h
045640 FD E1       0004*M1  			POP IY
045642             0060*    
045642             0061*    ; verify the .wav header
045642 DD 21 00 1C 0062*        ld ix,bf_wav_header
       08          
045647 DD 27 00    0063*        ld hl,(ix+wav_riff)
04564A             0064*    
04564A 11 52 49 46 0065*        ld de, 0x464952  ; ascii for "RIF" in little-endian order
04564E B7          0066*        or a ; clear carry
04564F ED 52       0067*        sbc hl,de
045651 C2 7B 56 04 0068*        jp nz,@done ; not a .wav file
045655             0069*    
045655 DD 27 08    0070*        ld hl,(ix+wav_wave)
045658 11 57 41 56 0071*        ld de, 0x564157  ; ascii for "WAV" in little-endian order
04565C B7          0072*        or a ; clear carry
04565D ED 52       0073*        sbc hl,de
04565F C2 7B 56 04 0074*        jp nz,@done ; not a .wav file
045663             0075*    
045663 DD 27 0C    0076*        ld hl,(ix+wav_fmt_marker)
045666 11 66 6D 74 0077*        ld de, 0x746D66  ; ascii for "fmt" in little-endian order
04566A B7          0078*        or a ; clear carry
04566B ED 52       0079*        sbc hl,de
04566D C2 7B 56 04 0080*        jp nz,@done ; not a .wav file
045671             0081*    
045671 DD 27 14    0082*        ld hl,(ix+wav_audio_format)
045674 11 01 00 01 0083*        ld de, 0x010001  ; PCM format, 1-channel
045678 B7          0084*        or a ; clear carry
045679 ED 52       0085*        sbc hl,de ; if not zero, not a .wav file we can read
04567B             0086*    
04567B             0087*    @done:
04567B             0088*    ; restore registers and return
04567B FD E1       0089*        pop iy
04567D DD E1       0090*        pop ix
04567F D1          0091*        pop de
045680 C1          0092*        pop bc
045681 E1          0093*        pop hl
045682 C9          0094*        ret
045683             0095*    ; end verify_wav
045683             0096*    
045683             0097*    ; open a .wav file and make it ready to play
045683             0098*    ; inputs: none
045683             0099*    ; returns: zero flag set if a .wav file we can read
045683             0100*    ; destroys: af
045683             0101*    open_wav:
045683             0102*    ; clear the .wav header buffer
045683 E5          0103*        push hl
045684 D5          0104*        push de
045685 01 4C 00 00 0105*        ld bc,wav_header_size
045689 21 00 03 09 0106*        ld hl,ps_wav_header
04568D CD 5F 03 04 0107*        call clear_mem
045691 D1          0108*        pop de
045692 E1          0109*        pop hl
045693             0110*    
045693             0111*    ; get filinfo and fil struct pointers to currently selected file
045693 CD 11 2C 04 0112*        call bf_get_filinfo_from_pg_idx ; iy = pointer to filinfo struct
045697 ED 13 16    0113*        lea de,iy+filinfo_fname ; de = pointer to filename
04569A 21 00 00 09 0114*        ld hl,ps_fil_struct
04569E             0115*    
04569E             0116*    ; open the file
04569E 0E 01       0117*        ld c,fa_read
0456A0             0118*        FFSCALL ffs_fopen
                       M1 Args: function=ffs_fopen 
0456A0 FD E5       0001*M1  			PUSH IY
0456A2 3E 80       0002*M1  			LD	A, function
0456A4 5B CF       0003*M1  			RST.LIL	08h
0456A6 FD E1       0004*M1  			POP IY
0456A8             0119*    
0456A8             0120*    ; read the header
0456A8 01 4C 00 00 0121*        ld bc,wav_header_size
0456AC 11 00 03 09 0122*        ld de,ps_wav_header
0456B0             0123*        FFSCALL ffs_fread
                       M1 Args: function=ffs_fread 
0456B0 FD E5       0001*M1  			PUSH IY
0456B2 3E 82       0002*M1  			LD	A, function
0456B4 5B CF       0003*M1  			RST.LIL	08h
0456B6 FD E1       0004*M1  			POP IY
0456B8             0124*    
0456B8             0125*    ; verify the .wav header
0456B8 DD 21 00 03 0126*        ld ix,ps_wav_header
       09          
0456BD DD 27 00    0127*        ld hl,(ix+wav_riff)
0456C0             0128*    
0456C0 11 52 49 46 0129*        ld de, 0x464952  ; ascii for "RIF" in little-endian order
0456C4 B7          0130*        or a ; clear carry
0456C5 ED 52       0131*        sbc hl,de
0456C7 C2 F6 56 04 0132*        jp nz,@not_wav ; not a .wav file
0456CB             0133*    
0456CB DD 27 08    0134*        ld hl,(ix+wav_wave)
0456CE 11 57 41 56 0135*        ld de, 0x564157  ; ascii for "WAV" in little-endian order
0456D2 B7          0136*        or a ; clear carry
0456D3 ED 52       0137*        sbc hl,de
0456D5 C2 F6 56 04 0138*        jp nz,@not_wav ; not a .wav file
0456D9             0139*    
0456D9 DD 27 0C    0140*        ld hl,(ix+wav_fmt_marker)
0456DC 11 66 6D 74 0141*        ld de, 0x746D66  ; ascii for "fmt" in little-endian order
0456E0 B7          0142*        or a ; clear carry
0456E1 ED 52       0143*        sbc hl,de
0456E3 C2 F6 56 04 0144*        jp nz,@not_wav ; not a .wav file
0456E7             0145*    
0456E7 DD 27 14    0146*        ld hl,(ix+wav_audio_format)
0456EA 11 01 00 01 0147*        ld de, 0x010001  ; PCM format, 1-channel
0456EE B7          0148*        or a ; clear carry
0456EF ED 52       0149*        sbc hl,de ; if not zero, not a .wav file we can read
0456F1 C2 F6 56 04 0150*        jp nz,@not_wav ; not a .wav file
0456F5             0151*    ; valid .wav file so return with zero flag set and file still open
0456F5 C9          0152*        ret
0456F6             0153*    @not_wav:
0456F6             0154*    ; close the file and return to caller
0456F6             0155*        FFSCALL ffs_fclose
                       M1 Args: function=ffs_fclose 
0456F6 FD E5       0001*M1  			PUSH IY
0456F8 3E 81       0002*M1  			LD	A, function
0456FA 5B CF       0003*M1  			RST.LIL	08h
0456FC FD E1       0004*M1  			POP IY
0456FE F6 01       0156*        or a,1 ; reset zero flag indicating invalid .wav file
045700 C9          0157*        ret
045701             0158*    ; end open_wav
045701             0054         include "debug.inc"
045701             0001*    printHexA:
045701 F5          0002*        push af
045702 C5          0003*        push bc
045703 CD AE 00 04 0004*        call printHex8
045707 3E 20       0005*        ld a,' '
045709 5B D7       0006*        rst.lil 10h
04570B C1          0007*        pop bc
04570C F1          0008*        pop af
04570D C9          0009*        ret
04570E             0010*    
04570E             0011*    printHexHL:
04570E F5          0012*        push af
04570F C5          0013*        push bc
045710 CD A8 00 04 0014*        call printHex16
045714 3E 20       0015*        ld a,' '
045716 5B D7       0016*        rst.lil 10h
045718 C1          0017*        pop bc
045719 F1          0018*        pop af
04571A C9          0019*        ret
04571B             0020*    
04571B             0021*    printHexUHL:
04571B F5          0022*        push af
04571C C5          0023*        push bc
04571D CD A0 00 04 0024*        call printHex24
045721 3E 20       0025*        ld a,' '
045723 5B D7       0026*        rst.lil 10h
045725 C1          0027*        pop bc
045726 F1          0028*        pop af
045727 C9          0029*        ret
045728             0030*    
045728             0031*    printHexAUHL:
045728 F5          0032*        push af
045729 C5          0033*        push bc
04572A CD AE 00 04 0034*        call printHex8
04572E 3E 2E       0035*        ld a,'.'
045730 5B D7       0036*        rst.lil 10h
045732 CD A0 00 04 0037*        call printHex24
045736 3E 20       0038*        ld a,' '
045738 5B D7       0039*        rst.lil 10h
04573A C1          0040*        pop bc
04573B F1          0041*        pop af
04573C C9          0042*        ret
04573D             0043*    
04573D             0044*    printHexABHL:
04573D             0045*    ; preserve registers
04573D C5          0046*        push bc ; b will be ok c will not
04573E F5          0047*        push af ; will get totally destroyed
04573F             0048*    ; print a
04573F CD AE 00 04 0049*        call printHex8
045743             0050*    ; print b
045743 78          0051*        ld a,b
045744 CD AE 00 04 0052*        call printHex8
045748             0053*    ; print hl
045748 CD A8 00 04 0054*        call printHex16
04574C             0055*    ; restore registers
04574C F1          0056*        pop af
04574D C1          0057*        pop bc
04574E C9          0058*        ret
04574F             0059*    
04574F             0060*    printHexBHL:
04574F             0061*    ; preserve registers
04574F C5          0062*        push bc ; b will be ok c will not
045750 F5          0063*        push af ; will get totally destroyed
045751             0064*    ; print b
045751 78          0065*        ld a,b
045752 CD AE 00 04 0066*        call printHex8
045756             0067*    ; print hl
045756 CD A8 00 04 0068*        call printHex16
04575A             0069*    ; restore registers
04575A F1          0070*        pop af
04575B C1          0071*        pop bc
04575C C9          0072*        ret
04575D             0073*    
04575D             0074*    printHexCDE:
04575D             0075*    ; preserve registers
04575D C5          0076*        push bc ; b will be ok c will not
04575E F5          0077*        push af ; will get totally destroyed
04575F             0078*    ; print c
04575F 79          0079*        ld a,c
045760 CD AE 00 04 0080*        call printHex8
045764             0081*    ; print de
045764 EB          0082*        ex de,hl
045765 CD A8 00 04 0083*        call printHex16
045769 EB          0084*        ex de,hl
04576A             0085*    ; restore registers
04576A F1          0086*        pop af
04576B C1          0087*        pop bc
04576C C9          0088*        ret
04576D             0089*    
04576D             0090*    printHexUIX:
04576D             0091*    ; store everything in scratch
04576D 22 35 03 04 0092*        ld (uhl),hl
045771 ED 43 38 03 0093*        ld (ubc),bc
       04          
045776 ED 53 3B 03 0094*        ld (ude),de
       04          
04577B DD 22 3E 03 0095*        ld (uix),ix
       04          
045780 FD 22 41 03 0096*        ld (uiy),iy
       04          
045785 F5          0097*        push af ; fml
045786             0098*    
045786 21 CC 02 04 0099*        ld hl,str_ixu
04578A CD 67 00 04 0100*        call printString
04578E 2A 3E 03 04 0101*        ld hl,(uix)
045792 CD A0 00 04 0102*        call printHex24
045796 CD 7C 00 04 0103*        call printNewLine
04579A             0104*    
04579A             0105*    ; restore everything
04579A 2A 35 03 04 0106*        ld hl, (uhl)
04579E ED 4B 38 03 0107*        ld bc, (ubc)
       04          
0457A3 ED 5B 3B 03 0108*        ld de, (ude)
       04          
0457A8 DD 2A 3E 03 0109*        ld ix, (uix)
       04          
0457AD FD 2A 41 03 0110*        ld iy, (uiy)
       04          
0457B2 F1          0111*        pop af
0457B3             0112*    ; all done
0457B3 C9          0113*        ret
0457B4             0114*    
0457B4             0115*    
0457B4             0116*    ; print registers to screen in hexidecimal format
0457B4             0117*    ; inputs: none
0457B4             0118*    ; outputs: values of every register printed to screen
0457B4             0119*    ;    values of each register in global scratch memory
0457B4             0120*    ; destroys: nothing
0457B4             0121*    stepRegistersHex:
0457B4             0122*    ; store everything in scratch
0457B4 22 35 03 04 0123*        ld (uhl),hl
0457B8 ED 43 38 03 0124*        ld (ubc),bc
       04          
0457BD ED 53 3B 03 0125*        ld (ude),de
       04          
0457C2 DD 22 3E 03 0126*        ld (uix),ix
       04          
0457C7 FD 22 41 03 0127*        ld (uiy),iy
       04          
0457CC F5          0128*        push af ; fml
0457CD E1          0129*        pop hl ; thanks, zilog
0457CE 22 32 03 04 0130*        ld (uaf),hl
0457D2 F5          0131*        push af ; dammit
0457D3             0132*    
0457D3             0133*    ; home the cursor
0457D3             0134*        ; call vdu_home_cursor
0457D3             0135*    
0457D3             0136*    ; print each register
0457D3 21 B8 02 04 0137*        ld hl,str_afu
0457D7 CD 67 00 04 0138*        call printString
0457DB 2A 32 03 04 0139*        ld hl,(uaf)
0457DF CD A0 00 04 0140*        call printHex24
0457E3 CD 7C 00 04 0141*        call printNewLine
0457E7             0142*    
0457E7 21 BD 02 04 0143*        ld hl,str_hlu
0457EB CD 67 00 04 0144*        call printString
0457EF 2A 35 03 04 0145*        ld hl,(uhl)
0457F3 CD A0 00 04 0146*        call printHex24
0457F7 CD 7C 00 04 0147*        call printNewLine
0457FB             0148*    
0457FB 21 C2 02 04 0149*        ld hl,str_bcu
0457FF CD 67 00 04 0150*        call printString
045803 2A 38 03 04 0151*        ld hl,(ubc)
045807 CD A0 00 04 0152*        call printHex24
04580B CD 7C 00 04 0153*        call printNewLine
04580F             0154*    
04580F 21 C7 02 04 0155*        ld hl,str_deu
045813 CD 67 00 04 0156*        call printString
045817 2A 3B 03 04 0157*        ld hl,(ude)
04581B CD A0 00 04 0158*        call printHex24
04581F CD 7C 00 04 0159*        call printNewLine
045823             0160*    
045823 21 CC 02 04 0161*        ld hl,str_ixu
045827 CD 67 00 04 0162*        call printString
04582B 2A 3E 03 04 0163*        ld hl,(uix)
04582F CD A0 00 04 0164*        call printHex24
045833 CD 7C 00 04 0165*        call printNewLine
045837             0166*    
045837 21 D1 02 04 0167*        ld hl,str_iyu
04583B CD 67 00 04 0168*        call printString
04583F 2A 41 03 04 0169*        ld hl,(uiy)
045843 CD A0 00 04 0170*        call printHex24
045847 CD 7C 00 04 0171*        call printNewLine
04584B             0172*    
04584B             0173*        ; call vsync
04584B             0174*    
04584B CD 7C 00 04 0175*        call printNewLine
04584F             0176*    
04584F             0177*    ; check for right shift key and quit if pressed
04584F             0178*        MOSCALL mos_getkbmap
                       M1 Args: function=mos_getkbmap 
04584F 3E 1E       0001*M1  			LD	A, function
045851 5B CF       0002*M1  			RST.LIL	08h
045853             0179*    @stayhere:
045853             0180*    ; 7 RightShift
045853 DD CB 00 76 0181*        bit 6,(ix+0)
045857 20 02       0182*        jr nz,@RightShift
045859 18 F8       0183*        jr @stayhere
04585B             0184*    @RightShift:
04585B DD CB 0E 86 0185*        res 0,(ix+14) ; debounce the key (hopefully)
04585F 3E 80       0186*        ld a,%10000000
045861             0187*        ; call multiPurposeDelay
045861             0188*    
045861             0189*    ; restore everything
045861 2A 35 03 04 0190*        ld hl, (uhl)
045865 ED 4B 38 03 0191*        ld bc, (ubc)
       04          
04586A ED 5B 3B 03 0192*        ld de, (ude)
       04          
04586F DD 2A 3E 03 0193*        ld ix, (uix)
       04          
045874 FD 2A 41 03 0194*        ld iy, (uiy)
       04          
045879 F1          0195*        pop af
04587A             0196*    ; all done
04587A C9          0197*        ret
04587B             0198*    
04587B             0199*    ; print registers to screen in hexidecimal format
04587B             0200*    ; inputs: none
04587B             0201*    ; outputs: values of every register printed to screen
04587B             0202*    ;    values of each register in global scratch memory
04587B             0203*    ; destroys: nothing
04587B             0204*    dumpRegistersHex:
04587B             0205*    ; store everything in scratch
04587B 22 35 03 04 0206*        ld (uhl),hl
04587F ED 43 38 03 0207*        ld (ubc),bc
       04          
045884 ED 53 3B 03 0208*        ld (ude),de
       04          
045889 DD 22 3E 03 0209*        ld (uix),ix
       04          
04588E FD 22 41 03 0210*        ld (uiy),iy
       04          
045893 F5          0211*        push af ; fml
045894 E1          0212*        pop hl ; thanks, zilog
045895 22 32 03 04 0213*        ld (uaf),hl
045899 F5          0214*        push af ; dammit
04589A             0215*    
04589A             0216*    ; home the cursor
04589A             0217*        ; call vdu_home_cursor
04589A             0218*        ; call printNewLine
04589A             0219*    
04589A             0220*    ; print each register
04589A 21 B8 02 04 0221*        ld hl,str_afu
04589E CD 67 00 04 0222*        call printString
0458A2 2A 32 03 04 0223*        ld hl,(uaf)
0458A6 CD A0 00 04 0224*        call printHex24
0458AA             0225*        ; call printNewLine
0458AA             0226*    
0458AA 21 BD 02 04 0227*        ld hl,str_hlu
0458AE CD 67 00 04 0228*        call printString
0458B2 2A 35 03 04 0229*        ld hl,(uhl)
0458B6 CD A0 00 04 0230*        call printHex24
0458BA             0231*        ; call printNewLine
0458BA             0232*    
0458BA 21 C2 02 04 0233*        ld hl,str_bcu
0458BE CD 67 00 04 0234*        call printString
0458C2 2A 38 03 04 0235*        ld hl,(ubc)
0458C6 CD A0 00 04 0236*        call printHex24
0458CA             0237*        ; call printNewLine
0458CA             0238*    
0458CA 21 C7 02 04 0239*        ld hl,str_deu
0458CE CD 67 00 04 0240*        call printString
0458D2 2A 3B 03 04 0241*        ld hl,(ude)
0458D6 CD A0 00 04 0242*        call printHex24
0458DA             0243*        ; call printNewLine
0458DA             0244*    
0458DA 21 CC 02 04 0245*        ld hl,str_ixu
0458DE CD 67 00 04 0246*        call printString
0458E2 2A 3E 03 04 0247*        ld hl,(uix)
0458E6 CD A0 00 04 0248*        call printHex24
0458EA             0249*        ; call printNewLine
0458EA             0250*    
0458EA 21 D1 02 04 0251*        ld hl,str_iyu
0458EE CD 67 00 04 0252*        call printString
0458F2 2A 41 03 04 0253*        ld hl,(uiy)
0458F6 CD A0 00 04 0254*        call printHex24
0458FA             0255*    
0458FA CD 7C 00 04 0256*        call printNewLine
0458FE             0257*        ; call printNewLine
0458FE             0258*    ; restore everything
0458FE 2A 35 03 04 0259*        ld hl, (uhl)
045902 ED 4B 38 03 0260*        ld bc, (ubc)
       04          
045907 ED 5B 3B 03 0261*        ld de, (ude)
       04          
04590C DD 2A 3E 03 0262*        ld ix, (uix)
       04          
045911 FD 2A 41 03 0263*        ld iy, (uiy)
       04          
045916 F1          0264*        pop af
045917             0265*    ; all done
045917 C9          0266*        ret
045918             0267*    
045918             0268*    dumpRegistersHexPrime:
045918 D9          0269*        exx
045919 08          0270*        ex af,af'
04591A CD 7B 58 04 0271*        call dumpRegistersHex
04591E 08          0272*        ex af,af'
04591F D9          0273*        exx
045920 C9          0274*        ret
045921             0275*    
045921             0276*    ; additionally dump prime registers
045921             0277*    ; inputs: none
045921             0278*    ; outputs: values of every register printed to screen
045921             0279*    ; destroys: nothing
045921             0280*    dumpRegistersHexAll:
045921 CD 7B 58 04 0281*        call dumpRegistersHex
045925 08          0282*        ex af,af'
045926 D9          0283*        exx
045927 CD 7B 58 04 0284*        call dumpRegistersHex
04592B 08          0285*        ex af,af'
04592C D9          0286*        exx
04592D C9          0287*        ret
04592E             0288*    
04592E             0289*    ; print hlu to screen in hexidecimal format
04592E             0290*    ; inputs: none
04592E             0291*    ; destroys: nothing
04592E             0292*    print_hex_hl:
04592E F5          0293*        push af
04592F E5          0294*        push hl
045930 21 BD 02 04 0295*        ld hl,str_hlu
045934 CD 67 00 04 0296*        call printString
045938 E1          0297*        pop hl
045939 E5          0298*        push hl
04593A CD A0 00 04 0299*        call printHex24
04593E 3E 20       0300*        ld a,' '
045940 5B D7       0301*        rst.lil 10h
045942 E1          0302*        pop hl
045943 F1          0303*        pop af
045944 C9          0304*        ret
045945             0305*    
045945             0306*    ; print bcu to screen in hexidecimal format
045945             0307*    ; inputs: none
045945             0308*    ; destroys: nothing
045945             0309*    print_hex_bc:
045945 F5          0310*        push af
045946 E5          0311*        push hl
045947 C5          0312*        push bc
045948 21 C2 02 04 0313*        ld hl,str_bcu
04594C CD 67 00 04 0314*        call printString
045950 E1          0315*        pop hl
045951 E5          0316*        push hl
045952 CD A0 00 04 0317*        call printHex24
045956 3E 20       0318*        ld a,' '
045958 5B D7       0319*        rst.lil 10h
04595A C1          0320*        pop bc
04595B E1          0321*        pop hl
04595C F1          0322*        pop af
04595D C9          0323*        ret
04595E             0324*    
04595E             0325*    ; print deu to screen in hexidecimal format
04595E             0326*    ; inputs: none
04595E             0327*    ; destroys: nothing
04595E             0328*    print_hex_de:
04595E F5          0329*        push af
04595F E5          0330*        push hl
045960 D5          0331*        push de
045961 21 C7 02 04 0332*        ld hl,str_deu
045965 CD 67 00 04 0333*        call printString
045969 E1          0334*        pop hl
04596A E5          0335*        push hl
04596B CD A0 00 04 0336*        call printHex24
04596F 3E 20       0337*        ld a,' '
045971 5B D7       0338*        rst.lil 10h
045973 D1          0339*        pop de
045974 E1          0340*        pop hl
045975 F1          0341*        pop af
045976 C9          0342*        ret
045977             0343*    
045977             0344*    
045977             0345*    ; inputs: whatever is in the flags register
045977             0346*    ; outputs: binary representation of flags
045977             0347*    ;          with a header so we know which is what
045977             0348*    ; destroys: nothing
045977             0349*    ; preserves: everything
045977             0350*    dumpFlags:
045977             0351*    ; first we curse zilog for not giving direct access to flags
045977 F5          0352*        push af ; this is so we can send it back unharmed
045978 F5          0353*        push af ; this is so we can pop it to hl
045979             0354*    ; store everything in scratch
045979 22 35 03 04 0355*        ld (uhl),hl
04597D ED 43 38 03 0356*        ld (ubc),bc
       04          
045982 ED 53 3B 03 0357*        ld (ude),de
       04          
045987 DD 22 3E 03 0358*        ld (uix),ix
       04          
04598C FD 22 41 03 0359*        ld (uiy),iy
       04          
045991             0360*    ; next we print the header
045991 21 BD 59 04 0361*        ld hl,@header
045995 CD 67 00 04 0362*        call printString
045999 E1          0363*        pop hl ; flags are now in l
04599A 7D          0364*        ld a,l ; flags are now in a
04599B CD 6E 02 04 0365*        call printBin8
04599F CD 7C 00 04 0366*        call printNewLine
0459A3             0367*    ; restore everything
0459A3 2A 35 03 04 0368*        ld hl, (uhl)
0459A7 ED 4B 38 03 0369*        ld bc, (ubc)
       04          
0459AC ED 5B 3B 03 0370*        ld de, (ude)
       04          
0459B1 DD 2A 3E 03 0371*        ld ix, (uix)
       04          
0459B6 FD 2A 41 03 0372*        ld iy, (uiy)
       04          
0459BB F1          0373*        pop af ; send her home the way she came
0459BC C9          0374*        ret
0459BD             0375*    ; Bit 7 (S): Sign flag
0459BD             0376*    ; Bit 6 (Z): Zero flag
0459BD             0377*    ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0459BD             0378*    ; Bit 4 (H): Half Carry flag
0459BD             0379*    ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0459BD             0380*    ; Bit 2 (PV): Parity/Overflow flag
0459BD             0381*    ; Bit 1 (N): Subtract flag
0459BD             0382*    ; Bit 0 (C): Carry flag
0459BD 53 5A 78 48 0383*    @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0459C8             0384*    
0459C8             0385*    
0459C8             0386*    ; print bytes from an address to the screen in hexidecimal format
0459C8             0387*    ; inputs: hl = address of first byte to print, a = number of bytes to print
0459C8             0388*    ; outputs: values of each byte printed to screen separated by spaces
0459C8             0389*    ; destroys: nothing
0459C8             0390*    dumpMemoryHex:
0459C8             0391*    ; save registers to the stack
0459C8 C5          0392*        push bc
0459C9 E5          0393*        push hl
0459CA F5          0394*        push af
0459CB             0395*    
0459CB             0396*    ; print the address and separator
0459CB CD A0 00 04 0397*        call printHex24
0459CF 3E 3A       0398*        ld a,':'
0459D1 5B D7       0399*        rst.lil 10h
0459D3 3E 20       0400*        ld a,' '
0459D5 5B D7       0401*        rst.lil 10h
0459D7             0402*    
0459D7             0403*    ; set b to be our loop counter
0459D7 F1          0404*        pop af
0459D8 47          0405*        ld b,a
0459D9 E1          0406*        pop hl
0459DA E5          0407*        push hl
0459DB F5          0408*        push af
0459DC             0409*    @loop:
0459DC             0410*    ; print the byte
0459DC 7E          0411*        ld a,(hl)
0459DD CD AE 00 04 0412*        call printHex8
0459E1             0413*    ; print a space
0459E1 3E 20       0414*        ld a,' '
0459E3 5B D7       0415*        rst.lil 10h
0459E5 23          0416*        inc hl
0459E6 10 F4       0417*        djnz @loop
0459E8             0418*        ; call printNewLine
0459E8             0419*    
0459E8             0420*    ; restore everything
0459E8 F1          0421*        pop af
0459E9 E1          0422*        pop hl
0459EA C1          0423*        pop bc
0459EB             0424*    
0459EB             0425*    ; all done
0459EB C9          0426*        ret
0459EC             0427*    
0459EC             0428*    
0459EC             0429*    ; print bytes from an address to the screen in binary format
0459EC             0430*    ; inputs: hl = address of first byte to print, a = number of bytes to print
0459EC             0431*    ; outputs: values of each byte printed to screen separated by spaces
0459EC             0432*    ; destroys: nothing
0459EC             0433*    dumpMemoryBin:
0459EC             0434*    ; save all registers to the stack
0459EC F5          0435*        push af
0459ED C5          0436*        push bc
0459EE D5          0437*        push de
0459EF E5          0438*        push hl
0459F0 DD E5       0439*        push ix
0459F2 FD E5       0440*        push iy
0459F4             0441*    
0459F4             0442*    ; set b to be our loop counter
0459F4 47          0443*        ld b,a
0459F5             0444*    @loop:
0459F5             0445*    ; print the byte
0459F5 7E          0446*        ld a,(hl)
0459F6 E5          0447*        push hl
0459F7 C5          0448*        push bc
0459F8 CD 6E 02 04 0449*        call printBin8
0459FC C1          0450*        pop bc
0459FD             0451*    ; print a space
0459FD 3E 20       0452*        ld a,' '
0459FF 5B D7       0453*        rst.lil 10h
045A01 E1          0454*        pop hl
045A02 23          0455*        inc hl
045A03 10 F0       0456*        djnz @loop
045A05 CD 7C 00 04 0457*        call printNewLine
045A09             0458*    
045A09             0459*    ; restore everything
045A09 FD E1       0460*        pop iy
045A0B DD E1       0461*        pop ix
045A0D E1          0462*        pop hl
045A0E D1          0463*        pop de
045A0F C1          0464*        pop bc
045A10 F1          0465*        pop af
045A11             0466*    ; all done
045A11 C9          0467*        ret
045A12             0468*    
045A12             0469*    ; print bytes from an address to the screen in binary format
045A12             0470*    ; with the bits of each byte in reverse order (lsb first)
045A12             0471*    ; inputs: hl = address of first byte to print, a = number of bytes to print
045A12             0472*    ; outputs: values of each byte printed to screen separated by spaces
045A12             0473*    ; destroys: nothing
045A12             0474*    dumpMemoryBinRev:
045A12             0475*    ; save all registers to the stack
045A12 F5          0476*        push af
045A13 C5          0477*        push bc
045A14 D5          0478*        push de
045A15 E5          0479*        push hl
045A16 DD E5       0480*        push ix
045A18 FD E5       0481*        push iy
045A1A             0482*    
045A1A             0483*    ; set b to be our loop counter
045A1A 47          0484*        ld b,a
045A1B             0485*    @loop:
045A1B             0486*    ; print the byte
045A1B 7E          0487*        ld a,(hl)
045A1C E5          0488*        push hl
045A1D C5          0489*        push bc
045A1E CD 93 02 04 0490*        call printBin8Rev
045A22 C1          0491*        pop bc
045A23             0492*    ; print a space
045A23 3E 20       0493*        ld a,' '
045A25 5B D7       0494*        rst.lil 10h
045A27 E1          0495*        pop hl
045A28 23          0496*        inc hl
045A29 10 F0       0497*        djnz @loop
045A2B CD 7C 00 04 0498*        call printNewLine
045A2F             0499*    
045A2F             0500*    ; restore everything
045A2F FD E1       0501*        pop iy
045A31 DD E1       0502*        pop ix
045A33 E1          0503*        pop hl
045A34 D1          0504*        pop de
045A35 C1          0505*        pop bc
045A36 F1          0506*        pop af
045A37             0507*    ; all done
045A37 C9          0508*        ret
045A38             0509*    
045A38             0510*    DEBUG_PRINT:
045A38             0511*        PUSH_ALL
                       M1 Args: none
045A38 08          0001*M1      ex af,af'
045A39 D9          0002*M1      exx
045A3A F5          0003*M1      push af
045A3B E5          0004*M1      push hl
045A3C C5          0005*M1      push bc
045A3D D5          0006*M1      push de
045A3E             0007*M1  
045A3E 08          0008*M1      ex af,af'
045A3F D9          0009*M1      exx
045A40 F5          0010*M1      push af
045A41 E5          0011*M1      push hl
045A42 C5          0012*M1      push bc
045A43 D5          0013*M1      push de
045A44 DD E5       0014*M1      push ix
045A46 FD E5       0015*M1      push iy
045A48             0512*        ; ld c,0 ; X
045A48             0513*        ; ld b,0 ; Y
045A48             0514*        ; call vdu_move_cursor
045A48 CD 7C 00 04 0515*        call printNewLine
045A4C             0516*        POP_ALL
                       M1 Args: none
045A4C FD E1       0001*M1      pop iy
045A4E DD E1       0002*M1      pop ix
045A50 D1          0003*M1      pop de
045A51 C1          0004*M1      pop bc
045A52 E1          0005*M1      pop hl
045A53 F1          0006*M1      pop af
045A54 08          0007*M1      ex af,af'
045A55 D9          0008*M1      exx
045A56             0009*M1  
045A56 D1          0010*M1      pop de
045A57 C1          0011*M1      pop bc
045A58 E1          0012*M1      pop hl
045A59 F1          0013*M1      pop af
045A5A 08          0014*M1      ex af,af'
045A5B D9          0015*M1      exx
045A5C             0517*        PUSH_ALL
                       M1 Args: none
045A5C 08          0001*M1      ex af,af'
045A5D D9          0002*M1      exx
045A5E F5          0003*M1      push af
045A5F E5          0004*M1      push hl
045A60 C5          0005*M1      push bc
045A61 D5          0006*M1      push de
045A62             0007*M1  
045A62 08          0008*M1      ex af,af'
045A63 D9          0009*M1      exx
045A64 F5          0010*M1      push af
045A65 E5          0011*M1      push hl
045A66 C5          0012*M1      push bc
045A67 D5          0013*M1      push de
045A68 DD E5       0014*M1      push ix
045A6A FD E5       0015*M1      push iy
045A6C CD 77 59 04 0518*        call dumpFlags
045A70             0519*        POP_ALL
                       M1 Args: none
045A70 FD E1       0001*M1      pop iy
045A72 DD E1       0002*M1      pop ix
045A74 D1          0003*M1      pop de
045A75 C1          0004*M1      pop bc
045A76 E1          0005*M1      pop hl
045A77 F1          0006*M1      pop af
045A78 08          0007*M1      ex af,af'
045A79 D9          0008*M1      exx
045A7A             0009*M1  
045A7A D1          0010*M1      pop de
045A7B C1          0011*M1      pop bc
045A7C E1          0012*M1      pop hl
045A7D F1          0013*M1      pop af
045A7E 08          0014*M1      ex af,af'
045A7F D9          0015*M1      exx
045A80             0520*        PUSH_ALL
                       M1 Args: none
045A80 08          0001*M1      ex af,af'
045A81 D9          0002*M1      exx
045A82 F5          0003*M1      push af
045A83 E5          0004*M1      push hl
045A84 C5          0005*M1      push bc
045A85 D5          0006*M1      push de
045A86             0007*M1  
045A86 08          0008*M1      ex af,af'
045A87 D9          0009*M1      exx
045A88 F5          0010*M1      push af
045A89 E5          0011*M1      push hl
045A8A C5          0012*M1      push bc
045A8B D5          0013*M1      push de
045A8C DD E5       0014*M1      push ix
045A8E FD E5       0015*M1      push iy
045A90 CD 7B 58 04 0521*        call dumpRegistersHex
045A94             0522*        ; call waitKeypress
045A94 CD 7C 00 04 0523*        call printNewLine
045A98             0524*        POP_ALL
                       M1 Args: none
045A98 FD E1       0001*M1      pop iy
045A9A DD E1       0002*M1      pop ix
045A9C D1          0003*M1      pop de
045A9D C1          0004*M1      pop bc
045A9E E1          0005*M1      pop hl
045A9F F1          0006*M1      pop af
045AA0 08          0007*M1      ex af,af'
045AA1 D9          0008*M1      exx
045AA2             0009*M1  
045AA2 D1          0010*M1      pop de
045AA3 C1          0011*M1      pop bc
045AA4 E1          0012*M1      pop hl
045AA5 F1          0013*M1      pop af
045AA6 08          0014*M1      ex af,af'
045AA7 D9          0015*M1      exx
045AA8 C9          0525*        ret
045AA9             0526*    DEBUG_WAITKEYPRESS:
045AA9             0527*        PUSH_ALL
                       M1 Args: none
045AA9 08          0001*M1      ex af,af'
045AAA D9          0002*M1      exx
045AAB F5          0003*M1      push af
045AAC E5          0004*M1      push hl
045AAD C5          0005*M1      push bc
045AAE D5          0006*M1      push de
045AAF             0007*M1  
045AAF 08          0008*M1      ex af,af'
045AB0 D9          0009*M1      exx
045AB1 F5          0010*M1      push af
045AB2 E5          0011*M1      push hl
045AB3 C5          0012*M1      push bc
045AB4 D5          0013*M1      push de
045AB5 DD E5       0014*M1      push ix
045AB7 FD E5       0015*M1      push iy
045AB9 CD 5A 03 04 0528*        call waitKeypress
045ABD             0529*        POP_ALL
                       M1 Args: none
045ABD FD E1       0001*M1      pop iy
045ABF DD E1       0002*M1      pop ix
045AC1 D1          0003*M1      pop de
045AC2 C1          0004*M1      pop bc
045AC3 E1          0005*M1      pop hl
045AC4 F1          0006*M1      pop af
045AC5 08          0007*M1      ex af,af'
045AC6 D9          0008*M1      exx
045AC7             0009*M1  
045AC7 D1          0010*M1      pop de
045AC8 C1          0011*M1      pop bc
045AC9 E1          0012*M1      pop hl
045ACA F1          0013*M1      pop af
045ACB 08          0014*M1      ex af,af'
045ACC D9          0015*M1      exx
045ACD C9          0530*        RET
045ACE             0531*    
045ACE             0532*    dumpVduCmdStr:
045ACE             0533*        PUSH_ALL
                       M1 Args: none
045ACE 08          0001*M1      ex af,af'
045ACF D9          0002*M1      exx
045AD0 F5          0003*M1      push af
045AD1 E5          0004*M1      push hl
045AD2 C5          0005*M1      push bc
045AD3 D5          0006*M1      push de
045AD4             0007*M1  
045AD4 08          0008*M1      ex af,af'
045AD5 D9          0009*M1      exx
045AD6 F5          0010*M1      push af
045AD7 E5          0011*M1      push hl
045AD8 C5          0012*M1      push bc
045AD9 D5          0013*M1      push de
045ADA DD E5       0014*M1      push ix
045ADC FD E5       0015*M1      push iy
045ADE 79          0534*        ld a,c
045ADF CD C8 59 04 0535*        call dumpMemoryHex
045AE3 CD 5A 03 04 0536*        call waitKeypress
045AE7             0537*        POP_ALL
                       M1 Args: none
045AE7 FD E1       0001*M1      pop iy
045AE9 DD E1       0002*M1      pop ix
045AEB D1          0003*M1      pop de
045AEC C1          0004*M1      pop bc
045AED E1          0005*M1      pop hl
045AEE F1          0006*M1      pop af
045AEF 08          0007*M1      ex af,af'
045AF0 D9          0008*M1      exx
045AF1             0009*M1  
045AF1 D1          0010*M1      pop de
045AF2 C1          0011*M1      pop bc
045AF3 E1          0012*M1      pop hl
045AF4 F1          0013*M1      pop af
045AF5 08          0014*M1      ex af,af'
045AF6 D9          0015*M1      exx
045AF7 C9          0538*        ret
045AF8             0539*    ; end dumpVduCmdStr
045AF8             0055     
045AF8             0056     ; --- MAIN PROGRAM FILE ---
045AF8             0057     init:
045AF8 CD 8B 28 04 0058         call bf_get_dir
045AFC CD FB 23 04 0059         call ui_init
045B00 CD BF 55 04 0060         call ps_prt_irq_init
045B04 C9          0061         ret
045B05             0062     ; end init
045B05             0063     main:
045B05             0064     ; call the change directory routine and jp to user input
045B05 CD B6 2A 04 0065         call get_input
045B09             0066     
045B09             0067     ; we come back here when user wants to quit app
045B09             0068     ; shut down everytyhing and gracefully exit to MOS
045B09 CD DA 53 04 0069         call ps_close_file ; close any playing file and stop the PRT timer
045B0D FB          0070         ei ; interrupts were disabled by get_input
045B0E             0071     ; restore original screen mode
045B0E 3A B5 22 04 0072         ld a,(original_screen_mode)
045B12 CD 17 1C 04 0073         call vdu_set_screen_mode
045B16 CD 12 1C 04 0074         call vdu_reset_viewports
045B1A CD 49 1B 04 0075         call vdu_cls
045B1E             0076     ; print thanks for playing message
045B1E CD 60 00 04 0077         call printInline
045B22 54 68 61 6E 0078         asciz "Thank you for using\r\n"
       6B 20 79 6F 
       75 20 66 6F 
       72 20 75 73 
       69 6E 67 0D 
       0A 00       
045B38 21 B9 25 04 0079         ld hl,agon_jukebox_ascii
045B3C CD 67 00 04 0080         call printString
045B40             0081     ; set cursor behaviuor
045B40 CD C3 1A 04 0082         call vdu_cursor_on
045B44 26 10       0083         ld h,%00010000 ; bit 4 controls cursor scroll at bottom of screen
045B46 2E 00       0084         ld l,%00000000 ; bit 4 reset means cursor scrolls screen
045B48 CD 35 1B 04 0085         call vdu_cursor_behaviour
045B4C C9          0086         ret ; back to MOS
045B4D             0087     ; end main
045B4D             0088     
045B4D             0089     ; must be final include in program so file data does not stomp on program code or other data
045B4D             0090         include "files.inc"
045B4D             0001*    ; THIS MUST BE LAST INCLUDE SO FILE DATA DOES NOT OVERWRITE OTHER CODE OR DATA
045B4D             0002*    
045B4D             0003*    ; buffer for loading files unrelated to audio
045B4D             0004*    ; e.g.: fonts, sprites, etc. (limited to 8k)
045B4D             0005*    filedata: equ 0xB7E000 ; address of onboard 8k sram
045B4D             0006*    
045B4D             0007*    bf_fil_struct: equ 0x06FF00 ;
045B4D             0008*    bf_fil_obj: equ 0x06FF00 ; 15 bytes: Object identifier
045B4D             0009*    bf_fil_flag: equ 0x06FF0F ; 1 bytes: File status flags
045B4D             0010*    bf_fil_err: equ 0x06FF10 ; 1 bytes: Abort flag (error code)
045B4D             0011*    bf_fil_fptr: equ 0x06FF11 ; 4 bytes: File read/write pointer (Zeroed on file open)
045B4D             0012*    bf_fil_clust: equ 0x06FF15 ; 4 bytes: Current cluster of fpter (invalid when fptr is 0)
045B4D             0013*    bf_fil_sect: equ 0x06FF19 ; 4 bytes: Sector number appearing in buf[] (0
045B4D             0014*    bf_fil_dir_sect: equ 0x06FF1D ; 4 bytes: Sector number containing the directory entry
045B4D             0015*    bf_fil_dir_ptr: equ 0x06FF21 ; 3 bytes: Pointer to the directory entry in the win[]
045B4D             0016*    
045B4D             0017*    
045B4D             0018*    bf_struct: equ 0x070000 ; browsing song jukebox info
045B4D             0019*    bf_file_idx: equ 0x070000 ; 1 bytes: Current file index in the directory page
045B4D             0020*    bf_dir_num_files: equ 0x070001 ; 3 bytes: Number of files/directories in the directory (virtually unlimited)
045B4D             0021*    bf_files_cur_pg: equ 0x070004 ; 3 bytes: Number of files/directories of the current directory page
045B4D             0022*    bf_files_last_pg: equ 0x070007 ; 3 bytes: Number of files/directories of the last directory page
045B4D             0023*    bf_page_cur: equ 0x07000A ; 3 bytes: Current directory page number
045B4D             0024*    bf_dir_num_pages: equ 0x07000D ; 3 bytes: Number of pages in the directory (virtually unlimited)
045B4D             0025*    bf_dir_path: equ 0x070010 ; 256 bytes: Path of the current directory
045B4D             0026*    bf_struct_size: equ 512
045B4D             0027*    
045B4D             0028*    bf_dir_struct: equ 0x070200 ; browsing song directory info
045B4D             0029*    bf_dir_obj: equ 0x070200 ; 15 bytes: Object identifier
045B4D             0030*    bf_dir_dptr: equ 0x07020F ; 4 bytes: Current read/write offset
045B4D             0031*    bf_dir_clust: equ 0x070213 ; 4 bytes: Current cluster
045B4D             0032*    bf_dir_sect: equ 0x070217 ; 4 bytes: Current sector (0:Read operation has terminated)
045B4D             0033*    bf_dir_dir: equ 0x07021B ; 3 bytes: Pointer to the directory item in the win[]
045B4D             0034*    bf_dir_fn: equ 0x07021E ; 12 bytes: SFN (in/out) {body[8],ext[3],status[1]}
045B4D             0035*    bf_dir_blk_ofs: equ 0x07022A ; 4 bytes: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
045B4D             0036*    
045B4D             0037*    
045B4D             0038*    bf_filinfo_ptrs: equ 0x070300 ; 768 bytes: List of filename pointers in the current directory page (256*3)
045B4D             0039*    bf_filinfo_ptrs_size: equ 768
045B4D             0040*    
045B4D             0041*    bf_dir_fil_list: equ 0x070600 ; 71168 bytes: browsing song directory file list
045B4D             0042*    bf_dir_fil_list_size: equ 71168
045B4D             0043*    
045B4D             0044*    bf_wav_header: equ 0x081C00 ; 76 bytes: browsing song .wav file header
045B4D             0045*    
045B4D             0046*    
045B4D             0047*    ps_fil_struct: equ 0x090000 ;
045B4D             0048*    ps_fil_obj: equ 0x090000 ; 15 bytes: Object identifier
045B4D             0049*    ps_fil_flag: equ 0x09000F ; 1 bytes: File status flags
045B4D             0050*    ps_fil_err: equ 0x090010 ; 1 bytes: Abort flag (error code)
045B4D             0051*    ps_fil_fptr: equ 0x090011 ; 4 bytes: File read/write pointer (Zeroed on file open)
045B4D             0052*    ps_fil_clust: equ 0x090015 ; 4 bytes: Current cluster of fpter (invalid when fptr is 0)
045B4D             0053*    ps_fil_sect: equ 0x090019 ; 4 bytes: Sector number appearing in buf[] (0
045B4D             0054*    ps_fil_dir_sect: equ 0x09001D ; 4 bytes: Sector number containing the directory entry
045B4D             0055*    ps_fil_dir_ptr: equ 0x090021 ; 3 bytes: Pointer to the directory entry in the win[]
045B4D             0056*    
045B4D             0057*    
045B4D             0058*    ps_filinfo_struct: equ 0x090100 ;
045B4D             0059*    ps_filinfo_fsize: equ 0x090100 ; 4 bytes: File size
045B4D             0060*    ps_filinfo_fdate: equ 0x090104 ; 2 bytes: Modified date
045B4D             0061*    ps_filinfo_ftime: equ 0x090106 ; 2 bytes: Modified time
045B4D             0062*    ps_filinfo_fattrib: equ 0x090108 ; 1 bytes: File attribute
045B4D             0063*    ps_filinfo_altname: equ 0x090109 ; 13 bytes: Alternative file name
045B4D             0064*    ps_filinfo_fname: equ 0x090116 ; 256 bytes: Primary file name
045B4D             0065*    
045B4D             0066*    
045B4D             0067*    ps_wav_header: equ 0x090300 ; 76 bytes: playing song .wav file header
045B4D             0068*    
045B4D             0069*    
045B4D             0070*    ps_wav_data: equ 0x090400 ; virtually unlimited bytes:
