PC     Output      Line
040000             0001        assume adl=1
040000             0002        org 0x040000
040000 C3 45 00 04 0003        jp start
040004             0004        align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005        db "MOS"
040043 00          0006        db 00h
040044 01          0007        db 01h
040045             0008    
040045             0009    start:
040045 F5          0010        push af
040046 C5          0011        push bc
040047 D5          0012        push de
040048 DD E5       0013        push ix
04004A FD E5       0014        push iy
04004C             0015    
04004C CD 21 34 04 0016        call init
040050 CD 2E 34 04 0017        call main
040054             0018    
040054             0019    exit:
040054 FD E1       0020        pop iy
040056 DD E1       0021        pop ix
040058 D1          0022        pop de
040059 C1          0023        pop bc
04005A F1          0024        pop af
04005B 21 00 00 00 0025        ld hl,0
04005F             0026    
04005F C9          0027        ret
040060             0028    
040060             0029    ; API INCLUDES
040060             0030        include "mos_api.inc"
040060             0001*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*   ; Title:	AGON MOS - API for user projects
040060             0003*   ; Author:	Dean Belfield
040060             0004*   ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*   ;			Added MOS error codes for return in HL
040060             0006*   ; Created:	03/08/2022
040060             0007*   ; Last Updated:	10/08/2023
040060             0008*   ;
040060             0009*   ; Modinfo:
040060             0010*   ; 05/08/2022:	Added mos_feof
040060             0011*   ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*   ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*   ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*   ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*   ; 13/10/2022:	Added mos_oscli
040060             0016*   ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*   ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*   ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*   ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*   ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*   ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*   ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*   ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*   ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*   ; 19/05/2023:	Added sysvar_scrMode
040060             0026*   ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*   ; 03/08/2023:	Added mos_setkbvector
040060             0028*   ; 10/08/2023:	Added mos_getkbmap
040060             0029*   
040060             0030*   ; VDP control (VDU 23, 0, n)
040060             0031*   ;
040060             0032*   vdp_gp:				EQU 80h
040060             0033*   vdp_keycode:		EQU 81h
040060             0034*   vdp_cursor:			EQU	82h
040060             0035*   vdp_scrchar:		EQU	83h
040060             0036*   vdp_scrpixel:		EQU	84h
040060             0037*   vdp_audio:			EQU	85h
040060             0038*   vdp_mode:			EQU	86h
040060             0039*   vdp_rtc:			EQU	87h
040060             0040*   vdp_keystate:		EQU	88h
040060             0041*   vdp_logicalcoords:	EQU	C0h
040060             0042*   vdp_terminalmode:	EQU	FFh
040060             0043*   
040060             0044*   ; MOS high level functions
040060             0045*   ;
040060             0046*   mos_getkey:			EQU	00h
040060             0047*   mos_load:			EQU	01h
040060             0048*   mos_save:			EQU	02h
040060             0049*   mos_cd:				EQU	03h
040060             0050*   mos_dir:			EQU	04h
040060             0051*   mos_del:			EQU	05h
040060             0052*   mos_ren:			EQU	06h
040060             0053*   mos_mkdir:			EQU	07h
040060             0054*   mos_sysvars:		EQU	08h
040060             0055*   mos_editline:		EQU	09h
040060             0056*   mos_fopen:			EQU	0Ah
040060             0057*   mos_fclose:			EQU	0Bh
040060             0058*   mos_fgetc:			EQU	0Ch
040060             0059*   mos_fputc:			EQU	0Dh
040060             0060*   mos_feof:			EQU	0Eh
040060             0061*   mos_getError:		EQU	0Fh
040060             0062*   mos_oscli:			EQU	10h
040060             0063*   mos_copy:			EQU	11h
040060             0064*   mos_getrtc:			EQU	12h
040060             0065*   mos_setrtc:			EQU	13h
040060             0066*   mos_setintvector:	EQU	14h
040060             0067*   mos_uopen:			EQU	15h
040060             0068*   mos_uclose:			EQU	16h
040060             0069*   mos_ugetc:			EQU	17h
040060             0070*   mos_uputc:			EQU	18h
040060             0071*   mos_getfil:			EQU	19h
040060             0072*   mos_fread:			EQU	1Ah
040060             0073*   mos_fwrite:			EQU	1Bh
040060             0074*   mos_flseek:			EQU	1Ch
040060             0075*   mos_setkbvector:	EQU	1Dh
040060             0076*   mos_getkbmap:		EQU	1Eh
040060             0077*   
040060             0078*   ; MOS program exit codes
040060             0079*   ;
040060             0080*   EXIT_OK:				EQU  0;	"OK",
040060             0081*   EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*   EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*   EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*   EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*   EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*   EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*   EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*   EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*   EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*   EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*   EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*   EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*   EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*   EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*   EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*   EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*   EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*   EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*   EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*   EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*   EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*   ; FatFS file access functions
040060             0103*   ;
040060             0104*   ffs_fopen:			EQU	80h
040060             0105*   ffs_fclose:			EQU	81h
040060             0106*   ffs_fread:			EQU	82h
040060             0107*   ffs_fwrite:			EQU	83h
040060             0108*   ffs_flseek:			EQU	84h
040060             0109*   ffs_ftruncate:		EQU	85h
040060             0110*   ffs_fsync:			EQU	86h
040060             0111*   ffs_fforward:		EQU	87h
040060             0112*   ffs_fexpand:		EQU	88h
040060             0113*   ffs_fgets:			EQU	89h
040060             0114*   ffs_fputc:			EQU	8Ah
040060             0115*   ffs_fputs:			EQU	8Bh
040060             0116*   ffs_fprintf:		EQU	8Ch
040060             0117*   ffs_ftell:			EQU	8Dh
040060             0118*   ffs_feof:			EQU	8Eh
040060             0119*   ffs_fsize:			EQU	8Fh
040060             0120*   ffs_ferror:			EQU	90h
040060             0121*   
040060             0122*   ; FatFS directory access functions
040060             0123*   ;
040060             0124*   ffs_dopen:			EQU	91h
040060             0125*   ffs_dclose:			EQU	92h
040060             0126*   ffs_dread:			EQU	93h
040060             0127*   ffs_dfindfirst:		EQU	94h
040060             0128*   ffs_dfindnext:		EQU	95h
040060             0129*   
040060             0130*   ; FatFS file and directory management functions
040060             0131*   ;
040060             0132*   ffs_stat:			EQU	96h
040060             0133*   ffs_unlink:			EQU	97h
040060             0134*   ffs_rename:			EQU	98h
040060             0135*   ffs_chmod:			EQU	99h
040060             0136*   ffs_utime:			EQU	9Ah
040060             0137*   ffs_mkdir:			EQU	9Bh
040060             0138*   ffs_chdir:			EQU	9Ch
040060             0139*   ffs_chdrive:		EQU	9Dh
040060             0140*   ffs_getcwd:			EQU	9Eh
040060             0141*   
040060             0142*   ; FatFS volume management and system configuration functions
040060             0143*   ;
040060             0144*   ffs_mount:			EQU	9Fh
040060             0145*   ffs_mkfs:			EQU	A0h
040060             0146*   ffs_fdisk:			EQU	A1h
040060             0147*   ffs_getfree:		EQU	A2h
040060             0148*   ffs_getlabel:		EQU	A3h
040060             0149*   ffs_setlabel:		EQU	A4h
040060             0150*   ffs_setcp:			EQU	A5h
040060             0151*   
040060             0152*   ; File access modes
040060             0153*   ;
040060             0154*   fa_read:			EQU	01h
040060             0155*   fa_write:			EQU	02h
040060             0156*   fa_open_existing:	EQU	00h
040060             0157*   fa_create_new:		EQU	04h
040060             0158*   fa_create_always:	EQU	08h
040060             0159*   fa_open_always:		EQU	10h
040060             0160*   fa_open_append:		EQU	30h
040060             0161*   
040060             0162*   ; System variable indexes for api_sysvars
040060             0163*   ; Index into _sysvars in globals.inc
040060             0164*   ;
040060             0165*   sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*   sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*   sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*   sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*   sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*   sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*   sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*   sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*   sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*   sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*   sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*   sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*   sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*   sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*   sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*   sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*   sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*   sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*   sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*   sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*   sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*   sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*   sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*   sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*   sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*   sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*   
040060             0192*   ; Flags for the VPD protocol
040060             0193*   ;
040060             0194*   vdp_pflag_cursor:		EQU	00000001b
040060             0195*   vdp_pflag_scrchar:		EQU	00000010b
040060             0196*   vdp_pflag_point:		EQU	00000100b
040060             0197*   vdp_pflag_audio:		EQU	00001000b
040060             0198*   vdp_pflag_mode:			EQU	00010000b
040060             0199*   vdp_pflag_rtc:			EQU	00100000b
040060             0200*   
040060             0201*   ;
040060             0202*   ; FatFS structures
040060             0203*   ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*   ;
040060             0205*   ; Object ID and allocation information (FFOBJID)
040060             0206*   ;
040060             0207*   ; Indexes into FFOBJID structure
040060             0208*   ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*   ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*   ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*   ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*   ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*   ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*   ;
040060             0215*   ; File object structure (FIL)
040060             0216*   ;
040060             0217*   ; Indexes into FIL structure
040060             0218*   fil_obj:		EQU 0	; 15: Object identifier
040060             0219*   fil_flag:		EQU	15 	;  1: File status flags
040060             0220*   fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*   fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*   fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*   fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*   fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*   fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*   ;
040060             0227*   ; Directory object structure (DIR)
040060             0228*   ; Indexes into DIR structure
040060             0229*   dir_obj:		EQU  0	; 15: Object identifier
040060             0230*   dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*   dir_clust:		EQU	19	;  4: Current cluster
040060             0232*   dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*   dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*   dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*   dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*   dir_struct_size:	EQU	46	;  4: Size of the struct
040060             0237*   ;
040060             0238*   ; File information structure (FILINFO)
040060             0239*   ;
040060             0240*   ; Indexes into FILINFO structure
040060             0241*   filinfo_fsize:		EQU 0	;   4: File size
040060             0242*   filinfo_fdate:		EQU	4	;   2: Modified date
040060             0243*   filinfo_ftime:		EQU	6	;   2: Modified time
040060             0244*   filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0245*   filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0246*   filinfo_fname:		EQU	22	; 256: Primary file name
040060             0247*   filinfo_struct_size: EQU filinfo_fname+256 ; size of the FILINFO structure
040060             0248*   
040060             0249*   ; /* File attribute bits for directory entry (FILINFO.fattrib) */
040060             0250*   AM_RDO: equ 0 ; Bit 0 - Read Only
040060             0251*   AM_HID: equ 1 ; Bit 1 - Hidden
040060             0252*   AM_SYS: equ 2 ; Bit 2 - System
040060             0253*   AM_DIR: equ 4 ; Bit 4 - Directory
040060             0254*   AM_ARC: equ 5 ; Bit 5 - Archive
040060             0255*   
040060             0256*   ;
040060             0257*   ; Macro for calling the API
040060             0258*   ; Parameters:
040060             0259*   ; - function: One of the function numbers listed above
040060             0260*   ;
040060             0261*   	MACRO	MOSCALL	function
040060             0262*   			LD	A, function
040060             0263*   			RST.LIL	08h
040060             0264*   	ENDMACRO
040060             0265*   
040060             0266*   ;
040060             0267*   ; Same as above but keeps IY safe on FFS calls
040060             0268*   ; (can be use for regular MOS calls as well)
040060             0269*   ;
040060             0270*   	MACRO	FFSCALL	function
040060             0271*   			PUSH IY
040060             0272*   			LD	A, function
040060             0273*   			RST.LIL	08h
040060             0274*   			POP IY
040060             0275*   	ENDMACRO
040060             0031        include "macros.inc"
040060             0001*   
040060             0002*   ; test the sign of HL
040060             0003*   ; inputs: HL obviously
040060             0004*   ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
040060             0005*   ; destroys: flags
040060             0006*       MACRO SIGN_HLU
040060             0007*       add hl,de ; 1 cycle
040060             0008*       or a ; clear flags ; 1 cycle
040060             0009*       sbc hl,de ; 2 cycles
040060             0010*       ; 4 cycles total
040060             0011*       ENDMACRO
040060             0012*   
040060             0013*   ; put the value in A into HLU
040060             0014*   ; affects: HLU
040060             0015*   ; destroys: nothing
040060             0016*   ; note: $ instead of @@ b/c anon labels deprecated in ez80asm
040060             0017*       MACRO A_TO_HLU
040060             0018*       xor a ; 1 cycle
040060             0019*       ld ($+8+1),hl ; 7 cycles
040060             0020*       ld ($+4+3),a ; 5 cycles
040060             0021*       ld hl,0x000000 ; 4 cycles
040060             0022*       ; 17 cycles total
040060             0023*       ENDMACRO
040060             0024*   
040060             0025*   ; alternative: https://discord.com/channels/1158535358624039014/1282290921815408681/1318315567102300220
040060             0026*   ; one cycle less but burns flags
040060             0027*       MACRO A_TO_HLU_ALT
040060             0028*       push hl ; 4 cycles
040060             0029*       ld hl,2 ; 4 cycles
040060             0030*       add hl,sp ; 1 cycle
040060             0031*       ld (hl),a ; 2 cycles
040060             0032*       pop hl ; 4 cycles
040060             0033*       ; 15 cycles total
040060             0034*       ENDMACRO
040060             0035*   
040060             0036*       MACRO hlu_mul256
040060             0037*       add hl,hl ; * 2
040060             0038*       add hl,hl ; * 4
040060             0039*       add hl,hl ; * 8
040060             0040*       add hl,hl ; * 16
040060             0041*       add hl,hl ; * 32
040060             0042*       add hl,hl ; * 64
040060             0043*       add hl,hl ; * 128
040060             0044*       add hl,hl ; * 256
040060             0045*       ENDMACRO
040060             0046*   
040060             0047*   ; https://discord.com/channels/1158535358624039014/1282290921815408681/1317793870070812715
040060             0048*       MACRO SRL_UHL
040060             0049*       dec sp ; 1 cycle
040060             0050*       push hl ; 4 cycles
040060             0051*       inc sp ; 1 cycle
040060             0052*       pop hl ; 4 cycles
040060             0053*       inc hl ; 1 cycle
040060             0054*       dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040060             0055*       ; 13 cycles total
040060             0056*       ENDMACRO
040060             0057*   
040060             0058*       MACRO printChar char
040060             0059*       LD A, char
040060             0060*       RST.LIL 10h
040060             0061*       ENDMACRO
040060             0062*   
040060             0063*   ; Simulated call to subroutine at HL
040060             0064*   ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040060             0065*   ; outputs: whatever the subroutine does, including HL and BC
040060             0066*   ; destroys: only what the subroutine does, but always BC
040060             0067*       MACRO CALL_HL
040060             0068*       ld bc,$+6 ; Address of first instruction after the jump
040060             0069*       push bc ; which constitutes the return address
040060             0070*       jp (hl) ; Jump to the address in HL
040060             0071*       ENDMACRO
040060             0072*   
040060             0073*   ; Simulated call to subroutine at IX
040060             0074*   ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040060             0075*   ; outputs: whatever the subroutine does, including IX and BC
040060             0076*   ; destroys: only what the subroutine does, but always BC
040060             0077*       MACRO CALL_IX
040060             0078*       ld bc,$+6 ; Address of first instruction after the jump
040060             0079*       push bc ; which constitutes the return address
040060             0080*       jp (ix) ; Jump to the address in IX
040060             0081*       ENDMACRO
040060             0082*   
040060             0083*   ; Simulated call to soubroutinte at IY
040060             0084*   ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040060             0085*   ; outputs: whatever the subroutine does, including IY and BC
040060             0086*   ; destroys: only what the subroutine does, but always BC
040060             0087*       MACRO CALL_IY
040060             0088*       ld bc,$+6 ; Address of first instruction after the jump
040060             0089*       push bc ; which constitutes the return address
040060             0090*       jp (iy) ; Jump to the address in IY
040060             0091*       ENDMACRO
040060             0092*   
040060             0093*   ; put the value in HLU into A
040060             0094*   ; destroys: af
040060             0095*       MACRO HLU_TO_A
040060             0096*       dec sp ; 1 cycle
040060             0097*       push hl ; 4 cycles
040060             0098*       inc sp ; 1 cycle
040060             0099*       pop af ; 4 cycles
040060             0100*       ; 10 cycles total
040060             0101*       ENDMACRO
040060             0102*   
040060             0103*       MACRO PUSH_ALL
040060             0104*       ex af,af'
040060             0105*       exx
040060             0106*       push af
040060             0107*       push hl
040060             0108*       push bc
040060             0109*       push de
040060             0110*   
040060             0111*       ex af,af'
040060             0112*       exx
040060             0113*       push af
040060             0114*       push hl
040060             0115*       push bc
040060             0116*       push de
040060             0117*       push ix
040060             0118*       push iy
040060             0119*       ENDMACRO
040060             0120*   
040060             0121*       MACRO POP_ALL
040060             0122*       pop iy
040060             0123*       pop ix
040060             0124*       pop de
040060             0125*       pop bc
040060             0126*       pop hl
040060             0127*       pop af
040060             0128*       ex af,af'
040060             0129*       exx
040060             0130*   
040060             0131*       pop de
040060             0132*       pop bc
040060             0133*       pop hl
040060             0134*       pop af
040060             0135*       ex af,af'
040060             0136*       exx
040060             0137*       ENDMACRO
040060             0032        include "functions.inc"
040060             0001*   ; Print a zero-terminated string inline with code, e.g.:
040060             0002*   ;
040060             0003*   ;    call printInline
040060             0004*   ;    ASCIZ "Hello, world!\r\n"
040060             0005*   ;
040060             0006*   ; Destroys: HL,AF
040060             0007*   printInline:
040060 E1          0008*       pop hl ; get the return address = pointer to start of string
040061 CD 67 00 04 0009*       call printString ; HL advances to end of string
040065 E5          0010*       push hl ; restore the return address = pointer to end of string
040066 C9          0011*       ret
040067             0012*   
040067             0013*   ; Print a zero-terminated string
040067             0014*   ; IX: Pointer to string, A: signed offset from IX
040067             0015*   printStringIX:
040067             0016*   
040067             0017*   ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040067             0018*   ; Print a zero-terminated string
040067             0019*   ; HL: Pointer to string
040067             0020*   ; returns: hl pointed to character after string terminator
040067             0021*   ; destroys: af, hl
040067             0022*   printString:
040067 C5          0023*       PUSH BC
040068 01 00 00 00 0024*       LD BC,0
04006C 3E 00       0025*       LD A,0
04006E 5B DF       0026*       RST.LIL 18h
040070 C1          0027*       POP BC
040071 C9          0028*       RET
040072             0029*   ; print a VDU sequence
040072             0030*   ; HL: Pointer to VDU sequence - <1 byte length> <data>
040072             0031*   sendVDUsequence:
040072 C5          0032*       PUSH BC
040073 01 00 00 00 0033*       LD BC, 0
040077 4E          0034*       LD C, (HL)
040078 5B DF       0035*       RST.LIL 18h
04007A C1          0036*       POP BC
04007B C9          0037*       RET
04007C             0038*   ; Print Newline sequence to VDP
04007C             0039*   ; destroys: nothing
04007C             0040*   printNewLine:
04007C F5          0041*       push af ; for some reason rst.lil 10h sets carry flag
04007D 3E 0D       0042*       LD A, '\r'
04007F 5B D7       0043*       RST.LIL 10h
040081 3E 0A       0044*       LD A, '\n'
040083 5B D7       0045*       RST.LIL 10h
040085 F1          0046*       pop af
040086 C9          0047*       RET
040087             0048*   
040087             0049*   ; print a zero-terminated string at a graphics coordinate
040087             0050*   ; Inputs: HL Pointer to string, BC,DE x,y position (in pixels)
040087             0051*   printStringGfx:
040087 E5          0052*       push hl ; preserve string pointer
040088             0053*   ; move graphics cursor to x,y location
040088 3E 44       0054*       ld a,plot_pt+mv_abs
04008A CD 23 20 04 0055*       call vdu_plot
04008E             0056*   ; print string
04008E E1          0057*       pop hl ; restore string pointer
04008F             0058*   @print_loop:
04008F 7E          0059*       ld a,(hl)
040090 B7          0060*       or a ; check for end of string
040091 C8          0061*       ret z ; if zero, we're done
040092 08          0062*       ex af,af' ; preserve character
040093 3E 05       0063*       ld a,5 ; VDU 5 char to gfx cursor
040095 5B D7       0064*       rst.lil 10h ; send it
040097 08          0065*       ex af,af' ; restore character
040098 5B D7       0066*       rst.lil 10h ; print character
04009A 23          0067*       inc hl
04009B C3 8F 00 04 0068*       jp @print_loop
04009F C9          0069*       ret
0400A0             0070*   ; end printStringGfx
0400A0             0071*   
0400A0             0072*   ; Print a 24-bit HEX number
0400A0             0073*   ; HLU: Number to print
0400A0             0074*   printHex24:
0400A0             0075*       HLU_TO_A
                       M1 Args: none
0400A0 3B          0001*M1     dec sp ; 1 cycle
0400A1 E5          0002*M1     push hl ; 4 cycles
0400A2 33          0003*M1     inc sp ; 1 cycle
0400A3 F1          0004*M1     pop af ; 4 cycles
0400A4             0005*M1     ; 10 cycles total
0400A4 CD AE 00 04 0076*       CALL printHex8
0400A8             0077*   ; Print a 16-bit HEX number
0400A8             0078*   ; HL: Number to print
0400A8             0079*   printHex16:
0400A8 7C          0080*       LD A,H
0400A9 CD AE 00 04 0081*       CALL printHex8
0400AD 7D          0082*       LD A,L
0400AE             0083*   ; Print an 8-bit HEX number
0400AE             0084*   ; A: Number to print
0400AE             0085*   printHex8:
0400AE 4F          0086*       LD C,A
0400AF 1F          0087*       RRA
0400B0 1F          0088*       RRA
0400B1 1F          0089*       RRA
0400B2 1F          0090*       RRA
0400B3 CD B8 00 04 0091*       CALL @F
0400B7 79          0092*       LD A,C
0400B8             0093*   @@:
0400B8 E6 0F       0094*       AND 0Fh
0400BA C6 90       0095*       ADD A,90h
0400BC 27          0096*       DAA
0400BD CE 40       0097*       ADC A,40h
0400BF 27          0098*       DAA
0400C0 5B D7       0099*       RST.LIL 10h
0400C2 C9          0100*       RET
0400C3             0101*   
0400C3             0102*   ; Print a 0x HEX prefix
0400C3             0103*   DisplayHexPrefix:
0400C3 3E 30       0104*       LD A, '0'
0400C5 5B D7       0105*       RST.LIL 10h
0400C7 3E 78       0106*       LD A, 'x'
0400C9 5B D7       0107*       RST.LIL 10h
0400CB C9          0108*       RET
0400CC             0109*   
0400CC             0110*       MACRO printDecBC
0400CC             0111*       push hl
0400CC             0112*       push bc
0400CC             0113*       pop hl
0400CC             0114*       call printDec
0400CC             0115*       pop hl
0400CC             0116*       ENDMACRO
0400CC             0117*   
0400CC             0118*       MACRO printDecDE
0400CC             0119*       push hl
0400CC             0120*       push de
0400CC             0121*       pop hl
0400CC             0122*       call printDec
0400CC             0123*       pop hl
0400CC             0124*       ENDMACRO
0400CC             0125*   
0400CC             0126*       MACRO printDecHL
0400CC             0127*       call printDec
0400CC             0128*       ENDMACRO
0400CC             0129*   
0400CC             0130*       MACRO printDecIX
0400CC             0131*       push hl
0400CC             0132*       push ix
0400CC             0133*       pop hl
0400CC             0134*       call printDec
0400CC             0135*       pop hl
0400CC             0136*       ENDMACRO
0400CC             0137*   
0400CC             0138*       MACRO printDecIY
0400CC             0139*       push hl
0400CC             0140*       push iy
0400CC             0141*       pop hl
0400CC             0142*       call printDec
0400CC             0143*       pop hl
0400CC             0144*       ENDMACRO
0400CC             0145*   
0400CC             0146*   
0400CC             0147*   ; Prints the right justified decimal value in HL without leading zeroes
0400CC             0148*   ; HL : Value to print
0400CC             0149*   ; preserves all registers and flags
0400CC             0150*   printDec:
0400CC             0151*   ; BEGIN MY CODE
0400CC             0152*   ; back up all the things
0400CC F5          0153*       push af
0400CD C5          0154*       push bc
0400CE D5          0155*       push de
0400CF E5          0156*       push hl
0400D0             0157*   ; END MY CODE
0400D0 11 F8 00 04 0158*       LD DE, _printDecBuffer
0400D4 CD 08 01 04 0159*       CALL u24_to_ascii
0400D8             0160*   ; BEGIN MY CODE
0400D8             0161*   ; replace leading zeroes with spaces
0400D8 21 F8 00 04 0162*       LD HL, _printDecBuffer
0400DC 06 07       0163*       ld B, 7 ; if HL was 0, we want to keep the final zero
0400DE             0164*   @loop:
0400DE 7E          0165*       LD A, (HL)
0400DF FE 30       0166*       CP '0'
0400E1 C2 EB 00 04 0167*       JP NZ, @done
0400E5 3E 20       0168*       LD A, ' '
0400E7 77          0169*       LD (HL), A
0400E8 23          0170*       INC HL
0400E9             0171*       ; CALL vdu_cursor_forward
0400E9 10 F3       0172*       DJNZ @loop
0400EB             0173*   @done:
0400EB             0174*   ; END MY CODE
0400EB 21 F8 00 04 0175*       LD HL, _printDecBuffer
0400EF CD 67 00 04 0176*       CALL printString
0400F3             0177*   ; BEGIN MY CODE
0400F3             0178*   ; restore all the things
0400F3 E1          0179*       pop hl
0400F4 D1          0180*       pop de
0400F5 C1          0181*       pop bc
0400F6 F1          0182*       pop af
0400F7             0183*   ; END MY CODE
0400F7 C9          0184*       RET
0400F8 00 00 00 00 0185*   _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040108             0186*   
040108             0187*   ; This routine converts the unsigned 24-bit value in HLU into its ASCII representation,
040108             0188*   ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040108             0189*   ; so it will allways be 8 characters length
040108             0190*   ; HL : Value to convert to string
040108             0191*   ; DE : pointer to buffer, at least 8 byte + 0
040108             0192*   u24_to_ascii:
040108 01 80 69 67 0193*       LD BC,-10000000
04010C CD 3F 01 04 0194*       CALL one_digit
040110 01 C0 BD F0 0195*       LD BC,-1000000
040114 CD 3F 01 04 0196*       CALL one_digit
040118 01 60 79 FE 0197*       LD BC,-100000
04011C CD 3F 01 04 0198*       CALL one_digit
040120 01 F0 D8 FF 0199*       LD BC,-10000
040124 CD 3F 01 04 0200*       CALL one_digit
040128             0201*   u8_to_ascii: ; same arguments but hl <= 255, uhl and h = 0
040128 01 18 FC FF 0202*       LD BC,-1000
04012C CD 3F 01 04 0203*       CALL one_digit
040130 01 9C FF FF 0204*       LD BC,-100
040134 CD 3F 01 04 0205*       CALL one_digit
040138 0E F6       0206*       LD C,-10
04013A CD 3F 01 04 0207*       CALL one_digit
04013E 48          0208*       LD C,B
04013F             0209*   one_digit:
04013F 3E 2F       0210*       LD A,'0'-1
040141             0211*   @divide_me:
040141 3C          0212*       INC A
040142 09          0213*       ADD HL,BC
040143 38 FC       0214*       JR C,@divide_me
040145 ED 42       0215*       SBC HL,BC
040147 12          0216*       LD (DE),A
040148 13          0217*       INC DE
040149 C9          0218*       RET
04014A             0219*   
04014A             0220*   print_u24:
04014A D5          0221*       push de
04014B E5          0222*       push hl
04014C 11 F8 00 04 0223*       ld de,_printDecBuffer
040150 CD 08 01 04 0224*       call u24_to_ascii
040154 21 F8 00 04 0225*       ld hl,_printDecBuffer
040158 CD 67 00 04 0226*       call printString
04015C 3E 20       0227*       ld a,' '
04015E 5B D7       0228*       rst.lil 10h
040160 E1          0229*       pop hl
040161 D1          0230*       pop de
040162 C9          0231*       ret
040163             0232*   
040163             0233*   ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
040163             0234*   ; HL : Value to convert to string (integer part in H, fractional part in L)
040163             0235*   ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
040163             0236*   u168_to_ascii:
040163             0237*   ; add a leading space to make room for sign flag if needed
040163 3E 20       0238*       ld a,' '
040165 12          0239*       ld (de),a
040166 13          0240*       inc de
040167             0241*   ; Convert integer part
040167 E5          0242*       push hl ; Save HL (we’ll need the fractional part later)
040168             0243*       ; call hlu_udiv256 ; Shift to get integer portion in HL
040168             0244*       SRL_UHL ; Shift to get integer portion in HL
                       M1 Args: none
040168 3B          0001*M1     dec sp ; 1 cycle
040169 E5          0002*M1     push hl ; 4 cycles
04016A 33          0003*M1     inc sp ; 1 cycle
04016B E1          0004*M1     pop hl ; 4 cycles
04016C 23          0005*M1     inc hl ; 1 cycle
04016D 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
04016F             0007*M1     ; 13 cycles total
04016F 01 F0 D8 FF 0245*       ld bc, -10000
040173 CD 96 01 04 0246*       call @one_int
040177 01 18 FC FF 0247*       ld bc, -1000
04017B CD 96 01 04 0248*       call @one_int
04017F 01 9C FF FF 0249*       ld bc, -100
040183 CD 96 01 04 0250*       call @one_int
040187 0E F6       0251*       ld c, -10
040189 CD 96 01 04 0252*       call @one_int
04018D 48          0253*       ld c, b
04018E CD 96 01 04 0254*       call @one_int
040192 C3 A1 01 04 0255*       jp @frac ; Jump to fractional part conversion
040196             0256*   @one_int:
040196 3E 2F       0257*       ld a, '0' - 1 ; Start ASCII character at '0'
040198             0258*   @divide_me:
040198 3C          0259*       inc a
040199 09          0260*       add hl, bc ; Accumulate until overflow
04019A 38 FC       0261*       jr c, @divide_me
04019C ED 42       0262*       sbc hl, bc ; Remove excess after overflow
04019E 12          0263*       ld (de), a ; Store ASCII digit
04019F 13          0264*       inc de
0401A0 C9          0265*       ret
0401A1             0266*   ; Convert fractional part
0401A1             0267*   @frac:
0401A1 3E 2E       0268*       ld a, '.' ; Decimal point
0401A3 12          0269*       ld (de), a
0401A4 13          0270*       inc de
0401A5 E1          0271*       pop hl ; Restore HL with original fraction
0401A6 06 03       0272*       ld b, 3 ; Loop counter for 3 fractional digits
0401A8             0273*   @frac_loop:
0401A8 26 0A       0274*       ld h, 10 ; Load multiplier for fractional part
0401AA ED 6C       0275*       mlt hl ; Multiply by 10, result in HL (H holds the integer part)
0401AC 3E 30       0276*       ld a, '0'
0401AE 84          0277*       add a, h ; Convert integer part to ASCII
0401AF 12          0278*       ld (de), a
0401B0 13          0279*       inc de
0401B1 10 F5       0280*       djnz @frac_loop ; Repeat for each fractional digit
0401B3             0281*   ; Add null terminator
0401B3 AF          0282*       xor a ; Null terminator
0401B4 12          0283*       ld (de), a
0401B5 C9          0284*       ret
0401B6             0285*   
0401B6             0286*   print_u168:
0401B6 D5          0287*       push de
0401B7 E5          0288*       push hl
0401B8 11 F8 00 04 0289*       ld de,_printDecBuffer
0401BC CD 63 01 04 0290*       call u168_to_ascii
0401C0 21 F8 00 04 0291*       ld hl,_printDecBuffer
0401C4 CD 67 00 04 0292*       call printString
0401C8 E1          0293*       pop hl
0401C9 D1          0294*       pop de
0401CA C9          0295*       ret
0401CB             0296*   
0401CB             0297*   ; signed version of u168_to_ascii
0401CB             0298*   s168_to_ascii:
0401CB D5          0299*       push de ; save starting address of buffer
0401CC CD 70 04 04 0300*       call hlu_abs
0401D0 F5          0301*       push af ; save sign flag
0401D1 CD 63 01 04 0302*       call u168_to_ascii
0401D5 F1          0303*       pop af ; restore sign flag
0401D6 D1          0304*       pop de ; restore starting address of buffer
0401D7 F0          0305*       ret p ; hlu was positive so nothing to do
0401D8 3E 2D       0306*       ld a,'-'
0401DA 12          0307*       ld (de),a
0401DB C9          0308*       ret
0401DC             0309*   
0401DC             0310*   print_s168:
0401DC D5          0311*       push de
0401DD E5          0312*       push hl
0401DE 11 F8 00 04 0313*       ld de,_printDecBuffer
0401E2 CD CB 01 04 0314*       call s168_to_ascii
0401E6 21 F8 00 04 0315*       ld hl,_printDecBuffer
0401EA CD 67 00 04 0316*       call printString
0401EE E1          0317*       pop hl
0401EF D1          0318*       pop de
0401F0 C9          0319*       ret
0401F1             0320*   
0401F1             0321*   print_s168_hl:
0401F1 F5          0322*       push af
0401F2 E5          0323*       push hl
0401F3 CD DC 01 04 0324*       call print_s168
0401F7 3E 20       0325*       ld a,' '
0401F9 5B D7       0326*       rst.lil 10h
0401FB E1          0327*       pop hl
0401FC F1          0328*       pop af
0401FD C9          0329*       ret
0401FE             0330*   
0401FE             0331*   print_s168_bc:
0401FE F5          0332*       push af
0401FF C5          0333*       push bc
040200 E5          0334*       push hl
040201 C5          0335*       push bc
040202 E1          0336*       pop hl
040203 CD DC 01 04 0337*       call print_s168
040207 3E 20       0338*       ld a,' '
040209 5B D7       0339*       rst.lil 10h
04020B E1          0340*       pop hl
04020C C1          0341*       pop bc
04020D F1          0342*       pop af
04020E C9          0343*       ret
04020F             0344*   
04020F             0345*   print_s168_de:
04020F F5          0346*       push af
040210 D5          0347*       push de
040211 E5          0348*       push hl
040212 EB          0349*       ex de,hl
040213 CD DC 01 04 0350*       call print_s168
040217 3E 20       0351*       ld a,' '
040219 5B D7       0352*       rst.lil 10h
04021B E1          0353*       pop hl
04021C D1          0354*       pop de
04021D F1          0355*       pop af
04021E C9          0356*       ret
04021F             0357*   
04021F             0358*   print_s168_hl_bc_de:
04021F F5          0359*       push af
040220 C5          0360*       push bc
040221 D5          0361*       push de
040222 E5          0362*       push hl
040223 CD DC 01 04 0363*       call print_s168
040227 3E 20       0364*       ld a,' '
040229 5B D7       0365*       rst.lil 10h
04022B C5          0366*       push bc
04022C E1          0367*       pop hl
04022D CD DC 01 04 0368*       call print_s168
040231 3E 20       0369*       ld a,' '
040233 5B D7       0370*       rst.lil 10h
040235 EB          0371*       ex de,hl
040236 CD DC 01 04 0372*       call print_s168
04023A 3E 20       0373*       ld a,' '
04023C 5B D7       0374*       rst.lil 10h
04023E E1          0375*       pop hl
04023F D1          0376*       pop de
040240 C1          0377*       pop bc
040241 F1          0378*       pop af
040242 C9          0379*       ret
040243             0380*   
040243             0381*   print_s168_bc_de:
040243 F5          0382*       push af
040244 C5          0383*       push bc
040245 D5          0384*       push de
040246 C5          0385*       push bc
040247 E1          0386*       pop hl
040248 CD DC 01 04 0387*       call print_s168
04024C 3E 20       0388*       ld a,' '
04024E 5B D7       0389*       rst.lil 10h
040250 EB          0390*       ex de,hl
040251 CD DC 01 04 0391*       call print_s168
040255 3E 20       0392*       ld a,' '
040257 5B D7       0393*       rst.lil 10h
040259 E1          0394*       pop hl
04025A D1          0395*       pop de
04025B C1          0396*       pop bc
04025C F1          0397*       pop af
04025D C9          0398*       ret
04025E             0399*   
04025E             0400*   print_s168_a:
04025E F5          0401*       push af
04025F C5          0402*       push bc
040260 E5          0403*       push hl
040261 21 00 00 00 0404*       ld hl,0
040265 6F          0405*       ld l,a
040266 CD F1 01 04 0406*       call print_s168_hl
04026A E1          0407*       pop hl
04026B C1          0408*       pop bc
04026C F1          0409*       pop af
04026D C9          0410*       ret
04026E             0411*   
04026E             0412*   ; #### new functions added by Brandon R. Gates ####
04026E             0413*   
04026E             0414*   ; print the binary representation of the 8-bit value in a
04026E             0415*   ; destroys a, hl, bc
04026E             0416*   printBin8:
04026E 06 08       0417*       ld b,8 ; loop counter for 8 bits
040270 21 8B 02 04 0418*       ld hl,@cmd ; set hl to the low byte of the output string
040274             0419*       ; (which will be the high bit of the value in a)
040274             0420*   @loop:
040274 07          0421*       rlca ; put the next highest bit into carry
040275 38 04       0422*       jr c,@one
040277 36 30       0423*       ld (hl),'0'
040279 18 02       0424*       jr @next_bit
04027B             0425*   @one:
04027B 36 31       0426*       ld (hl),'1'
04027D             0427*   @next_bit:
04027D 23          0428*       inc hl
04027E 10 F4       0429*       djnz @loop
040280             0430*   ; print it
040280 21 8B 02 04 0431*       ld hl,@cmd
040284 01 08 00 00 0432*       ld bc,@end-@cmd
040288 5B DF       0433*       rst.lil $18
04028A C9          0434*       ret
04028B             0435*   @cmd: ds 8 ; eight bytes for eight bits
040293             0436*   @end:
040293             0437*   
040293             0438*   ; print the binary representation of the 8-bit value in a
040293             0439*   ; in reverse order (lsb first)
040293             0440*   ; destroys a, hl, bc
040293             0441*   printBin8Rev:
       FF FF FF FF 
       FF FF FF FF 
040293 06 08       0442*       ld b,8 ; loop counter for 8 bits
040295 21 B0 02 04 0443*       ld hl,@cmd ; set hl to the low byte of the output string
040299             0444*       ; (which will be the high bit of the value in a)
040299             0445*   @loop:
040299 0F          0446*       rrca ; put the next lowest bit into carry
04029A 38 04       0447*       jr c,@one
04029C 36 30       0448*       ld (hl),'0'
04029E 18 02       0449*       jr @next_bit
0402A0             0450*   @one:
0402A0 36 31       0451*       ld (hl),'1'
0402A2             0452*   @next_bit:
0402A2 23          0453*       inc hl
0402A3 10 F4       0454*       djnz @loop
0402A5             0455*   ; print it
0402A5 21 B0 02 04 0456*       ld hl,@cmd
0402A9 01 08 00 00 0457*       ld bc,@end-@cmd
0402AD 5B DF       0458*       rst.lil $18
0402AF C9          0459*       ret
0402B0             0460*   @cmd: ds 8 ; eight bytes for eight bits
0402B8             0461*   @end:
0402B8             0462*   
       FF FF FF FF 
       FF FF FF FF 
0402B8 20 61 66 3D 0463*   str_afu: db " af=",0
       00          
0402BD 20 68 6C 3D 0464*   str_hlu: db " hl=",0
       00          
0402C2 20 62 63 3D 0465*   str_bcu: db " bc=",0
       00          
0402C7 20 64 65 3D 0466*   str_deu: db " de=",0
       00          
0402CC 20 69 78 3D 0467*   str_ixu: db " ix=",0
       00          
0402D1 20 69 79 3D 0468*   str_iyu: db " iy=",0
       00          
0402D6             0469*   
0402D6             0470*   ; print udeuhl to screen in hexidecimal format
0402D6             0471*   ; inputs: none
0402D6             0472*   ; outputs: concatenated hexidecimal udeuhl
0402D6             0473*   ; destroys: nothing
0402D6             0474*   dumpUDEUHLHex:
0402D6             0475*   ; store everything in scratch
0402D6 22 35 03 04 0476*       ld (uhl),hl
0402DA ED 43 38 03 0477*       ld (ubc),bc
       04          
0402DF ED 53 3B 03 0478*       ld (ude),de
       04          
0402E4 DD 22 3E 03 0479*       ld (uix),ix
       04          
0402E9 FD 22 41 03 0480*       ld (uiy),iy
       04          
0402EE F5          0481*       push af
0402EF             0482*   
0402EF             0483*   ; print each register
0402EF             0484*   
0402EF 21 29 03 04 0485*       ld hl,str_udeuhl
0402F3 CD 67 00 04 0486*       call printString
0402F7 2A 3B 03 04 0487*       ld hl,(ude)
0402FB CD A0 00 04 0488*       call printHex24
0402FF 3E 2E       0489*       ld a,'.' ; print a dot to separate the values
040301 5B D7       0490*       rst.lil 10h
040303 2A 35 03 04 0491*       ld hl,(uhl)
040307 CD A0 00 04 0492*       call printHex24
04030B CD 7C 00 04 0493*       call printNewLine
04030F             0494*   
04030F             0495*   ; restore everything
04030F 2A 35 03 04 0496*       ld hl, (uhl)
040313 ED 4B 38 03 0497*       ld bc, (ubc)
       04          
040318 ED 5B 3B 03 0498*       ld de, (ude)
       04          
04031D DD 2A 3E 03 0499*       ld ix, (uix)
       04          
040322 FD 2A 41 03 0500*       ld iy, (uiy)
       04          
040327 F1          0501*       pop af
040328             0502*   ; all done
040328 C9          0503*       ret
040329             0504*   
040329 75 64 65 2E 0505*   str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
040332             0506*   
040332             0507*   ; global scratch memory for registers
040332 00 00 00    0508*   uaf: dl 0
040335 00 00 00    0509*   uhl: dl 0
040338 00 00 00    0510*   ubc: dl 0
04033B 00 00 00    0511*   ude: dl 0
04033E 00 00 00    0512*   uix: dl 0
040341 00 00 00    0513*   uiy: dl 0
040344 00 00 00    0514*   usp: dl 0
040347 00 00 00    0515*   upc: dl 0
04034A             0516*   
04034A             0517*   
04034A             0518*   ; set all the bits in the flag register
04034A             0519*   ; more of an academic exercise than anything useful
04034A             0520*   ; inputs; none
04034A             0521*   ; outputs; a=0,f=255
04034A             0522*   ; destroys: flags, hl
04034A             0523*   ; preserves: a, because why not
04034A             0524*   setAllFlags:
04034A 21 FF 00 00 0525*       ld hl,255
04034E 67          0526*       ld h,a ; four cycles to preserve a is cheap
04034F E5          0527*       push hl
040350 F1          0528*       pop af
040351 C9          0529*       ret
040352             0530*   
040352             0531*   ; reset all the bits in the flag register
040352             0532*   ; unlike its inverse counterpart, this may actually be useful
040352             0533*   ; inputs; none
040352             0534*   ; outputs; a=0,f=0
040352             0535*   ; destroys: flags, hl
040352             0536*   ; preserves: a, because why not
040352             0537*   resetAllFlags:
040352 21 00 00 00 0538*       ld hl,0
040356 67          0539*       ld h,a ; four cycles to preserve a is cheap
040357 E5          0540*       push hl
040358 F1          0541*       pop af
040359 C9          0542*       ret
04035A             0543*   
04035A             0544*   ; wait until user presses a key
04035A             0545*   ; inputs: none
04035A             0546*   ; outputs: ascii code of key pressed in a
04035A             0547*   ; destroys: af,ix
04035A             0548*   waitKeypress:
04035A             0549*       MOSCALL mos_getkey
                       M1 Args: function=mos_getkey 
04035A 3E 00       0001*M1 			LD	A, function
04035C 5B CF       0002*M1 			RST.LIL	08h
04035E C9          0550*       ret
04035F             0551*   
04035F             0552*   ; clear a block of memory by writing a prescribed value to each byte in the range
04035F             0553*   ; inputs: a = value to write, hl = address of first byte, bc = number of bytes
04035F             0554*   ; outputs: memory block is cleared
04035F             0555*   ; destroys: hl, bc, de
04035F             0556*   clear_mem:
04035F 0B          0557*       dec bc ; we do this because we will increment de before writing the first byte
040360 77          0558*       ld (hl),a
040361 E5          0559*       push hl
040362 D1          0560*       pop de
040363 13          0561*       inc de ; target address
040364 ED B0       0562*       ldir
040366 C9          0563*       ret
040367             0033        include "arith24.inc"
040367             0001*   ;------------------------------------------------------------------------
040367             0002*   ;  arith24.asm
040367             0003*   ;  24-bit ez80 arithmetic routines
040367             0004*   ;  Copyright (c) Shawn Sijnstra 2024
040367             0005*   ;  MIT license
040367             0006*   ;
040367             0007*   ;  This library was created as a tool to help make ez80
040367             0008*   ;  24-bit native assembly routines for simple mathematical problems
040367             0009*   ;  more widely available.
040367             0010*   ;
040367             0011*   ;------------------------------------------------------------------------
040367             0012*   
040367             0013*   ;------------------------------------------------------------------------
040367             0014*   ; umul24:	HL = HL*DE (unsigned)
040367             0015*   ; Preserves AF, BC, DE
040367             0016*   ; Uses a fast multiply routine.
040367             0017*   ;------------------------------------------------------------------------
040367             0018*   umul24:
040367 D5          0019*   	push	DE
040368 C5          0020*   	push	BC
040369 F5          0021*   	push	AF
04036A E5          0022*   	push	HL
04036B C1          0023*   	pop		BC
04036C 3E 18       0024*       ld	 	a, 24 ; No. of bits to process
04036E 21 00 00 00 0025*       ld	 	hl, 0 ; Result
040372             0026*   umul24_lp:
040372 29          0027*   	add	hl,hl
040373 EB          0028*   	ex	de,hl
040374 29          0029*   	add	hl,hl
040375 EB          0030*   	ex	de,hl
040376 30 01       0031*   	jr	nc,umul24_nc
040378 09          0032*   	add	hl,bc
040379             0033*   umul24_nc:
040379 3D          0034*   	dec	a
04037A 20 F6       0035*   	jr	nz,umul24_lp
04037C F1          0036*   	pop	af
04037D C1          0037*   	pop	bc
04037E D1          0038*   	pop	de
04037F C9          0039*   	ret
040380             0040*   
040380             0041*   
040380             0042*   ;------------------------------------------------------------------------
040380             0043*   ; udiv24
040380             0044*   ; Unsigned 24-bit division
040380             0045*   ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
040380             0046*   ;
040380             0047*   ; Uses AF BC DE HL
040380             0048*   ; Uses Restoring Division algorithm
040380             0049*   ;------------------------------------------------------------------------
040380             0050*   
040380             0051*   udiv24:
040380 E5          0052*   	push	hl
040381 C1          0053*   	pop		bc	;move dividend to BCU
040382 21 00 00 00 0054*   	ld		hl,0	;result
040386 A7          0055*   	and		a
040387 ED 52       0056*   	sbc		hl,de	;test for div by 0
040389 C8          0057*   	ret		z		;it's zero, carry flag is clear
04038A 19          0058*   	add		hl,de	;HL is 0 again
04038B 3E 18       0059*   	ld		a,24	;number of loops through.
04038D             0060*   udiv1:
04038D C5          0061*   	push	bc	;complicated way of doing this because of lack of access to top bits
04038E E3          0062*   	ex		(sp),hl
04038F 37          0063*   	scf
040390 ED 6A       0064*   	adc	hl,hl
040392 E3          0065*   	ex	(sp),hl
040393 C1          0066*   	pop	bc		;we now have bc = (bc * 2) + 1
040394             0067*   
040394 ED 6A       0068*   	adc	hl,hl
040396 A7          0069*   	and	a		;is this the bug
040397 ED 52       0070*   	sbc	hl,de
040399 30 02       0071*   	jr	nc,udiv2
04039B 19          0072*   	add	hl,de
04039C             0073*   ;	dec	c
04039C 0B          0074*   	dec	bc
04039D             0075*   udiv2:
04039D 3D          0076*   	dec	a
04039E 20 ED       0077*   	jr	nz,udiv1
0403A0 37          0078*   	scf		;flag used for div0 error
0403A1 C5          0079*   	push	bc
0403A2 D1          0080*   	pop		de	;remainder
0403A3 C9          0081*   	ret
0403A4             0082*   
0403A4             0083*   
0403A4             0084*   
0403A4             0085*   ;------------------------------------------------------------------------
0403A4             0086*   ; neg24
0403A4             0087*   ; Returns: HLU = 0-HLU
0403A4             0088*   ; preserves all other registers
0403A4             0089*   ;------------------------------------------------------------------------
0403A4             0090*   neg24:
0403A4 D5          0091*   	push	de
0403A5 EB          0092*   	ex		de,hl
0403A6 21 00 00 00 0093*   	ld		hl,0
0403AA B7          0094*   	or		a
0403AB ED 52       0095*   	sbc		hl,de
0403AD D1          0096*   	pop		de
0403AE C9          0097*   	ret
0403AF             0098*   
0403AF             0099*   ;------------------------------------------------------------------------
0403AF             0100*   ; or_hlu_deu: 24 bit bitwise OR
0403AF             0101*   ; Returns: hlu = hlu OR deu
0403AF             0102*   ; preserves all other registers
0403AF             0103*   ;------------------------------------------------------------------------
0403AF             0104*   or_hlu_deu:
0403AF 22 38 04 04 0105*   	ld	(bitbuf1),hl
0403B3 ED 53 3B 04 0106*   	ld	(bitbuf2),de
       04          
0403B8 D5          0107*   	push	de	;preserve DEU
0403B9 C5          0108*   	push	bc	;preserve BCU
0403BA 06 03       0109*   	ld		b,3
0403BC 21 38 04 04 0110*   	ld	hl,bitbuf1
0403C0 11 38 04 04 0111*   	ld	de,bitbuf1
0403C4             0112*   orloop_24:
0403C4 1A          0113*   	ld	a,(de)
0403C5 B6          0114*   	or	(hl)
0403C6 12          0115*   	ld	(de),a
0403C7 13          0116*   	inc	de
0403C8 23          0117*   	inc	hl
0403C9 10 F9       0118*   	djnz	orloop_24
0403CB 2A 3B 04 04 0119*   	ld	hl,(bitbuf2)
0403CF C1          0120*   	pop		bc	;restore BC
0403D0 D1          0121*   	pop		de	;restore DE
0403D1             0122*   
0403D1             0123*   ;------------------------------------------------------------------------
0403D1             0124*   ; and_hlu_deu: 24 bit bitwise AND
0403D1             0125*   ; Returns: hlu = hlu AND deu
0403D1             0126*   ; preserves all other registers
0403D1             0127*   ;------------------------------------------------------------------------
0403D1             0128*   and_hlu_deu:
0403D1 22 38 04 04 0129*   	ld	(bitbuf1),hl
0403D5 ED 53 3B 04 0130*   	ld	(bitbuf2),de
       04          
0403DA D5          0131*   	push	de	;preserve DEU
0403DB C5          0132*   	push	bc	;preserve BCU
0403DC 06 03       0133*   	ld		b,3
0403DE 21 38 04 04 0134*   	ld	hl,bitbuf1
0403E2 11 38 04 04 0135*   	ld	de,bitbuf1
0403E6             0136*   andloop_24:
0403E6 1A          0137*   	ld	a,(de)
0403E7 A6          0138*   	and	(hl)
0403E8 12          0139*   	ld	(de),a
0403E9 13          0140*   	inc	de
0403EA 23          0141*   	inc	hl
0403EB 10 F9       0142*   	djnz	andloop_24
0403ED 2A 3B 04 04 0143*   	ld	hl,(bitbuf2)
0403F1 C1          0144*   	pop		bc	;restore BC
0403F2 D1          0145*   	pop		de	;restore DE
0403F3             0146*   
0403F3             0147*   ;------------------------------------------------------------------------
0403F3             0148*   ; xor_hlu_deu: 24 bit bitwise XOR
0403F3             0149*   ; Returns: hlu = hlu XOR deu
0403F3             0150*   ; preserves all other registers
0403F3             0151*   ;------------------------------------------------------------------------
0403F3             0152*   xor_hlu_deu:
0403F3 22 38 04 04 0153*   	ld	(bitbuf1),hl
0403F7 ED 53 3B 04 0154*   	ld	(bitbuf2),de
       04          
0403FC D5          0155*   	push	de	;preserve DEU
0403FD C5          0156*   	push	bc	;preserve BCU
0403FE 06 03       0157*   	ld		b,3
040400 21 38 04 04 0158*   	ld	hl,bitbuf1
040404 11 38 04 04 0159*   	ld	de,bitbuf1
040408             0160*   xorloop_24:
040408 1A          0161*   	ld	a,(de)
040409 AE          0162*   	xor	(hl)
04040A 12          0163*   	ld	(de),a
04040B 13          0164*   	inc	de
04040C 23          0165*   	inc	hl
04040D 10 F9       0166*   	djnz	xorloop_24
04040F 2A 3B 04 04 0167*   	ld	hl,(bitbuf2)
040413 C1          0168*   	pop		bc	;restore BC
040414 D1          0169*   	pop		de	;restore DE
040415             0170*   
040415             0171*   ;------------------------------------------------------------------------
040415             0172*   ; shl_hlu: 24 bit shift left hlu by a positions
040415             0173*   ; Returns: hlu = hlu << a
040415             0174*   ;		   a = 0
040415             0175*   ; NOTE: only considers a up to 16 bits.
040415             0176*   ; preserves all other registers
040415             0177*   ; modified by Brandon R. Gates to use a instead of de
040415             0178*   ;------------------------------------------------------------------------
040415             0179*   shl_hlu:
040415 B7          0180*   	or a
040416 C8          0181*   	ret		z		;we're done
040417 29          0182*   	add		hl,hl	;shift HLU left
040418 3D          0183*   	dec a
040419 18 FA       0184*   	jr		shl_hlu
04041B             0185*   
04041B             0186*   ;------------------------------------------------------------------------
04041B             0187*   ; shr_hlu: 24 bit shift right hlu by a positions
04041B             0188*   ; Returns: hlu = hlu >> a
04041B             0189*   ;		   a = 0
04041B             0190*   ; NOTE: only considers a up to 16 bits.
04041B             0191*   ; preserves all other registers
04041B             0192*   ; modified by Brandon R. Gates to use a instead of de
04041B             0193*   ;------------------------------------------------------------------------
04041B             0194*   shr_hlu:
04041B 22 38 04 04 0195*   	ld		(bitbuf1),hl
04041F 21 3A 04 04 0196*   	ld		hl,bitbuf1+2
040423             0197*   @shr_loop:
040423 B7          0198*   	or a
040424 28 0D       0199*   	jr		z,@shr_done		;we're done
040426             0200*   ;carry is clear from or instruction
040426 CB 1E       0201*   	rr		(hl)
040428 2B          0202*   	dec		hl
040429 CB 1E       0203*   	rr		(hl)
04042B 2B          0204*   	dec		hl
04042C CB 1E       0205*   	rr		(hl)
04042E 23          0206*   	inc		hl
04042F 23          0207*   	inc		hl
040430 3D          0208*   	dec a
040431 18 F0       0209*   	jr		@shr_loop
040433             0210*   @shr_done:
040433 2A 38 04 04 0211*   	ld		hl,(bitbuf1)	;collect result
040437 C9          0212*   	ret
040438             0213*   
040438             0214*   ;------------------------------------------------------------------------
040438             0215*   ; Scratch area for calculations
040438             0216*   ;------------------------------------------------------------------------
040438 00 00 00    0217*   bitbuf1:	dw24	0	;bit manipulation buffer 1
04043B 00 00 00    0218*   bitbuf2:	dw24	0	;bit manipulation buffer 2
04043E             0219*   
04043E             0220*   ; -----------------------------------------------------------------------
04043E             0221*   ; Functions added by Brandon R. Gates
04043E             0222*   ; -----------------------------------------------------------------------
04043E             0223*   
04043E             0224*   ;------------------------------------------------------------------------
04043E             0225*   ; shr_hlu_div: Quick division by powers of two based on log2 of A
04043E             0226*   ;              Determines the LSB of A and shifts HLU accordingly.
04043E             0227*   ;              HLU = HLU >> LSB(A)
04043E             0228*   ; Returns: HLU = HLU >> LSB(A)
04043E             0229*   ; Destroys: af
04043E             0230*   ;------------------------------------------------------------------------
04043E             0231*   shr_hlu_log2a:
04043E B7          0232*   	or a    ; check for zero
04043F C8          0233*   	ret z   ; nothing to shift so we're done
040440 C5          0234*   	push 	bc ; preserve
040441 06 00       0235*   	ld		b,0 ; clear b
040443             0236*   @find_bit:
040443 0F          0237*   	rrca ; bit 0 to carry
040444 DA 4D 04 04 0238*   	jp c,@found_bit
040448 04          0239*   	inc b ; next bit
040449 C3 43 04 04 0240*   	jp @find_bit
04044D             0241*   @found_bit:
04044D 78          0242*   	ld a,b
04044E CD 1B 04 04 0243*   	call shr_hlu
040452 C1          0244*   	pop 	bc ; restore
040453 C9          0245*   	ret
040454             0246*   ; end shr_hlu_log2a
040454             0247*   
040454             0248*   ;------------------------------------------------------------------------
040454             0249*   ; shl_hlu_log2a: Quick multiplication by powers of two based on log2 of A
040454             0250*   ;                Determines the LSB of A and shifts HLU accordingly.
040454             0251*   ;                HLU = HLU << LSB(A)
040454             0252*   ; Returns: HLU = HLU << LSB(A)
040454             0253*   ; Destroys: af
040454             0254*   ;------------------------------------------------------------------------
040454             0255*   shl_hlu_log2a:
040454 B7          0256*   	or a    ; check for zero
040455 C8          0257*   	ret z   ; nothing to shift so we're done
040456 C5          0258*   	push 	bc ; preserve
040457 06 00       0259*   	ld		b,0 ; clear b
040459             0260*   @find_bit:
040459 0F          0261*   	rrca ; bit 0 to carry
04045A DA 63 04 04 0262*   	jp c,@found_bit
04045E 04          0263*   	inc b ; next bit
04045F C3 59 04 04 0264*   	jp @find_bit
040463             0265*   @found_bit:
040463 78          0266*   	ld a,b
040464 CD 15 04 04 0267*   	call shl_hlu
040468 C1          0268*   	pop 	bc ; restore
040469 C9          0269*   	ret
04046A             0270*   ; end shl_hlu_log2a
04046A             0034        include "maths.inc"
04046A             0001*   ;------------------------------------------------------------------------
04046A             0002*   ; Scratch area for calculations
04046A             0003*   ;------------------------------------------------------------------------
04046A 00 00 00    0004*   scratch1: dw24 0 ;bit manipulation buffer 1
04046D 00 00 00    0005*   scratch2: dw24 0 ;bit manipulation buffer 2
040470             0006*   
040470             0007*   ; absolute value of hlu
040470             0008*   ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040470             0009*   ;         s1,z0,pv0,n1,c0 if hlu was negative
040470             0010*   ;         s0,z1,pv0,n1,c0 if hlu was zero
040470             0011*   ;         s0,z0,pv0,n1,c0 if hlu was positive
040470             0012*   ; destroys: a
040470             0013*   hlu_abs:
040470 19          0014*       add hl,de
040471 B7          0015*       or a
040472 ED 52       0016*       sbc hl,de
040474 FA 79 04 04 0017*       jp m,@is_neg
040478 C9          0018*       ret ; hlu is positive or zero so we're done
040479             0019*   @is_neg:
040479 F5          0020*       push af ; otherwise, save current flags for return
04047A CD 80 04 04 0021*       call neg_hlu ; negate hlu
04047E F1          0022*       pop af ; get back flags
04047F C9          0023*       ret
040480             0024*   
040480             0025*   ; flip the sign of hlu
040480             0026*   ; inputs: hlu
040480             0027*   ; returns: 0-hlu, flags set appropriately for the result:
040480             0028*   ;         s1,z0,pv0,n1,c1 if result is negative
040480             0029*   ;         s0,z1,pv0,n1,c0 if result is zero
040480             0030*   ;         s0,z0,pv0,n1,c1 if result is positive
040480             0031*   ; destroys a
040480             0032*   neg_hlu:
040480 D5          0033*       push de ; save de
040481 EB          0034*       ex de,hl ; put hl into de
040482 21 00 00 00 0035*       ld hl,0 ; clear hl
040486 AF          0036*       xor a ; clear carry
040487 ED 52       0037*       sbc hl,de ; 0-hlu = -hlu
040489 D1          0038*       pop de ; get de back
04048A C9          0039*       ret ; easy peasy
04048B             0040*   
04048B             0041*   ;------------------------------------------------------------------------
04048B             0042*   ; divide hlu by 2, inspired by above
04048B             0043*   ;------------------------------------------------------------------------
04048B             0044*   hlu_div2:
04048B 22 6A 04 04 0045*       ld (scratch1),hl
04048F 21 6C 04 04 0046*       ld hl,scratch1+2
040493 CB 1E       0047*       rr (hl)
040495 2B          0048*       dec hl
040496 CB 1E       0049*       rr (hl)
040498 2B          0050*       dec hl
040499 CB 1E       0051*       rr (hl)
04049B 23          0052*       inc hl
04049C 23          0053*       inc hl
04049D 2A 6A 04 04 0054*       ld hl,(scratch1)
0404A1 C9          0055*       ret
0404A2             0056*   
0404A2             0057*   ; this is my little hack to divide by 16
0404A2             0058*   hlu_div16:
0404A2 AF          0059*       xor a
0404A3 29          0060*       add hl,hl
0404A4 17          0061*       rla
0404A5 29          0062*       add hl,hl
0404A6 17          0063*       rla
0404A7 29          0064*       add hl,hl
0404A8 17          0065*       rla
0404A9 29          0066*       add hl,hl
0404AA 17          0067*       rla
0404AB 22 B8 04 04 0068*       ld (@scratch),hl
0404AF 32 BB 04 04 0069*       ld (@scratch+3),a
0404B3 2A B9 04 04 0070*       ld hl,(@scratch+1)
0404B7 C9          0071*       ret
0404B8             0072*   @scratch: ds 4
0404BC             0073*   
0404BC             0074*   ; hlu signed division by 256
0404BC             0075*   ; returns: hlu / 256
0404BC             0076*   ; destroys: af
0404BC             0077*   hlu_sdiv256:
       FF FF FF FF 
0404BC AF          0078*       xor a ; assume hl is positive
0404BD 22 D3 04 04 0079*       ld (@buffer),hl
0404C1             0080*       SIGN_HLU
                       M1 Args: none
0404C1 19          0001*M1     add hl,de ; 1 cycle
0404C2 B7          0002*M1     or a ; clear flags ; 1 cycle
0404C3 ED 52       0003*M1     sbc hl,de ; 2 cycles
0404C5             0004*M1     ; 4 cycles total
0404C5 F2 CA 04 04 0081*       jp p,@hl_pos
0404C9 3D          0082*       dec a
0404CA             0083*   @hl_pos:
0404CA 32 D6 04 04 0084*       ld (@buffer+3),a
0404CE 2A D4 04 04 0085*       ld hl,(@buffer+1)
0404D2 C9          0086*       ret
0404D3             0087*   @buffer: ds 4
0404D7             0088*   
0404D7             0089*   ; hlu 1 byte right shift, unsigned
0404D7             0090*   ; returns: hlu / 256, fractional portion in a
0404D7             0091*   ; destroys: af
0404D7             0092*   hlu_udiv256:
       FF FF FF FF 
0404D7 AF          0093*       xor a
0404D8 32 E9 04 04 0094*       ld (@buffer+3),a
0404DC 7D          0095*       ld a,l ; save the fractional portion
0404DD 22 E6 04 04 0096*       ld (@buffer),hl
0404E1 2A E7 04 04 0097*       ld hl,(@buffer+1)
0404E5 C9          0098*       ret
0404E6             0099*   @buffer: ds 4
0404EA             0100*   
0404EA             0101*   ; floor(value,n)
0404EA             0102*   ; inputs: hl = value to floor, de = n
0404EA             0103*   ; outputs: hl = value floored to n
0404EA             0104*   ; destroys: af, hl, bc, de
0404EA             0105*   hlu_floor:
       FF FF FF FF 
0404EA D5          0106*       push de ; save n
0404EB CD 80 03 04 0107*       call udiv24 ; de = quotient, hl = remainder
0404EF E1          0108*       pop hl ; get n back (was de)
0404F0 CD 67 03 04 0109*       call umul24 ; hl = n * quotient
0404F4 C9          0110*       ret
0404F5             0111*   ; end hlu_floor
0404F5             0112*   
0404F5             0113*   ; ceil(value,n)
0404F5             0114*   ; inputs: hl = value to ceil, de = n
0404F5             0115*   ; outputs: hl = value ceiled to n
0404F5             0116*   ; destroys: af, hl, bc, de
0404F5             0117*   hlu_ceiling:
0404F5 D5          0118*       push de ; save n
0404F6 CD 80 03 04 0119*       call udiv24 ; de = quotient, hl = remainder
0404FA             0120*       SIGN_HLU ; test remaider for zero
                       M1 Args: none
0404FA 19          0001*M1     add hl,de ; 1 cycle
0404FB B7          0002*M1     or a ; clear flags ; 1 cycle
0404FC ED 52       0003*M1     sbc hl,de ; 2 cycles
0404FE             0004*M1     ; 4 cycles total
0404FE CA 03 05 04 0121*       jp z,@F ; if zero, nothing to add
040502 13          0122*       inc de ; add 1 to quotient for the ceiling
040503             0123*   @@:
040503 E1          0124*       pop hl ; get n back (was de)
040504 CD 67 03 04 0125*       call umul24 ; hl = n * quotient
040508 C9          0126*       ret
040509             0127*   ; end hlu_ceiling
040509             0128*   
040509 C9          0129*       ret
04050A             0130*   
04050A 00 00 00 00 0131*   add_bcd_arg1: db #00,#00,#00,#00
04050E 00 00 00 00 0132*   add_bcd_arg2: db #00,#00,#00,#00
040512             0133*   
040512             0134*   ; set bcd values in a scratch memory address from registers bcde
040512             0135*   ; input: hl; scratch address,bcde; 8-place bcd number
040512             0136*   ; destroys ; hl
040512             0137*   set_bcd:
040512 73          0138*       ld (hl),e
040513 23          0139*       inc hl
040514 72          0140*       ld (hl),d
040515 23          0141*       inc hl
040516 71          0142*       ld (hl),c
040517 23          0143*       inc hl
040518 70          0144*       ld (hl),b
040519 C9          0145*       ret
04051A             0146*   
04051A             0147*   ; load bcd values from a scratch memory address to bcde
04051A             0148*   ; input: hl; scratch address
04051A             0149*   ; output: bcde; 8-place bcd number
04051A             0150*   ; destroys: hl
04051A             0151*   get_bcd:
04051A 5E          0152*       ld e,(hl)
04051B 23          0153*       inc hl
04051C 56          0154*       ld d,(hl)
04051D 23          0155*       inc hl
04051E 4E          0156*       ld c,(hl)
04051F 23          0157*       inc hl
040520 46          0158*       ld b,(hl)
040521 C9          0159*       ret
040522             0160*   
040522             0161*   ; BCD addition
040522             0162*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040522             0163*   ;       a is the number of bytes holding each number (number of places/2)
040522             0164*   ; outputs: (hl) + (de) --> (hl)
040522             0165*   ; destroys: a,b,de,hl
040522             0166*   add_bcd:
040522 47          0167*       ld b,a ; loop counter
040523 AF          0168*       xor a ; reset a, clear carry flag
040524             0169*   adcec:
040524 1A          0170*       ld a,(de) ; addend to acc
040525 8E          0171*       adc a,(hl) ; add (hl) to acc
040526 27          0172*       daa ; adjust result to bcd
040527 77          0173*       ld (hl),a ; store result
040528 23          0174*       inc hl ; advance memory pointers
040529 13          0175*       inc de
04052A 10 F8       0176*       djnz adcec ; loop until b == 0
04052C C9          0177*       ret
04052D             0178*   
04052D             0179*   ; BCD subtraction
04052D             0180*   ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04052D             0181*   ;       a is the number of bytes holding each number (number of places/2)
04052D             0182*   ; outputs: (hl) - (de) --> (hl)
04052D             0183*   ; destroys: a,b,de,hl
04052D             0184*   sub_bcd:
04052D 47          0185*       ld b,a ; loop counter
04052E AF          0186*       xor a ; reset a,clear carry flag
04052F             0187*   subdec:
04052F 1A          0188*       ld a,(de) ; subtrahend to acc
040530 9E          0189*       sbc a,(hl) ; subtract (hl) from acc
040531 27          0190*       daa ; adjust result to bcd
040532 77          0191*       ld (hl),a ; store result
040533 23          0192*       inc hl ; advance memory pointers
040534 13          0193*       inc de
040535 10 F8       0194*       djnz subdec ; loop until b == 0
040537 C9          0195*       ret
040538             0196*   
040538             0197*   ; http://www.z80.info/pseudo-random.txt
040538             0198*   rand_8:
040538 C5          0199*       push bc
040539 3A 4C 05 04 0200*       ld a,(r_seed)
04053D 4F          0201*       ld c,a
04053E             0202*   
04053E 0F          0203*       rrca ; multiply by 32
04053F 0F          0204*       rrca
040540 0F          0205*       rrca
040541 EE 1F       0206*       xor 0x1f
040543             0207*   
040543 81          0208*       add a,c
040544 DE FF       0209*       sbc a,255 ; carry
040546             0210*   
040546 32 4C 05 04 0211*       ld (r_seed),a
04054A C1          0212*       pop bc
04054B C9          0213*       ret
04054C 50          0214*   r_seed: defb $50
04054D             0215*   
04054D             0216*   ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
04054D             0217*   prng24:
04054D             0218*   ;;Expects ADL mode.
04054D             0219*   ;;Output: HL
04054D             0220*   ;;50cc
04054D             0221*   ;;33 bytes
04054D             0222*   ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
04054D ED 5B 6E 05 0223*       ld de,(seed1)
       04          
040552 B7          0224*       or a
040553 ED 62       0225*       sbc hl,hl
040555 19          0226*       add hl,de
040556 29          0227*       add hl,hl
040557 29          0228*       add hl,hl
040558 2C          0229*       inc l
040559 19          0230*       add hl,de
04055A 22 6E 05 04 0231*       ld (seed1),hl
04055E 2A 71 05 04 0232*       ld hl,(seed2)
040562 29          0233*       add hl,hl
040563 9F          0234*       sbc a,a
040564 E6 1B       0235*       and %00011011
040566 AD          0236*       xor l
040567 6F          0237*       ld l,a
040568 22 71 05 04 0238*       ld (seed2),hl
04056C 19          0239*       add hl,de
04056D C9          0240*       ret
04056E 00 00 00    0241*   seed1: dl 0
040571 00 00 00    0242*   seed2: dl 0
040574             0243*   
040574             0244*   
040574             0245*   ; https://map.grauw.nl/sources/external/z80bits.html#2.1
040574             0246*   ; h / l -> h, remain a
040574             0247*   ; 2.1 Restoring 8-bit / 8-bit Unsigned
040574             0248*   ; Input: H = Dividend, L = Divisor, A = 0
040574             0249*   ; Output: H = Quotient, A = Remainder, L = Divisor (unchanged)
040574             0250*   udiv8:
040574 AF          0251*       xor a
040575 06 08       0252*       ld b,8
040577             0253*   @loop:
040577 CB 24       0254*       sla h
040579 17          0255*       rla
04057A BD          0256*       cp l
04057B 38 02       0257*       jr c,$+4
04057D 95          0258*       sub l
04057E 24          0259*       inc h
04057F 10 F6       0260*       djnz @loop
040581 C9          0261*       ret
040582             0262*   
040582             0263*   ; https://www.omnimaga.org/asm-language/(z80)-32-bit-by-16-bits-division-and-32-bit-square-root/msg406903/#msg406903
040582             0264*   ; This divides HLIX by BC
040582             0265*   ; The result is stored in HLIX, the remainder in DE
040582             0266*   ; BC is unmodified
040582             0267*   ; A is 0
040582             0268*   udiv3216:
040582 11 00 00 00 0269*       ld de,0		; 10
040586 3E 20       0270*       ld a,32		; 7
040588             0271*   @loop:
040588 52 DD 29    0272*       add.s ix,ix		; 15
04058B 52 ED 6A    0273*       adc.s hl,hl		; 15
04058E EB          0274*       ex de,hl		; 4
04058F 52 ED 6A    0275*       adc.s hl,hl		; 15
040592 B7          0276*       or a			; 4
040593 52 ED 42    0277*       sbc.s hl,bc		; 15
040596 52 DD 23    0278*       inc.s ix		; 10
040599 30 05       0279*       jr nc,@cansub		; 12/7
04059B 52 09       0280*       add.s hl,bc		; 11
04059D 52 DD 2B    0281*       dec.s ix		; 10
0405A0             0282*   @cansub:
0405A0 EB          0283*       ex de,hl		; 4
0405A1 3D          0284*       dec a		; 4
0405A2 20 E4       0285*       jr nz,@loop	; 12/7
0405A4 C9          0286*       ret			; 10
0405A5             0287*   ; end udiv3216
0405A5             0288*   
0405A5             0289*   ; https://discord.com/channels/1158535358624039014/1282290921815408681/1329274504022720512
0405A5             0290*   ; calc84maniac's 32-bit by 23-bit division routine
0405A5             0291*   ; This divides AUIX by UDE (maximum 23 bits)
0405A5             0292*   ; The result is stored in AUIX, the remainder in UHL
0405A5             0293*   ; UDE, C are unmodified
0405A5             0294*   ; B is 0
0405A5             0295*   udiv3223:
0405A5 B7          0296*       or a,a         ; 1
0405A6 ED 62       0297*       sbc hl,hl      ; 2
0405A8 06 20       0298*       ld b,32        ; 2
0405AA             0299*   @loop:
0405AA DD 29       0300*       add ix,ix      ; 2
0405AC 8F          0301*       adc a,a        ; 1
0405AD ED 6A       0302*       adc hl,hl      ; 2
0405AF ED 52       0303*       sbc hl,de      ; 2
0405B1 DD 23       0304*       inc ix         ; 2
0405B3 30 03       0305*       jr nc,@cansub  ; 2/4
0405B5 19          0306*       add hl,de      ; 1
0405B6 DD 2B       0307*       dec ix         ; 2
0405B8             0308*   @cansub:
0405B8 10 F0       0309*       djnz @loop     ; 2/4
0405BA C9          0310*       ret            ; 10
0405BB             0311*   ; end udiv3223
0405BB             0312*   
0405BB             0313*   ; calc84maniac https://discord.com/channels/1158535358624039014/1282290921815408681/1330991583369101322
0405BB             0314*   ; add uhl to signed integer a
0405BB             0315*   add_uhl_a_signed:
0405BB D5          0316*       push de    ; 4 cycles
0405BC EB          0317*       ex de, hl  ; 1 cycle  UDE = UHL
0405BD 07          0318*       rlca       ; 1 cycle  CF = signbit(A)
0405BE ED 62       0319*       sbc hl, hl ; 2 cycles UHL = -signbit(A)
0405C0 0F          0320*       rrca       ; 1 cycle  Restore A
0405C1 6F          0321*       ld l, a    ; 1 cycle  UHL = signext(A)
0405C2 19          0322*       add hl, de ; 1 cycle  UHL = UDE + signext(A)
0405C3 D1          0323*       pop de     ; 4 cycles
0405C4             0324*                  ; 15 cycles total
0405C4 C9          0325*       ret
0405C5             0326*   ; end hlu_add_a_signed
0405C5             0035        include "font.inc"
0405C5             0001*   Lat2_VGA8_8x8: equ 64016
0405C5             0002*   font_data:
0405C5 00 00 78 0C 0003*       incbin "Lat2-VGA8_8x8.font"
       7C CC 76 0F 
       3C 42 B9 A5 
       B9 A5 42 3C 
       00 00 18 3C 
       66 FF 00 00 
       7E 81 A5 81 
       BD 99 81 7E 
       10 38 7C FE 
       7C 38 10 00 
       3C 7E DB FF 
       C3 7E 3C 00 
       10 38 7C FE 
       FE 10 38 00 
       00 00 18 3C 
       18 00 00 00 
       00 3C 18 FF 
       FF 08 18 00 
       00 EE FE FE 
       7C 38 10 00 
       00 3C 42 81 
       81 42 3C 00 
       1F 07 0D 7C 
       C6 C6 7C 00 
       00 7E C3 C3 
       7E 18 7E 18 
       04 06 07 04 
       04 FC F8 00 
       0C 0A 0D 0B 
       F9 F9 1F 1F 
       00 92 7C 44 
       C6 7C 92 00 
       FF FF E7 C3 
       E7 FF FF FF 
       FF C3 BD 7E 
       7E BD C3 FF 
       18 3C 7E 18 
       18 7E 3C 18 
       66 66 66 66 
       66 00 66 00 
       7F DB 7B 3B 
       1B 1B 1B 00 
       3E 61 3C 66 
       66 3C 86 7C 
       38 64 F0 60 
       F0 64 38 00 
       18 7E 18 18 
       7E 18 00 FF 
       18 3C 7E 18 
       18 18 18 00 
       18 18 18 18 
       7E 3C 18 00 
       00 18 0C FE 
       0C 18 00 00 
       00 30 60 FE 
       60 30 00 00 
       00 00 00 C0 
       C0 C0 FF 00 
       00 24 66 FF 
       66 24 00 00 
       48 78 84 60 
       18 84 78 00 
       78 00 7C C0 
       78 0C F8 00 
       00 00 00 00 
       00 00 00 00 
       30 78 78 30 
       30 00 30 00 
       6C 6C 00 00 
       00 00 00 00 
       6C 6C FE 6C 
       FE 6C 6C 00 
       10 7E 90 7C 
       12 FC 10 00 
       00 C6 CC 18 
       30 66 C6 00 
       38 6C 38 76 
       DC CC 76 00 
       30 30 60 00 
       00 00 00 00 
       18 30 60 60 
       60 30 18 00 
       60 30 18 18 
       18 30 60 00 
       00 66 3C FF 
       3C 66 00 00 
       00 30 30 FC 
       30 30 00 00 
       00 00 00 00 
       00 30 30 60 
       00 00 00 FC 
       00 00 00 00 
       00 00 00 00 
       00 30 30 00 
       00 06 0C 18 
       30 60 C0 00 
       7C C6 C6 D6 
       C6 C6 7C 00 
       30 70 30 30 
       30 30 FC 00 
       78 CC 0C 38 
       60 CC FC 00 
       78 CC 0C 38 
       0C CC 78 00 
       1C 3C 6C CC 
       FE 0C 1E 00 
       FC C0 F8 0C 
       0C CC 78 00 
       38 60 C0 F8 
       CC CC 78 00 
       FC CC 0C 18 
       30 30 30 00 
       78 CC CC 78 
       CC CC 78 00 
       78 CC CC 7C 
       0C 18 70 00 
       00 30 30 00 
       00 30 30 00 
       00 30 30 00 
       00 30 30 60 
       18 30 60 C0 
       60 30 18 00 
       00 00 FC 00 
       00 FC 00 00 
       60 30 18 0C 
       18 30 60 00 
       78 CC 0C 18 
       30 00 30 00 
       7C C6 DE DE 
       DE C0 78 00 
       30 78 CC CC 
       FC CC CC 00 
       FC 66 66 7C 
       66 66 FC 00 
       3C 66 C0 C0 
       C0 66 3C 00 
       F8 6C 66 66 
       66 6C F8 00 
       FE 62 68 78 
       68 62 FE 00 
       FE 62 68 78 
       68 60 F0 00 
       3C 66 C0 C0 
       CE 66 3E 00 
       CC CC CC FC 
       CC CC CC 00 
       78 30 30 30 
       30 30 78 00 
       1E 0C 0C 0C 
       CC CC 78 00 
       E6 66 6C 78 
       6C 66 E6 00 
       F0 60 60 60 
       62 66 FE 00 
       C6 EE FE FE 
       D6 C6 C6 00 
       C6 E6 F6 DE 
       CE C6 C6 00 
       38 6C C6 C6 
       C6 6C 38 00 
       FC 66 66 7C 
       60 60 F0 00 
       78 CC CC CC 
       DC 78 1C 00 
       FC 66 66 7C 
       6C 66 E6 00 
       78 CC E0 70 
       1C CC 78 00 
       FC B4 30 30 
       30 30 78 00 
       CC CC CC CC 
       CC CC 78 00 
       CC CC CC CC 
       CC 78 30 00 
       C6 C6 C6 D6 
       FE EE C6 00 
       C6 C6 6C 38 
       6C C6 C6 00 
       CC CC CC 78 
       30 30 78 00 
       FE C6 0C 18 
       30 66 FE 00 
       78 60 60 60 
       60 60 78 00 
       00 C0 60 30 
       18 0C 06 00 
       78 18 18 18 
       18 18 78 00 
       18 3C 66 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 FF 
       30 30 18 00 
       00 00 00 00 
       00 00 78 0C 
       7C CC 76 00 
       E0 60 60 7C 
       66 66 DC 00 
       00 00 78 CC 
       C0 CC 78 00 
       1C 0C 0C 7C 
       CC CC 76 00 
       00 00 78 CC 
       FC C0 78 00 
       38 6C 60 F0 
       60 60 F0 00 
       00 00 76 CC 
       CC 7C 0C F8 
       E0 60 6C 76 
       66 66 E6 00 
       30 00 70 30 
       30 30 78 00 
       0C 00 0C 0C 
       0C CC CC 78 
       E0 60 66 6C 
       78 6C E6 00 
       E0 60 60 60 
       60 68 30 00 
       00 00 CC FE 
       FE D6 C6 00 
       00 00 F8 CC 
       CC CC CC 00 
       00 00 78 CC 
       CC CC 78 00 
       00 00 DC 66 
       66 7C 60 F0 
       00 00 76 CC 
       CC 7C 0C 1E 
       00 00 DC 76 
       66 60 F0 00 
       00 00 7C C0 
       78 0C F8 00 
       10 30 7C 30 
       30 34 18 00 
       00 00 CC CC 
       CC CC 76 00 
       00 00 CC CC 
       CC 78 30 00 
       00 00 C6 D6 
       FE FE 6C 00 
       00 00 C6 6C 
       38 6C C6 00 
       00 00 CC CC 
       CC 7C 0C F8 
       00 00 FC 98 
       30 64 FC 00 
       1C 30 30 E0 
       30 30 1C 00 
       30 30 30 30 
       30 30 30 00 
       E0 30 30 1C 
       30 30 E0 00 
       76 DC 00 00 
       00 00 00 00 
       7C 82 9A A2 
       A2 9A 82 7C 
       3C 66 C0 C0 
       66 3C 0C 78 
       CC 00 CC CC 
       CC CC 76 00 
       0C 18 78 CC 
       FC C0 78 00 
       78 84 78 0C 
       7C CC 76 00 
       6C 00 78 0C 
       7C CC 76 00 
       60 30 78 0C 
       7C CC 76 00 
       7C 82 B2 AA 
       B2 AA 82 7C 
       00 78 CC C0 
       CC 78 18 70 
       78 84 78 CC 
       FC C0 78 00 
       CC 00 78 CC 
       FC C0 78 00 
       60 30 78 CC 
       FC C0 78 00 
       00 D8 00 70 
       30 30 78 00 
       70 D8 00 70 
       30 30 78 00 
       6C FE CC 18 
       30 66 FE 00 
       CC 00 78 CC 
       FC CC CC 00 
       78 00 FC 98 
       30 64 FC 00 
       0C 18 FE 62 
       78 62 FE 00 
       00 00 7E 1B 
       7E D8 7E 00 
       3E 78 D8 FC 
       D8 D8 DE 00 
       78 CC 00 78 
       CC CC 78 00 
       00 CC 00 78 
       CC CC 78 00 
       18 30 78 CC 
       FC CC CC 00 
       78 CC 00 CC 
       CC CC 76 00 
       60 30 CC CC 
       CC CC 76 00 
       CC 00 CC CC 
       CC 7C 0C F8 
       CC 00 78 CC 
       CC CC 78 00 
       CC 00 CC CC 
       CC CC 78 00 
       30 78 CC C0 
       CC 78 30 00 
       38 6C 64 F0 
       60 E6 FC 00 
       CC CC 78 FC 
       30 FC 30 30 
       78 84 78 CC 
       FC CC CC 00 
       6C 00 FE 62 
       78 62 FE 00 
       18 30 78 0C 
       7C CC 76 00 
       18 30 00 70 
       30 30 78 00 
       18 30 00 78 
       CC CC 78 00 
       18 30 CC CC 
       CC CC 76 00 
       76 DC F8 CC 
       CC CC CC 00 
       76 DC E6 F6 
       DE CE C6 00 
       3C 6C 3E 00 
       7E 00 00 00 
       38 6C 38 00 
       7C 00 00 00 
       00 18 00 18 
       30 60 66 3C 
       18 30 78 30 
       30 30 78 00 
       00 00 00 FC 
       0C 0C 00 00 
       00 00 7E DB 
       DE D8 7E 00 
       7E D8 D8 DC 
       D8 D8 7E 00 
       00 30 00 30 
       30 78 78 30 
       00 33 66 CC 
       66 33 00 00 
       00 CC 66 33 
       66 CC 00 00 
       22 88 22 88 
       22 88 22 88 
       55 AA 55 AA 
       55 AA 55 AA 
       78 CC 78 30 
       30 30 78 00 
       18 18 18 18 
       18 18 18 18 
       18 18 18 F8 
       18 18 18 18 
       18 30 78 CC 
       CC CC 78 00 
       78 CC 78 CC 
       CC CC 78 00 
       00 6C 38 38 
       6C 00 00 00 
       18 30 CC CC 
       CC CC 78 00 
       18 30 CC CC 
       78 30 78 00 
       18 30 CC CC 
       CC 7C 0C F8 
       38 6C C6 FE 
       C6 CE 18 0E 
       6C 38 7C C6 
       C0 C0 C6 7C 
       00 CC 78 78 
       CC C0 CC 78 
       F8 6C 66 F6 
       66 6C F8 00 
       00 00 00 F8 
       18 18 18 18 
       18 18 18 1F 
       00 00 00 00 
       18 18 18 FF 
       00 00 00 00 
       00 00 00 FF 
       18 18 18 18 
       18 18 18 1F 
       18 18 18 18 
       00 00 00 FF 
       00 00 00 00 
       18 18 18 FF 
       18 18 18 18 
       00 0C 3E 0C 
       7C CC CC 76 
       FE 66 60 78 
       60 66 FE 1C 
       00 00 7C C6 
       FE C0 7A 1E 
       48 78 84 60 
       18 84 78 00 
       78 00 7C C0 
       78 0C F8 00 
       6C FE CC 18 
       30 66 FE 00 
       78 00 FC 98 
       30 64 FC 00 
       6C 38 00 00 
       00 00 00 00 
       18 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 10 1C 
       00 00 00 00 
       FE 00 00 00 
       00 38 30 18 
       00 00 00 00 
       00 38 18 70 
       00 00 00 00 
       00 00 00 00 
       00 38 18 70 
       66 CC EE 00 
       00 00 00 00 
       00 EE 66 CC 
       00 00 00 00 
       00 00 00 00 
       00 EE 66 CC 
       00 00 18 30 
       60 30 18 00 
       00 00 30 18 
       0C 18 30 00 
       18 18 18 F8 
       00 00 00 00 
       00 00 00 1F 
       18 18 18 18 
       FF FF FF FF 
       FF FF FF FF 
       38 64 F0 60 
       F0 64 38 00 
       00 0C FE 18 
       30 FE 60 00 
       60 30 78 CC 
       FC CC CC 00 
       60 30 FE 62 
       78 62 FE 00 
       38 6C FE 62 
       78 62 FE 00 
       7C C6 C6 CC 
       C6 D6 DC 80 
       CC 00 78 30 
       30 30 78 00 
       00 C0 7C 6E 
       6C 6C 6C 00 
       76 D8 D8 DC 
       D8 D8 76 00 
       00 00 6E D8 
       DE D8 6E 00 
       00 00 CC CC 
       CC CC F6 C0 
       60 30 CC CC 
       CC CC 78 00 
       78 CC 00 CC 
       CC CC 78 00 
       CC 00 CC CC 
       78 30 78 00 
       60 E0 60 60 
       F0 00 00 00 
       70 D8 30 D8 
       70 00 00 00 
       CC 00 CC 78 
       30 30 78 00 
       06 06 36 66 
       FE 60 30 00 
       10 38 7C FE 
       7C 38 10 00 
       A0 A0 E0 AE 
       A4 04 04 04 
       80 80 80 8E 
       E8 0C 08 08 
       30 30 FC 30 
       30 00 FC 00 
       60 30 18 30 
       60 00 FC 00 
       18 30 60 30 
       18 00 FC 00 
       08 14 10 10 
       10 10 10 10 
       10 10 10 10 
       10 50 20 00 
       00 30 00 FC 
       00 30 00 00 
       00 76 DC 00 
       76 DC 00 00 
       70 D8 70 00 
       00 00 00 00 
       00 00 00 30 
       30 00 00 00 
       00 00 00 18 
       18 00 00 00 
       1F 10 10 90 
       50 30 10 00 
       A0 D0 90 90 
       90 00 00 00 
       70 D8 30 60 
       F8 00 00 00 
       00 00 3C 3C 
       3C 3C 00 00 
       A0 A0 A0 AE 
       44 04 04 04 
040DC5             0004*   font_data_end:
040DC5             0005*   font_load:
040DC5             0006*   ; load font into a buffer
040DC5 21 10 FA 00 0007*       ld hl,Lat2_VGA8_8x8
040DC9 11 C5 05 04 0008*       ld de,font_data
040DCD 01 00 08 00 0009*       ld bc,font_data_end-font_data
040DD1 CD EE 1C 04 0010*       call vdu_load_buffer
040DD5             0011*   ; create font from buffer
040DD5 21 10 FA 00 0012*       ld hl,Lat2_VGA8_8x8
040DD9 1E 08       0013*       ld e,8
040DDB 16 08       0014*       ld d,8
040DDD 3E 00       0015*       ld a,0 ; flags
040DDF CD AA 1F 04 0016*       call vdu_font_create
040DE3             0017*   ; all done
040DE3 C9          0018*       ret
040DE4             0036        include "fixed168.inc"
040DE4             0001*   ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040DE4             0002*   ; uses EZ80 MLT instruction for speed
040DE4             0003*   ; operation: UHL * A --> UHL
040DE4             0004*   ; destroys: AF, HL
040DE4             0005*   smul24x8:
040DE4             0006*   ; make hl positive and store sign flag
040DE4 CD 70 04 04 0007*       call hlu_abs
040DE8 F5          0008*       push af
040DE9             0009*   ; do the division
040DE9 CD F4 0D 04 0010*       call mul24x8 ; hl = product
040DED             0011*   ; adjust sign of result
040DED F1          0012*       pop af ; sign de
040DEE F0          0013*       ret p ; hl was positive, nothing to do
040DEF CD 80 04 04 0014*       call neg_hlu ; result is negative
040DF3 C9          0015*       ret
040DF4             0016*   
040DF4             0017*   ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040DF4             0018*   ; uses EZ80 MLT instruction for speed
040DF4             0019*   ; operation: UHL * A --> AUHL
040DF4             0020*   ; destroys: AF, HL
040DF4             0021*   mul24x8:
040DF4 D5          0022*       push de ; preserve de
040DF5             0023*   ; low byte
040DF5 5D          0024*       ld e,l
040DF6 57          0025*       ld d,a
040DF7 ED 5C       0026*       mlt de
040DF9 6B          0027*       ld l,e ; product low byte
040DFA 08          0028*       ex af,af' ; save multiplier
040DFB 7A          0029*       ld a,d ; carry
040DFC 08          0030*       ex af,af' ; save carry, restore multiplier
040DFD             0031*   ; high byte
040DFD 5C          0032*       ld e,h
040DFE 57          0033*       ld d,a
040DFF ED 5C       0034*       mlt de
040E01 08          0035*       ex af,af' ; save multiplier, restore carry
040E02 83          0036*       add a,e ; add carry
040E03 67          0037*       ld h,a ; product middle byte
040E04 7A          0038*       ld a,d ; carry
040E05 08          0039*       ex af,af' ; save carry, restore multiplier
040E06             0040*   ; upper byte
040E06 22 21 0E 04 0041*       ld (@scratch),hl ; 7 cycles
040E0A 5F          0042*       ld e,a
040E0B 3A 23 0E 04 0043*       ld a,(@scratch+2)
040E0F 57          0044*       ld d,a
040E10 ED 5C       0045*       mlt de
040E12 08          0046*       ex af,af' ; restore carry
040E13 8B          0047*       adc a,e ; add carry
040E14 32 23 0E 04 0048*       ld (@scratch+2),a ; 5 cycles
040E18 2A 21 0E 04 0049*       ld hl,(@scratch) ; 7 cycles
040E1C             0050*   ; highest byte
040E1C 3E 00       0051*       ld a,0 ; preserve carry flag
040E1E 8A          0052*       adc a,d ; product highest byte
040E1F D1          0053*       pop de ; restore de
040E20 C9          0054*       ret
040E21             0055*   @scratch: ds 3
040E24             0056*   
       FF FF FF 
040E24 00 00 00 00 0057*   mul24out: blkb 6,0
       00 00       
040E2A             0058*   
040E2A             0059*   ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
040E2A             0060*   ; operation: UHL * UDE --> mul24out
040E2A             0061*   mul24:
040E2A DD E5       0062*       push ix ; preserve
040E2C             0063*   ; point to output buffer and clear it
040E2C DD 21 24 0E 0064*       ld ix,mul24out
       04          
040E31 C5          0065*       push bc
040E32 01 00 00 00 0066*       ld bc,0
040E36 DD 0F 00    0067*       ld (ix),bc
040E39 DD 0F 03    0068*       ld (ix+3),bc
040E3C C1          0069*       pop bc
040E3D             0070*   ; STEP 1: UHL * E
040E3D 7B          0071*       ld a,e
040E3E E5          0072*       push hl
040E3F CD F4 0D 04 0073*       call mul24x8
040E43 DD 2F 00    0074*       ld (ix+0),hl
040E46 DD 77 03    0075*       ld (ix+3),a
040E49             0076*   ; STEP 2: UHL * D
040E49 E1          0077*       pop hl
040E4A E5          0078*       push hl
040E4B 7A          0079*       ld a,d
040E4C CD F4 0D 04 0080*       call mul24x8
040E50 CD 69 0E 04 0081*       call @accumulate
040E54             0082*   ; STEP 3: UHL * DEU
040E54 E1          0083*       pop hl
040E55 ED 53 99 0E 0084*       ld (@de),de
       04          
040E5A 3A 9B 0E 04 0085*       ld a,(@de+2)
040E5E CD F4 0D 04 0086*       call mul24x8
040E62 CD 69 0E 04 0087*       call @accumulate
040E66             0088*   ; all done
040E66 DD E1       0089*       pop ix ; restore
040E68 C9          0090*       ret
040E69             0091*   @accumulate:
040E69 DD 23       0092*       inc ix
040E6B             0093*   ; highest byte of product to carry
040E6B DD 77 03    0094*       ld (ix+3),a
040E6E             0095*   ; low byte of product
040E6E 7D          0096*       ld a,l
040E6F DD 86 00    0097*       add a,(ix+0)
040E72 DD 77 00    0098*       ld (ix+0),a
040E75             0099*   ; high byte of product
040E75 7C          0100*       ld a,h
040E76 DD 8E 01    0101*       adc a,(ix+1)
040E79 DD 77 01    0102*       ld (ix+1),a
040E7C             0103*   ; uppper byte of product
040E7C 22 96 0E 04 0104*       ld (@hl),hl
040E80 3A 98 0E 04 0105*       ld a,(@hl+2)
040E84 DD 8E 02    0106*       adc a,(ix+2)
040E87 DD 77 02    0107*       ld (ix+2),a
040E8A             0108*   ; carry
040E8A 3E 00       0109*       ld a,0 ; preserve flags
040E8C DD 8E 03    0110*       adc a,(ix+3)
040E8F DD 77 03    0111*       ld (ix+3),a
040E92 C9          0112*       ret
040E93             0113*   
040E93 00 00 00    0114*   @ix: dl 0
040E96 00 00 00    0115*   @hl: dl 0
040E99 00 00 00    0116*   @de: dl 0
040E9C             0117*   
040E9C             0118*   ; ; UHL * UDE --> UHL (unsigned)
040E9C             0119*   ; umul24:
040E9C             0120*   ;     call mul24
040E9C             0121*   ;     ld hl,(mul24out)
040E9C             0122*   ;     ret
040E9C             0123*   
040E9C             0124*   ; UH.L = UH.L*UD.E (unsigned)
040E9C             0125*   umul168:
040E9C CD 2A 0E 04 0126*       call mul24
040EA0 2A 25 0E 04 0127*       ld hl,(mul24out+1)
040EA4 C9          0128*       ret
040EA5             0129*   
040EA5             0130*   ; UH.L * UD.E --> UH.L (signed)
040EA5             0131*   smul168:
040EA5             0132*   ; make everything positive and store sign flags
040EA5 CD 70 04 04 0133*       call hlu_abs
040EA9 F5          0134*       push af
040EAA EB          0135*       ex de,hl
040EAB CD 70 04 04 0136*       call hlu_abs
040EAF EB          0137*       ex de,hl
040EB0 F5          0138*       push af
040EB1             0139*   ; do the division
040EB1 CD 9C 0E 04 0140*       call umul168 ; hl = product
040EB5             0141*   ; adjust sign of result
040EB5 F1          0142*       pop af ; sign de
040EB6 FA C1 0E 04 0143*       jp m,@de_neg
040EBA F1          0144*       pop af ; sign hl
040EBB F0          0145*       ret p ; both positive, nothing to do
040EBC             0146*   @hl_neg:
040EBC CD 80 04 04 0147*       call neg_hlu ; de pos, hl neg, result is negative
040EC0 C9          0148*       ret
040EC1             0149*   @de_neg:
040EC1 F1          0150*       pop af
040EC2 F8          0151*       ret m ; both negative, nothing to do
040EC3 CD 80 04 04 0152*       call neg_hlu ; result is negative
040EC7 C9          0153*       ret
040EC8             0154*   
040EC8             0155*   ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040EC8             0156*   ; perform unsigned division of 16.8 fixed place values
040EC8             0157*   ; with an unsigned 16.8 fixed place result and 24-bit remainder
040EC8             0158*   udiv168:
040EC8             0159*   ; back up divisor
040EC8 ED 53 FF 0E 0160*       ld (@ude),de
       04          
040ECD             0161*   ; get the 16-bit integer part of the quotient
040ECD CD 80 03 04 0162*       call udiv24 ; de = quotient, hl = remainder
040ED1             0163*   ; load quotient to upper three bytes of output
040ED1 ED 53 06 0F 0164*       ld (div168_out+1),de
       04          
040ED6             0165*   @div256:
040ED6             0166*   ; multiply remainder by 256
040ED6             0167*       hlu_mul256
                       M1 Args: none
040ED6 29          0001*M1     add hl,hl ; * 2
040ED7 29          0002*M1     add hl,hl ; * 4
040ED8 29          0003*M1     add hl,hl ; * 8
040ED9 29          0004*M1     add hl,hl ; * 16
040EDA 29          0005*M1     add hl,hl ; * 32
040EDB 29          0006*M1     add hl,hl ; * 64
040EDC 29          0007*M1     add hl,hl ; * 128
040EDD 29          0008*M1     add hl,hl ; * 256
040EDE             0168*   ; skip fractional computation if remainder is zero
040EDE             0169*       SIGN_HLU
                       M1 Args: none
040EDE 19          0001*M1     add hl,de ; 1 cycle
040EDF B7          0002*M1     or a ; clear flags ; 1 cycle
040EE0 ED 52       0003*M1     sbc hl,de ; 2 cycles
040EE2             0004*M1     ; 4 cycles total
040EE2 20 03       0170*       jr nz,@div_frac
040EE4 AF          0171*       xor a
040EE5 18 0A       0172*       jr @write_frac
040EE7             0173*   ; now divide the shifted remainder by the divisor
040EE7             0174*   @div_frac:
040EE7 ED 5B FF 0E 0175*       ld de,(@ude) ; get back divisor
       04          
040EEC CD 80 03 04 0176*       call udiv24 ; de = quotient, hl = remainder
040EF0             0177*   ; load low byte of quotient to low byte of output
040EF0 7B          0178*       ld a,e
040EF1             0179*   @write_frac:
040EF1 32 05 0F 04 0180*       ld (div168_out),a
040EF5             0181*   ; load de with return value
040EF5 ED 5B 05 0F 0182*       ld de,(div168_out)
       04          
040EFA             0183*   ; load a with any overflow
040EFA 3A 08 0F 04 0184*       ld a,(div168_out+3)
040EFE C9          0185*       ret ; ud.e is the 16.8 result
040EFF             0186*   @ude: ds 6
040F05             0187*   div168_out: ds 4 ; the extra byte is for overflow
040F09             0188*   
040F09             0189*   ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
040F09             0190*   ; perform signed division of 16.8 fixed place values
040F09             0191*   ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
040F09             0192*   sdiv168:
040F09             0193*   ; make everything positive and store sign flags
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
040F09 CD 70 04 04 0194*       call hlu_abs
040F0D F5          0195*       push af
040F0E EB          0196*       ex de,hl
040F0F CD 70 04 04 0197*       call hlu_abs
040F13 EB          0198*       ex de,hl
040F14 F5          0199*       push af
040F15             0200*   ; do the division
040F15 CD C8 0E 04 0201*       call udiv168 ; de = quotient, hl = remainder
040F19             0202*   ; adjust sign of result
040F19 F1          0203*       pop af ; sign de
040F1A FA 27 0F 04 0204*       jp m,@de_neg
040F1E F1          0205*       pop af ; sign hl
040F1F F0          0206*       ret p ; both positive, nothing to do
040F20             0207*   @hl_neg:
040F20 EB          0208*       ex de,hl ; hl = quotient, de = remainder
040F21 CD 80 04 04 0209*       call neg_hlu ; de pos, hl neg, result is negative
040F25 EB          0210*       ex de,hl ; de = negated quotient, hl = remainder
040F26 C9          0211*       ret
040F27             0212*   @de_neg:
040F27 F1          0213*       pop af
040F28 F8          0214*       ret m ; both negative, nothing to do
040F29 EB          0215*       ex de,hl ; hl = quotient, de = remainder
040F2A CD 80 04 04 0216*       call neg_hlu ; result is negative
040F2E EB          0217*       ex de,hl ; de = negated quotient, hl = remainder
040F2F C9          0218*       ret
040F30             0219*   
040F30             0220*   ; convert signed angles from a 360 to 256 degree circle
040F30             0221*   ; inputs: uh.l is the angle360 in 16.8 fixed format
040F30             0222*   ; outputs: uh.l is the angle256 in 16.8 fixed format
040F30             0223*   ; destroys: TODO
040F30             0224*   deg_360_to_256:
040F30 D5          0225*       push de ; preserve de
040F31             0226*   ; make angle positive and store sign flag
040F31 CD 70 04 04 0227*       call hlu_abs
040F35 F5          0228*       push af
040F36             0229*   ; multiply by coversion factor of 256/360
040F36 11 B6 00 00 0230*       ld de,0x0000B6 ; 0.711
040F3A CD 9C 0E 04 0231*       call umul168 ; uh.l = uh.l * 0.711
040F3E             0232*   ; restore sign flag and adjust output accordingly
040F3E F1          0233*       pop af
040F3F F2 47 0F 04 0234*       jp p,@pos ; positive number
040F43 CD 80 04 04 0235*       call neg_hlu
040F47             0236*   @pos:
040F47             0237*   ; restore de and return uh.l as the result
040F47 D1          0238*       pop de
040F48 C9          0239*       ret
040F49             0240*   
040F49             0241*   ; convert signed angles from a 256 to 360 degree circle
040F49             0242*   ; inputs: uh.l is the angle256 in 16.8 fixed format
040F49             0243*   ; outputs: uh.l is the angle360 in 16.8 fixed format
040F49             0244*   ; destroys: TODO
040F49             0245*   deg_256_to_360:
040F49 D5          0246*       push de ; preserve de
040F4A             0247*   ; make angle positive and store sign flag
040F4A CD 70 04 04 0248*       call hlu_abs
040F4E F5          0249*       push af
040F4F             0250*   ; multiply by coversion factor of 360/256
040F4F 11 68 01 00 0251*       ld de,0x000168 ; 1.406
040F53 CD 9C 0E 04 0252*       call umul168 ; uh.l = uh.l * 1.406
040F57             0253*   ; restore sign flag and adjust output accordingly
040F57 F1          0254*       pop af
040F58 F2 60 0F 04 0255*       jp p,@pos ; positive number
040F5C CD 80 04 04 0256*       call neg_hlu
040F60             0257*   @pos:
040F60             0258*   ; restore de and return uh.l as the result
040F60 D1          0259*       pop de
040F61 C9          0260*       ret
040F62             0261*   
040F62             0262*   ; fixed 16.8 routine
040F62             0263*   ; cos(uh.l) --> uh.l
040F62             0264*   ; destroys: f, hl
040F62             0265*   cos168:
040F62 D5          0266*       push de ; preserve de
040F63             0267*   ; for cos we simply increment the angle by 90 degrees
040F63             0268*   ; or 0x004000 in 16.8 degrees256
040F63             0269*   ; which makes it a sin problem
040F63 11 00 40 00 0270*       ld de,0x004000
040F67 19          0271*       add hl,de ; modulo 256 happens below
040F68 D1          0272*       pop de ; restore de
040F69             0273*   ; fall through to sin168
040F69             0274*   
040F69             0275*   ; ---------------------
040F69             0276*   ; fixed 16.8 routine
040F69             0277*   ; sin(uh.l) --> uh.l
040F69             0278*   ; destroys: f, hl
040F69             0279*   sin168:
040F69 D5          0280*       push de
040F6A             0281*   ; handle negative angles appropriately
040F6A CD 70 04 04 0282*       call hlu_abs
040F6E F2 77 0F 04 0283*       jp p,@F
040F72 11 00 00 FF 0284*       ld de,-256*256
040F76 19          0285*       add hl,de
040F77             0286*   @@:
040F77 2E 03       0287*       ld l,3 ; multiply by 3 to get our lookup index
040F79 ED 6C       0288*       mlt hl
040F7B 11 2F 12 04 0289*       ld de,sin_lut_168 ; grab the lut address
040F7F 19          0290*       add hl,de ; bump hl by the index
040F80 ED 27       0291*       ld hl,(hl) ; don't try this on a z80!
040F82 D1          0292*       pop de
040F83 C9          0293*       ret
040F84             0294*   
040F84             0295*   ; 16.8 fixed inputs / outputs
040F84             0296*   ; takes: uh.l as angle in degrees 256
040F84             0297*   ;        ud.e as radius
040F84             0298*   ; returns ub.c as dx, ud.e as dy, uh.l as radius
040F84             0299*   ;        displacements from origin (0,0)
040F84             0300*   ; destroys: everything except indexes
040F84             0301*   polar_to_cartesian:
040F84             0302*   ; back up input parameters
040F84 22 B3 0F 04 0303*       ld (@angle), hl
040F88 ED 53 B6 0F 0304*       ld (@radius), de
       04          
040F8D             0305*   ; compute dx = sin(uh.l) * ud.e
040F8D CD 69 0F 04 0306*       call sin168 ; uh.l = sin(uh.l)
040F91 ED 5B B6 0F 0307*       ld de,(@radius)
       04          
040F96 CD A5 0E 04 0308*       call smul168 ; uh.l = dx
040F9A E5          0309*       push hl
040F9B             0310*   ; compute dy = -cos(uh.l) * ud.e
040F9B 2A B3 0F 04 0311*       ld hl,(@angle)
040F9F CD 62 0F 04 0312*       call cos168 ; uh.l = cos(uh.l)
040FA3 ED 5B B6 0F 0313*       ld de,(@radius)
       04          
040FA8 CD A5 0E 04 0314*       call smul168 ; uh.l = dy
040FAC CD 80 04 04 0315*       call neg_hlu ; invert dy for screen coords convention
040FB0 EB          0316*       ex de,hl ; de = dy for output
040FB1 C1          0317*       pop bc ; bc = dx for output
040FB2             0318*   ; and out
040FB2 C9          0319*       ret
040FB3             0320*   @angle: ds 3
040FB6             0321*   @radius: ds 3
040FB9             0322*   
040FB9             0323*   ; 16.8 fixed inputs / outputs
040FB9             0324*   ; inputs: ub.c as dx, ud.e as dy
040FB9             0325*   ;        displacements from origin (0,0)
040FB9             0326*   ; returns: uh.l as angle in degrees 256
040FB9             0327*   ;        ud.e as radius
040FB9             0328*   ; destroys: everything except indexes
040FB9             0329*   cartesian_to_polar:
       FF FF FF FF 
       FF FF 
040FB9 ED 43 12 10 0330*       ld (dx168),bc ; dx argument for distance168
       04          
040FBE ED 53 18 10 0331*       ld (dy168),de ; dy argument for distance168
       04          
040FC3             0332*   ; compute radius
040FC3 CD 1E 10 04 0333*       call distance168 ; uh.l = radius
040FC7 E5          0334*       push hl ; save radius
040FC8             0335*   ; compute angle
040FC8 ED 4B 12 10 0336*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040FCD ED 5B 18 10 0337*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040FD2 CD 7E 10 04 0338*       call atan2_168fast ; uh.l = angle
040FD6             0339*   ; return result
040FD6 D1          0340*       pop de ; de = radius (was hl)
040FD7 C9          0341*       ret
040FD8             0342*   ; end cartesian_to_polar
040FD8             0343*   
040FD8             0344*   ; 16.8 fixed inputs / outputs
040FD8             0345*   ; inputs: ub.c as dx, ud.e as dy
040FD8             0346*   ;        displacements from origin (0,0)
040FD8             0347*   ; returns: uh.l as angle in degrees 256
040FD8             0348*   ;        ud.e as radius
040FD8             0349*   ; destroys: everything except indexes
040FD8             0350*   ; note: uses distance168sm which is more accurate for small deltas
040FD8             0351*   cartesian_to_polar_sm:
040FD8 ED 43 12 10 0352*       ld (dx168),bc ; dx argument for distance168
       04          
040FDD ED 53 18 10 0353*       ld (dy168),de ; dy argument for distance168
       04          
040FE2             0354*   ; compute radius
040FE2 CD 59 10 04 0355*       call distance168sm ; uh.l = radius
040FE6 E5          0356*       push hl ; save radius
040FE7             0357*   ; compute angle
040FE7 ED 4B 12 10 0358*       ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040FEC ED 5B 18 10 0359*       ld de,(dy168) ; dy argument for atan2_168fast
       04          
040FF1 CD 7E 10 04 0360*       call atan2_168fast ; uh.l = angle
040FF5             0361*   ; return result
040FF5 D1          0362*       pop de ; de = radius (was hl)
040FF6 C9          0363*       ret
040FF7             0364*   ; end cartesian_to_polar
040FF7             0365*   
040FF7             0366*   ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
040FF7             0367*   ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
040FF7             0368*   ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
040FF7             0369*   ;         also populates scratch locations dx168 and dy168
040FF7             0370*   ; destroys: a,hl,bc,de
040FF7             0371*   dxy168:
040FF7             0372*   ; compute dx = x1-x0
040FF7 AF          0373*       xor a ; clear carry
040FF8 DD E5       0374*       push ix ; move ix to hl via the stack
040FFA E1          0375*       pop hl ; hl = x1
040FFB ED 42       0376*       sbc hl,bc ; hl = dx
040FFD 22 12 10 04 0377*       ld (dx168),hl ; dx to scratch
041001             0378*   ; compute dy = y1-y0
041001 AF          0379*       xor a ; clear carry
041002 FD E5       0380*       push iy ; move iy to hl via the stack
041004 E1          0381*       pop hl ; hl = y1
041005 ED 52       0382*       sbc hl,de ; hl = dy
041007 22 18 10 04 0383*       ld (dy168),hl ; dy to scratch
04100B             0384*   ; populate output registers and return
04100B EB          0385*       ex de,hl ; ud.e = dy
04100C ED 4B 12 10 0386*       ld bc,(dx168) ; ub.c = dx
       04          
041011 C9          0387*       ret
041012 00 00 00 00 0388*   dx168: blkb 6,0
       00 00       
041018 00 00 00 00 0389*   dy168: blkb 6,0
       00 00       
04101E             0390*   
04101E             0391*   ; compute the euclidian distance between two cartesian coordinates
04101E             0392*   ; using the formula d = sqrt(dx^2+dy^2)
04101E             0393*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
04101E             0394*   ; output; uh.l is the 16.8 fixed format distance
04101E             0395*   ;         also populates scratch locations dx168 and dy168
04101E             0396*   ; destroys: a,hl,bc,de
04101E             0397*   ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
04101E             0398*   ;       thus the result will always be an integer, albeit in 16.8 format
04101E             0399*   distance168:
04101E             0400*   ; compute dy^2
04101E 2A 18 10 04 0401*       ld hl,(dy168)
041022 CD 70 04 04 0402*       call hlu_abs
041026             0403*       ; call hlu_udiv256 ; make integer to avoid overflow
041026             0404*       SRL_UHL ; make integer to avoid overflow
                       M1 Args: none
041026 3B          0001*M1     dec sp ; 1 cycle
041027 E5          0002*M1     push hl ; 4 cycles
041028 33          0003*M1     inc sp ; 1 cycle
041029 E1          0004*M1     pop hl ; 4 cycles
04102A 23          0005*M1     inc hl ; 1 cycle
04102B 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
04102D             0007*M1     ; 13 cycles total
04102D E5          0405*       push hl
04102E D1          0406*       pop de
04102F CD 67 03 04 0407*       call umul24 ; hl = dy^2
041033 E5          0408*       push hl ; save dy^2
041034             0409*   ; compute dx^2
041034 2A 12 10 04 0410*       ld hl,(dx168)
041038 CD 70 04 04 0411*       call hlu_abs
04103C             0412*       ; call hlu_udiv256 ; make integer to avoid overflow
04103C             0413*       SRL_UHL ; make integer to avoid overflow
                       M1 Args: none
04103C 3B          0001*M1     dec sp ; 1 cycle
04103D E5          0002*M1     push hl ; 4 cycles
04103E 33          0003*M1     inc sp ; 1 cycle
04103F E1          0004*M1     pop hl ; 4 cycles
041040 23          0005*M1     inc hl ; 1 cycle
041041 52 2B       0006*M1     dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
041043             0007*M1     ; 13 cycles total
041043 E5          0414*       push hl
041044 D1          0415*       pop de
041045 CD 67 03 04 0416*       call umul24 ; hl = dx^2
041049             0417*   ; add dx^2 and dy^2
041049 D1          0418*       pop de ; de = dy^2 (was hl)
04104A 19          0419*       add hl,de ; hl = dx^2 + dy^2
04104B             0420*   ; compute the square root
04104B CD 49 11 04 0421*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
04104F EB          0422*       ex de,hl ; hl = distance
041050             0423*       hlu_mul256 ; convert back to 16.8 fixed
                       M1 Args: none
041050 29          0001*M1     add hl,hl ; * 2
041051 29          0002*M1     add hl,hl ; * 4
041052 29          0003*M1     add hl,hl ; * 8
041053 29          0004*M1     add hl,hl ; * 16
041054 29          0005*M1     add hl,hl ; * 32
041055 29          0006*M1     add hl,hl ; * 64
041056 29          0007*M1     add hl,hl ; * 128
041057 29          0008*M1     add hl,hl ; * 256
041058 C9          0424*       ret
041059             0425*   
041059             0426*   ; compute the euclidian distance between two cartesian coordinates
041059             0427*   ; using the formula d = sqrt(dx^2+dy^2)
041059             0428*   ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
041059             0429*   ; output; uh.l is the 16.8 fixed format distance
041059             0430*   ;         also populates scratch locations dx168 and dy168
041059             0431*   ; destroys: a,hl,bc,de
041059             0432*   ; NOTE: sm means 'small' because it doesn't round down the deltas
041059             0433*   ;       making it more accurate for small deltas,
041059             0434*   ;       but will overflow if used for screen-sized deltas
041059             0435*   distance168sm:
041059             0436*   ; compute dy^2
041059 2A 18 10 04 0437*       ld hl,(dy168)
04105D CD 70 04 04 0438*       call hlu_abs
041061 E5          0439*       push hl
041062 D1          0440*       pop de
041063 CD 67 03 04 0441*       call umul24 ; hl = dy^2
041067 E5          0442*       push hl ; save dy^2
041068             0443*   ; compute dx^2
041068 2A 12 10 04 0444*       ld hl,(dx168)
04106C CD 70 04 04 0445*       call hlu_abs
041070 E5          0446*       push hl
041071 D1          0447*       pop de
041072 CD 67 03 04 0448*       call umul24 ; hl = dx^2
041076             0449*   ; add dx^2 and dy^2
041076 D1          0450*       pop de ; de = dy^2 (was hl)
041077 19          0451*       add hl,de ; hl = dx^2 + dy^2
041078             0452*   ; compute the square root
041078 CD 49 11 04 0453*       call sqrt24 ; de = sqrt(dx^2 + dy^2)
04107C EB          0454*       ex de,hl ; hl = distance
04107D C9          0455*       ret
04107E             0456*   
04107E             0457*   ; atan2_(ub.c,ud.e) --> uh.l
04107E             0458*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
04107E             0459*   ;   whether inputs are integers or fractional doesn't matter
04107E             0460*   ;   so long as the sign bit of the upper byte is correct
04107E             0461*   ; output: uh.l is the 16.8 fixed angle in degrees 256
04107E             0462*   ; angles are COMPASS HEADINGS based on
04107E             0463*   ; screen coordinate conventions,where the y axis is flipped
04107E             0464*   ; #E0 224      0       32 #20
04107E             0465*   ;        -x,-y | +x,-y
04107E             0466*   ; #C0 192------+------ 64 #40
04107E             0467*   ;        -x,+y | +x,+y
04107E             0468*   ; #A0 160   128 #80   96 #60
04107E             0469*   atan2_168fast:
04107E             0470*   ; get signs and make everything positive
04107E             0471*   ; get abs(x) and store its original sign
04107E C5          0472*       push bc
04107F E1          0473*       pop hl
041080 CD 70 04 04 0474*       call hlu_abs ; if x was negative this also sets the sign flag
041084 E5          0475*       push hl ; store abs(x)
041085 C1          0476*       pop bc ; bc = abs(x)
041086 F5          0477*       push af ; store sign of x
041087             0478*   ; get abs(y) and store its original sign
041087 EB          0479*       ex de,hl ; hl = y
041088 CD 70 04 04 0480*       call hlu_abs ; if y was negative this also sets the sign flag
04108C EB          0481*       ex de,hl ; de = abs(y)
04108D F5          0482*       push af ; store sign of y
04108E             0483*   ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
04108E             0484*   ; this ensures that our lookup value is between 0 and 1 inclusive
04108E AF          0485*       xor a ; clear the carry flag
04108F D5          0486*       push de
041090 E1          0487*       pop hl
041091 ED 42       0488*       sbc hl,bc
041093 F5          0489*       push af ; save sign of de - bc
041094 F2 9D 10 04 0490*       jp p,@1 ; bc <= de, so we skip ahead
041098             0491*   ; otherwise we swap bc and de
041098 C5          0492*       push bc
041099 E1          0493*       pop hl
04109A EB          0494*       ex de,hl
04109B E5          0495*       push hl
04109C C1          0496*       pop bc
04109D             0497*   @1:
04109D             0498*   ; now we're ready to snag our preliminary result
04109D C5          0499*       push bc
04109E E1          0500*       pop hl
04109F CD 0D 11 04 0501*       call atan_168fast ; uh.l comes back with prelim result
0410A3             0502*   ; now we adjust uh.l based on sign of de - bc
0410A3 F1          0503*       pop af
0410A4 F2 B0 10 04 0504*       jp p,@2 ; bc <= de,so we skip ahead
0410A8 EB          0505*       ex de,hl
0410A9 21 00 40 00 0506*       ld hl,64*256 ; subtract from 64 (90) degrees
0410AD AF          0507*       xor a ; clear the carry flag
0410AE ED 52       0508*       sbc hl,de
0410B0             0509*   @2:
0410B0             0510*   ; adjust the result based on quadrant
0410B0             0511*   ; #E0 224      0       32 #20
0410B0             0512*   ;        -x,-y | +x,-y
0410B0             0513*   ; #C0 192------+------ 64 #40
0410B0             0514*   ;        -x,+y | +x,+y
0410B0             0515*   ; #A0 160   128 #80   96 #60
0410B0 F1          0516*       pop af ; sign of y
0410B1 CA EE 10 04 0517*       jp z,@y_zero
0410B5 F2 CE 10 04 0518*       jp p,@y_pos
0410B9             0519*   ; y neg,check x
0410B9 F1          0520*       pop af ; sign of x
0410BA CA C8 10 04 0521*       jp z,@y_neg_x_zero
0410BE F2 CD 10 04 0522*       jp p,@y_neg_x_pos
0410C2             0523*   ; y neg,x neg
0410C2             0524*   ; angle is 128 to 256 (270 to 360)
0410C2             0525*   ; negating the intermediate does the trick
0410C2 CD 80 04 04 0526*       call neg_hlu
0410C6 18 31       0527*       jr @zero_hlu
0410C8             0528*   
0410C8             0529*   @y_neg_x_zero:
0410C8             0530*   ; y neg,x zero
0410C8             0531*   ; angle is 0
0410C8 21 00 00 00 0532*       ld hl,0
0410CC C9          0533*       ret
0410CD             0534*   @y_neg_x_pos:
0410CD             0535*   ; y neg,x pos
0410CD             0536*   ; angle is 0 to 64 (0 to 90)
0410CD             0537*   ; so we're good
0410CD C9          0538*       ret
0410CE             0539*   
0410CE             0540*   @y_pos:
0410CE F1          0541*       pop af ; sign of x
0410CF CA DE 10 04 0542*       jp z,@y_pos_x_zero
0410D3 F2 E3 10 04 0543*       jp p,@y_pos_x_pos
0410D7             0544*   ; y pos,x neg
0410D7             0545*   ; angle is 128 to 192 (180-270)
0410D7             0546*   ; so we add 128 to intermediate
0410D7 11 00 80 00 0547*       ld de,128*256
0410DB 19          0548*       add hl,de
0410DC 18 1B       0549*       jr @zero_hlu
0410DE             0550*   @y_pos_x_zero:
0410DE             0551*   ; y pos,x zero
0410DE             0552*   ; angle is 128 (180)
0410DE 21 00 80 00 0553*       ld hl,128*256
0410E2 C9          0554*       ret
0410E3             0555*   @y_pos_x_pos:
0410E3             0556*   ; y pos,x pos
0410E3             0557*   ; angle is 64 to 128 (90 to 180)
0410E3             0558*   ; neg the intermediate and add 180 degrees
0410E3 CD 80 04 04 0559*       call neg_hlu
0410E7 11 00 80 00 0560*       ld de,128*256
0410EB 19          0561*       add hl,de
0410EC 18 0B       0562*       jr @zero_hlu
0410EE             0563*   
0410EE             0564*   @y_zero:
0410EE F1          0565*       pop af ; sign of x
0410EF FA F4 10 04 0566*       jp m,@y_zero_x_neg
0410F3             0567*   ; y zero,x pos
0410F3             0568*   ; angle is 64 (90),nothing to do
0410F3 C9          0569*       ret
0410F4             0570*   @y_zero_x_neg:
0410F4             0571*   ; y zero ,x neg
0410F4             0572*   ; angle is 192 (270)
0410F4 21 00 C0 00 0573*       ld hl,192*256
0410F8 C9          0574*       ret
0410F9             0575*   @zero_hlu:
0410F9 AF          0576*       xor a
0410FA 22 07 11 04 0577*       ld (@scratch),hl
0410FE 32 09 11 04 0578*       ld (@scratch+2),a
041102 2A 07 11 04 0579*       ld hl,(@scratch)
041106 C9          0580*       ret
041107             0581*   @scratch: ds 6
04110D             0582*   
04110D             0583*   ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
04110D             0584*   ; output: uh.l is the 16.8 fixed format angle in degrees 256
04110D             0585*   ; destroys: a,hl,bc,de
04110D             0586*   ; note: only works for angles from 0 to 32 (45) degrees
04110D             0587*   ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
04110D             0588*   atan_168fast:
04110D             0589*   ; because we use compass headings instead of geometric angles
04110D             0590*   ; we compute dx/dy which is 1/tan(theta) in the maths world
04110D             0591*   ; we can do faster unsigned division here because we know dx and dy are positive
       FF FF FF FF 
       FF FF 
04110D CD C8 0E 04 0592*       call udiv168 ; ud.e = dx/dy
041111 EB          0593*       ex de,hl ; uh.l = dx/dy
041112             0594*   ; test uh.l for 0
041112 19          0595*       add hl,de
041113 B7          0596*       or a
041114 ED 52       0597*       sbc hl,de
041116 28 22       0598*       jr z,@is_zero
041118             0599*   ; test uh.l for 1
041118 AF          0600*       xor a ; clear carry
041119 EB          0601*       ex de,hl
04111A 21 00 01 00 0602*       ld hl,1*256 ; 1 in 16.8 fixed format
04111E ED 52       0603*       sbc hl,de
041120 28 13       0604*       jr z,@is_45
041122 EB          0605*       ex de,hl
041123             0606*   ; no special cases so we move on
041123             0607*   ; l contains the fractional portion of tan(uh.l)
041123             0608*   ; we multiply it by three to get our lookup table index
041123 26 03       0609*       ld h,3
041125 ED 6C       0610*       mlt hl ; index into lut
041127 11 00 00 00 0611*       ld de,0 ; clear deu
04112B 54          0612*       ld d,h ; copy hl to de
04112C 5D          0613*       ld e,l ; de contains our index
04112D 21 32 15 04 0614*       ld hl,atan_lut_168 ; grab the lut address
041131 19          0615*       add hl,de ; bump hl by the index
041132 ED 27       0616*       ld hl,(hl) ; don't try this on a z80!
041134 C9          0617*       ret ; and out
041135             0618*   @is_45:
041135 21 00 20 00 0619*       ld hl,32*256
041139 C9          0620*       ret
04113A             0621*   ; for the case tan(0)
04113A             0622*   @is_zero:
04113A 21 00 00 00 0623*       ld hl,0*256
04113E C9          0624*       ret
04113F             0625*   
04113F             0626*   ; Expects  ADL mode
04113F             0627*   ; Inputs:  UH.L
04113F             0628*   ; Outputs: UH.L is the 16.8 square root
04113F             0629*   ;          UDE is the integer difference inputHL-DE^2
04113F             0630*   sqrt168:
04113F CD 49 11 04 0631*       call sqrt24
041143 EB          0632*       ex de,hl
041144 29          0633*       add hl,hl
041145 29          0634*       add hl,hl
041146 29          0635*       add hl,hl
041147 29          0636*       add hl,hl
041148 C9          0637*       ret
041149             0638*   
041149             0639*   ; credit: xeda112358
041149             0640*   ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
041149             0641*   sqrt24:
041149             0642*   ; Expects ADL mode
041149             0643*   ; Inputs: HL
041149             0644*   ; Outputs: DE is the integer square root
041149             0645*   ;  HL is the difference inputHL-DE^2
041149             0646*   ;  c flag reset
041149 01 00 00 00 0647*       ld bc,0 ; clear bcu
04114D 11 00 00 00 0648*       ld de,0 ; clear deu
041151 AF          0649*       xor a
041152 45          0650*       ld b,l
041153 C5          0651*       push bc
041154 47          0652*       ld b,a
041155 6F          0653*       ld l,a
041156             0654*   ; Iteration 1
041156 29          0655*       add hl,hl
041157 CB 11       0656*       rl c
041159 29          0657*       add hl,hl
04115A CB 11       0658*       rl c
04115C 91          0659*       sub c
04115D 30 04       0660*       jr nc,$+6
04115F 1C          0661*       inc e
041160 1C          0662*       inc e
041161 2F          0663*       cpl
041162 4F          0664*       ld c,a
041163             0665*   ; Iteration 2
041163 29          0666*       add hl,hl
041164 CB 11       0667*       rl c
041166 29          0668*       add hl,hl
041167 CB 11       0669*       rl c
041169 CB 13       0670*       rl e
04116B 7B          0671*       ld a,e
04116C 91          0672*       sub c
04116D 30 04       0673*       jr nc,$+6
04116F 1C          0674*       inc e
041170 1C          0675*       inc e
041171 2F          0676*       cpl
041172 4F          0677*       ld c,a
041173             0678*   ; Iteration 3
041173 29          0679*       add hl,hl
041174 CB 11       0680*       rl c
041176 29          0681*       add hl,hl
041177 CB 11       0682*       rl c
041179 CB 13       0683*       rl e
04117B 7B          0684*       ld a,e
04117C 91          0685*       sub c
04117D 30 04       0686*       jr nc,$+6
04117F 1C          0687*       inc e
041180 1C          0688*       inc e
041181 2F          0689*       cpl
041182 4F          0690*       ld c,a
041183             0691*   ; Iteration 4
041183 29          0692*       add hl,hl
041184 CB 11       0693*       rl c
041186 29          0694*       add hl,hl
041187 CB 11       0695*       rl c
041189 CB 13       0696*       rl e
04118B 7B          0697*       ld a,e
04118C 91          0698*       sub c
04118D 30 04       0699*       jr nc,$+6
04118F 1C          0700*       inc e
041190 1C          0701*       inc e
041191 2F          0702*       cpl
041192 4F          0703*       ld c,a
041193             0704*   ; Iteration 5
041193 29          0705*       add hl,hl
041194 CB 11       0706*       rl c
041196 29          0707*       add hl,hl
041197 CB 11       0708*       rl c
041199 CB 13       0709*       rl e
04119B 7B          0710*       ld a,e
04119C 91          0711*       sub c
04119D 30 04       0712*       jr nc,$+6
04119F 1C          0713*       inc e
0411A0 1C          0714*       inc e
0411A1 2F          0715*       cpl
0411A2 4F          0716*       ld c,a
0411A3             0717*   ; Iteration 6
0411A3 29          0718*       add hl,hl
0411A4 CB 11       0719*       rl c
0411A6 29          0720*       add hl,hl
0411A7 CB 11       0721*       rl c
0411A9 CB 13       0722*       rl e
0411AB 7B          0723*       ld a,e
0411AC 91          0724*       sub c
0411AD 30 04       0725*       jr nc,$+6
0411AF 1C          0726*       inc e
0411B0 1C          0727*       inc e
0411B1 2F          0728*       cpl
0411B2 4F          0729*       ld c,a
0411B3             0730*   ; Iteration 7
0411B3 29          0731*       add hl,hl
0411B4 CB 11       0732*       rl c
0411B6 29          0733*       add hl,hl
0411B7 CB 11       0734*       rl c
0411B9 CB 10       0735*       rl b
0411BB EB          0736*       ex de,hl
0411BC 29          0737*       add hl,hl
0411BD E5          0738*       push hl
0411BE ED 42       0739*       sbc hl,bc
0411C0 30 06       0740*       jr nc,$+8
0411C2 7C          0741*       ld a,h
0411C3 2F          0742*       cpl
0411C4 47          0743*       ld b,a
0411C5 7D          0744*       ld a,l
0411C6 2F          0745*       cpl
0411C7 4F          0746*       ld c,a
0411C8 E1          0747*       pop hl
0411C9 30 02       0748*       jr nc,$+4
0411CB 23          0749*       inc hl
0411CC 23          0750*       inc hl
0411CD EB          0751*       ex de,hl
0411CE             0752*   ; Iteration 8
0411CE 29          0753*       add hl,hl
0411CF 69          0754*       ld l,c
0411D0 60          0755*       ld h,b
0411D1 ED 6A       0756*       adc hl,hl
0411D3 ED 6A       0757*       adc hl,hl
0411D5 EB          0758*       ex de,hl
0411D6 29          0759*       add hl,hl
0411D7 ED 52       0760*       sbc hl,de
0411D9 19          0761*       add hl,de
0411DA EB          0762*       ex de,hl
0411DB 30 04       0763*       jr nc,$+6
0411DD ED 52       0764*       sbc hl,de
0411DF 13          0765*       inc de
0411E0 13          0766*       inc de
0411E1             0767*   ; Iteration 9
0411E1 F1          0768*       pop af
0411E2 17          0769*       rla
0411E3 ED 6A       0770*       adc hl,hl
0411E5 17          0771*       rla
0411E6 ED 6A       0772*       adc hl,hl
0411E8 EB          0773*       ex de,hl
0411E9 29          0774*       add hl,hl
0411EA ED 52       0775*       sbc hl,de
0411EC 19          0776*       add hl,de
0411ED EB          0777*       ex de,hl
0411EE 30 04       0778*       jr nc,$+6
0411F0 ED 52       0779*       sbc hl,de
0411F2 13          0780*       inc de
0411F3 13          0781*       inc de
0411F4             0782*   ; Iteration 10
0411F4 17          0783*       rla
0411F5 ED 6A       0784*       adc hl,hl
0411F7 17          0785*       rla
0411F8 ED 6A       0786*       adc hl,hl
0411FA EB          0787*       ex de,hl
0411FB 29          0788*       add hl,hl
0411FC ED 52       0789*       sbc hl,de
0411FE 19          0790*       add hl,de
0411FF EB          0791*       ex de,hl
041200 30 04       0792*       jr nc,$+6
041202 ED 52       0793*       sbc hl,de
041204 13          0794*       inc de
041205 13          0795*       inc de
041206             0796*   ; Iteration 11
041206 17          0797*       rla
041207 ED 6A       0798*       adc hl,hl
041209 17          0799*       rla
04120A ED 6A       0800*       adc hl,hl
04120C EB          0801*       ex de,hl
04120D 29          0802*       add hl,hl
04120E ED 52       0803*       sbc hl,de
041210 19          0804*       add hl,de
041211 EB          0805*       ex de,hl
041212 30 04       0806*       jr nc,$+6
041214 ED 52       0807*       sbc hl,de
041216 13          0808*       inc de
041217 13          0809*       inc de
041218             0810*   ; Iteration 12
041218 17          0811*       rla
041219 ED 6A       0812*       adc hl,hl
04121B 17          0813*       rla
04121C ED 6A       0814*       adc hl,hl
04121E EB          0815*       ex de,hl
04121F 29          0816*       add hl,hl
041220 ED 52       0817*       sbc hl,de
041222 19          0818*       add hl,de
041223 EB          0819*       ex de,hl
041224 30 04       0820*       jr nc,$+6
041226 ED 52       0821*       sbc hl,de
041228 13          0822*       inc de
041229 13          0823*       inc de
04122A CB 1A       0824*       rr d
04122C CB 1B       0825*       rr e
04122E C9          0826*       ret
04122F             0827*   
04122F             0828*   sin_lut_168:
04122F 00 00 00    0829*       dl 0x000000 ; 0.000 00, 0.000
041232 06 00 00    0830*       dl 0x000006 ; 1.406 01, 0.025
041235 0C 00 00    0831*       dl 0x00000C ; 2.813 02, 0.049
041238 12 00 00    0832*       dl 0x000012 ; 4.219 03, 0.074
04123B 19 00 00    0833*       dl 0x000019 ; 5.625 04, 0.098
04123E 1F 00 00    0834*       dl 0x00001F ; 7.031 05, 0.122
041241 25 00 00    0835*       dl 0x000025 ; 8.438 06, 0.147
041244 2B 00 00    0836*       dl 0x00002B ; 9.844 07, 0.171
041247 31 00 00    0837*       dl 0x000031 ; 11.250 08, 0.195
04124A 38 00 00    0838*       dl 0x000038 ; 12.656 09, 0.219
04124D 3E 00 00    0839*       dl 0x00003E ; 14.063 0A, 0.243
041250 44 00 00    0840*       dl 0x000044 ; 15.469 0B, 0.267
041253 4A 00 00    0841*       dl 0x00004A ; 16.875 0C, 0.290
041256 50 00 00    0842*       dl 0x000050 ; 18.281 0D, 0.314
041259 56 00 00    0843*       dl 0x000056 ; 19.688 0E, 0.337
04125C 5C 00 00    0844*       dl 0x00005C ; 21.094 0F, 0.360
04125F 61 00 00    0845*       dl 0x000061 ; 22.500 10, 0.383
041262 67 00 00    0846*       dl 0x000067 ; 23.906 11, 0.405
041265 6D 00 00    0847*       dl 0x00006D ; 25.313 12, 0.428
041268 73 00 00    0848*       dl 0x000073 ; 26.719 13, 0.450
04126B 78 00 00    0849*       dl 0x000078 ; 28.125 14, 0.471
04126E 7E 00 00    0850*       dl 0x00007E ; 29.531 15, 0.493
041271 83 00 00    0851*       dl 0x000083 ; 30.938 16, 0.514
041274 88 00 00    0852*       dl 0x000088 ; 32.344 17, 0.535
041277 8E 00 00    0853*       dl 0x00008E ; 33.750 18, 0.556
04127A 93 00 00    0854*       dl 0x000093 ; 35.156 19, 0.576
04127D 98 00 00    0855*       dl 0x000098 ; 36.563 1A, 0.596
041280 9D 00 00    0856*       dl 0x00009D ; 37.969 1B, 0.615
041283 A2 00 00    0857*       dl 0x0000A2 ; 39.375 1C, 0.634
041286 A7 00 00    0858*       dl 0x0000A7 ; 40.781 1D, 0.653
041289 AB 00 00    0859*       dl 0x0000AB ; 42.188 1E, 0.672
04128C B0 00 00    0860*       dl 0x0000B0 ; 43.594 1F, 0.690
04128F B5 00 00    0861*       dl 0x0000B5 ; 45.000 20, 0.707
041292 B9 00 00    0862*       dl 0x0000B9 ; 46.406 21, 0.724
041295 BD 00 00    0863*       dl 0x0000BD ; 47.813 22, 0.741
041298 C1 00 00    0864*       dl 0x0000C1 ; 49.219 23, 0.757
04129B C5 00 00    0865*       dl 0x0000C5 ; 50.625 24, 0.773
04129E C9 00 00    0866*       dl 0x0000C9 ; 52.031 25, 0.788
0412A1 CD 00 00    0867*       dl 0x0000CD ; 53.438 26, 0.803
0412A4 D1 00 00    0868*       dl 0x0000D1 ; 54.844 27, 0.818
0412A7 D4 00 00    0869*       dl 0x0000D4 ; 56.250 28, 0.831
0412AA D8 00 00    0870*       dl 0x0000D8 ; 57.656 29, 0.845
0412AD DB 00 00    0871*       dl 0x0000DB ; 59.063 2A, 0.858
0412B0 DE 00 00    0872*       dl 0x0000DE ; 60.469 2B, 0.870
0412B3 E1 00 00    0873*       dl 0x0000E1 ; 61.875 2C, 0.882
0412B6 E4 00 00    0874*       dl 0x0000E4 ; 63.281 2D, 0.893
0412B9 E7 00 00    0875*       dl 0x0000E7 ; 64.688 2E, 0.904
0412BC EA 00 00    0876*       dl 0x0000EA ; 66.094 2F, 0.914
0412BF EC 00 00    0877*       dl 0x0000EC ; 67.500 30, 0.924
0412C2 EE 00 00    0878*       dl 0x0000EE ; 68.906 31, 0.933
0412C5 F1 00 00    0879*       dl 0x0000F1 ; 70.313 32, 0.942
0412C8 F3 00 00    0880*       dl 0x0000F3 ; 71.719 33, 0.950
0412CB F4 00 00    0881*       dl 0x0000F4 ; 73.125 34, 0.957
0412CE F6 00 00    0882*       dl 0x0000F6 ; 74.531 35, 0.964
0412D1 F8 00 00    0883*       dl 0x0000F8 ; 75.938 36, 0.970
0412D4 F9 00 00    0884*       dl 0x0000F9 ; 77.344 37, 0.976
0412D7 FB 00 00    0885*       dl 0x0000FB ; 78.750 38, 0.981
0412DA FC 00 00    0886*       dl 0x0000FC ; 80.156 39, 0.985
0412DD FD 00 00    0887*       dl 0x0000FD ; 81.563 3A, 0.989
0412E0 FE 00 00    0888*       dl 0x0000FE ; 82.969 3B, 0.992
0412E3 FE 00 00    0889*       dl 0x0000FE ; 84.375 3C, 0.995
0412E6 FF 00 00    0890*       dl 0x0000FF ; 85.781 3D, 0.997
0412E9 FF 00 00    0891*       dl 0x0000FF ; 87.188 3E, 0.999
0412EC FF 00 00    0892*       dl 0x0000FF ; 88.594 3F, 1.000
0412EF 00 01 00    0893*       dl 0x000100 ; 90.000 40, 1.000
0412F2 FF 00 00    0894*       dl 0x0000FF ; 91.406 41, 1.000
0412F5 FF 00 00    0895*       dl 0x0000FF ; 92.813 42, 0.999
0412F8 FF 00 00    0896*       dl 0x0000FF ; 94.219 43, 0.997
0412FB FE 00 00    0897*       dl 0x0000FE ; 95.625 44, 0.995
0412FE FE 00 00    0898*       dl 0x0000FE ; 97.031 45, 0.992
041301 FD 00 00    0899*       dl 0x0000FD ; 98.438 46, 0.989
041304 FC 00 00    0900*       dl 0x0000FC ; 99.844 47, 0.985
041307 FB 00 00    0901*       dl 0x0000FB ; 101.250 48, 0.981
04130A F9 00 00    0902*       dl 0x0000F9 ; 102.656 49, 0.976
04130D F8 00 00    0903*       dl 0x0000F8 ; 104.063 4A, 0.970
041310 F6 00 00    0904*       dl 0x0000F6 ; 105.469 4B, 0.964
041313 F4 00 00    0905*       dl 0x0000F4 ; 106.875 4C, 0.957
041316 F3 00 00    0906*       dl 0x0000F3 ; 108.281 4D, 0.950
041319 F1 00 00    0907*       dl 0x0000F1 ; 109.688 4E, 0.942
04131C EE 00 00    0908*       dl 0x0000EE ; 111.094 4F, 0.933
04131F EC 00 00    0909*       dl 0x0000EC ; 112.500 50, 0.924
041322 EA 00 00    0910*       dl 0x0000EA ; 113.906 51, 0.914
041325 E7 00 00    0911*       dl 0x0000E7 ; 115.313 52, 0.904
041328 E4 00 00    0912*       dl 0x0000E4 ; 116.719 53, 0.893
04132B E1 00 00    0913*       dl 0x0000E1 ; 118.125 54, 0.882
04132E DE 00 00    0914*       dl 0x0000DE ; 119.531 55, 0.870
041331 DB 00 00    0915*       dl 0x0000DB ; 120.938 56, 0.858
041334 D8 00 00    0916*       dl 0x0000D8 ; 122.344 57, 0.845
041337 D4 00 00    0917*       dl 0x0000D4 ; 123.750 58, 0.831
04133A D1 00 00    0918*       dl 0x0000D1 ; 125.156 59, 0.818
04133D CD 00 00    0919*       dl 0x0000CD ; 126.563 5A, 0.803
041340 C9 00 00    0920*       dl 0x0000C9 ; 127.969 5B, 0.788
041343 C5 00 00    0921*       dl 0x0000C5 ; 129.375 5C, 0.773
041346 C1 00 00    0922*       dl 0x0000C1 ; 130.781 5D, 0.757
041349 BD 00 00    0923*       dl 0x0000BD ; 132.188 5E, 0.741
04134C B9 00 00    0924*       dl 0x0000B9 ; 133.594 5F, 0.724
04134F B5 00 00    0925*       dl 0x0000B5 ; 135.000 60, 0.707
041352 B0 00 00    0926*       dl 0x0000B0 ; 136.406 61, 0.690
041355 AB 00 00    0927*       dl 0x0000AB ; 137.813 62, 0.672
041358 A7 00 00    0928*       dl 0x0000A7 ; 139.219 63, 0.653
04135B A2 00 00    0929*       dl 0x0000A2 ; 140.625 64, 0.634
04135E 9D 00 00    0930*       dl 0x00009D ; 142.031 65, 0.615
041361 98 00 00    0931*       dl 0x000098 ; 143.438 66, 0.596
041364 93 00 00    0932*       dl 0x000093 ; 144.844 67, 0.576
041367 8E 00 00    0933*       dl 0x00008E ; 146.250 68, 0.556
04136A 88 00 00    0934*       dl 0x000088 ; 147.656 69, 0.535
04136D 83 00 00    0935*       dl 0x000083 ; 149.063 6A, 0.514
041370 7E 00 00    0936*       dl 0x00007E ; 150.469 6B, 0.493
041373 78 00 00    0937*       dl 0x000078 ; 151.875 6C, 0.471
041376 73 00 00    0938*       dl 0x000073 ; 153.281 6D, 0.450
041379 6D 00 00    0939*       dl 0x00006D ; 154.688 6E, 0.428
04137C 67 00 00    0940*       dl 0x000067 ; 156.094 6F, 0.405
04137F 61 00 00    0941*       dl 0x000061 ; 157.500 70, 0.383
041382 5C 00 00    0942*       dl 0x00005C ; 158.906 71, 0.360
041385 56 00 00    0943*       dl 0x000056 ; 160.313 72, 0.337
041388 50 00 00    0944*       dl 0x000050 ; 161.719 73, 0.314
04138B 4A 00 00    0945*       dl 0x00004A ; 163.125 74, 0.290
04138E 44 00 00    0946*       dl 0x000044 ; 164.531 75, 0.267
041391 3E 00 00    0947*       dl 0x00003E ; 165.938 76, 0.243
041394 38 00 00    0948*       dl 0x000038 ; 167.344 77, 0.219
041397 31 00 00    0949*       dl 0x000031 ; 168.750 78, 0.195
04139A 2B 00 00    0950*       dl 0x00002B ; 170.156 79, 0.171
04139D 25 00 00    0951*       dl 0x000025 ; 171.563 7A, 0.147
0413A0 1F 00 00    0952*       dl 0x00001F ; 172.969 7B, 0.122
0413A3 19 00 00    0953*       dl 0x000019 ; 174.375 7C, 0.098
0413A6 12 00 00    0954*       dl 0x000012 ; 175.781 7D, 0.074
0413A9 0C 00 00    0955*       dl 0x00000C ; 177.188 7E, 0.049
0413AC 06 00 00    0956*       dl 0x000006 ; 178.594 7F, 0.025
0413AF 00 00 00    0957*       dl 0x000000 ; 180.000 80, 0.000
0413B2 FA FF FF    0958*       dl 0xFFFFFA ; 181.406 81, -0.025
0413B5 F4 FF FF    0959*       dl 0xFFFFF4 ; 182.813 82, -0.049
0413B8 EE FF FF    0960*       dl 0xFFFFEE ; 184.219 83, -0.074
0413BB E7 FF FF    0961*       dl 0xFFFFE7 ; 185.625 84, -0.098
0413BE E1 FF FF    0962*       dl 0xFFFFE1 ; 187.031 85, -0.122
0413C1 DB FF FF    0963*       dl 0xFFFFDB ; 188.438 86, -0.147
0413C4 D5 FF FF    0964*       dl 0xFFFFD5 ; 189.844 87, -0.171
0413C7 CF FF FF    0965*       dl 0xFFFFCF ; 191.250 88, -0.195
0413CA C8 FF FF    0966*       dl 0xFFFFC8 ; 192.656 89, -0.219
0413CD C2 FF FF    0967*       dl 0xFFFFC2 ; 194.063 8A, -0.243
0413D0 BC FF FF    0968*       dl 0xFFFFBC ; 195.469 8B, -0.267
0413D3 B6 FF FF    0969*       dl 0xFFFFB6 ; 196.875 8C, -0.290
0413D6 B0 FF FF    0970*       dl 0xFFFFB0 ; 198.281 8D, -0.314
0413D9 AA FF FF    0971*       dl 0xFFFFAA ; 199.688 8E, -0.337
0413DC A4 FF FF    0972*       dl 0xFFFFA4 ; 201.094 8F, -0.360
0413DF 9F FF FF    0973*       dl 0xFFFF9F ; 202.500 90, -0.383
0413E2 99 FF FF    0974*       dl 0xFFFF99 ; 203.906 91, -0.405
0413E5 93 FF FF    0975*       dl 0xFFFF93 ; 205.313 92, -0.428
0413E8 8D FF FF    0976*       dl 0xFFFF8D ; 206.719 93, -0.450
0413EB 88 FF FF    0977*       dl 0xFFFF88 ; 208.125 94, -0.471
0413EE 82 FF FF    0978*       dl 0xFFFF82 ; 209.531 95, -0.493
0413F1 7D FF FF    0979*       dl 0xFFFF7D ; 210.938 96, -0.514
0413F4 78 FF FF    0980*       dl 0xFFFF78 ; 212.344 97, -0.535
0413F7 72 FF FF    0981*       dl 0xFFFF72 ; 213.750 98, -0.556
0413FA 6D FF FF    0982*       dl 0xFFFF6D ; 215.156 99, -0.576
0413FD 68 FF FF    0983*       dl 0xFFFF68 ; 216.563 9A, -0.596
041400 63 FF FF    0984*       dl 0xFFFF63 ; 217.969 9B, -0.615
041403 5E FF FF    0985*       dl 0xFFFF5E ; 219.375 9C, -0.634
041406 59 FF FF    0986*       dl 0xFFFF59 ; 220.781 9D, -0.653
041409 55 FF FF    0987*       dl 0xFFFF55 ; 222.188 9E, -0.672
04140C 50 FF FF    0988*       dl 0xFFFF50 ; 223.594 9F, -0.690
04140F 4B FF FF    0989*       dl 0xFFFF4B ; 225.000 A0, -0.707
041412 47 FF FF    0990*       dl 0xFFFF47 ; 226.406 A1, -0.724
041415 43 FF FF    0991*       dl 0xFFFF43 ; 227.813 A2, -0.741
041418 3F FF FF    0992*       dl 0xFFFF3F ; 229.219 A3, -0.757
04141B 3B FF FF    0993*       dl 0xFFFF3B ; 230.625 A4, -0.773
04141E 37 FF FF    0994*       dl 0xFFFF37 ; 232.031 A5, -0.788
041421 33 FF FF    0995*       dl 0xFFFF33 ; 233.438 A6, -0.803
041424 2F FF FF    0996*       dl 0xFFFF2F ; 234.844 A7, -0.818
041427 2C FF FF    0997*       dl 0xFFFF2C ; 236.250 A8, -0.831
04142A 28 FF FF    0998*       dl 0xFFFF28 ; 237.656 A9, -0.845
04142D 25 FF FF    0999*       dl 0xFFFF25 ; 239.063 AA, -0.858
041430 22 FF FF    1000*       dl 0xFFFF22 ; 240.469 AB, -0.870
041433 1F FF FF    1001*       dl 0xFFFF1F ; 241.875 AC, -0.882
041436 1C FF FF    1002*       dl 0xFFFF1C ; 243.281 AD, -0.893
041439 19 FF FF    1003*       dl 0xFFFF19 ; 244.688 AE, -0.904
04143C 16 FF FF    1004*       dl 0xFFFF16 ; 246.094 AF, -0.914
04143F 14 FF FF    1005*       dl 0xFFFF14 ; 247.500 B0, -0.924
041442 12 FF FF    1006*       dl 0xFFFF12 ; 248.906 B1, -0.933
041445 0F FF FF    1007*       dl 0xFFFF0F ; 250.313 B2, -0.942
041448 0D FF FF    1008*       dl 0xFFFF0D ; 251.719 B3, -0.950
04144B 0C FF FF    1009*       dl 0xFFFF0C ; 253.125 B4, -0.957
04144E 0A FF FF    1010*       dl 0xFFFF0A ; 254.531 B5, -0.964
041451 08 FF FF    1011*       dl 0xFFFF08 ; 255.938 B6, -0.970
041454 07 FF FF    1012*       dl 0xFFFF07 ; 257.344 B7, -0.976
041457 05 FF FF    1013*       dl 0xFFFF05 ; 258.750 B8, -0.981
04145A 04 FF FF    1014*       dl 0xFFFF04 ; 260.156 B9, -0.985
04145D 03 FF FF    1015*       dl 0xFFFF03 ; 261.563 BA, -0.989
041460 02 FF FF    1016*       dl 0xFFFF02 ; 262.969 BB, -0.992
041463 02 FF FF    1017*       dl 0xFFFF02 ; 264.375 BC, -0.995
041466 01 FF FF    1018*       dl 0xFFFF01 ; 265.781 BD, -0.997
041469 01 FF FF    1019*       dl 0xFFFF01 ; 267.188 BE, -0.999
04146C 01 FF FF    1020*       dl 0xFFFF01 ; 268.594 BF, -1.000
04146F 00 FF FF    1021*       dl 0xFFFF00 ; 270.000 C0, -1.000
041472 01 FF FF    1022*       dl 0xFFFF01 ; 271.406 C1, -1.000
041475 01 FF FF    1023*       dl 0xFFFF01 ; 272.813 C2, -0.999
041478 01 FF FF    1024*       dl 0xFFFF01 ; 274.219 C3, -0.997
04147B 02 FF FF    1025*       dl 0xFFFF02 ; 275.625 C4, -0.995
04147E 02 FF FF    1026*       dl 0xFFFF02 ; 277.031 C5, -0.992
041481 03 FF FF    1027*       dl 0xFFFF03 ; 278.438 C6, -0.989
041484 04 FF FF    1028*       dl 0xFFFF04 ; 279.844 C7, -0.985
041487 05 FF FF    1029*       dl 0xFFFF05 ; 281.250 C8, -0.981
04148A 07 FF FF    1030*       dl 0xFFFF07 ; 282.656 C9, -0.976
04148D 08 FF FF    1031*       dl 0xFFFF08 ; 284.063 CA, -0.970
041490 0A FF FF    1032*       dl 0xFFFF0A ; 285.469 CB, -0.964
041493 0C FF FF    1033*       dl 0xFFFF0C ; 286.875 CC, -0.957
041496 0D FF FF    1034*       dl 0xFFFF0D ; 288.281 CD, -0.950
041499 0F FF FF    1035*       dl 0xFFFF0F ; 289.688 CE, -0.942
04149C 12 FF FF    1036*       dl 0xFFFF12 ; 291.094 CF, -0.933
04149F 14 FF FF    1037*       dl 0xFFFF14 ; 292.500 D0, -0.924
0414A2 16 FF FF    1038*       dl 0xFFFF16 ; 293.906 D1, -0.914
0414A5 19 FF FF    1039*       dl 0xFFFF19 ; 295.313 D2, -0.904
0414A8 1C FF FF    1040*       dl 0xFFFF1C ; 296.719 D3, -0.893
0414AB 1F FF FF    1041*       dl 0xFFFF1F ; 298.125 D4, -0.882
0414AE 22 FF FF    1042*       dl 0xFFFF22 ; 299.531 D5, -0.870
0414B1 25 FF FF    1043*       dl 0xFFFF25 ; 300.938 D6, -0.858
0414B4 28 FF FF    1044*       dl 0xFFFF28 ; 302.344 D7, -0.845
0414B7 2C FF FF    1045*       dl 0xFFFF2C ; 303.750 D8, -0.831
0414BA 2F FF FF    1046*       dl 0xFFFF2F ; 305.156 D9, -0.818
0414BD 33 FF FF    1047*       dl 0xFFFF33 ; 306.563 DA, -0.803
0414C0 37 FF FF    1048*       dl 0xFFFF37 ; 307.969 DB, -0.788
0414C3 3B FF FF    1049*       dl 0xFFFF3B ; 309.375 DC, -0.773
0414C6 3F FF FF    1050*       dl 0xFFFF3F ; 310.781 DD, -0.757
0414C9 43 FF FF    1051*       dl 0xFFFF43 ; 312.188 DE, -0.741
0414CC 47 FF FF    1052*       dl 0xFFFF47 ; 313.594 DF, -0.724
0414CF 4B FF FF    1053*       dl 0xFFFF4B ; 315.000 E0, -0.707
0414D2 50 FF FF    1054*       dl 0xFFFF50 ; 316.406 E1, -0.690
0414D5 55 FF FF    1055*       dl 0xFFFF55 ; 317.813 E2, -0.672
0414D8 59 FF FF    1056*       dl 0xFFFF59 ; 319.219 E3, -0.653
0414DB 5E FF FF    1057*       dl 0xFFFF5E ; 320.625 E4, -0.634
0414DE 63 FF FF    1058*       dl 0xFFFF63 ; 322.031 E5, -0.615
0414E1 68 FF FF    1059*       dl 0xFFFF68 ; 323.438 E6, -0.596
0414E4 6D FF FF    1060*       dl 0xFFFF6D ; 324.844 E7, -0.576
0414E7 72 FF FF    1061*       dl 0xFFFF72 ; 326.250 E8, -0.556
0414EA 78 FF FF    1062*       dl 0xFFFF78 ; 327.656 E9, -0.535
0414ED 7D FF FF    1063*       dl 0xFFFF7D ; 329.063 EA, -0.514
0414F0 82 FF FF    1064*       dl 0xFFFF82 ; 330.469 EB, -0.493
0414F3 88 FF FF    1065*       dl 0xFFFF88 ; 331.875 EC, -0.471
0414F6 8D FF FF    1066*       dl 0xFFFF8D ; 333.281 ED, -0.450
0414F9 93 FF FF    1067*       dl 0xFFFF93 ; 334.688 EE, -0.428
0414FC 99 FF FF    1068*       dl 0xFFFF99 ; 336.094 EF, -0.405
0414FF 9F FF FF    1069*       dl 0xFFFF9F ; 337.500 F0, -0.383
041502 A4 FF FF    1070*       dl 0xFFFFA4 ; 338.906 F1, -0.360
041505 AA FF FF    1071*       dl 0xFFFFAA ; 340.313 F2, -0.337
041508 B0 FF FF    1072*       dl 0xFFFFB0 ; 341.719 F3, -0.314
04150B B6 FF FF    1073*       dl 0xFFFFB6 ; 343.125 F4, -0.290
04150E BC FF FF    1074*       dl 0xFFFFBC ; 344.531 F5, -0.267
041511 C2 FF FF    1075*       dl 0xFFFFC2 ; 345.938 F6, -0.243
041514 C8 FF FF    1076*       dl 0xFFFFC8 ; 347.344 F7, -0.219
041517 CF FF FF    1077*       dl 0xFFFFCF ; 348.750 F8, -0.195
04151A D5 FF FF    1078*       dl 0xFFFFD5 ; 350.156 F9, -0.171
04151D DB FF FF    1079*       dl 0xFFFFDB ; 351.563 FA, -0.147
041520 E1 FF FF    1080*       dl 0xFFFFE1 ; 352.969 FB, -0.122
041523 E7 FF FF    1081*       dl 0xFFFFE7 ; 354.375 FC, -0.098
041526 EE FF FF    1082*       dl 0xFFFFEE ; 355.781 FD, -0.074
041529 F4 FF FF    1083*       dl 0xFFFFF4 ; 357.188 FE, -0.049
04152C FA FF FF    1084*       dl 0xFFFFFA ; 358.594 FF, -0.025
04152F 00 00 00    1085*       dl 0x000000 ; 0.000 00, 0.000 for interpolation
041532             1086*   
041532             1087*   atan_lut_168:
041532 00 00 00    1088*       dl 0x000000 ; 000000, 0.000
041535 28 00 00    1089*       dl 0x000028 ; 000001, 0.224
041538 51 00 00    1090*       dl 0x000051 ; 000002, 0.448
04153B 7A 00 00    1091*       dl 0x00007A ; 000003, 0.671
04153E A2 00 00    1092*       dl 0x0000A2 ; 000004, 0.895
041541 CB 00 00    1093*       dl 0x0000CB ; 000005, 1.119
041544 F4 00 00    1094*       dl 0x0000F4 ; 000006, 1.343
041547 1D 01 00    1095*       dl 0x00011D ; 000007, 1.566
04154A 45 01 00    1096*       dl 0x000145 ; 000008, 1.790
04154D 6E 01 00    1097*       dl 0x00016E ; 000009, 2.013
041550 97 01 00    1098*       dl 0x000197 ; 00000A, 2.237
041553 BF 01 00    1099*       dl 0x0001BF ; 00000B, 2.460
041556 E8 01 00    1100*       dl 0x0001E8 ; 00000C, 2.684
041559 11 02 00    1101*       dl 0x000211 ; 00000D, 2.907
04155C 39 02 00    1102*       dl 0x000239 ; 00000E, 3.130
04155F 62 02 00    1103*       dl 0x000262 ; 00000F, 3.353
041562 8B 02 00    1104*       dl 0x00028B ; 000010, 3.576
041565 B3 02 00    1105*       dl 0x0002B3 ; 000011, 3.799
041568 DC 02 00    1106*       dl 0x0002DC ; 000012, 4.022
04156B 04 03 00    1107*       dl 0x000304 ; 000013, 4.245
04156E 2D 03 00    1108*       dl 0x00032D ; 000014, 4.467
041571 55 03 00    1109*       dl 0x000355 ; 000015, 4.690
041574 7E 03 00    1110*       dl 0x00037E ; 000016, 4.912
041577 A6 03 00    1111*       dl 0x0003A6 ; 000017, 5.134
04157A CE 03 00    1112*       dl 0x0003CE ; 000018, 5.356
04157D F7 03 00    1113*       dl 0x0003F7 ; 000019, 5.578
041580 1F 04 00    1114*       dl 0x00041F ; 00001A, 5.799
041583 48 04 00    1115*       dl 0x000448 ; 00001B, 6.021
041586 70 04 00    1116*       dl 0x000470 ; 00001C, 6.242
041589 98 04 00    1117*       dl 0x000498 ; 00001D, 6.463
04158C C0 04 00    1118*       dl 0x0004C0 ; 00001E, 6.684
04158F E8 04 00    1119*       dl 0x0004E8 ; 00001F, 6.905
041592 11 05 00    1120*       dl 0x000511 ; 000020, 7.125
041595 39 05 00    1121*       dl 0x000539 ; 000021, 7.345
041598 61 05 00    1122*       dl 0x000561 ; 000022, 7.565
04159B 89 05 00    1123*       dl 0x000589 ; 000023, 7.785
04159E B1 05 00    1124*       dl 0x0005B1 ; 000024, 8.005
0415A1 D9 05 00    1125*       dl 0x0005D9 ; 000025, 8.224
0415A4 01 06 00    1126*       dl 0x000601 ; 000026, 8.443
0415A7 28 06 00    1127*       dl 0x000628 ; 000027, 8.662
0415AA 50 06 00    1128*       dl 0x000650 ; 000028, 8.881
0415AD 78 06 00    1129*       dl 0x000678 ; 000029, 9.099
0415B0 A0 06 00    1130*       dl 0x0006A0 ; 00002A, 9.317
0415B3 C7 06 00    1131*       dl 0x0006C7 ; 00002B, 9.535
0415B6 EF 06 00    1132*       dl 0x0006EF ; 00002C, 9.752
0415B9 16 07 00    1133*       dl 0x000716 ; 00002D, 9.970
0415BC 3E 07 00    1134*       dl 0x00073E ; 00002E, 10.187
0415BF 65 07 00    1135*       dl 0x000765 ; 00002F, 10.403
0415C2 8D 07 00    1136*       dl 0x00078D ; 000030, 10.620
0415C5 B4 07 00    1137*       dl 0x0007B4 ; 000031, 10.836
0415C8 DB 07 00    1138*       dl 0x0007DB ; 000032, 11.051
0415CB 03 08 00    1139*       dl 0x000803 ; 000033, 11.267
0415CE 2A 08 00    1140*       dl 0x00082A ; 000034, 11.482
0415D1 51 08 00    1141*       dl 0x000851 ; 000035, 11.697
0415D4 78 08 00    1142*       dl 0x000878 ; 000036, 11.911
0415D7 9F 08 00    1143*       dl 0x00089F ; 000037, 12.125
0415DA C6 08 00    1144*       dl 0x0008C6 ; 000038, 12.339
0415DD ED 08 00    1145*       dl 0x0008ED ; 000039, 12.553
0415E0 13 09 00    1146*       dl 0x000913 ; 00003A, 12.766
0415E3 3A 09 00    1147*       dl 0x00093A ; 00003B, 12.978
0415E6 61 09 00    1148*       dl 0x000961 ; 00003C, 13.191
0415E9 87 09 00    1149*       dl 0x000987 ; 00003D, 13.403
0415EC AE 09 00    1150*       dl 0x0009AE ; 00003E, 13.614
0415EF D4 09 00    1151*       dl 0x0009D4 ; 00003F, 13.825
0415F2 FB 09 00    1152*       dl 0x0009FB ; 000040, 14.036
0415F5 21 0A 00    1153*       dl 0x000A21 ; 000041, 14.247
0415F8 47 0A 00    1154*       dl 0x000A47 ; 000042, 14.457
0415FB 6D 0A 00    1155*       dl 0x000A6D ; 000043, 14.666
0415FE 94 0A 00    1156*       dl 0x000A94 ; 000044, 14.876
041601 BA 0A 00    1157*       dl 0x000ABA ; 000045, 15.085
041604 E0 0A 00    1158*       dl 0x000AE0 ; 000046, 15.293
041607 05 0B 00    1159*       dl 0x000B05 ; 000047, 15.501
04160A 2B 0B 00    1160*       dl 0x000B2B ; 000048, 15.709
04160D 51 0B 00    1161*       dl 0x000B51 ; 000049, 15.916
041610 77 0B 00    1162*       dl 0x000B77 ; 00004A, 16.123
041613 9C 0B 00    1163*       dl 0x000B9C ; 00004B, 16.329
041616 C2 0B 00    1164*       dl 0x000BC2 ; 00004C, 16.535
041619 E7 0B 00    1165*       dl 0x000BE7 ; 00004D, 16.740
04161C 0C 0C 00    1166*       dl 0x000C0C ; 00004E, 16.945
04161F 32 0C 00    1167*       dl 0x000C32 ; 00004F, 17.150
041622 57 0C 00    1168*       dl 0x000C57 ; 000050, 17.354
041625 7C 0C 00    1169*       dl 0x000C7C ; 000051, 17.558
041628 A1 0C 00    1170*       dl 0x000CA1 ; 000052, 17.761
04162B C6 0C 00    1171*       dl 0x000CC6 ; 000053, 17.964
04162E EB 0C 00    1172*       dl 0x000CEB ; 000054, 18.166
041631 0F 0D 00    1173*       dl 0x000D0F ; 000055, 18.368
041634 34 0D 00    1174*       dl 0x000D34 ; 000056, 18.569
041637 58 0D 00    1175*       dl 0x000D58 ; 000057, 18.770
04163A 7D 0D 00    1176*       dl 0x000D7D ; 000058, 18.970
04163D A1 0D 00    1177*       dl 0x000DA1 ; 000059, 19.170
041640 C6 0D 00    1178*       dl 0x000DC6 ; 00005A, 19.370
041643 EA 0D 00    1179*       dl 0x000DEA ; 00005B, 19.569
041646 0E 0E 00    1180*       dl 0x000E0E ; 00005C, 19.767
041649 32 0E 00    1181*       dl 0x000E32 ; 00005D, 19.965
04164C 56 0E 00    1182*       dl 0x000E56 ; 00005E, 20.163
04164F 7A 0E 00    1183*       dl 0x000E7A ; 00005F, 20.360
041652 9E 0E 00    1184*       dl 0x000E9E ; 000060, 20.556
041655 C1 0E 00    1185*       dl 0x000EC1 ; 000061, 20.752
041658 E5 0E 00    1186*       dl 0x000EE5 ; 000062, 20.947
04165B 08 0F 00    1187*       dl 0x000F08 ; 000063, 21.142
04165E 2C 0F 00    1188*       dl 0x000F2C ; 000064, 21.337
041661 4F 0F 00    1189*       dl 0x000F4F ; 000065, 21.531
041664 72 0F 00    1190*       dl 0x000F72 ; 000066, 21.724
041667 95 0F 00    1191*       dl 0x000F95 ; 000067, 21.917
04166A B8 0F 00    1192*       dl 0x000FB8 ; 000068, 22.109
04166D DB 0F 00    1193*       dl 0x000FDB ; 000069, 22.301
041670 FE 0F 00    1194*       dl 0x000FFE ; 00006A, 22.493
041673 21 10 00    1195*       dl 0x001021 ; 00006B, 22.683
041676 44 10 00    1196*       dl 0x001044 ; 00006C, 22.874
041679 66 10 00    1197*       dl 0x001066 ; 00006D, 23.063
04167C 89 10 00    1198*       dl 0x001089 ; 00006E, 23.253
04167F AB 10 00    1199*       dl 0x0010AB ; 00006F, 23.441
041682 CD 10 00    1200*       dl 0x0010CD ; 000070, 23.629
041685 EF 10 00    1201*       dl 0x0010EF ; 000071, 23.817
041688 11 11 00    1202*       dl 0x001111 ; 000072, 24.004
04168B 33 11 00    1203*       dl 0x001133 ; 000073, 24.191
04168E 55 11 00    1204*       dl 0x001155 ; 000074, 24.376
041691 77 11 00    1205*       dl 0x001177 ; 000075, 24.562
041694 99 11 00    1206*       dl 0x001199 ; 000076, 24.747
041697 BA 11 00    1207*       dl 0x0011BA ; 000077, 24.931
04169A DC 11 00    1208*       dl 0x0011DC ; 000078, 25.115
04169D FD 11 00    1209*       dl 0x0011FD ; 000079, 25.298
0416A0 1E 12 00    1210*       dl 0x00121E ; 00007A, 25.481
0416A3 3F 12 00    1211*       dl 0x00123F ; 00007B, 25.663
0416A6 60 12 00    1212*       dl 0x001260 ; 00007C, 25.844
0416A9 81 12 00    1213*       dl 0x001281 ; 00007D, 26.025
0416AC A2 12 00    1214*       dl 0x0012A2 ; 00007E, 26.206
0416AF C3 12 00    1215*       dl 0x0012C3 ; 00007F, 26.386
0416B2 E4 12 00    1216*       dl 0x0012E4 ; 000080, 26.565
0416B5 04 13 00    1217*       dl 0x001304 ; 000081, 26.744
0416B8 25 13 00    1218*       dl 0x001325 ; 000082, 26.922
0416BB 45 13 00    1219*       dl 0x001345 ; 000083, 27.100
0416BE 65 13 00    1220*       dl 0x001365 ; 000084, 27.277
0416C1 85 13 00    1221*       dl 0x001385 ; 000085, 27.453
0416C4 A5 13 00    1222*       dl 0x0013A5 ; 000086, 27.629
0416C7 C5 13 00    1223*       dl 0x0013C5 ; 000087, 27.805
0416CA E5 13 00    1224*       dl 0x0013E5 ; 000088, 27.979
0416CD 05 14 00    1225*       dl 0x001405 ; 000089, 28.154
0416D0 24 14 00    1226*       dl 0x001424 ; 00008A, 28.327
0416D3 44 14 00    1227*       dl 0x001444 ; 00008B, 28.501
0416D6 63 14 00    1228*       dl 0x001463 ; 00008C, 28.673
0416D9 83 14 00    1229*       dl 0x001483 ; 00008D, 28.845
0416DC A2 14 00    1230*       dl 0x0014A2 ; 00008E, 29.017
0416DF C1 14 00    1231*       dl 0x0014C1 ; 00008F, 29.187
0416E2 E0 14 00    1232*       dl 0x0014E0 ; 000090, 29.358
0416E5 FF 14 00    1233*       dl 0x0014FF ; 000091, 29.527
0416E8 1E 15 00    1234*       dl 0x00151E ; 000092, 29.697
0416EB 3C 15 00    1235*       dl 0x00153C ; 000093, 29.865
0416EE 5B 15 00    1236*       dl 0x00155B ; 000094, 30.033
0416F1 79 15 00    1237*       dl 0x001579 ; 000095, 30.201
0416F4 98 15 00    1238*       dl 0x001598 ; 000096, 30.368
0416F7 B6 15 00    1239*       dl 0x0015B6 ; 000097, 30.534
0416FA D4 15 00    1240*       dl 0x0015D4 ; 000098, 30.700
0416FD F2 15 00    1241*       dl 0x0015F2 ; 000099, 30.865
041700 10 16 00    1242*       dl 0x001610 ; 00009A, 31.030
041703 2E 16 00    1243*       dl 0x00162E ; 00009B, 31.194
041706 4C 16 00    1244*       dl 0x00164C ; 00009C, 31.357
041709 6A 16 00    1245*       dl 0x00166A ; 00009D, 31.520
04170C 87 16 00    1246*       dl 0x001687 ; 00009E, 31.682
04170F A5 16 00    1247*       dl 0x0016A5 ; 00009F, 31.844
041712 C2 16 00    1248*       dl 0x0016C2 ; 0000A0, 32.005
041715 DF 16 00    1249*       dl 0x0016DF ; 0000A1, 32.166
041718 FC 16 00    1250*       dl 0x0016FC ; 0000A2, 32.326
04171B 19 17 00    1251*       dl 0x001719 ; 0000A3, 32.486
04171E 36 17 00    1252*       dl 0x001736 ; 0000A4, 32.645
041721 53 17 00    1253*       dl 0x001753 ; 0000A5, 32.803
041724 70 17 00    1254*       dl 0x001770 ; 0000A6, 32.961
041727 8C 17 00    1255*       dl 0x00178C ; 0000A7, 33.118
04172A A9 17 00    1256*       dl 0x0017A9 ; 0000A8, 33.275
04172D C5 17 00    1257*       dl 0x0017C5 ; 0000A9, 33.431
041730 E2 17 00    1258*       dl 0x0017E2 ; 0000AA, 33.587
041733 FE 17 00    1259*       dl 0x0017FE ; 0000AB, 33.742
041736 1A 18 00    1260*       dl 0x00181A ; 0000AC, 33.896
041739 36 18 00    1261*       dl 0x001836 ; 0000AD, 34.050
04173C 52 18 00    1262*       dl 0x001852 ; 0000AE, 34.203
04173F 6E 18 00    1263*       dl 0x00186E ; 0000AF, 34.356
041742 8A 18 00    1264*       dl 0x00188A ; 0000B0, 34.509
041745 A5 18 00    1265*       dl 0x0018A5 ; 0000B1, 34.660
041748 C1 18 00    1266*       dl 0x0018C1 ; 0000B2, 34.811
04174B DC 18 00    1267*       dl 0x0018DC ; 0000B3, 34.962
04174E F7 18 00    1268*       dl 0x0018F7 ; 0000B4, 35.112
041751 13 19 00    1269*       dl 0x001913 ; 0000B5, 35.262
041754 2E 19 00    1270*       dl 0x00192E ; 0000B6, 35.410
041757 49 19 00    1271*       dl 0x001949 ; 0000B7, 35.559
04175A 64 19 00    1272*       dl 0x001964 ; 0000B8, 35.707
04175D 7F 19 00    1273*       dl 0x00197F ; 0000B9, 35.854
041760 99 19 00    1274*       dl 0x001999 ; 0000BA, 36.001
041763 B4 19 00    1275*       dl 0x0019B4 ; 0000BB, 36.147
041766 CE 19 00    1276*       dl 0x0019CE ; 0000BC, 36.293
041769 E9 19 00    1277*       dl 0x0019E9 ; 0000BD, 36.438
04176C 03 1A 00    1278*       dl 0x001A03 ; 0000BE, 36.582
04176F 1D 1A 00    1279*       dl 0x001A1D ; 0000BF, 36.726
041772 37 1A 00    1280*       dl 0x001A37 ; 0000C0, 36.870
041775 51 1A 00    1281*       dl 0x001A51 ; 0000C1, 37.013
041778 6B 1A 00    1282*       dl 0x001A6B ; 0000C2, 37.155
04177B 85 1A 00    1283*       dl 0x001A85 ; 0000C3, 37.297
04177E 9F 1A 00    1284*       dl 0x001A9F ; 0000C4, 37.439
041781 B9 1A 00    1285*       dl 0x001AB9 ; 0000C5, 37.579
041784 D2 1A 00    1286*       dl 0x001AD2 ; 0000C6, 37.720
041787 EC 1A 00    1287*       dl 0x001AEC ; 0000C7, 37.859
04178A 05 1B 00    1288*       dl 0x001B05 ; 0000C8, 37.999
04178D 1E 1B 00    1289*       dl 0x001B1E ; 0000C9, 38.137
041790 37 1B 00    1290*       dl 0x001B37 ; 0000CA, 38.276
041793 50 1B 00    1291*       dl 0x001B50 ; 0000CB, 38.413
041796 69 1B 00    1292*       dl 0x001B69 ; 0000CC, 38.550
041799 82 1B 00    1293*       dl 0x001B82 ; 0000CD, 38.687
04179C 9B 1B 00    1294*       dl 0x001B9B ; 0000CE, 38.823
04179F B4 1B 00    1295*       dl 0x001BB4 ; 0000CF, 38.959
0417A2 CC 1B 00    1296*       dl 0x001BCC ; 0000D0, 39.094
0417A5 E5 1B 00    1297*       dl 0x001BE5 ; 0000D1, 39.228
0417A8 FD 1B 00    1298*       dl 0x001BFD ; 0000D2, 39.362
0417AB 16 1C 00    1299*       dl 0x001C16 ; 0000D3, 39.496
0417AE 2E 1C 00    1300*       dl 0x001C2E ; 0000D4, 39.629
0417B1 46 1C 00    1301*       dl 0x001C46 ; 0000D5, 39.762
0417B4 5E 1C 00    1302*       dl 0x001C5E ; 0000D6, 39.894
0417B7 76 1C 00    1303*       dl 0x001C76 ; 0000D7, 40.025
0417BA 8E 1C 00    1304*       dl 0x001C8E ; 0000D8, 40.156
0417BD A5 1C 00    1305*       dl 0x001CA5 ; 0000D9, 40.286
0417C0 BD 1C 00    1306*       dl 0x001CBD ; 0000DA, 40.416
0417C3 D5 1C 00    1307*       dl 0x001CD5 ; 0000DB, 40.546
0417C6 EC 1C 00    1308*       dl 0x001CEC ; 0000DC, 40.675
0417C9 04 1D 00    1309*       dl 0x001D04 ; 0000DD, 40.803
0417CC 1B 1D 00    1310*       dl 0x001D1B ; 0000DE, 40.931
0417CF 32 1D 00    1311*       dl 0x001D32 ; 0000DF, 41.059
0417D2 49 1D 00    1312*       dl 0x001D49 ; 0000E0, 41.186
0417D5 60 1D 00    1313*       dl 0x001D60 ; 0000E1, 41.312
0417D8 77 1D 00    1314*       dl 0x001D77 ; 0000E2, 41.438
0417DB 8E 1D 00    1315*       dl 0x001D8E ; 0000E3, 41.564
0417DE A5 1D 00    1316*       dl 0x001DA5 ; 0000E4, 41.689
0417E1 BB 1D 00    1317*       dl 0x001DBB ; 0000E5, 41.814
0417E4 D2 1D 00    1318*       dl 0x001DD2 ; 0000E6, 41.938
0417E7 E9 1D 00    1319*       dl 0x001DE9 ; 0000E7, 42.061
0417EA FF 1D 00    1320*       dl 0x001DFF ; 0000E8, 42.184
0417ED 15 1E 00    1321*       dl 0x001E15 ; 0000E9, 42.307
0417F0 2C 1E 00    1322*       dl 0x001E2C ; 0000EA, 42.429
0417F3 42 1E 00    1323*       dl 0x001E42 ; 0000EB, 42.551
0417F6 58 1E 00    1324*       dl 0x001E58 ; 0000EC, 42.672
0417F9 6E 1E 00    1325*       dl 0x001E6E ; 0000ED, 42.793
0417FC 84 1E 00    1326*       dl 0x001E84 ; 0000EE, 42.913
0417FF 99 1E 00    1327*       dl 0x001E99 ; 0000EF, 43.033
041802 AF 1E 00    1328*       dl 0x001EAF ; 0000F0, 43.152
041805 C5 1E 00    1329*       dl 0x001EC5 ; 0000F1, 43.271
041808 DA 1E 00    1330*       dl 0x001EDA ; 0000F2, 43.390
04180B F0 1E 00    1331*       dl 0x001EF0 ; 0000F3, 43.508
04180E 05 1F 00    1332*       dl 0x001F05 ; 0000F4, 43.625
041811 1B 1F 00    1333*       dl 0x001F1B ; 0000F5, 43.742
041814 30 1F 00    1334*       dl 0x001F30 ; 0000F6, 43.859
041817 45 1F 00    1335*       dl 0x001F45 ; 0000F7, 43.975
04181A 5A 1F 00    1336*       dl 0x001F5A ; 0000F8, 44.091
04181D 6F 1F 00    1337*       dl 0x001F6F ; 0000F9, 44.206
041820 84 1F 00    1338*       dl 0x001F84 ; 0000FA, 44.321
041823 99 1F 00    1339*       dl 0x001F99 ; 0000FB, 44.435
041826 AD 1F 00    1340*       dl 0x001FAD ; 0000FC, 44.549
041829 C2 1F 00    1341*       dl 0x001FC2 ; 0000FD, 44.662
04182C D7 1F 00    1342*       dl 0x001FD7 ; 0000FE, 44.775
04182F EB 1F 00    1343*       dl 0x001FEB ; 0000FF, 44.888
041832 00 20 00    1344*       dl 0x002000 ; 000100, 45.000 only needed for interpolation
041835             0037        include "time.inc"
041835             0001*   ; Convert seconds to HH:MM:SS format.
041835             0002*   ; inputs: hl = seconds
041835             0003*   ; outputs: hl = pointer to zero-terminated string representation of HH:MM:SS
041835             0004*   ; destroys: a,bc,de
041835             0005*   seconds_to_hhmmss:
041835             0006*   ; Divide the total seconds into hours, minutes, and seconds.
041835             0007*   ; Hours = Total seconds ÷ 3600.
041835 11 10 0E 00 0008*       ld de,3600
041839 CD 80 03 04 0009*       call udiv24 ; de = hours, hl = remaining seconds
04183D E5          0010*       push hl ; save remainder
04183E EB          0011*       ex de,hl ; hl = hours
04183F 11 98 18 04 0012*       ld de,@bin2asc
041843 CD 28 01 04 0013*       call u8_to_ascii ; answer in @bin2asc
041847 3A 9A 18 04 0014*       ld a,(@bin2asc+2)
04184B 32 A2 18 04 0015*       ld (hhmmss+0),a
04184F 3A 9B 18 04 0016*       ld a,(@bin2asc+3)
041853 32 A3 18 04 0017*       ld (hhmmss+1),a
041857             0018*   ; Minutes = Remaining seconds ÷ 60.
041857 E1          0019*       pop hl ; restore remainder
041858 11 3C 00 00 0020*       ld de,60
04185C CD 80 03 04 0021*       call udiv24 ; de = minutes, hl = remaining seconds
041860 E5          0022*       push hl ; save remainder
041861 EB          0023*       ex de,hl ; hl = minutes
041862 11 98 18 04 0024*       ld de,@bin2asc
041866 CD 28 01 04 0025*       call u8_to_ascii ; answer in @bin2asc
04186A 3A 9A 18 04 0026*       ld a,(@bin2asc+2)
04186E 32 A5 18 04 0027*       ld (hhmmss+3),a
041872 3A 9B 18 04 0028*       ld a,(@bin2asc+3)
041876 32 A6 18 04 0029*       ld (hhmmss+4),a
04187A             0030*   ; Seconds = Remaining seconds.
04187A E1          0031*       pop hl ; restore remainder
04187B 11 98 18 04 0032*       ld de,@bin2asc
04187F CD 28 01 04 0033*       call u8_to_ascii ; answer in @bin2asc
041883 3A 9A 18 04 0034*       ld a,(@bin2asc+2)
041887 32 A8 18 04 0035*       ld (hhmmss+6),a
04188B 3A 9B 18 04 0036*       ld a,(@bin2asc+3)
04188F 32 A9 18 04 0037*       ld (hhmmss+7),a
041893 21 A2 18 04 0038*       ld hl,hhmmss
041897 C9          0039*       ret
041898 00 00 00 00 0040*   @bin2asc: blkw 5,0 ; scratch space for binary to ascii decimal conversion
       00 00 00 00 
       00 00       
0418A2 30 30 3A 30 0041*   hhmmss: asciz "00:00:00" ; buffer for output string
       30 3A 30 30 
       00          
0418AB             0042*   ; end seconds_to_hhmmss
0418AB             0038        include "timer.inc"
0418AB             0001*   ; Table 32. Timer Control Registers
0418AB             0002*   TMR0_CTL: equ 80h
0418AB             0003*   TMR1_CTL: equ 83h
0418AB             0004*   TMR2_CTL: equ 86h
0418AB             0005*   TMR3_CTL: equ 89h
0418AB             0006*   TMR4_CTL: equ 8Ch
0418AB             0007*   TMR5_CTL: equ 8Fh
0418AB             0008*   
0418AB             0009*   ; each timer register takes three bytes:
0418AB             0010*   ;   0: control register
0418AB             0011*   ;   1: low byte of timer reset value
0418AB             0012*   ;   2: high byte of timer reset value
0418AB             0013*   ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0418AB             0014*   ; which correctly force the high and upper bytes of the address bus to zero
0418AB             0015*   
0418AB             0016*   TMR_REG_CTL: equ 0
0418AB             0017*   TMR_RES_LOW: equ 1
0418AB             0018*   TMR_RES_HIGH: equ 2
0418AB             0019*   
0418AB             0020*   ; Timer Control Register Bit Definitions
0418AB             0021*   PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0418AB             0022*                               ; This bit is reset to 0 every time the TMRx_CTL register is read.
0418AB             0023*   PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0418AB             0024*                               ; an interrupt signal is sent to the CPU. This bit remains 1 until
0418AB             0025*                               ; the TMRx_CTL register is read.
0418AB             0026*   
0418AB             0027*   IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0418AB             0028*   IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0418AB             0029*   
0418AB             0030*   PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0418AB             0031*                               ;  0,and counting stops when the end-of-count value is reached.
0418AB             0032*   PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0418AB             0033*                               ; written to the counter when the end-of-count value is reached.
0418AB             0034*   
0418AB             0035*   ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0418AB             0036*   CLK_DIV_256:  equ %00001100 ;
0418AB             0037*   CLK_DIV_64:   equ %00001000 ;
0418AB             0038*   CLK_DIV_16:   equ %00000100 ;
0418AB             0039*   CLK_DIV_4:    equ %00000000 ;
0418AB             0040*   
0418AB             0041*   RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0418AB             0042*   RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0418AB             0043*                               ; When a 1 is written to this bit,the values in the reload registers
0418AB             0044*                               ;  are loaded into the downcounter when the timer restarts. The
0418AB             0045*                               ; programmer must ensure that this bit is set to 1 each time
0418AB             0046*                               ; SINGLE-PASS mode is used.
0418AB             0047*   
0418AB             0048*   ; disable/enable the programmable reload timer
0418AB             0049*   PRT_EN_0:     equ %00000000 ;
0418AB             0050*   PRT_EN_1:     equ %00000001 ;
0418AB             0051*   
0418AB             0052*   ; Table 37. Timer Input Source Select Register
0418AB             0053*   ; Each of the 4 timers are allocated two bits of the 8-bit register
0418AB             0054*   ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0418AB             0055*   ;   00: System clock / CLK_DIV
0418AB             0056*   ;   01: RTC / CLK_DIV
0418AB             0057*   ;   NOTE: these are the values given in the manual,but it may be a typo
0418AB             0058*   ;   10: GPIO port B pin 1.
0418AB             0059*   ;   11: GPIO port B pin 1.
0418AB             0060*   TMR_ISS:   equ 92h ; register address
0418AB             0061*   
0418AB             0062*   ; Table 51. Real-Time Clock Control Register
0418AB             0063*   RTC_CTRL: equ EDh ; register address
0418AB             0064*   
0418AB             0065*   ; alarm interrupt disable/enable
0418AB             0066*   RTC_ALARM_0:    equ %00000000
0418AB             0067*   RTC_ALARM_1:    equ %10000000
0418AB             0068*   
0418AB             0069*   ; interrupt on alarm disable/enable
0418AB             0070*   RTC_INT_ENT_0:  equ %00000000
0418AB             0071*   RTC_INT_ENT_1:  equ %01000000
0418AB             0072*   
0418AB             0073*   RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0418AB             0074*   RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0418AB             0075*   
0418AB             0076*   RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0418AB             0077*                                   ; On-chip 32768 Hz oscillator is enabled.
0418AB             0078*   RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0418AB             0079*                                   ; On-chip 32768 Hz oscillator is disabled.
0418AB             0080*   
0418AB             0081*   RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0418AB             0082*   RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0418AB             0083*   
0418AB             0084*   RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0418AB             0085*   RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0418AB             0086*   
0418AB             0087*   RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0418AB             0088*                                   ; RTC counter is enabled.
0418AB             0089*   RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0418AB             0090*                                   ; RTC counter is disabled.
0418AB             0091*   
0418AB             0092*   ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0418AB             0093*   
0418AB             0094*   prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0418AB             0095*   prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0418AB 00 00 00    0096*   prt_reload: dl 0x000000
0418AE             0097*   
0418AE             0098*   ; returns: a = 0 if running on hardware,1 if running on emulator
0418AE             0099*   ;          de = number PRT interrupts during test interval
0418AE             0100*   prt_calibrate:
0418AE CD BD 1B 04 0101*       call vdu_vblank
0418B2             0102*   ; set a MOS timer
0418B2 21 78 00 00 0103*       ld hl,120*1 ; 1 second
0418B6 FD 21 36 1A 0104*       ld iy,tmr_test
       04          
0418BB CD 14 1A 04 0105*       call tmr_set
0418BF             0106*   ; set a PRT timer
0418BF             0107*       ; ld hl,prt_reload_hardware
0418BF             0108*       ; ld hl,prt_reload_emulator
0418BF 21 05 2D 00 0109*       ld hl,prt_reload_emulator + prt_reload_hardware / 2
0418C3 22 AB 18 04 0110*       ld (prt_reload),hl
0418C7 CD 4F 19 04 0111*       call prt_set
0418CB             0112*   @loop:
0418CB             0113*   ; check time remaining on MOS timer
0418CB CD 22 1A 04 0114*       call tmr_get
0418CF CA D9 18 04 0115*       jp z,@done ; time expired,so quit
0418D3 FA D9 18 04 0116*       jp m,@done ; time past expiration (negative),so quit
0418D7 18 F2       0117*       jr @loop
0418D9             0118*   @done:
0418D9 ED 5B 9D 19 0119*       ld de,(prt_irq_counter)
       04          
0418DE 01 0C 2D 00 0120*       ld bc,prt_reload_hardware ; default value for running on hardware
0418E2 ED 43 AB 18 0121*       ld (prt_reload),bc
       04          
0418E7 21 64 00 00 0122*       ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
0418EB AF          0123*       xor a ; clear carry,zero is default value for running on hardware
0418EC 32 0E 19 04 0124*       ld (is_emulator),a
0418F0 ED 52       0125*       sbc hl,de
0418F2 21 0F 19 04 0126*       ld hl,on_hardware ; default message for running on hardware
0418F6 CA AE 18 04 0127*       jp z,prt_calibrate ; zero result is indeterminate so we try again
0418FA F8          0128*       ret m ; negative result means we're on hardware
0418FB 3C          0129*       inc a ; we're on emulator
0418FC 32 0E 19 04 0130*       ld (is_emulator),a
041900 01 FF 2C 00 0131*       ld bc,prt_reload_emulator
041904 ED 43 AB 18 0132*       ld (prt_reload),bc
       04          
041909 21 25 19 04 0133*       ld hl,on_emulator
04190D C9          0134*       ret
04190E 00          0135*   is_emulator: db 0
04190F 52 75 6E 6E 0136*   on_hardware: defb "Running on hardware\r\n",0
       69 6E 67 20 
       6F 6E 20 68 
       61 72 64 77 
       61 72 65 0D 
       0A 00       
041925 52 75 6E 6E 0137*   on_emulator: defb "Running on emulator\r\n",0
       69 6E 67 20 
       6F 6E 20 65 
       6D 75 6C 61 
       74 6F 72 0D 
       0A 00       
04193B             0138*   
04193B 43 61 6C 69 0139*   calibrating_timer: defb "Calibrating timer\r\n",0
       62 72 61 74 
       69 6E 67 20 
       74 69 6D 65 
       72 0D 0A 00 
04194F             0140*   
04194F             0141*   ; set PRT timer
04194F             0142*   prt_set:
04194F 21 00 00 00 0143*       ld hl,0
041953 22 9D 19 04 0144*       ld (prt_irq_counter),hl
041957 2A AB 18 04 0145*       ld hl,(prt_reload)
04195B ED 29 84    0146*       out0 (TMR1_CTL+TMR_RES_LOW),l
04195E ED 21 85    0147*   	out0 (TMR1_CTL+TMR_RES_HIGH),h
041961             0148*   ; disable timer
041961 3E 06       0149*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
041963 ED 39 83    0150*   	out0 (TMR1_CTL+TMR_REG_CTL),a
041966             0151*   ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
041966 3E 57       0152*       ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
041968 ED 39 83    0153*   	out0 (TMR1_CTL+TMR_REG_CTL),a
04196B C9          0154*       ret
04196C             0155*   
04196C             0156*   ; ===============================================
04196C             0157*   ; PRT Timer Interrupt Handling
04196C             0158*   ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
04196C             0159*   ; -----------------------------------------------
04196C             0160*   prt_irq_init:
04196C             0161*       ; set up interrupt vector table 2
04196C 21 00 00 00 0162*   	ld hl,0
041970 3A 0C 01 00 0163*   	ld a,($10c)
041974 6F          0164*   	ld l,a
041975 3A 0D 01 00 0165*   	ld a,($10d)
041979 67          0166*   	ld h,a
04197A             0167*   
04197A             0168*   	; skip over CALL ($c3)
04197A 23          0169*   	inc hl
04197B             0170*   	; load address of jump into vector table 2 (in ram)
04197B ED 27       0171*   	ld hl,(hl)
04197D             0172*   
04197D             0173*   	; write CALL prt_irq_handler to vector table 2
04197D 3E C3       0174*   	ld a,$c3
04197F 77          0175*   	ld (hl),a
041980 23          0176*   	inc hl
041981 11 88 19 04 0177*   	ld de,prt_irq_handler
041985 ED 1F       0178*   	ld (hl),de
041987             0179*   
041987 C9          0180*       ret
041988             0181*   
041988             0182*   prt_irq_handler:
041988 F3          0183*   	di
041989 F5          0184*   	push af
04198A E5          0185*       push hl
04198B ED 38 83    0186*   	in0 a,(TMR1_CTL+TMR_REG_CTL)
04198E 2A 9D 19 04 0187*   	ld hl,(prt_irq_counter)
041992 23          0188*   	inc hl
041993 22 9D 19 04 0189*   	ld (prt_irq_counter),hl
041997 E1          0190*       pop hl
041998 F1          0191*   	pop af
041999 FB          0192*   	ei
04199A 5B ED 4D    0193*   	reti.l
04199D             0194*   
04199D             0195*   prt_irq_counter:
04199D 00 00 00    0196*   	.dl 0
0419A0             0197*   prt_irq_counter_saved:
0419A0 00 00 00    0198*       .dl 0
0419A3             0199*   
0419A3             0200*   prt_loop_reset:
0419A3 E5          0201*       push hl
0419A4 21 00 00 00 0202*   	ld hl,0
0419A8 22 9D 19 04 0203*   	ld (prt_irq_counter),hl
0419AC 22 0E 1A 04 0204*       ld (prt_loop_counter),hl
0419B0 22 11 1A 04 0205*       ld (prt_loops),hl
0419B4 CD 4F 19 04 0206*       call prt_set
0419B8 E1          0207*       pop hl
0419B9 C9          0208*       ret
0419BA             0209*   
0419BA             0210*   prt_loop_start:
0419BA E5          0211*       push hl
0419BB 21 00 00 00 0212*   	ld hl,0
0419BF 22 9D 19 04 0213*   	ld (prt_irq_counter),hl
0419C3 E1          0214*       pop hl
0419C4 C9          0215*       ret
0419C5             0216*   
0419C5             0217*   prt_loop_stop:
0419C5 E5          0218*       push hl
0419C6 D5          0219*       push de
0419C7 2A 9D 19 04 0220*       ld hl,(prt_irq_counter)
0419CB ED 5B 0E 1A 0221*       ld de,(prt_loop_counter)
       04          
0419D0 19          0222*       add hl,de
0419D1 22 0E 1A 04 0223*       ld (prt_loop_counter),hl
0419D5 21 00 00 00 0224*       ld hl,0
0419D9 22 9D 19 04 0225*       ld (prt_irq_counter),hl
0419DD 2A 11 1A 04 0226*       ld hl,(prt_loops)
0419E1 23          0227*       inc hl
0419E2 22 11 1A 04 0228*       ld (prt_loops),hl
0419E6 D1          0229*       pop de
0419E7 E1          0230*       pop hl
0419E8 C9          0231*       ret
0419E9             0232*   
0419E9             0233*   ; inputs: bc = y,x text coordinates to print
0419E9             0234*   prt_loop_print:
0419E9 F5          0235*       push af
0419EA E5          0236*       push hl
0419EB C5          0237*       push bc
0419EC D5          0238*       push de
0419ED DD E5       0239*       push ix
0419EF FD E5       0240*       push iy
0419F1 CD 21 1B 04 0241*       call vdu_move_cursor
0419F5             0242*   
0419F5 2A 0E 1A 04 0243*       ld hl,(prt_loop_counter)
0419F9 CD CC 00 04 0244*       call printDec
0419FD             0245*   
0419FD 2A 11 1A 04 0246*       ld hl,(prt_loops)
041A01 CD CC 00 04 0247*       call printDec
041A05             0248*   
041A05 FD E1       0249*       pop iy
041A07 DD E1       0250*       pop ix
041A09 D1          0251*       pop de
041A0A C1          0252*       pop bc
041A0B E1          0253*       pop hl
041A0C F1          0254*       pop af
041A0D C9          0255*       ret
041A0E             0256*   
041A0E             0257*   prt_loop_counter:
041A0E 00 00 00    0258*       .dl 0
041A11             0259*   prt_loops:
041A11 00 00 00    0260*       .dl 0
041A14             0261*   
041A14             0262*   ; ===============================================
041A14             0263*   ; Timer functions
041A14             0264*   ; -----------------------------------------------
041A14             0265*   ; set a countdown timer
041A14             0266*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041A14             0267*   ; returns: hl = current time
041A14             0268*   tmr_set:
041A14 FD 2F 03    0269*       ld (iy+3),hl            ; set time remaining
041A17             0270*       MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041A17 3E 08       0001*M1 			LD	A, function
041A19 5B CF       0002*M1 			RST.LIL	08h
041A1B DD 27 00    0271*       ld hl,(ix+sysvar_time)  ; get current time
041A1E FD 2F 00    0272*       ld (iy+0),hl            ; set start time
041A21 C9          0273*       ret
041A22             0274*   
041A22             0275*   ; gets time remaining on a countdown timer
041A22             0276*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041A22             0277*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041A22             0278*   ;          sign flags: pos = time not expired,zero or neg = time expired
041A22             0279*   tmr_get:
041A22             0280*       MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041A22 3E 08       0001*M1 			LD	A, function
041A24 5B CF       0002*M1 			RST.LIL	08h
041A26 DD 17 00    0281*       ld de,(ix+sysvar_time)  ; get current time
041A29 FD 27 00    0282*       ld hl,(iy+0)            ; get start time
041A2C AF          0283*       xor a                   ; clear carry
041A2D ED 52       0284*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
041A2F FD 17 03    0285*       ld de,(iy+3)            ; get timer set value
041A32 AF          0286*       xor a                   ; clear carry
041A33 ED 5A       0287*       adc hl,de               ; hl = time remaining
041A35             0288*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
041A35 C9          0289*       ret
041A36             0290*   
041A36             0291*   tmr_test: ds 6 ; example of a buffer to hold timer data
041A3C             0292*   
       FF FF FF FF 
       FF FF 
041A3C 00 00 00    0293*   timestamp_now: dl 0
041A3F 00 00 00    0294*   timestamp_old: dl 0
041A42 00 00 00    0295*   timestamp_chg: dl 0
041A45             0296*   
041A45             0297*   ; update the global timestamp from the system clock
041A45             0298*   ; inputs: none
041A45             0299*   ; returns: hl = time elapsed in 1/120ths of a second
041A45             0300*   ;          de = current time
041A45             0301*   ;          ix = pointer to syvars table
041A45             0302*   ; destroys: af,hl,de,ix
041A45             0303*   timestamp_tick:
041A45 ED 5B 3C 1A 0304*       ld de,(timestamp_now)   ; get previous time
       04          
041A4A ED 53 3F 1A 0305*       ld (timestamp_old),de   ; save previous time
       04          
041A4F             0306*       MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041A4F 3E 08       0001*M1 			LD	A, function
041A51 5B CF       0002*M1 			RST.LIL	08h
041A53 DD 27 00    0307*       ld hl,(ix+sysvar_time)  ; get current time
041A56 22 3C 1A 04 0308*       ld (timestamp_now),hl   ; save current time
041A5A AF          0309*       xor a                   ; clear carry
041A5B ED 52       0310*       sbc hl,de               ; hl = time elapsed
041A5D 22 42 1A 04 0311*       ld (timestamp_chg),hl   ; save elapsed time
041A61 C9          0312*       ret
041A62             0313*   
041A62             0314*   ; set a countdown timer
041A62             0315*   ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041A62             0316*   ; requires: timestamp_tick to be called at least once before this function
041A62             0317*   ; returns: hl = current time
041A62             0318*   ; destroys: hl
041A62             0319*   timestamp_tmr_set:
041A62 FD 2F 03    0320*       ld (iy+3),hl            ; set time remaining
041A65 2A 3C 1A 04 0321*       ld hl,(timestamp_now)   ; get current timestamp
041A69 FD 2F 00    0322*       ld (iy+0),hl            ; set start time
041A6C C9          0323*       ret
041A6D             0324*   
041A6D             0325*   ; gets time remaining on a countdown timer following the global timestamp
041A6D             0326*   ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041A6D             0327*   ; requires: timestamp_tick to be called at least once before this function
041A6D             0328*   ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041A6D             0329*   ;          sign flags: pos = time not expired,zero or neg = time expired
041A6D             0330*   ; destroys: af,hl,de
041A6D             0331*   timestamp_tmr_get:
041A6D ED 5B 3C 1A 0332*       ld de,(timestamp_now)   ; get current timestamp
       04          
041A72 FD 27 00    0333*       ld hl,(iy+0)            ; get start time
041A75 AF          0334*       xor a                   ; clear carry
041A76 ED 52       0335*       sbc hl,de               ; hl = time elapsed (will always be zero or negative)
041A78 FD 17 03    0336*       ld de,(iy+3)            ; get timer set value
041A7B AF          0337*       xor a                   ; clear carry
041A7C ED 5A       0338*       adc hl,de               ; hl = time remaining
041A7E             0339*                               ; (we do adc because add hl,rr doesn't set sign or zero flags)
041A7E C9          0340*       ret
041A7F             0341*   
041A7F             0342*   ; set a stopwatch
041A7F             0343*   ; returns: hl = start time
041A7F             0344*   ; destroys: hl,ix
041A7F             0345*   stopwatch_set:
041A7F             0346*       MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041A7F 3E 08       0001*M1 			LD	A, function
041A81 5B CF       0002*M1 			RST.LIL	08h
041A83 DD 27 00    0347*       ld hl,(ix+sysvar_time)  ; get current time
041A86 22 9B 1A 04 0348*       ld (stopwatch_started),hl            ; set start time
041A8A C9          0349*       ret
041A8B             0350*   
041A8B             0351*   ; gets time elapsed on a stopwatch
041A8B             0352*   ; returns: hl = time elapsed in 1/120ths of a second
041A8B             0353*   ; destroys: af,hl,de,ix
041A8B             0354*   stopwatch_get:
041A8B             0355*       MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041A8B 3E 08       0001*M1 			LD	A, function
041A8D 5B CF       0002*M1 			RST.LIL	08h
041A8F DD 27 00    0356*       ld hl,(ix+sysvar_time)  ; get current time
041A92 ED 5B 9B 1A 0357*       ld de,(stopwatch_started)            ; get start time
       04          
041A97 AF          0358*       xor a                   ; clear carry
041A98 ED 52       0359*       sbc hl,de               ; hl = time elapsed (will always be zero or positive)
041A9A C9          0360*       ret
041A9B             0361*   
041A9B             0362*   stopwatch_started: ds 3 ; buffer to hold stopwatch start time
041A9E             0363*   
041A9E             0364*   ; ------------------
041A9E             0365*   ; delay routine
041A9E             0366*   ; Author: Richard Turrnidge
041A9E             0367*   ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.asm
041A9E             0368*   ; routine waits a fixed time,then returns
041A9E             0369*   ; arrive with A =  the delay byte. One bit to be set only.
041A9E             0370*   ; eg. ld A,00000100b
041A9E             0371*   
041A9E             0372*   multiPurposeDelay:
       FF FF FF 
041A9E F5          0373*       push af
041A9F C5          0374*       push bc
041AA0 DD E5       0375*       push ix
041AA2 47          0376*       ld b,a
041AA3 3E 08       0377*       ld a,$08
041AA5 5B CF       0378*       RST.LIL	08h                 ; get IX pointer to sysvars
041AA7             0379*   
041AA7             0380*   waitLoop:
041AA7             0381*   
041AA7 DD 7E 00    0382*       ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
041AAA             0383*   
041AAA             0384*                                   ;   we check if bit set is same as last time we checked.
041AAA             0385*                                   ;   bit 0 - don't use
041AAA             0386*                                   ;   bit 1 - changes 64 times per second
041AAA             0387*                                   ;   bit 2 - changes 32 times per second
041AAA             0388*                                   ;   bit 3 - changes 16 times per second
041AAA             0389*   
041AAA             0390*                                   ;   bit 4 - changes 8 times per second
041AAA             0391*                                   ;   bit 5 - changes 4 times per second
041AAA             0392*                                   ;   bit 6 - changes 2 times per second
041AAA             0393*                                   ;   bit 7 - changes 1 times per second
041AAA A0          0394*       and b
041AAB 4F          0395*       ld c,a
041AAC 3A BD 1A 04 0396*       ld a,(oldTimeStamp)
041AB0 B9          0397*       cp c                        ; is A same as last value?
041AB1 28 F4       0398*       jr z,waitLoop              ; loop here if it is
041AB3 79          0399*       ld a,c
041AB4 32 BD 1A 04 0400*       ld (oldTimeStamp),a        ; set new value
041AB8             0401*   
041AB8 DD E1       0402*       pop ix
041ABA C1          0403*       pop bc
041ABB F1          0404*       pop af
041ABC C9          0405*       ret
041ABD             0406*   
041ABD 00          0407*   oldTimeStamp:   .db 00h
041ABE             0039        include "vdu.inc"
041ABE             0001*   ; VDU 30: Home cursor
041ABE             0002*   vdu_home_cursor:
041ABE 3E 1E       0003*       ld a,30
041AC0 5B D7       0004*   	rst.lil $10
041AC2 C9          0005*   	ret
041AC3             0006*   
041AC3             0007*   vdu_cursor_on:
041AC3 21 CE 1A 04 0008*   	ld hl,@cmd
041AC7 01 03 00 00 0009*   	ld bc,@end-@cmd
041ACB 5B DF       0010*   	rst.lil $18
041ACD C9          0011*   	ret
041ACE             0012*   @cmd:
041ACE 17 01 01    0013*   	db 23,1,1
041AD1             0014*   @end:
041AD1             0015*   
041AD1             0016*   vdu_cursor_off:
041AD1 21 DC 1A 04 0017*   	ld hl,@cmd
041AD5 01 03 00 00 0018*   	ld bc,@end-@cmd
041AD9 5B DF       0019*   	rst.lil $18
041ADB C9          0020*   	ret
041ADC             0021*   @cmd:
041ADC 17 01 00    0022*   	db 23,1,0
041ADF             0023*   @end:
041ADF             0024*   
041ADF             0025*   ; VDU 4: Write text at text cursor
041ADF             0026*   ; This causes text to be written at th current text cursor position. This is the default mode for text display.
041ADF             0027*   ; inputs: none
041ADF             0028*   ; prerequisites: the text cursor at the intended position on screen
041ADF             0029*   ; outputs: none
041ADF             0030*   ; destroys: af
041ADF             0031*   vdu_text_to_text_cursor:
041ADF 3E 04       0032*       ld a,4
041AE1 5B D7       0033*       rst.lil $10
041AE3 C9          0034*       ret
041AE4             0035*   ; end vdu_text_to_text_cursor
041AE4             0036*   
041AE4             0037*   ; set the text cursor to a specified location and print a string there
041AE4             0038*   ; inputs: hl = address of string to print, c,b = x,y text coordinates
041AE4             0039*   ; outputs: text
041AE4             0040*   ; destroys: af, bc, hl
041AE4             0041*   ; affects: moves text cursor to position after final char printed by default
041AE4             0042*   ;          unless overridden by VDU 23, 16 cursor control command settings
041AE4             0043*   ;          all subsequent print commands (rst.lil $10 or $18) will go to the text cursor
041AE4             0044*   vdu_print_to_text_location:
041AE4 E5          0045*       push hl ; preserve string pointer
041AE5 3E 04       0046*       ld a,4 ; VDU 4 char to text cursor
041AE7 5B D7       0047*       rst.lil $10
041AE9 CD 21 1B 04 0048*       call vdu_move_cursor
041AED E1          0049*       pop hl ; restore string pointer
041AEE CD 67 00 04 0050*       call printString
041AF2 C9          0051*       ret
041AF3             0052*   ; end vdu_print_at_text_location
041AF3             0053*   
041AF3             0054*   ; VDU 5: Write text at graphics cursor
041AF3             0055*   ; inputs: none
041AF3             0056*   ; prerequisites: the graphics cursor at the intended position on screen
041AF3             0057*   ; outputs: none
041AF3             0058*   ; destroys: af
041AF3             0059*   vdu_text_to_gfx_cursor:
041AF3 3E 05       0060*       ld a,5
041AF5 5B D7       0061*   	rst.lil $10
041AF7 C9          0062*   	ret
041AF8             0063*   ; end vdu_char_to_gfx_cursor
041AF8             0064*   
041AF8             0065*   ; set the graphics cursor to a specified location and print a string there
041AF8             0066*   ; inputs: hl = address of string to print, bc,de = x,y graphics coordinates
041AF8             0067*   ; outputs: text
041AF8             0068*   ; destroys: af, bc, de, hl
041AF8             0069*   ; affects: moves graphics cursor to position after final char printed by default
041AF8             0070*   ;          unless overridden by setting bit 6 of the cursor control register (VDU 23, 16)
041AF8             0071*   ;          all subsequent print commands (rst.lil $10 or $18) will go to the graphics cursor
041AF8             0072*   vdu_print_to_gfx_location:
041AF8 E5          0073*       push hl ; preserve string pointer
041AF9 3E 44       0074*       ld a,plot_pt+mv_abs
041AFB CD 23 20 04 0075*       call vdu_plot ; moves the graphics cursor to the specified location
041AFF 3E 05       0076*       ld a,5 ; VDU 5 char to gfx cursor
041B01 5B D7       0077*       rst.lil $10
041B03 E1          0078*       pop hl ; restore string pointer
041B04 01 00 00 00 0079*       ld bc,0
041B08 3E 00       0080*       ld a,0
041B0A 5B DF       0081*       rst.lil $18 ; print the string
041B0C C9          0082*       ret
041B0D             0083*   ; end vdu_print_at_gfx_location
041B0D             0084*   
041B0D             0085*   ; VDU 8: Move cursor back one character
041B0D             0086*   vdu_cursor_back:
041B0D 3E 08       0087*       ld a,8
041B0F 5B D7       0088*       rst.lil $10
041B11 C9          0089*       ret
041B12             0090*   ; end vdu_cursor_back
041B12             0091*   
041B12             0092*   ; VDU 9: Move cursor forward one character
041B12             0093*   vdu_cursor_forward:
041B12 3E 09       0094*       ld a,9
041B14 5B D7       0095*   	rst.lil $10
041B16 C9          0096*   	ret
041B17             0097*   ; end vdu_cursor_forward
041B17             0098*   
041B17             0099*   ; VDU 10: Move cursor down one line
041B17             0100*   vdu_cursor_down:
041B17 3E 0A       0101*       ld a,10
041B19 5B D7       0102*       rst.lil $10
041B1B C9          0103*       ret
041B1C             0104*   ; end vdu_cursor_down
041B1C             0105*   
041B1C             0106*   ; VDU 11: Move cursor up one line
041B1C             0107*   vdu_cursor_up:
041B1C 3E 0B       0108*       ld a,11
041B1E 5B D7       0109*       rst.lil $10
041B20 C9          0110*       ret
041B21             0111*   ; end vdu_cursor_up
041B21             0112*   
041B21             0113*   
041B21             0114*   ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041B21             0115*   ; inputs: c=x, b=y 8-bit unsigned integers
041B21             0116*   vdu_move_cursor:
041B21 ED 43 32 1B 0117*       ld (@x0),bc
       04          
041B26 21 31 1B 04 0118*   	ld hl,@cmd
041B2A 01 03 00 00 0119*   	ld bc,@end-@cmd
041B2E 5B DF       0120*   	rst.lil $18
041B30 C9          0121*   	ret
041B31 1F          0122*   @cmd: 	db 31
041B32 00          0123*   @x0:	db 0
041B33 00          0124*   @y0: 	db 0
041B34 00          0125*   @end: 	db 0 ; padding
041B35             0126*   
041B35             0127*   ; https://agonconsole8.github.io/agon-docs/vdp/VDU-Commands/#vdu-23-1-n-cursor-control
041B35             0128*   ; VDU 23, 16, setting, mask: Define cursor movement behaviour
041B35             0129*   ; inputs: l = setting, h = mask
041B35             0130*   ; new_setting = (current_setting AND mask) EOR setting
041B35             0131*   ; in English: mask controls which bit to turn on or off, setting is the value of the bits to set or reset
041B35             0132*   vdu_cursor_behaviour:
041B35 22 46 1B 04 0133*       ld (@setting),hl ; little-endian!
041B39 21 44 1B 04 0134*       ld hl,@cmd
041B3D 01 04 00 00 0135*       ld bc,@end-@cmd
041B41 5B DF       0136*       rst.lil $18
041B43 C9          0137*       ret
041B44 17 10       0138*   @cmd: db 23,16
041B46 00          0139*   @setting: db 0
041B47 00          0140*   @mask: db 0
041B48 00          0141*   @end: db 0 ; padding
041B49             0142*   
041B49             0143*   ; VDU 12: Clear text area (CLS)
041B49             0144*   vdu_cls:
041B49 3E 0C       0145*       ld a,12
041B4B 5B D7       0146*   	rst.lil $10
041B4D C9          0147*   	ret
041B4E             0148*   
041B4E             0149*   vdu_flip:
041B4E 21 59 1B 04 0150*   	ld hl,@cmd
041B52 01 03 00 00 0151*   	ld bc,@end-@cmd
041B56 5B DF       0152*   	rst.lil $18
041B58 C9          0153*   	ret
041B59 17 00 C3    0154*   @cmd: db 23,0,0xC3
041B5C             0155*   @end:
041B5C             0156*   
041B5C             0157*   ; VDU 16: Clear graphics area (CLG)
041B5C             0158*   vdu_clg:
041B5C 3E 10       0159*       ld a,16
041B5E 5B D7       0160*   	rst.lil $10
041B60 C9          0161*   	ret
041B61             0162*   
041B61             0163*   ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
041B61             0164*   ; VDU 23, 7: Scrolling
041B61             0165*   ;     VDU 23, 7, extent, direction, speed: Scroll the screen
041B61             0166*   ; inputs: a, extent; l, direction; h; speed
041B61             0167*   vdu_scroll_down:
041B61 32 76 1B 04 0168*   	ld (@extent),a
041B65 22 77 1B 04 0169*   	ld (@dir),hl ; implicitly populates @speed
041B69 21 74 1B 04 0170*   	ld hl,@cmd
041B6D 01 05 00 00 0171*   	ld bc,@end-@cmd
041B71 5B DF       0172*   	rst.lil $18     ;; Sending command to VDP
041B73 C9          0173*   	ret
041B74 17 07       0174*   @cmd:       db 23,7
041B76 00          0175*   @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
041B77 00          0176*   @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
041B78 00          0177*   @speed:     db 0x00 ; pixels
041B79 00          0178*   @end:		db 0x00 ; padding
041B7A             0179*   
041B7A             0180*   ; COLOUR MODES
041B7A             0181*   ; Mode	Effect
041B7A             0182*   ; 0	Set on-screen pixel to target colour value
041B7A             0183*   ; 1	OR value with the on-screen pixel
041B7A             0184*   ; 2	AND value with the on-screen pixel
041B7A             0185*   ; 3	XOR value with the on-screen pixel
041B7A             0186*   ; 4	Invert the on-screen pixel
041B7A             0187*   ; 5	No operation
041B7A             0188*   ; 6	AND the inverse of the specified colour with the on-screen pixel
041B7A             0189*   ; 7	OR the inverse of the specified colour with the on-screen pixel
041B7A             0190*   
041B7A             0191*   ; VDU 17, colour: Define text colour (COLOUR)
041B7A             0192*   vdu_colour_text:
041B7A 32 8A 1B 04 0193*   	ld (@arg),a
041B7E 21 89 1B 04 0194*   	ld hl,@cmd
041B82 01 02 00 00 0195*   	ld bc,@end-@cmd
041B86 5B DF       0196*   	rst.lil $18
041B88 C9          0197*   	ret
041B89 11          0198*   @cmd: db 17
041B8A 00          0199*   @arg: db 0
041B8B             0200*   @end:
041B8B             0201*   
041B8B             0202*   ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
041B8B             0203*   ; inputs: a=mode, c=colour (add 128 to set background colour)
041B8B             0204*   vdu_gcol:
041B8B 32 A0 1B 04 0205*   	ld (@mode),a
041B8F 79          0206*       ld a,c
041B90 32 A1 1B 04 0207*       ld (@col),a
041B94 21 9F 1B 04 0208*   	ld hl,@cmd
041B98 01 03 00 00 0209*   	ld bc,@end-@cmd
041B9C 5B DF       0210*   	rst.lil $18
041B9E C9          0211*   	ret
041B9F 12          0212*   @cmd:  db 18
041BA0 00          0213*   @mode: db 0
041BA1 00          0214*   @col:  db 0
041BA2             0215*   @end:
041BA2             0216*   
041BA2             0217*   
041BA2             0218*   ; VDU 28, left, bottom, right, top: Set text viewport **
041BA2             0219*   ; MIND THE LITTLE-ENDIANESS
041BA2             0220*   ; inputs: c=left,b=bottom,e=right,d=top
041BA2             0221*   ; outputs; nothing
041BA2             0222*   ; destroys: af, hl, bc, de
041BA2             0223*   vdu_set_txt_viewport:
041BA2 ED 43 B8 1B 0224*       ld (@lb),bc
       04          
041BA7 ED 53 BA 1B 0225*   	ld (@rt),de
       04          
041BAC 21 B7 1B 04 0226*   	ld hl,@cmd
041BB0 01 05 00 00 0227*   	ld bc,@end-@cmd
041BB4 5B DF       0228*   	rst.lil $18
041BB6 C9          0229*   	ret
041BB7 1C          0230*   @cmd:   db 28 ; set text viewport command
041BB8 00 00       0231*   @lb: 	dw 0x0000 ; set by bc
041BBA 00 00       0232*   @rt: 	dw 0x0000 ; set by de
041BBC 00          0233*   @end:   db 0x00	  ; padding
041BBD             0234*   
041BBD             0235*   ; Wait for VBLANK interrupt
041BBD             0236*   vdu_vblank:
041BBD DD E5       0237*       PUSH 	IX
041BBF             0238*   	MOSCALL	mos_sysvars
                       M1 Args: function=mos_sysvars 
041BBF 3E 08       0001*M1 			LD	A, function
041BC1 5B CF       0002*M1 			RST.LIL	08h
041BC3 DD 7E 00    0239*   	LD	A, (IX + sysvar_time + 0)
041BC6             0240*   @wait:
041BC6 DD BE 00    0241*       CP 	A, (IX + sysvar_time + 0)
041BC9 28 FB       0242*       JR	Z, @wait
041BCB DD E1       0243*       POP	IX
041BCD C9          0244*       RET
041BCE             0245*   
041BCE             0246*   ; VDU 29, x; y;: Set graphics origin
041BCE             0247*   ; This command sets the graphics origin.
041BCE             0248*   ; The origin is the point on the screen where the coordinates (0,0) are located.
041BCE             0249*   ; inputs: bc=x0,de=y0
041BCE             0250*   ; outputs; nothing
041BCE             0251*   ; destroys: a might make it out alive
041BCE             0252*   vdu_set_gfx_origin:
041BCE ED 43 E4 1B 0253*       ld (@x0),bc
       04          
041BD3 ED 53 E6 1B 0254*       ld (@y0),de
       04          
041BD8 21 E3 1B 04 0255*       ld hl,@cmd
041BDC 01 05 00 00 0256*       ld bc,@end-@cmd
041BE0 5B DF       0257*       rst.lil $18
041BE2 C9          0258*       ret
041BE3 1D          0259*   @cmd:   db 29 ; set graphics origin command
041BE4 00 00       0260*   @x0: 	dw 0x0000 ; set by bc
041BE6 00 00       0261*   @y0: 	dw 0x0000 ; set by de
041BE8 00          0262*   @end:   db 0x00	  ; padding
041BE9             0263*   
041BE9             0264*   ; VDU 24, left; bottom; right; top;: Set graphics viewport
041BE9             0265*   ; NOTE: the order of the y-coordinate parameters are inverted
041BE9             0266*   ; 	because we have turned off logical screen scaling
041BE9             0267*   ; NOTE: coordinates are relative to current gfx origin
041BE9             0268*   ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041BE9             0269*   ; outputs; nothing
041BE9             0270*   ; destroys: a might make it out alive
041BE9             0271*   vdu_set_gfx_viewport:
041BE9 ED 43 09 1C 0272*       ld (@x0),bc
       04          
041BEE FD 22 0B 1C 0273*       ld (@y1),iy
       04          
041BF3 DD 22 0D 1C 0274*   	ld (@x1),ix
       04          
041BF8 ED 53 0F 1C 0275*   	ld (@y0),de
       04          
041BFD 21 08 1C 04 0276*   	ld hl,@cmd
041C01 01 09 00 00 0277*   	ld bc,@end-@cmd
041C05 5B DF       0278*   	rst.lil $18
041C07 C9          0279*   	ret
041C08 18          0280*   @cmd:   db 24 ; set graphics viewport command
041C09 00 00       0281*   @x0: 	dw 0x0000 ; set by bc
041C0B 00 00       0282*   @y1: 	dw 0x0000 ; set by iy
041C0D 00 00       0283*   @x1: 	dw 0x0000 ; set by ix
041C0F 00 00       0284*   @y0: 	dw 0x0000 ; set by de
041C11 00          0285*   @end:   db 0x00	  ; padding
041C12             0286*   
041C12             0287*   ; VDU 26: Reset graphics and text viewports
041C12             0288*   vdu_reset_viewports:
041C12 3E 1A       0289*       ld a,26
041C14 5B D7       0290*       rst.lil $10
041C16 C9          0291*       ret
041C17             0292*   
041C17             0293*   ; SCREEN MODES
041C17             0294*   ; ===============================
041C17             0295*   ; Mode  Horz  Vert  Cols  Refresh
041C17             0296*   ; ---   ----  ----  ----  -------
041C17             0297*   ; 11    320   240   2     60hz
041C17             0298*   ; 139   320   240   2     60hz
041C17             0299*   ; 23    512   384   2     60hz
041C17             0300*   ; 151   512   384   2     60hz
041C17             0301*   ; 6     640   240   2     60hz
041C17             0302*   ; 134   640   240   2     60hz
041C17             0303*   ; 2     640   480   2     60hz
041C17             0304*   ; 130   640   480   2     60hz
041C17             0305*   ; 17    800   600   2     60hz
041C17             0306*   ; 145   800   600   2     60hz
041C17             0307*   ; 18    1024  768   2     60hz
041C17             0308*   ; 146   1024  768   2     60hz
041C17             0309*   ; ---   ----  ----  ----  -------
041C17             0310*   ; 10    320   240   4     60hz
041C17             0311*   ; 138   320   240   4     60hz
041C17             0312*   ; 22    512   384   4     60hz
041C17             0313*   ; 150   512   384   4     60hz
041C17             0314*   ; 5     640   240   4     60hz
041C17             0315*   ; 133   640   240   4     60hz
041C17             0316*   ; 1     640   480   4     60hz
041C17             0317*   ; 129   640   480   4     60hz
041C17             0318*   ; 16    800   600   4     60hz
041C17             0319*   ; 19    1024  768   4     60hz
041C17             0320*   ; ---   ----  ----  ----  -------
041C17             0321*   ; 9     320   240   16    60hz
041C17             0322*   ; 137   320   240   16    60hz
041C17             0323*   ; 21    512   384   16    60hz
041C17             0324*   ; 149   512   384   16    60hz
041C17             0325*   ; 4     640   240   16    60hz
041C17             0326*   ; 132   640   240   16    60hz
041C17             0327*   ; 0     640   480   16    60hz
041C17             0328*   ; 7     n/a   n/a   16    60hz
041C17             0329*   ; ---   ----  ----  ----  -------
041C17             0330*   ; 8     320   240   64    60hz
041C17             0331*   ; 136   320   240   64    60hz
041C17             0332*   ; 20    512   384   64    60hz
041C17             0333*   ; 3     640   240   64    60hz
041C17             0334*   ; ---   ----  ----  ----  -------
041C17             0335*   vdu_set_screen_mode:
041C17 32 27 1C 04 0336*   	ld (@arg),a
041C1B 21 26 1C 04 0337*   	ld hl,@cmd
041C1F 01 02 00 00 0338*   	ld bc,@end-@cmd
041C23 5B DF       0339*   	rst.lil $18
041C25 C9          0340*   	ret
041C26 16          0341*   @cmd: db 22 ; set screen mode
041C27 00          0342*   @arg: db 0  ; screen mode parameter
041C28             0343*   @end:
041C28             0344*   
041C28             0345*   ; get the current screen mode
041C28             0346*   ; inputs: none
041C28             0347*   ; outputs: a=screen mode
041C28             0348*   ; destroys: af, ix
041C28             0349*   vdu_get_screen_mode:
041C28             0350*       MOSCALL mos_sysvars
                       M1 Args: function=mos_sysvars 
041C28 3E 08       0001*M1 			LD	A, function
041C2A 5B CF       0002*M1 			RST.LIL	08h
041C2C DD 7E 27    0351*       ld a,(IX+sysvar_scrMode)
041C2F C9          0352*       ret
041C30             0353*   ; end vdu_get_screen_mode
041C30             0354*   
041C30             0355*   ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041C30             0356*   ; inputs: a is scaling mode, 1=on, 0=off
041C30             0357*   ; note: default setting on boot is scaling ON
041C30             0358*   vdu_set_scaling:
041C30 32 42 1C 04 0359*   	ld (@arg),a
041C34 21 3F 1C 04 0360*   	ld hl,@cmd
041C38 01 04 00 00 0361*   	ld bc,@end-@cmd
041C3C 5B DF       0362*   	rst.lil $18
041C3E C9          0363*   	ret
041C3F 17 00 C0    0364*   @cmd: db 23,0,0xC0
041C42 00          0365*   @arg: db 0  ; scaling on/off
041C43             0366*   @end:
041C43             0367*   
041C43             0368*   ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041C43             0369*   ; inputs: hl=bufferId
041C43             0370*   vdu_buff_select:
041C43 22 55 1C 04 0371*   	ld (@bufferId),hl
041C47 21 52 1C 04 0372*   	ld hl,@cmd
041C4B 01 05 00 00 0373*   	ld bc,@end-@cmd
041C4F 5B DF       0374*   	rst.lil $18
041C51 C9          0375*   	ret
041C52 17 1B 20    0376*   @cmd: db 23,27,0x20
041C55 00 00       0377*   @bufferId: dw 0x0000
041C57 00          0378*   @end: db 0x00 ; padding
041C58             0379*   
041C58             0380*   ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
041C58             0381*   ; inputs: a=format; bc=width; de=height
041C58             0382*   ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
041C58             0383*   ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
041C58             0384*   ; 0 	RGBA8888 (4-bytes per pixel)
041C58             0385*   ; 1 	RGBA2222 (1-bytes per pixel)
041C58             0386*   ; 2 	Mono/Mask (1-bit per pixel)
041C58             0387*   ; 3 	Reserved for internal use by VDP (“native” format)
041C58             0388*   vdu_bmp_create:
041C58 ED 43 74 1C 0389*       ld (@width),bc
       04          
041C5D ED 53 76 1C 0390*       ld (@height),de
       04          
041C62 32 78 1C 04 0391*       ld (@fmt),a
041C66 21 71 1C 04 0392*   	ld hl,@cmd
041C6A 01 08 00 00 0393*   	ld bc,@end-@cmd
041C6E 5B DF       0394*   	rst.lil $18
041C70 C9          0395*   	ret
041C71 17 1B 21    0396*   @cmd:       db 23,27,0x21
041C74 00 00       0397*   @width:     dw 0x0000
041C76 00 00       0398*   @height:    dw 0x0000
041C78 00          0399*   @fmt:       db 0x00
041C79             0400*   @end:
041C79             0401*   
041C79             0402*   ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
041C79             0403*   ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
041C79             0404*   vdu_load_img_rgba2_to_8:
041C79             0405*   ; backup the target buffer id and image dimensions
041C79 E5          0406*       push hl
041C7A D5          0407*       push de
041C7B C5          0408*       push bc
041C7C             0409*   ; load the rgba2 image to working buffer 65534
041C7C 21 FE FF 00 0410*       ld hl,65534 ; temporary working buffer id
041C80 CD 57 1D 04 0411*   	call vdu_load_buffer_from_file
041C84             0412*   ; restore the image dimensions and target buffer id
041C84 C1          0413*       pop bc
041C85 D1          0414*       pop de
041C86 E1          0415*       pop hl
041C87             0416*   ; fall through to vdu_rgba2_to_8
041C87             0417*   
041C87             0418*   ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
041C87             0419*   ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
041C87             0420*   ; the "expand bitmap" command is:
041C87             0421*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041C87             0422*   ; and then to reverse the byte order to fix endian-ness:
041C87             0423*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041C87             0424*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041C87             0425*   ; VDU 23,27,&20,targetBufferID%;
041C87             0426*   ; VDU 23,27,&21,width%;height%;0
041C87             0427*   ; -------------------------------------------------------------------
041C87             0428*   ; inputs: bc,de image width,height ; hl = targetBufferId
041C87             0429*   ; prerequisites: rgba2 image data loaded into workingBufferId 65534
041C87             0430*   vdu_rgba2_to_8:
041C87             0431*   ; load the image dimensions and buffer id parameters
041C87 ED 43 E3 1C 0432*       ld (@width),bc
       04          
041C8C ED 53 E5 1C 0433*       ld (@height),de
       04          
041C91 22 C8 1C 04 0434*       ld (@bufferId0),hl
041C95 22 D5 1C 04 0435*       ld (@bufferId2),hl
041C99 22 DE 1C 04 0436*       ld (@bufferId1),hl
041C9D             0437*   ; clean up bytes that got stomped on by the ID loads
041C9D 3E 48       0438*       ld a,0x48
041C9F 32 CA 1C 04 0439*       ld (@bufferId0+2),a
041CA3 3E 17       0440*       ld a,23
041CA5 32 E0 1C 04 0441*       ld (@bufferId1+2),a
041CA9 3E 18       0442*       ld a,24
041CAB 32 D7 1C 04 0443*       ld (@bufferId2+2),a
041CAF AF          0444*       xor a
041CB0 32 E7 1C 04 0445*       ld (@height+2),a
041CB4             0446*   ; send the vdu command strings
041CB4 21 BF 1C 04 0447*       ld hl,@beg
041CB8 01 29 00 00 0448*       ld bc,@end-@beg
041CBC 5B DF       0449*       rst.lil $18
041CBE C9          0450*       ret
041CBF             0451*   @beg:
041CBF             0452*   ; Command 14: Consolidate blocks in a buffer
041CBF             0453*   ; VDU 23, 0, &A0, bufferId; 14
041CBF 17 00 A0    0454*       db 23,0,0xA0
041CC2 FE FF       0455*       dw 65534 ; workingBufferId
041CC4 0E          0456*       db 14 ; consolidate blocks
041CC5             0457*   ; the "expand bitmap" command is:
041CC5             0458*   ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041CC5 17 00 A0    0459*       db 23,0,0xA0
041CC8 00 00       0460*   @bufferId0: dw 0x0000 ; targetBufferId
041CCA 48          0461*       db 0x48 ; given as decimal command 72 in the docs
041CCB 02          0462*       db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
041CCC FE FF       0463*       dw 65534 ; sourceBufferId
041CCE 00 7F BF FF 0464*       db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041CD2             0465*   ; reverse the byte order to fix endian-ness:
041CD2             0466*   ; Command 24: Reverse the order of data of blocks within a buffer
041CD2             0467*   ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041CD2             0468*   ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041CD2 17 00 A0    0469*       db 23,0,0xA0
041CD5 00 00       0470*   @bufferId2:    dw 0x0000 ; targetBufferId
041CD7 18          0471*       db 24 ; reverse byte order
041CD8 04          0472*       db 4 ; option: Reverse data of the value size within chunk of data of the specified size
041CD9 04 00       0473*       dw 4 ; size (4 bytes)
041CDB             0474*   ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041CDB             0475*   ; VDU 23,27,&20,targetBufferID%;
041CDB 17 1B 20    0476*       db 23,27,0x20 ; select bitmap
041CDE 00 00       0477*   @bufferId1: dw 0x0000 ; targetBufferId
041CE0             0478*   ; VDU 23,27,&21,width%;height%;0
041CE0 17 1B 21    0479*       db 23,27,0x21 ; create bitmap from buffer
041CE3 00 00       0480*   @width: dw 0x0000
041CE5 00 00       0481*   @height: dw 0x0000
041CE7 00          0482*       db 0x00 ; rgba8888 format
041CE8             0483*   @end:
041CE8             0484*   
041CE8             0485*   ; scratch variables
041CE8 00 00 00    0486*   bufferId0: dl 0x000000
041CEB 00 00 00    0487*   bufferId1: dl 0x000000
041CEE             0488*   
041CEE             0489*   ; load a vdu buffer from local memory
041CEE             0490*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041CEE             0491*   vdu_load_buffer:
041CEE ED 43 17 1D 0492*       ld (@length),bc
       04          
041CF3 D5          0493*       push de ; save data pointer
041CF4             0494*   ; send the vdu command string
041CF4 7D          0495*       ld a,l
041CF5 32 14 1D 04 0496*       ld (@bufferId),a
041CF9 7C          0497*       ld a,h
041CFA 32 15 1D 04 0498*       ld (@bufferId+1),a
041CFE 21 11 1D 04 0499*       ld hl,@cmd
041D02 01 08 00 00 0500*       ld bc,@end-@cmd
041D06 5B DF       0501*       rst.lil $18
041D08             0502*   ; send the buffer data
041D08 E1          0503*       pop hl ; pointer to data
041D09 ED 4B 17 1D 0504*       ld bc,(@length)
       04          
041D0E 5B DF       0505*       rst.lil $18 ; send it
041D10 C9          0506*       ret
041D11             0507*   ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041D11 17 00 A0    0508*   @cmd:       db 23,0,0xA0
041D14 00 00       0509*   @bufferId:	dw 0x0000
041D16 00          0510*   		    db 0 ; load buffer
041D17 00 00       0511*   @length:	dw 0x0000
041D19 00          0512*   @end: db 0 ; padding
041D1A             0513*   
041D1A             0514*   ; Command 14: Consolidate blocks in a buffer
041D1A             0515*   vdu_consolidate_buffer:
041D1A             0516*   ; set parameters for vdu call
041D1A 7D          0517*       ld a,l
041D1B 32 32 1D 04 0518*       ld (@bufferId),a
041D1F 7C          0519*       ld a,h
041D20 32 33 1D 04 0520*       ld (@bufferId+1),a
041D24 21 2F 1D 04 0521*       ld hl,@beg
041D28 01 06 00 00 0522*       ld bc,@end-@beg
041D2C 5B DF       0523*       rst.lil $18
041D2E C9          0524*       ret
041D2F             0525*   ; VDU 23, 0, &A0, bufferId; 14
041D2F 17 00 A0    0526*   @beg: db 23,0,0xA0
041D32 00 00       0527*   @bufferId: dw 0x0000
041D34 0E          0528*              db 14
041D35             0529*   @end:
041D35             0530*   
041D35             0531*   ; load an image file to a buffer and make it a bitmap
041D35             0532*   ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
041D35             0533*   vdu_load_img:
041D35             0534*   ; back up image type and dimension parameters
041D35 22 E8 1C 04 0535*       ld (bufferId0),hl
041D39 F5          0536*       push af
041D3A C5          0537*   	push bc
041D3B D5          0538*   	push de
041D3C             0539*   ; load the image
041D3C CD 57 1D 04 0540*   	call vdu_load_buffer_from_file
041D40             0541*   ; now make it a bitmap
041D40 2A E8 1C 04 0542*       ld hl,(bufferId0)
041D44 CD 1A 1D 04 0543*       call vdu_consolidate_buffer
041D48 2A E8 1C 04 0544*       ld hl,(bufferId0)
041D4C CD 43 1C 04 0545*       call vdu_buff_select
041D50 D1          0546*   	pop de ; image height
041D51 C1          0547*   	pop bc ; image width
041D52 F1          0548*   	pop af ; image type
041D53 C3 58 1C 04 0549*   	jp vdu_bmp_create ; will return to caller from there
041D57             0550*   
041D57             0551*   ; inputs: hl = bufferId; iy = pointer to filename
041D57             0552*   vdu_load_buffer_from_file:
041D57 22 E8 1C 04 0553*       ld (bufferId0),hl
041D5B             0554*   
041D5B             0555*   ; clear target buffer
041D5B CD 03 1F 04 0556*       call vdu_clear_buffer
041D5F             0557*   
041D5F             0558*   ; open the file in read mode
041D5F             0559*   ; Open a file
041D5F             0560*   ; HLU: Filename
041D5F             0561*   ;   C: Mode
041D5F             0562*   ; Returns:
041D5F             0563*   ;   A: Filehandle, or 0 if couldn't open
041D5F FD E5       0564*   	push iy ; pointer to filename
041D61 E1          0565*   	pop hl
041D62 0E 01       0566*   	ld c,fa_read
041D64             0567*       MOSCALL mos_fopen
                       M1 Args: function=mos_fopen 
041D64 3E 0A       0001*M1 			LD	A, function
041D66 5B CF       0002*M1 			RST.LIL	08h
041D68 32 A3 1D 04 0568*       ld (@filehandle),a
041D6C             0569*   
041D6C             0570*   @read_file:
041D6C             0571*   ; Read a block of data from a file
041D6C             0572*   ;   C: Filehandle
041D6C             0573*   ; HLU: Pointer to where to write the data to
041D6C             0574*   ; DEU: Number of bytes to read
041D6C             0575*   ; Returns:
041D6C             0576*   ; DEU: Number of bytes read
041D6C 3A A3 1D 04 0577*       ld a,(@filehandle)
041D70 4F          0578*       ld c,a
041D71 21 00 E0 B7 0579*       ld hl,filedata
041D75 11 00 20 00 0580*       ld de,8192 ; max we can read into onboard sram at one time
041D79             0581*       MOSCALL mos_fread
                       M1 Args: function=mos_fread 
041D79 3E 1A       0001*M1 			LD	A, function
041D7B 5B CF       0002*M1 			RST.LIL	08h
041D7D             0582*   
041D7D             0583*   ; test de for zero bytes read
041D7D 21 00 00 00 0584*       ld hl,0
041D81 AF          0585*       xor a ; clear carry
041D82 ED 52       0586*       sbc hl,de
041D84 CA 9A 1D 04 0587*       jp z,@close_file
041D88             0588*   
041D88             0589*   ; load a vdu buffer from local memory
041D88             0590*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041D88 2A E8 1C 04 0591*       ld hl,(bufferId0)
041D8C D5          0592*       push de ; chunksize
041D8D C1          0593*       pop bc
041D8E 11 00 E0 B7 0594*       ld de,filedata
041D92 CD EE 1C 04 0595*       call vdu_load_buffer
041D96             0596*   
041D96             0597*   ; read the next block
041D96 C3 6C 1D 04 0598*       jp @read_file
041D9A             0599*   
041D9A             0600*   ; close the file
041D9A             0601*   @close_file:
041D9A 3A A3 1D 04 0602*       ld a,(@filehandle)
041D9E             0603*       MOSCALL mos_fclose
                       M1 Args: function=mos_fclose 
041D9E 3E 0B       0001*M1 			LD	A, function
041DA0 5B CF       0002*M1 			RST.LIL	08h
041DA2 C9          0604*       ret ; vdu_load_buffer_from_file
041DA3             0605*   
041DA3 00          0606*   @filehandle: db 0 ; file handle
041DA4 00 00 00    0607*   @fil: dl 0 ; pointer to FIL struct
041DA7             0608*   
041DA7 00 00 00    0609*   @chunkpointer: dl 0 ; pointer to current chunk
041DAA             0610*   
041DAA             0611*   ; File information structure (FILINFO)
041DAA             0612*   @filinfo:
041DAA 00 00 00 00 0613*   @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
041DAE 00 00       0614*   @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
041DB0 00 00       0615*   @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041DB2 00          0616*   @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041DB3 00 00 00 00 0617*   @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
041DC0 00 00 00 00 0618*   @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041EC0             0040        include "vdu_buffered_api.inc"
041EC0             0001*   ; https://agonconsole8.github.io/agon-docs/vdp/Buffered-Commands-API/
041EC0             0002*   
041EC0             0003*   ; Command 0: Write block to a buffer
041EC0             0004*   ; VDU 23, 0, &A0, bufferId; 0, length; <buffer-data>
041EC0             0005*   ; inputs: hl = bufferId, bc = length of data, de = pointer to data
041EC0             0006*   vdu_write_block_to_buffer:
041EC0             0007*   ; back up input parameters
041EC0 D5          0008*       push de ; pointer to data
041EC1 C5          0009*       push bc ; length of data
041EC2             0010*   ; set up the vdu command string
041EC2 22 E2 1E 04 0011*       ld (@bufferId),hl
041EC6 ED 43 E5 1E 0012*       ld (@length),bc
       04          
041ECB AF          0013*       xor a ; load buffer
041ECC 32 E4 1E 04 0014*       ld (@bufferId+2),a
041ED0 21 DF 1E 04 0015*       ld hl,@cmd0
041ED4 01 08 00 00 0016*       ld bc,@end0-@cmd0
041ED8 5B DF       0017*       rst.lil $18
041EDA             0018*   ; send the buffer data
041EDA C1          0019*       pop bc ; length of data
041EDB E1          0020*       pop hl ; pointer to data (was de)
041EDC 5B DF       0021*       rst.lil $18 ; send it
041EDE C9          0022*       ret
041EDF             0023*   ; command string data
041EDF 17 00 A0    0024*   @cmd0:      db 23,0,0xA0
041EE2 00 00       0025*   @bufferId:	dw 0x0000
041EE4 00          0026*               db 0 ; load buffer
041EE5 00 00       0027*   @length:	dw 0x0000
041EE7 00          0028*   @end0:      db 0x00 ; padding
041EE8             0029*   ; end vdu_write_block_to_buffer
041EE8             0030*   
041EE8             0031*   ; Command 1: Call a buffer
041EE8             0032*   ; VDU 23, 0, &A0, bufferId; 1
041EE8             0033*   ; inputs: hl = bufferId
041EE8             0034*   vdu_call_buffer:
041EE8 22 00 1F 04 0035*       ld (@bufferId),hl
041EEC 3E 01       0036*       ld a,1 ; call buffer
041EEE 32 02 1F 04 0037*       ld (@bufferId+2),a
041EF2 21 FD 1E 04 0038*       ld hl,@cmd
041EF6 01 06 00 00 0039*       ld bc,@end-@cmd
041EFA 5B DF       0040*       rst.lil $18
041EFC C9          0041*       ret
041EFD 17 00 A0    0042*   @cmd:     db 23,0,0xA0
041F00 00 00       0043*   @bufferId: dw 0x0000
041F02 01          0044*              db 1 ; call buffer
041F03             0045*   @end:
041F03             0046*   ; end vdu_call_buffer
041F03             0047*   
041F03             0048*   ; Command 2: Clear a buffer
041F03             0049*   ; VDU 23, 0 &A0, bufferId; 2
041F03             0050*   ; inputs: hl = bufferId
041F03             0051*   vdu_clear_buffer:
041F03 22 1B 1F 04 0052*       ld (@bufferId),hl
041F07 3E 02       0053*       ld a,2 ; clear buffer
041F09 32 1D 1F 04 0054*       ld (@bufferId+2),a
041F0D 21 18 1F 04 0055*       ld hl,@cmd
041F11 01 06 00 00 0056*       ld bc,@end-@cmd
041F15 5B DF       0057*       rst.lil $18
041F17 C9          0058*       ret
041F18 17 00 A0    0059*   @cmd:     db 23,0,0xA0
041F1B 00 00       0060*   @bufferId: dw 0x0000
041F1D 02          0061*              db 2 ; clear buffer
041F1E             0062*   @end:
041F1E             0063*   ; end vdu_clear_buffer
041F1E             0064*   
041F1E             0065*   ; Clear all buffers
041F1E             0066*   ; inputs: none
041F1E             0067*   vdu_clear_all_buffers:
041F1E             0068*   ; clear all buffers
041F1E 21 29 1F 04 0069*       ld hl,@beg
041F22 01 06 00 00 0070*       ld bc,@end-@beg
041F26 5B DF       0071*       rst.lil $18
041F28 C9          0072*       ret
041F29 17 00 A0    0073*   @beg: db 23,0,$A0
041F2C FF FF       0074*         dw -1 ; bufferId -1 (65535) means clear all buffers
041F2E 02          0075*         db 2  ; command 2: clear a buffer
041F2F             0076*   @end:
041F2F             0077*   ; end vdu_clear_all_buffers
041F2F             0078*   
041F2F             0079*   ; Command 3: Create a writeable buffer
041F2F             0080*   ; VDU 23, 0 &A0, bufferId; 3, length;
041F2F             0081*   ; inputs: hl = bufferId, bc = length
041F2F             0082*   vdu_create_writeable_buffer:
041F2F 22 4C 1F 04 0083*       ld (@bufferId),hl
041F33 ED 43 4F 1F 0084*       ld (@length),bc
       04          
041F38 3E 03       0085*       ld a,3 ; create writeable buffer
041F3A 32 4E 1F 04 0086*       ld (@bufferId+2),a
041F3E 21 49 1F 04 0087*       ld hl,@cmd
041F42 01 08 00 00 0088*       ld bc,@end-@cmd
041F46 5B DF       0089*       rst.lil $18
041F48 C9          0090*       ret
041F49 17 00 A0    0091*   @cmd:     db 23,0,0xA0
041F4C 00 00       0092*   @bufferId: dw 0x0000
041F4E 03          0093*              db 3 ; create writeable buffer
041F4F 00 00       0094*   @length: dw 0x0000
041F51 00          0095*   @end:     db 0x00 ; padding
041F52             0096*   ; end vdu_create_writeable_buffer
041F52             0097*   
041F52             0098*   ; Command 4: Set output stream to a buffer
041F52             0099*   ; VDU 23, 0 &A0, bufferId; 4
041F52             0100*   ; inputs: hl = bufferId
041F52             0101*   vdu_set_output_stream_buffer:
041F52 22 6A 1F 04 0102*       ld (@bufferId),hl
041F56 3E 04       0103*       ld a,4 ; set output stream to buffer
041F58 32 6C 1F 04 0104*       ld (@bufferId+2),a
041F5C 21 67 1F 04 0105*       ld hl,@cmd
041F60 01 06 00 00 0106*       ld bc,@end-@cmd
041F64 5B DF       0107*       rst.lil $18
041F66 C9          0108*       ret
041F67 17 00 A0    0109*   @cmd:     db 23,0,0xA0
041F6A 00 00       0110*   @bufferId: dw 0x0000
041F6C 04          0111*              db 4 ; set output stream to buffer
041F6D 00          0112*   @end:     db 0x00 ; padding
041F6E             0113*   ; end vdu_set_output_stream_buffer
041F6E             0114*   
041F6E             0115*   ; Command 5: Adjust buffer contents
041F6E             0116*   ; VDU 23, 0, &A0, bufferId; 5, operation, offset; [count;] <operand>, [arguments]
041F6E             0117*   vdu_adjust_buffer:
041F6E C9          0118*       ret ; TODO: implement
041F6F             0119*   ; end vdu_adjust_buffer
041F6F             0120*   
041F6F             0121*   ; Command 6: Conditionally call a buffer
041F6F             0122*   ; VDU 23, 0, &A0, bufferId; 6, operation, checkBufferId; checkOffset; [arguments]
041F6F             0123*   vdu_call_buffer_conditional:
041F6F C9          0124*       ret ; TODO: implement
041F70             0125*   ; end vdu_call_buffer_conditional
041F70             0126*   
041F70             0127*   ; Command 7: Jump to a buffer
041F70             0128*   ; VDU 23, 0, &A0, bufferId; 7
041F70             0129*   ; inputs: hl = bufferId
041F70             0130*   vdu_jump_to_buffer:
041F70 22 88 1F 04 0131*       ld (@bufferId),hl
041F74 3E 07       0132*       ld a,7 ; jump to buffer
041F76 32 8A 1F 04 0133*       ld (@bufferId+2),a
041F7A 21 85 1F 04 0134*       ld hl,@cmd
041F7E 01 06 00 00 0135*       ld bc,@end-@cmd
041F82 5B DF       0136*       rst.lil $18
041F84 C9          0137*       ret
041F85 17 00 A0    0138*   @cmd:     db 23,0,0xA0
041F88 00 00       0139*   @bufferId: dw 0x0000
041F8A 07          0140*              db 7 ; jump to buffer
041F8B 00          0141*   @end:     db 0x00 ; padding
041F8C             0142*   ; end vdu_jump_to_buffer
041F8C             0143*   
041F8C             0144*   ; Command 8: Conditional Jump to a buffer
041F8C             0145*   ; VDU 23, 0, &A0, bufferId; 8, operation, checkBufferId; checkOffset; [arguments]
041F8C             0146*   vdu_jump_to_buffer_conditional:
041F8C C9          0147*       ret ; TODO: implement
041F8D             0148*   ; end vdu_jump_to_buffer_conditional
041F8D             0149*   
041F8D             0150*   ; Command 9: Jump to an offset in a buffer
041F8D             0151*   ; VDU 23, 0, &A0, bufferId; 9, offset; offsetHighByte, [blockNumber;]
041F8D             0152*   vdu_jump_to_buffer_offset:
041F8D C9          0153*       ret ; TODO: implement
041F8E             0154*   ; end vdu_jump_to_buffer_offset
041F8E             0155*   
041F8E             0156*   ; Command 10: Conditional jump to an offset in a buffer
041F8E             0157*   ; VDU 23, 0, &A0, bufferId; 10, offset; offsetHighByte, [blockNumber;] [arguments]
041F8E             0158*   vdu_jump_to_buffer_offset_conditional:
041F8E C9          0159*       ret ; TODO: implement
041F8F             0160*   ; end vdu_jump_to_buffer_offset_conditional
041F8F             0161*   
041F8F             0162*   ; Command 11: Call buffer with an offset
041F8F             0163*   ; VDU 23, 0, &A0, bufferId; 11, offset; offsetHighByte, [blockNumber;]
041F8F             0164*   vdu_call_buffer_offset:
041F8F C9          0165*       ret ; TODO: implement
041F90             0166*   ; end vdu_call_buffer_offset
041F90             0167*   
041F90             0041        include "vdu_fonts.inc"
041F90             0001*   ; select font
041F90             0002*   ; inputs: hl = bufferId, a = font flags
041F90             0003*   ; Flags:
041F90             0004*   ; Bit	Description
041F90             0005*   ; 0	Adjust cursor position to ensure text baseline is aligned
041F90             0006*   ;   0: Do not adjust cursor position (best for changing font on a new line)
041F90             0007*   ;   1: Adjust cursor position (best for changing font in the middle of a line)
041F90             0008*   ; 1-7	Reserved for future use
041F90             0009*   ; VDU 23, 0, &95, 0, bufferId; flags: Select font
041F90             0010*   vdu_font_select:
041F90 22 A7 1F 04 0011*       ld (@bufferId),hl
041F94 32 A9 1F 04 0012*       ld (@flags),a
041F98 21 A3 1F 04 0013*       ld hl,@cmd
041F9C 01 07 00 00 0014*       ld bc,@end-@cmd
041FA0 5B DF       0015*       rst.lil $18
041FA2 C9          0016*       ret
041FA3 17 00 95 00 0017*   @cmd: db 23, 0, 0x95, 0
041FA7 00 00       0018*   @bufferId: dw 0x0000
041FA9 00          0019*   @flags: db 0x00
041FAA             0020*   @end:
041FAA             0021*   
041FAA             0022*   ; create font from buffer
041FAA             0023*   ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041FAA             0024*   ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041FAA             0025*   vdu_font_create:
041FAA 22 CF 1F 04 0026*       ld (@bufferId),hl
041FAE ED 53 D1 1F 0027*       ld (@width),de ; also loads height
       04          
041FB3 32 D4 1F 04 0028*       ld (@flags),a
041FB7 7A          0029*       ld a,d ; height
041FB8 32 D3 1F 04 0030*       ld (@ascent),a ; ascent = height
041FBC             0031*   ; consolidate buffer
041FBC CD 1A 1D 04 0032*       call vdu_consolidate_buffer
041FC0             0033*   ; create font
041FC0 21 CB 1F 04 0034*       ld hl,@cmd
041FC4 01 0A 00 00 0035*       ld bc,@end-@cmd
041FC8 5B DF       0036*       rst.lil $18
041FCA C9          0037*       ret
041FCB 17 00 95 01 0038*   @cmd: db 23, 0, 0x95, 1
041FCF 00 00       0039*   @bufferId: dw 0x0000
041FD1 00          0040*   @width: db 0x00
041FD2 00          0041*   @height: db 0x00
041FD3 00          0042*   @ascent: db 0x00
041FD4 00          0043*   @flags: db 0x00
041FD5             0044*   @end:
041FD5             0045*   
041FD5             0046*   ; set or adjust font property
041FD5             0047*   ; inputs: hl = bufferId, a = field, de = value
041FD5             0048*   ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
041FD5             0049*   vdu_font_property:
041FD5 22 F1 1F 04 0050*       ld (@bufferId),hl
041FD9 32 F3 1F 04 0051*       ld (@field),a
041FDD ED 53 F4 1F 0052*       ld (@value),de
       04          
041FE2 21 ED 1F 04 0053*       ld hl,@cmd
041FE6 01 09 00 00 0054*       ld bc,@end-@cmd
041FEA 5B DF       0055*       rst.lil $18
041FEC C9          0056*       ret
041FED 17 00 95 02 0057*   @cmd: db 23, 0, 0x95, 2
041FF1 00 00       0058*   @bufferId: dw 0x0000
041FF3 00          0059*   @field: db 0x00
041FF4 00 00       0060*   @value: dw 0x0000
041FF6 00          0061*   @end: db 0x00 ; padding
041FF7             0062*   
041FF7             0063*   ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
041FF7             0064*   
041FF7             0065*   ; Clear/Delete font
041FF7             0066*   ; inputs: hl = bufferId
041FF7             0067*   ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
041FF7             0068*   vdu_font_clear:
041FF7 22 0A 20 04 0069*       ld (@bufferId),hl
041FFB 21 06 20 04 0070*       ld hl,@cmd
041FFF 01 06 00 00 0071*       ld bc,@end-@cmd
042003 5B DF       0072*       rst.lil $18
042005 C9          0073*       ret
042006 17 00 95 04 0074*   @cmd: db 23, 0, 0x95, 4
04200A 00 00       0075*   @bufferId: dw 0x0000
04200C 00          0076*   @end: db 0x00 ; padding
04200D             0077*   
04200D             0078*   ; Copy system font to buffer
04200D             0079*   ; inputs: hl = bufferId
04200D             0080*   ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
04200D             0081*   vdu_font_copy_system:
04200D 22 20 20 04 0082*       ld (@bufferId),hl
042011 21 1C 20 04 0083*       ld hl,@cmd
042015 01 06 00 00 0084*       ld bc,@end-@cmd
042019 5B DF       0085*       rst.lil $18
04201B C9          0086*       ret
04201C 17 00 95 05 0087*   @cmd: db 23, 0, 0x95, 5
042020 00 00       0088*   @bufferId: dw 0x0000
042022 00          0089*   @end: db 0x00 ; padding
042023             0042        include "vdu_plot.inc"
042023             0001*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
042023             0002*   ; PLOT code 	(Decimal) 	Effect
042023             0003*   ; &00-&07 	0-7 	Solid line, includes both ends
042023             0004*   plot_sl_both: equ 0x00
042023             0005*   
042023             0006*   ; &08-&0F 	8-15 	Solid line, final point omitted
042023             0007*   plot_sl_first: equ 0x08
042023             0008*   
042023             0009*   ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
042023             0010*   ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
042023             0011*   
042023             0012*   ; &20-&27 	32-39 	Solid line, first point omitted
042023             0013*   plot_sl_last: equ 0x20
042023             0014*   
042023             0015*   ; &28-&2F 	40-47 	Solid line, both points omitted
042023             0016*   plot_sl_none: equ 0x28
042023             0017*   
042023             0018*   ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
042023             0019*   ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
042023             0020*   
042023             0021*   ; &40-&47 	64-71 	Point plot
042023             0022*   plot_pt: equ 0x40
042023             0023*   
042023             0024*   ; &48-&4F 	72-79 	Line fill left and right to non-background §§
042023             0025*   plot_lf_lr_non_bg: equ 0x48
042023             0026*   
042023             0027*   ; &50-&57 	80-87 	Triangle fill
042023             0028*   plot_tf: equ 0x50
042023             0029*   
042023             0030*   ; &58-&5F 	88-95 	Line fill right to background §§
042023             0031*   plot_lf_r_bg: equ 0x58
042023             0032*   
042023             0033*   ; &60-&67 	96-103 	Rectangle fill
042023             0034*   plot_rf: equ 0x60
042023             0035*   
042023             0036*   ; &68-&6F 	104-111 	Line fill left and right to foreground §§
042023             0037*   plot_lf_lr_fg: equ 0x60
042023             0038*   
042023             0039*   ; &70-&77 	112-119 	Parallelogram fill
042023             0040*   plot_pf: equ 0x70
042023             0041*   
042023             0042*   ; &78-&7F 	120-127 	Line fill right to non-foreground §§
042023             0043*   plot_lf_r_non_fg: equ 0x78
042023             0044*   
042023             0045*   ; &80-&87 	128-135 	Not supported (Flood until non-background)
042023             0046*   ; &88-&8F 	136-143 	Not supported (Flood until foreground)
042023             0047*   
042023             0048*   ; &90-&97 	144-151 	Circle outline
042023             0049*   plot_co: equ 0x90
042023             0050*   
042023             0051*   ; &98-&9F 	152-159 	Circle fill
042023             0052*   plot_cf: equ 0x98
042023             0053*   
042023             0054*   ; &A0-&A7 	160-167 	Not supported (Circular arc)
042023             0055*   ; &A8-&AF 	168-175 	Not supported (Circular segment)
042023             0056*   ; &B0-&B7 	176-183 	Not supported (Circular sector)
042023             0057*   
042023             0058*   ; &B8-&BF 	184-191 	Rectangle copy/move
042023             0059*   plot_rcm: equ 0xB8
042023             0060*   
042023             0061*   ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
042023             0062*   ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
042023             0063*   ; &D0-&D7 	208-215 	Not defined
042023             0064*   ; &D8-&DF 	216-223 	Not defined
042023             0065*   ; &E0-&E7 	224-231 	Not defined
042023             0066*   
042023             0067*   ; &E8-&EF 	232-239 	Bitmap plot §
042023             0068*   plot_bmp: equ 0xE8
042023             0069*   
042023             0070*   ; &F0-&F7 	240-247 	Not defined
042023             0071*   ; &F8-&FF 	248-255 	Not defined
042023             0072*   
042023             0073*   ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
042023             0074*   ; Agon Console8 VDP 2.2.0
042023             0075*   
042023             0076*   ; Within each group of eight plot codes, the effects are as follows:
042023             0077*   ; Plot code 	Effect
042023             0078*   ; 0 	Move relative
042023             0079*   mv_rel: equ 0
042023             0080*   
042023             0081*   ; 1 	Plot relative in current foreground colour
042023             0082*   dr_rel_fg: equ 1
042023             0083*   
042023             0084*   ; 2 	Not supported (Plot relative in logical inverse colour)
042023             0085*   ; 3 	Plot relative in current background colour
042023             0086*   dr_rel_bg: equ 3
042023             0087*   
042023             0088*   ; 4 	Move absolute
042023             0089*   mv_abs: equ 4
042023             0090*   
042023             0091*   ; 5 	Plot absolute in current foreground colour
042023             0092*   dr_abs_fg: equ 5
042023             0093*   
042023             0094*   ; 6 	Not supported (Plot absolute in logical inverse colour)
042023             0095*   ; 7 	Plot absolute in current background colour
042023             0096*   dr_abs_bg: equ 7
042023             0097*   
042023             0098*   ; Codes 0-3 use the position data provided as part of the command
042023             0099*   ; as a relative position, adding the position given to the current
042023             0100*   ; graphical cursor position. Codes 4-7 use the position data provided
042023             0101*   ; as part of the command as an absolute position, setting the current
042023             0102*   ; graphical cursor position to the position given.
042023             0103*   
042023             0104*   ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
042023             0105*   ; current pixel colour. These operations cannot currently be supported
042023             0106*   ; by the graphics system the Agon VDP uses, so these codes are not
042023             0107*   ; supported. Support for these codes may be added in a future version
042023             0108*   ; of the VDP firmware.
042023             0109*   
042023             0110*   ; 16 colour palette constants
042023             0111*   c_black: equ 0
042023             0112*   c_red_dk: equ 1
042023             0113*   c_green_dk: equ 2
042023             0114*   c_yellow_dk: equ 3
042023             0115*   c_blue_dk: equ 4
042023             0116*   c_magenta_dk: equ 5
042023             0117*   c_cyan_dk: equ 6
042023             0118*   c_grey: equ 7
042023             0119*   c_grey_dk: equ 8
042023             0120*   c_red: equ 9
042023             0121*   c_green: equ 10
042023             0122*   c_yellow: equ 11
042023             0123*   c_blue: equ 12
042023             0124*   c_magenta: equ 13
042023             0125*   c_cyan: equ 14
042023             0126*   c_white: equ 15
042023             0127*   
042023             0128*   ; VDU 25, mode, x; y;: PLOT command
042023             0129*   ; inputs: a=mode, bc=x0, de=y0
042023             0130*   vdu_plot:
042023 32 3D 20 04 0131*       ld (@mode),a
042027 ED 43 3E 20 0132*       ld (@x0),bc
       04          
04202C ED 53 40 20 0133*       ld (@y0),de
       04          
042031 21 3C 20 04 0134*   	ld hl,@cmd
042035 01 06 00 00 0135*   	ld bc,@end-@cmd
042039 5B DF       0136*   	rst.lil $18
04203B C9          0137*   	ret
04203C 19          0138*   @cmd:   db 25
04203D 00          0139*   @mode:  db 0
04203E 00 00       0140*   @x0: 	dw 0
042040 00 00       0141*   @y0: 	dw 0
042042 00          0142*   @end:   db 0 ; extra byte to soak up deu
042043             0143*   
042043             0144*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
042043             0145*   ; &E8-&EF 	232-239 	Bitmap plot §
042043             0146*   ; VDU 25, mode, x; y;: PLOT command
042043             0147*   ; inputs: bc=x0, de=y0
042043             0148*   ; prerequisites: vdu_buff_select
042043             0149*   vdu_plot_bmp:
042043 ED 43 5A 20 0150*       ld (@x0),bc
       04          
042048 ED 53 5C 20 0151*       ld (@y0),de
       04          
04204D 21 58 20 04 0152*   	ld hl,@cmd
042051 01 06 00 00 0153*   	ld bc,@end-@cmd
042055 5B DF       0154*   	rst.lil $18
042057 C9          0155*   	ret
042058 19          0156*   @cmd:   db 25
042059 ED          0157*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
04205A 00 00       0158*   @x0: 	dw 0x0000
04205C 00 00       0159*   @y0: 	dw 0x0000
04205E 00          0160*   @end:   db 0x00 ; padding
04205F             0161*   
04205F             0162*   ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04205F             0163*   ; &E8-&EF 	232-239 	Bitmap plot §
04205F             0164*   ; VDU 25, mode, x; y;: PLOT command
04205F             0165*   ; inputs: bc=x0, de=y0
04205F             0166*   ; USING 16.8 FIXED POINT COORDINATES
04205F             0167*   ; inputs: ub.c is x coordinate, ud.e is y coordinate
04205F             0168*   ;   the fractional portiion of the inputs are truncated
04205F             0169*   ;   leaving only the 16-bit integer portion
04205F             0170*   ; prerequisites: vdu_buff_select
04205F             0171*   vdu_plot_bmp168:
04205F             0172*   ; populate in the reverse of normal to keep the
04205F             0173*   ; inputs from stomping on each other
04205F ED 53 7D 20 0174*       ld (@y0-1),de
       04          
042064 ED 43 7B 20 0175*       ld (@x0-1),bc
       04          
042069 3E ED       0176*       ld a,plot_bmp+dr_abs_fg ; 0xED
04206B 32 7B 20 04 0177*       ld (@mode),a ; restore the mode byte that got stomped on by bcu
04206F 21 7A 20 04 0178*   	ld hl,@cmd
042073 01 06 00 00 0179*   	ld bc,@end-@cmd
042077 5B DF       0180*   	rst.lil $18
042079 C9          0181*   	ret
04207A 19          0182*   @cmd:   db 25
04207B ED          0183*   @mode:  db plot_bmp+dr_abs_fg ; 0xED
04207C 00 00       0184*   @x0: 	dw 0x0000
04207E 00 00       0185*   @y0: 	dw 0x0000
042080             0186*   @end:  ; no padding required b/c we shifted de right
042080             0187*   
042080             0188*   ; draw a filled rectangle
042080             0189*   vdu_plot_rf:
042080 ED 43 A7 20 0190*       ld (@x0),bc
       04          
042085 ED 53 A9 20 0191*       ld (@y0),de
       04          
04208A DD 22 AD 20 0192*       ld (@x1),ix
       04          
04208F FD 22 AF 20 0193*       ld (@y1),iy
       04          
042094 3E 19       0194*       ld a,25 ; we have to reload the 2nd plot command
042096 32 AB 20 04 0195*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04209A 21 A5 20 04 0196*   	ld hl,@cmd0
04209E 01 0C 00 00 0197*   	ld bc,@end-@cmd0
0420A2 5B DF       0198*   	rst.lil $18
0420A4 C9          0199*       ret
0420A5 19          0200*   @cmd0:  db 25 ; plot
0420A6 04          0201*   @arg0:  db plot_sl_both+mv_abs
0420A7 00 00       0202*   @x0:    dw 0x0000
0420A9 00 00       0203*   @y0:    dw 0x0000
0420AB 19          0204*   @cmd1:  db 25 ; plot
0420AC 65          0205*   @arg1:  db plot_rf+dr_abs_fg
0420AD 00 00       0206*   @x1:    dw 0x0000
0420AF 00 00       0207*   @y1:    dw 0x0000
0420B1 00          0208*   @end:   db 0x00 ; padding
0420B2             0209*   
0420B2             0210*   ; draw a filled circle
0420B2             0211*   vdu_plot_cf:
0420B2 ED 43 D9 20 0212*       ld (@x0),bc
       04          
0420B7 ED 53 DB 20 0213*       ld (@y0),de
       04          
0420BC DD 22 DF 20 0214*       ld (@x1),ix
       04          
0420C1 FD 22 E1 20 0215*       ld (@y1),iy
       04          
0420C6 3E 19       0216*       ld a,25 ; we have to reload the 2nd plot command
0420C8 32 DD 20 04 0217*       ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0420CC 21 D7 20 04 0218*   	ld hl,@cmd0
0420D0 01 0C 00 00 0219*   	ld bc,@end-@cmd0
0420D4 5B DF       0220*   	rst.lil $18
0420D6 C9          0221*       ret
0420D7 19          0222*   @cmd0:  db 25 ; plot
0420D8 04          0223*   @arg0:  db plot_sl_both+mv_abs
0420D9 00 00       0224*   @x0:    dw 0x0000
0420DB 00 00       0225*   @y0:    dw 0x0000
0420DD 19          0226*   @cmd1:  db 25 ; plot
0420DE 9D          0227*   @arg1:  db plot_cf+dr_abs_fg
0420DF 00 00       0228*   @x1:    dw 0x0000
0420E1 00 00       0229*   @y1:    dw 0x0000
0420E3 00          0230*   @end:   db 0x00 ; padding
0420E4             0043        include "vdu_sound.inc"
0420E4             0001*   ; enable enough additional channels so that total enabled = max_channels
0420E4             0002*   ; inputs: max_channels set
0420E4             0003*   ; returns: nothing
0420E4             0004*   ; destroys: af, bc, hl
0420E4             0005*   vdu_enable_channels:
0420E4 3E 01       0006*       ld a,max_channels
0420E6 D6 03       0007*       sub 3 ; subtract number of default channels already enabled
0420E8 F2 EF 20 04 0008*       jp p,@loop
0420EC C9          0009*       ret
0420ED 3E 03       0010*       ld a,3 ; first non-default channel
0420EF             0011*   @loop:
0420EF 32 0A 21 04 0012*       ld (@channel),a
0420F3 21 07 21 04 0013*       ld hl,@beg
0420F7 01 05 00 00 0014*       ld bc,@end-@beg
0420FB F5          0015*       push af
0420FC 5B DF       0016*       rst.lil $18
0420FE F1          0017*       pop af
0420FF 3C          0018*       inc a
042100 FE 01       0019*       cp max_channels
042102 C2 EF 20 04 0020*       jp nz,@loop
042106 C9          0021*       ret
042107             0022*   @beg:
042107 17 00 85    0023*               db 23, 0, $85
04210A 00          0024*   @channel:   db 0
04210B 08          0025*               db 8 ; command 8: enable channel
04210C             0026*   @end:
04210C             0027*   
04210C             0028*   ; disable all but the three default sound channels
04210C             0029*   ; inputs: max_channels set
04210C             0030*   ; outputs: none
04210C             0031*   ; destroys: ah,hl,bc
04210C             0032*   vdu_disable_channels:
04210C 3E 01       0033*       ld a,max_channels
04210E D6 03       0034*       sub 3 ; subtract number of default channels already enabled
042110 F2 17 21 04 0035*       jp p,@loop
042114 C9          0036*       ret
042115 3E 03       0037*       ld a,3 ; first non-default channel
042117             0038*   @loop:
042117 32 32 21 04 0039*       ld (@channel),a
04211B 21 2F 21 04 0040*       ld hl,@beg
04211F 01 05 00 00 0041*       ld bc,@end-@beg
042123 F5          0042*       push af
042124 5B DF       0043*       rst.lil $18
042126 F1          0044*       pop af
042127 3C          0045*       inc a
042128 FE 01       0046*       cp max_channels
04212A C2 17 21 04 0047*       jp nz,@loop
04212E C9          0048*       ret
04212F             0049*   @beg:
04212F 17 00 85    0050*       db 23, 0, $85
042132 00          0051*   @channel: db 0
042133 09          0052*       db 9 ; command 9: disable channel
042134             0053*   @end:
042134             0054*   
042134             0055*   
042134             0056*   ; ############################################################
042134             0057*   ; VDU SOUND API
042134             0058*   ; ############################################################
042134             0059*   ; Command 0: Play note
042134             0060*   ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
042134             0061*       MACRO PLAY_NOTE channel, volume, frequency, duration
042134             0062*       ld hl, @PLAY_NOTE_CMD        ; Start of command block
042134             0063*       ld bc, @PLAY_NOTE_END - @PLAY_NOTE_CMD  ; Command block size
042134             0064*       rst.lil $18
042134             0065*       jr @PLAY_NOTE_END
042134             0066*   @PLAY_NOTE_CMD:  db 23, 0, 0x85               ; Command header
042134             0067*                    db channel                  ; Channel, 0 (commented out)
042134             0068*                    db 0                        ; Play note command
042134             0069*                    db volume                   ; Volume
042134             0070*                    dw frequency                ; Frequency
042134             0071*                    dw duration                 ; Duration
042134             0072*   @PLAY_NOTE_END:
042134             0073*       ENDMACRO
042134             0074*   
042134             0075*       MACRO MUTE_CHANNEL channel
042134             0076*       ld hl, @MUTE_CHANNEL_CMD     ; Start of command block
042134             0077*       ld bc, @MUTE_CHANNEL_END - @MUTE_CHANNEL_CMD  ; Command block size
042134             0078*       rst.lil $18
042134             0079*       jr @MUTE_CHANNEL_END
042134             0080*   @MUTE_CHANNEL_CMD: db 23, 0, 0x85             ; Command header
042134             0081*                      db channel                ; Channel, 0 (commented out)
042134             0082*                      db 2                      ; Set volume command
042134             0083*                      db 0                      ; Volume (mute)
042134             0084*   @MUTE_CHANNEL_END:
042134             0085*       ENDMACRO
042134             0086*   
042134             0087*   ; inputs: c = channel, b = volume, hl = frequency; de = duration;
042134             0088*   vdu_play_note:
042134 79          0089*       ld a,c
042135 32 55 21 04 0090*       ld (@channel),a
042139 78          0091*       ld a,b
04213A 32 57 21 04 0092*       ld (@volume),a
04213E 22 58 21 04 0093*       ld (@frequency),hl
042142 ED 53 5A 21 0094*       ld (@duration),de
       04          
042147 21 52 21 04 0095*       ld hl,@cmd
04214B 01 0A 00 00 0096*       ld bc,@end-@cmd
04214F 5B DF       0097*       rst.lil $18
042151 C9          0098*       ret
042152 17 00 85    0099*   @cmd:       db 23, 0, 0x85
042155 00          0100*   @channel:   db 0x00
042156 00          0101*               db 0x00 ; play note command
042157 00          0102*   @volume:    db 0x00
042158 00 00       0103*   @frequency: dw 0x0000
04215A 00 00       0104*   @duration:  dw 0x0000
04215C 00          0105*   @end:       db 0x00 ; padding
04215D             0106*   
04215D             0107*   ; Command 1: Status
04215D             0108*   ; VDU 23, 0, &85, channel, 1
04215D             0109*   ; inputs: a = channel
04215D             0110*   ; Returns a bit mask indicating the status of the specified channel, or 255 if the channel is not valid, or has been disabled. The bit mask is as follows:
04215D             0111*   ; Bit 	Name 	Meaning
04215D             0112*   ; 0 	Active 	When set this indicates the channel is in use (has an active waveform)
04215D             0113*   ; 1 	Playing 	Indicates the channel is actively playing a note, and thus will reject calls to play a new note
04215D             0114*   ; 2 	Indefinite 	Set if the channel is playing an indefinite duration note
04215D             0115*   ; 3 	Has Volume Envelope 	Set if the channel has a volume envelope
04215D             0116*   ; 4 	Has Frequency Envelope 	Set if the channel has a frequency envelope
04215D             0117*   
04215D             0118*   ; Bits 5-7 are reserved for future use and, for enabled channels, will currently always be zero.
04215D             0119*   vdu_channel_status:
04215D 32 6F 21 04 0120*       ld (@channel),a
042161 21 6C 21 04 0121*       ld hl,@cmd
042165 01 05 00 00 0122*       ld bc,@end-@cmd
042169 5B DF       0123*       rst.lil $18
04216B C9          0124*       ret
04216C 17 00 85    0125*   @cmd:       db 23, 0, 0x85
04216F 00          0126*   @channel:   db 0x00
042170 01          0127*               db 0x01 ; get channel status command
042171             0128*   @end:
042171             0129*   
042171             0130*   ; VDU 23, 0, &85, channel, 2, volume
042171             0131*   ; inputs: c = channel, b = volume
042171             0132*   ; Sets the volume of the specified channel. The volume is a value from 0 to 127, where 0 is silent and 127 is full volume. Values over 127 will be treated as 127 (with one exception described later).
042171             0133*   
042171             0134*   ; Specifying a channel of -1 (or 255) will set the global sound system volume level. (Requires Console8 VDP 2.5.0 or later.)
042171             0135*   
042171             0136*   ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the volume of a channel that is already playing a note.
042171             0137*   vdu_channel_volume:
042171 79          0138*       ld a,c
042172 32 89 21 04 0139*       ld (@channel),a
042176 78          0140*       ld a,b
042177 32 8B 21 04 0141*       ld (@volume),a
04217B 21 86 21 04 0142*       ld hl,@cmd
04217F 01 06 00 00 0143*       ld bc,@end-@cmd
042183 5B DF       0144*       rst.lil $18
042185 C9          0145*       ret
042186 17 00 85    0146*   @cmd:       db 23, 0, 0x85
042189 00          0147*   @channel:   db 0x00
04218A 02          0148*               db 0x02 ; set volume command
04218B 00          0149*   @volume:    db 0x00
04218C             0150*   @end:
04218C             0151*   
04218C             0152*   ; VDU 23, 0, &85, channel, 3, frequency;
04218C             0153*   
04218C             0154*   ; Sets the frequency of the specified channel. The frequency is a 16-bit value specifying in Hz the frequency of the note to be played.
04218C             0155*   
04218C             0156*   ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the frequency of a channel that is already playing a note.
04218C             0157*   
04218C             0158*   ; Returns 1 on success, 0 for failure.
04218C             0159*   vdu_channel_frequency:
04218C 79          0160*       ld a,c
04218D 32 A4 21 04 0161*       ld (@channel),a
042191 ED 53 A6 21 0162*       ld (@frequency),de
       04          
042196 21 A1 21 04 0163*       ld hl,@cmd
04219A 01 07 00 00 0164*       ld bc,@end-@cmd
04219E 5B DF       0165*       rst.lil $18
0421A0 C9          0166*       ret
0421A1 17 00 85    0167*   @cmd:       db 23, 0, 0x85
0421A4 00          0168*   @channel:   db 0x00
0421A5 03          0169*               db 0x03 ; set frequency command
0421A6 00 00       0170*   @frequency: dw 0x0000
0421A8 00          0171*   @end:       db 0x00 ; padding
0421A9             0172*   
0421A9             0173*   
0421A9             0174*   ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
0421A9             0175*   ; inputs: c = channel, b = waveformOrSample, [hl = bufferId]
0421A9             0176*   ; Sets the waveform type for a channel to use. The waveformOrSample value is a single byte treated as a signed value.
0421A9             0177*   
0421A9             0178*   ; Using a negative value for the waveform indicates that a sample should be used instead. For more information see the documentation for the sample command.
0421A9             0179*   
0421A9             0180*   ; By default a channel is set to use waveform 0 (square wave).
0421A9             0181*   
0421A9             0182*   ; Valid waveform values are as follows:
0421A9             0183*   ; Value 	Waveform
0421A9             0184*   ; 0 	Square wave
0421A9             0185*   ; 1 	Triangle wave
0421A9             0186*   ; 2 	Sawtooth wave
0421A9             0187*   ; 3 	Sine wave
0421A9             0188*   ; 4 	Noise (simple white noise with no frequency support)
0421A9             0189*   ; 5 	VIC Noise (emulates a VIC6561; supports frequency)
0421A9             0190*   ; 8 	Sample (specifying a 16-bit buffer ID for sample data)
0421A9             0191*   
0421A9             0192*   vdu_channel_waveform:
0421A9 79          0193*       ld a,c
0421AA 32 CF 21 04 0194*       ld (@channel),a
0421AE 78          0195*       ld a,b
0421AF 32 D1 21 04 0196*       ld (@waveform),a
0421B3 FE 08       0197*       cp 8 ; check if the waveform is a sample
0421B5 28 06       0198*       jr z, @sample
0421B7 01 06 00 00 0199*       ld bc,@bufferId-@cmd
0421BB 18 08       0200*       jr @sendToVdu
0421BD             0201*   @sample:
0421BD 22 D2 21 04 0202*       ld (@bufferId),hl
0421C1 01 08 00 00 0203*       ld bc,@end-@cmd
0421C5             0204*   @sendToVdu:
0421C5 21 CC 21 04 0205*       ld hl,@cmd
0421C9 5B DF       0206*       rst.lil $18
0421CB C9          0207*       ret
0421CC 17 00 85    0208*   @cmd:       db 23, 0, 0x85
0421CF 00          0209*   @channel:   db 0x00
0421D0 04          0210*               db 0x04 ; set waveform command
0421D1 00          0211*   @waveform:  db 0x00
0421D2 00 00       0212*   @bufferId:  dw 0x0000
0421D4 00          0213*   @end:       db 0x00 ; padding
0421D5             0214*   
0421D5             0215*   ; VDU 23, 0, &85, channel (ignored), 5, 2, bufferId; format, [sampleRate;]
0421D5             0216*   ; inputs: hl = bufferId; a = format, de = sample rate in Hz
0421D5             0217*   ; The format is a single byte giving the format of the sample data. The following formats are supported:
0421D5             0218*   ; Value	Description
0421D5             0219*   ; 0	8-bit signed
0421D5             0220*   ; 1	8-bit unsigned
0421D5             0221*   ; The format value can also have modifier bits set to modify the behaviour of the sample. The following modifier bits are supported:
0421D5             0222*   ; Value	Description
0421D5             0223*   ; 8	sample rate is sent in the next 16-bits
0421D5             0224*   ; 16	sample is tuneable
0421D5             0225*   ; The default sample rate for samples on the VDP is 16kHz (actually 16.384kHz to be precise).
0421D5             0226*   vdu_buffer_to_sound:
0421D5 22 F5 21 04 0227*       ld (@bufferId),hl
0421D9 C6 08       0228*       add a,8 ; modify format byte to indicate sample rate argument is given
0421DB 32 F7 21 04 0229*       ld (@format),a
0421DF ED 53 F8 21 0230*       ld (@sampleRate),de
       04          
0421E4 21 EF 21 04 0231*       ld hl,@cmd
0421E8 01 0B 00 00 0232*       ld bc,@end-@cmd
0421EC 5B DF       0233*       rst.lil $18
0421EE C9          0234*       ret
0421EF 17 00 85    0235*   @cmd:       db 23, 0, 0x85
0421F2 00          0236*   @channel:   db 0x00 ; ignored
0421F3 05          0237*               db 0x05 ; buffer to sound command
0421F4 02          0238*               db 0x02 ; command 2 create sample
0421F5 00 00       0239*   @bufferId:  dw 0x0000
0421F7 00          0240*   @format:    db 0x00
0421F8 00 00       0241*   @sampleRate: dw 0x0000
0421FA 00          0242*   @end:       db 0x00 ; padding
0421FB             0243*   
0421FB             0244*   ; Command 13: Set sample rate
0421FB             0245*   ; VDU 23, 0, &85, channel, 13, sampleRate;
0421FB             0246*   ; inputs: c = channel, hl = sampleRate (Hz)
0421FB             0247*   vdu_set_sample_rate:
0421FB 79          0248*       ld a,c
0421FC 32 12 22 04 0249*       ld (@channel),a
042200 22 14 22 04 0250*       ld (@sampleRate),hl
042204 21 0F 22 04 0251*       ld hl,@cmd
042208 01 07 00 00 0252*       ld bc,@end-@cmd
04220C 5B DF       0253*       rst.lil $18
04220E C9          0254*       ret
04220F 17 00 85    0255*   @cmd:       db 23, 0, 0x85
042212 00          0256*   @channel:   db 0x00
042213 0D          0257*               db 13 ; set sample rate command
042214 00 00       0258*   @sampleRate: dw 0x0000
042216 00          0259*   @end:       db 0x00 ; padding
042217             0260*   
042217             0261*   ; load a sound file to a buffer
042217             0262*   ; inputs: hl = bufferId ; de = sampleRate in Hz ; iy = pointer to filename
042217             0263*   vdu_load_sfx:
042217             0264*   ; back up input parameters
042217 E5          0265*       push hl ; bufferId
042218 D5          0266*       push de ; sample rate
042219             0267*   ; load the sound
042219 CD 57 1D 04 0268*       call vdu_load_buffer_from_file
04221D             0269*   ; now make the buffer a sound sample
04221D D1          0270*       pop de ; sample rate
04221E E1          0271*       pop hl ; bufferId
04221F AF          0272*       xor a ; zero is the magic number for mono 8-bit signed PCM
042220 CD D5 21 04 0273*       call vdu_buffer_to_sound
042224 C9          0274*       ret
042225             0275*   
042225             0276*   
042225 00          0277*   last_channel: db 0
042226             0278*   max_channels: equ 1
042226             0279*   
042226             0280*   ; play a sound effect from an already loaded buffer
042226             0281*   ; inputs: hl = bufferId ; bc = duration in milliseconds
042226             0282*   vdu_play_sfx:
042226 22 5E 22 04 0283*       ld (@bufferId),hl
04222A ED 43 68 22 0284*       ld (@duration),bc
       04          
04222F 3E 17       0285*       ld a,23
042231 32 60 22 04 0286*       ld (@bufferId+2),a
042235 3A 25 22 04 0287*       ld a,(last_channel)
042239 3C          0288*       inc a
04223A             0289*       ; and 31 ; modulo 32
04223A FE 01       0290*       cp max_channels
04223C C2 41 22 04 0291*       jp nz,@load_channel
042240 AF          0292*       xor a
042241             0293*   @load_channel:
042241 32 25 22 04 0294*       ld (last_channel),a
042245 32 5B 22 04 0295*       ld (@channel0),a
042249 32 63 22 04 0296*       ld (@channel1),a
04224D 21 58 22 04 0297*       ld hl, @sample
042251 01 12 00 00 0298*       ld bc, @sample_end - @sample
042255 5B DF       0299*       rst.lil $18
042257 C9          0300*       ret
042258             0301*   @sample:
042258             0302*   ; Command 4: Set waveform
042258             0303*   ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
042258 17 00 85    0304*       .db 23,0,$85                        ; do sound
04225B             0305*   @channel0:
04225B 00 04 08    0306*       .db 0,4,8 ; channel, command, waveform
04225E             0307*   @bufferId:
04225E 00 00       0308*       .dw 0x0000
042260             0309*   ; Command 0: Play note
042260             0310*   ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
042260 17 00 85    0311*       .db 23,0,$85                        ; do sound
042263             0312*   @channel1:
042263 00 00 7F    0313*       .db 0,0,127                ; channel, volume
042266 00 00       0314*       .dw 0
042268             0315*   @duration:                              ; freq (tuneable samples only)
042268 00 00       0316*       .dw 0x0000                        ; duration
04226A             0317*   @sample_end:
04226A 00          0318*       .db 0x00 ; padding
04226B             0319*   
04226B             0320*   ; inputs: c = channel, b = volume, de = sample rate; hl = bufferId;
04226B             0321*   vdu_play_sample:
04226B             0322*       ; populate input parameters
04226B 79          0323*       ld a,c
04226C 32 9E 22 04 0324*       ld (@channel0),a
042270 32 A6 22 04 0325*       ld (@channel1),a
042274 32 AD 22 04 0326*       ld (@channel2),a
042278 78          0327*       ld a,b
042279 32 AF 22 04 0328*       ld (@volume),a
04227D ED 53 A8 22 0329*       ld (@sampleRate),de
       04          
042282 22 A1 22 04 0330*       ld (@bufferId),hl
042286 3E 17       0331*       ld a,23
042288 32 A3 22 04 0332*       ld (@cmd1),a
04228C 32 AA 22 04 0333*       ld (@cmd2),a
042290             0334*       ; prep the vdu command string
042290 21 9B 22 04 0335*       ld hl, @cmd0
042294 01 19 00 00 0336*       ld bc, @end - @cmd0
042298 5B DF       0337*       rst.lil $18
04229A C9          0338*       ret
04229B             0339*   ; set waveform command
04229B 17 00 85    0340*   @cmd0:       db 23, 0, 0x85
04229E 00          0341*   @channel0:   db 0x00
04229F 04          0342*                db 0x04 ; set waveform command
0422A0 08          0343*   @waveform:   db 0x08 ; sample
0422A1 00 00       0344*   @bufferId:   dw 0x0000
0422A3             0345*   ; set sample rate command
0422A3 17 00 85    0346*   @cmd1:       db 23, 0, 0x85
0422A6 00          0347*   @channel1:   db 0x00
0422A7 0D          0348*               db 13 ; set sample rate command
0422A8 00 00       0349*   @sampleRate: dw 0x0000
0422AA             0350*   ; play note command
0422AA 17 00 85    0351*   @cmd2:       db 23, 0, 0x85
0422AD 00          0352*   @channel2:   db 0x00
0422AE 00          0353*                db 0x00 ; play note command
0422AF 00          0354*   @volume:     db 0x00
0422B0 00 00       0355*   @frequency:  dw 0x00 ; no effect unless buffer has been set to tuneable sample
0422B2 00 00       0356*   @duration:   dw 0x0000 ; milliseconds: set to -1 to loop indefinitely, 0 to play full duration once
0422B4 00          0357*   @end:        db 0x00 ; padding
0422B5             0044    
0422B5             0045    ; APPLICATION INCLUDES
0422B5             0046        include "layout.inc"
0422B5             0001*   text_top: equ 0
0422B5             0002*   text_left: equ 0
0422B5             0003*   text_bottom: equ 47      ; 48 rows, zero-based
0422B5             0004*   text_right: equ 63       ; 64 columns, zero-based
0422B5             0005*   
0422B5 00          0006*   original_screen_mode: db 0 ; screen mode when app started so we can return to it on exit
0422B6             0007*   
0422B6 2D 2D 2D 2D 0008*   str_dashes_thin: asciz  "----------------------------------------------------------------"
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       00          
0422F7 3D 3D 3D 3D 0009*   str_dashes_thick: asciz "================================================================"
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       00          
042338             0010*   
042338             0011*   ; set text viewport for current playing song
042338             0012*   vp_now_playing_top: equ 34
042338             0013*   vp_now_playing:
042338 0E 00       0014*       ld c, text_left
04233A 16 22       0015*       ld d, vp_now_playing_top
04233C 1E 3F       0016*       ld e, text_right
04233E 06 22       0017*       ld b, vp_now_playing_top
042340 CD A2 1B 04 0018*       call vdu_set_txt_viewport
042344 C9          0019*       ret
042345             0020*   ; end vp_now_playing
042345             0021*   
042345             0022*   ; set text viewport for elapsed time
042345             0023*   vp_elapsed_top: equ vp_now_playing_top+1
042345             0024*   vp_elapsed_right: equ text_left+7 ; 8 chars for HH:MM:SS
042345             0025*   vp_elapsed:
042345 0E 00       0026*       ld c, text_left
042347 16 23       0027*       ld d, vp_elapsed_top
042349 1E 07       0028*       ld e, vp_elapsed_right
04234B 06 23       0029*       ld b, vp_elapsed_top
04234D CD A2 1B 04 0030*       call vdu_set_txt_viewport
042351 C9          0031*       ret
042352             0032*   ; end vp_elapsed
042352             0033*   
042352             0034*   ; set text viewport for song duration
042352             0035*   vp_duration_left: equ text_right-7 ; 8 chars for HH:MM:SS
042352             0036*   vp_duration_top: equ vp_now_playing_top+1
042352             0037*   vp_duration:
042352 0E 38       0038*       ld c, vp_duration_left
042354 16 23       0039*       ld d, vp_duration_top
042356 1E 3F       0040*       ld e, text_right
042358 06 23       0041*       ld b, vp_duration_top
04235A CD A2 1B 04 0042*       call vdu_set_txt_viewport
04235E C9          0043*       ret
04235F             0044*   ; end vp_duration
04235F             0045*   
04235F             0046*   ; set text viewport for playing breadcrumbs
04235F             0047*   vp_playhead_left: equ vp_elapsed_right+1 ; leave room for left arrow
04235F             0048*   vp_playhead_top: equ vp_now_playing_top+1
04235F             0049*   vp_playhead_right: equ vp_duration_left-1 ; leave room for right arrow
04235F             0050*   vp_playhead:
04235F 0E 08       0051*       ld c, vp_playhead_left
042361 16 23       0052*       ld d, vp_playhead_top
042363 1E 37       0053*       ld e, vp_playhead_right
042365 06 23       0054*       ld b, vp_playhead_top
042367 CD A2 1B 04 0055*       call vdu_set_txt_viewport
04236B C9          0056*       ret
04236C             0057*   ; end vp_playhead
04236C             0058*   
04236C             0059*   vp_dir_hdr_top: equ 20
04236C             0060*   vp_dir_hdr:
04236C 0E 00       0061*       ld c,text_left
04236E 16 14       0062*       ld d,vp_dir_hdr_top
042370 1E 3F       0063*       ld e,text_right
042372 06 14       0064*       ld b,vp_dir_hdr_top
042374 CD A2 1B 04 0065*       call vdu_set_txt_viewport
042378 C9          0066*       ret
042379             0067*   
042379             0068*   vp_dir_name_top: equ vp_dir_hdr_top+1
042379             0069*   vp_dir_name:
042379 0E 00       0070*       ld c,text_left
04237B 16 15       0071*       ld d,vp_dir_name_top
04237D 1E 3F       0072*       ld e,text_right
04237F 06 15       0073*       ld b,vp_dir_name_top
042381 CD A2 1B 04 0074*       call vdu_set_txt_viewport
042385 C9          0075*       ret
042386             0076*   
042386             0077*   ; set text viewport for directory listing
042386             0078*   vp_dir_top: equ vp_dir_hdr_top+3
042386             0079*   vp_dir_bottom: equ vp_dir_top+9
042386             0080*   vp_dir:
042386 0E 00       0081*       ld c,text_left
042388 16 17       0082*       ld d,vp_dir_top
04238A 1E 3F       0083*       ld e,text_right
04238C 06 20       0084*       ld b,vp_dir_bottom
04238E CD A2 1B 04 0085*       call vdu_set_txt_viewport
042392 C9          0086*       ret
042393             0087*   
042393             0088*   vp_legend_top: equ vp_playhead_top+2
042393             0089*   vp_legend:
042393 0E 00       0090*       ld c,text_left
042395 16 25       0091*       ld d,vp_legend_top
042397 1E 3F       0092*       ld e,text_right
042399 06 27       0093*       ld b,vp_legend_top+2
04239B CD A2 1B 04 0094*       call vdu_set_txt_viewport
04239F C9          0095*       ret
0423A0             0096*   
0423A0             0097*   vp_legend_shuffle_top: equ vp_legend_top+1
0423A0             0098*   vp_legend_shuffle_left: equ text_left+33
0423A0             0099*   vp_legend_shuffle:
0423A0 0E 21       0100*       ld c,vp_legend_shuffle_left
0423A2 16 26       0101*       ld d,vp_legend_shuffle_top
0423A4 1E 23       0102*       ld e,vp_legend_shuffle_left+2
0423A6 06 26       0103*       ld b,vp_legend_shuffle_top
0423A8 CD A2 1B 04 0104*       call vdu_set_txt_viewport
0423AC C9          0105*       ret
0423AD             0106*   
0423AD             0107*   vp_legend_loop_top: equ vp_legend_top+1
0423AD             0108*   vp_legend_loop_left: equ text_left+51
0423AD             0109*   vp_legend_loop:
0423AD 0E 33       0110*       ld c,vp_legend_loop_left
0423AF 16 26       0111*       ld d,vp_legend_loop_top
0423B1 1E 35       0112*       ld e,vp_legend_loop_left+2
0423B3 06 26       0113*       ld b,vp_legend_loop_top
0423B5 CD A2 1B 04 0114*       call vdu_set_txt_viewport
0423B9 C9          0115*       ret
0423BA             0116*   
0423BA             0117*   vp_messages_top: equ vp_playhead_top+6
0423BA             0118*   vp_messages_bottom: equ text_bottom
0423BA             0119*   ; set text viewport for messages
0423BA             0120*   vp_messages:
0423BA 0E 00       0121*       ld c,text_left
0423BC 16 29       0122*       ld d,vp_messages_top
0423BE 1E 3F       0123*       ld e,text_right
0423C0 06 2F       0124*       ld b,vp_messages_bottom
0423C2 CD A2 1B 04 0125*       call vdu_set_txt_viewport
0423C6 C9          0126*       ret
0423C7             0127*   
0423C7             0128*   set_text_colours_normal:
0423C7             0129*   ; set text background color
0423C7 3E 84       0130*       ld a,c_blue_dk+128
0423C9 CD 7A 1B 04 0131*       call vdu_colour_text
0423CD             0132*   ; set text foreground color
0423CD 3E 0F       0133*       ld a,c_white
0423CF CD 7A 1B 04 0134*       call vdu_colour_text
0423D3 C9          0135*       ret
0423D4             0136*   ; end set_text_colours_normal
0423D4             0137*   
0423D4             0138*   set_text_colours_inverse:
0423D4             0139*   ; set text background color
0423D4 3E 8F       0140*       ld a,c_white+128
0423D6 CD 7A 1B 04 0141*       call vdu_colour_text
0423DA             0142*   ; set text foreground color
0423DA 3E 04       0143*       ld a,c_blue_dk
0423DC CD 7A 1B 04 0144*       call vdu_colour_text
0423E0 C9          0145*       ret
0423E1             0146*   ; end set_text_colours_inverse
0423E1             0147*   
0423E1             0148*   ui_init:
0423E1             0149*   ; get current screen mode and save it so we can return to it on exit
0423E1 CD 28 1C 04 0150*       call vdu_get_screen_mode
0423E5 32 B5 22 04 0151*       ld (original_screen_mode),a
0423E9             0152*   ; set up display
0423E9 3E 14       0153*       ld a,20 ; 512x384x64 single-buffered
0423EB CD 17 1C 04 0154*       call vdu_set_screen_mode
0423EF AF          0155*       xor a
0423F0 CD 30 1C 04 0156*       call vdu_set_scaling
0423F4             0157*   ; load fonts and select one
0423F4 CD 1E 1F 04 0158*       call vdu_clear_all_buffers
0423F8 CD C5 0D 04 0159*   	call font_load
0423FC 21 10 FA 00 0160*       ld hl,Lat2_VGA8_8x8
042400 3E 01       0161*       ld a,1
042402 CD 90 1F 04 0162*       call vdu_font_select
042406             0163*   ; set text fg and bg colours to normal
042406 CD C7 23 04 0164*       call set_text_colours_normal
04240A             0165*   ; set cursor behaviuor
04240A CD D1 1A 04 0166*       call vdu_cursor_off
04240E 26 10       0167*       ld h,%00010000 ; bit 4 controls cursor scroll at bottom of screen
042410 2E 10       0168*       ld l,%00010000 ; bit 4 set means cursor wraps to top of screen
042412 CD 35 1B 04 0169*       call vdu_cursor_behaviour
042416             0170*   ; reset text viewports and clear the screen
042416 CD 12 1C 04 0171*       call vdu_reset_viewports
04241A CD 49 1B 04 0172*       call vdu_cls
04241E             0173*   
04241E             0174*   ; tippy top border
04241E 0E 00       0175*       ld c,text_left ; x
042420 06 00       0176*       ld b,text_top ; y
042422 CD 21 1B 04 0177*       call vdu_move_cursor
042426 21 F7 22 04 0178*       ld hl,str_dashes_thick
04242A CD 67 00 04 0179*       call printString
04242E             0180*   
04242E             0181*   ; print ascii art splash screen
04242E 0E 00       0182*       ld c,text_left ; x
042430 06 01       0183*       ld b,text_top+1 ; y
042432 CD 21 1B 04 0184*       call vdu_move_cursor
042436 21 7A 25 04 0185*       ld hl,agon_jukebox_ascii
04243A CD 67 00 04 0186*       call printString
04243E             0187*   
04243E             0188*   ; below logo border
04243E 0E 00       0189*       ld c,text_left ; x
042440 06 13       0190*       ld b,vp_dir_hdr_top-1 ; y
042442 CD 21 1B 04 0191*       call vdu_move_cursor
042446 21 F7 22 04 0192*       ld hl,str_dashes_thick
04244A CD 67 00 04 0193*       call printString
04244E             0194*   
04244E             0195*   ; print the directory header
04244E 0E 00       0196*       ld c,text_left ; x
042450 06 14       0197*       ld b,vp_dir_hdr_top ; y
042452 CD 21 1B 04 0198*       call vdu_move_cursor
042456 CD 60 00 04 0199*       call printInline
04245A 4F 75 72 20 0200*       asciz "Our current directory is:"
       63 75 72 72 
       65 6E 74 20 
       64 69 72 65 
       63 74 6F 72 
       79 20 69 73 
       3A 00       
042474             0201*   
042474             0202*   ; file list top border
042474 0E 00       0203*       ld c,text_left ; x
042476 06 16       0204*       ld b,vp_dir_top-1 ; y
042478 CD 21 1B 04 0205*       call vdu_move_cursor
04247C 21 B6 22 04 0206*       ld hl,str_dashes_thin
042480 CD 67 00 04 0207*       call printString
042484             0208*   
042484             0209*   ; file list bottom border
042484 0E 00       0210*       ld c,text_left ; x
042486 06 21       0211*       ld b,vp_dir_bottom+1 ; y
042488 CD 21 1B 04 0212*       call vdu_move_cursor
04248C 21 B6 22 04 0213*       ld hl,str_dashes_thin
042490 CD 67 00 04 0214*       call printString
042494             0215*   
042494             0216*   ; below the breadcrumbs border
042494 0E 00       0217*       ld c,text_left ; x
042496 06 24       0218*       ld b,vp_playhead_top+1 ; y
042498 CD 21 1B 04 0219*       call vdu_move_cursor
04249C 21 F7 22 04 0220*       ld hl,str_dashes_thick
0424A0 CD 67 00 04 0221*       call printString
0424A4             0222*   
0424A4             0223*   ; print the navigation and song control instructions
0424A4 0E 00       0224*       ld c,text_left ; x
0424A6 06 25       0225*       ld b,vp_playhead_top+2 ; y
0424A8 CD 21 1B 04 0226*       call vdu_move_cursor
0424AC CD 60 00 04 0227*       call printInline
0424B0 20 53 6F 6E 0228*       db " Song \e",24," \e",25," or 0-9    | Page \e",27," \e",26,"           | [U]p directory\r\n"
       67 20 1B 18 
       20 1B 19 20 
       6F 72 20 30 
       2D 39 20 20 
       20 20 7C 20 
       50 61 67 65 
       20 1B 1B 20 
       1B 1A 20 20 
       20 20 20 20 
       20 20 20 20 
       20 7C 20 5B 
       55 5D 70 20 
       64 69 72 65 
       63 74 6F 72 
       79 0D 0A    
0424EF 20 5B 52 5D 0229*       db " [R]andom song      | [S]huffle: OFF     | [L]oop: OFF\r\n"
       61 6E 64 6F 
       6D 20 73 6F 
       6E 67 20 20 
       20 20 20 20 
       7C 20 5B 53 
       5D 68 75 66 
       66 6C 65 3A 
       20 4F 46 46 
       20 20 20 20 
       20 7C 20 5B 
       4C 5D 6F 6F 
       70 3A 20 4F 
       46 46 0D 0A 
042527 20 5B 45 53 0230*       db " [ESC] or [Q]uit    |                    |\r\n"
       43 5D 20 6F 
       72 20 5B 51 
       5D 75 69 74 
       20 20 20 20 
       7C 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 7C 0D 0A 
042553 00          0231*       db 0 ; null terminator
042554             0232*   
042554             0233*   ; below the detailed instructions / status border
042554 0E 00       0234*       ld c,text_left ; x
042556 06 28       0235*       ld b,vp_playhead_top+5 ; y
042558 CD 21 1B 04 0236*       call vdu_move_cursor
04255C 21 F7 22 04 0237*       ld hl,str_dashes_thick
042560 CD 67 00 04 0238*       call printString
042564             0239*   
042564             0240*   ; print the current directory path and first page of files
042564 CD E8 29 04 0241*       call bf_print_dir_name
042568 21 00 00 00 0242*       ld hl,0
04256C 22 0A 00 05 0243*       ld (bf_page_cur),hl
042570 AF          0244*       xor a
042571 32 00 00 05 0245*       ld (bf_file_idx),a ; reset the file index
042575 CD 94 29 04 0246*       call bf_highlight_file ; highlight the first file
042579 C9          0247*       ret
04257A             0248*   ; end ui_init
04257A             0249*   
04257A             0250*   agon_jukebox_ascii:
04257A 20 20 20 5F 0251*       db 32,32,32,95,95,95,95,95,32,32,32,32,95,95,95,95,95,95,95,95,32,95,95,95,95,95,95,95,95,32,32,32,32,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       20 20 20 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 20 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       0D 0A       
0425A4 20 20 2F 20 0252*       db 32,32,47,32,32,95,32,32,92,32,32,47,32,32,95,95,95,95,95,47,32,92,95,95,95,95,95,32,32,92,32,32,32,92,32,32,32,32,32,32,92,13,10
       20 5F 20 20 
       5C 20 20 2F 
       20 20 5F 5F 
       5F 5F 5F 2F 
       20 5C 5F 5F 
       5F 5F 5F 20 
       20 5C 20 20 
       20 5C 20 20 
       20 20 20 20 
       5C 0D 0A    
0425CF 20 2F 20 20 0253*       db 32,47,32,32,47,95,92,32,32,92,47,32,32,32,92,32,32,95,95,95,32,32,47,32,32,32,124,32,32,32,92,32,32,47,32,32,32,124,32,32,32,92,13,10
       2F 5F 5C 20 
       20 5C 2F 20 
       20 20 5C 20 
       20 5F 5F 5F 
       20 20 2F 20 
       20 20 7C 20 
       20 20 5C 20 
       20 2F 20 20 
       20 7C 20 20 
       20 5C 0D 0A 
0425FB 2F 20 20 20 0254*       db 47,32,32,32,32,124,32,32,32,32,92,32,32,32,32,92,95,92,32,32,92,47,32,32,32,32,124,32,32,32,32,92,47,32,32,32,32,124,32,32,32,32,92,13,10
       20 7C 20 20 
       20 20 5C 20 
       20 20 20 5C 
       5F 5C 20 20 
       5C 2F 20 20 
       20 20 7C 20 
       20 20 20 5C 
       2F 20 20 20 
       20 7C 20 20 
       20 20 5C 0D 
       0A          
042628 5C 5F 5F 5F 0255*       db 92,95,95,95,95,124,95,95,32,32,47,92,95,95,95,95,95,95,32,32,47,92,95,95,95,95,95,95,95,32,32,47,92,95,95,95,95,124,95,95,32,32,47,13,10
       5F 7C 5F 5F 
       20 20 2F 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       2F 5C 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       5C 5F 5F 5F 
       5F 7C 5F 5F 
       20 20 2F 0D 
       0A          
042655 20 20 20 20 0256*       db 32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,92,47,13,10
       20 20 20 20 
       5C 2F 20 20 
       20 20 20 20 
       20 20 5C 2F 
       20 20 20 20 
       20 20 20 20 
       20 5C 2F 20 
       20 20 20 20 
       20 20 20 20 
       5C 2F 0D 0A 
042681 20 20 20 20 0257*       db 32,32,32,32,32,95,95,95,95,32,95,95,95,95,32,95,95,95,32,95,95,95,95,32,32,95,95,32,95,95,95,95,95,95,95,95,95,95,95,13,10
       20 5F 5F 5F 
       5F 20 5F 5F 
       5F 5F 20 5F 
       5F 5F 20 5F 
       5F 5F 5F 20 
       20 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 0D 
       0A          
0426AA 20 20 20 20 0258*       db 32,32,32,32,124,32,32,32,32,124,32,32,32,32,124,32,32,32,92,32,32,32,32,124,47,32,95,124,92,95,32,32,32,95,95,95,95,95,47,13,10
       7C 20 20 20 
       20 7C 20 20 
       20 20 7C 20 
       20 20 5C 20 
       20 20 20 7C 
       2F 20 5F 7C 
       5C 5F 20 20 
       20 5F 5F 5F 
       5F 5F 2F 0D 
       0A          
0426D3 20 20 20 20 0259*       db 32,32,32,32,124,32,32,32,32,124,32,32,32,32,124,32,32,32,47,32,32,32,32,32,32,60,32,32,32,124,32,32,32,32,95,95,41,95,13,10
       7C 20 20 20 
       20 7C 20 20 
       20 20 7C 20 
       20 20 2F 20 
       20 20 20 20 
       20 3C 20 20 
       20 7C 20 20 
       20 20 5F 5F 
       29 5F 0D 0A 
0426FB 2F 5C 5F 5F 0260*       db 47,92,95,95,124,32,32,32,32,124,32,32,32,32,124,32,32,47,124,32,32,32,32,124,32,32,92,32,32,124,32,32,32,32,32,32,32,32,92,13,10
       7C 20 20 20 
       20 7C 20 20 
       20 20 7C 20 
       20 2F 7C 20 
       20 20 20 7C 
       20 20 5C 20 
       20 7C 20 20 
       20 20 20 20 
       20 20 5C 0D 
       0A          
042724 5C 5F 5F 5F 0261*       db 92,95,95,95,95,95,95,95,95,124,95,95,95,95,95,95,47,32,124,95,95,95,95,124,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 5F 5F 5F 
       5F 7C 5F 5F 
       5F 5F 5F 5F 
       2F 20 7C 5F 
       5F 5F 5F 7C 
       5F 5F 20 5C 
       2F 5F 5F 5F 
       5F 5F 5F 5F 
       20 20 2F 0D 
       0A          
04274D 20 20 20 20 0262*       db 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,13,10
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 5C 2F 
       20 20 20 20 
       20 20 20 20 
       5C 2F 0D 0A 
042775 20 20 20 20 0263*       db 32,32,32,32,95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,95,95,95,95,32,32,95,95,95,95,32,32,95,95,95,13,10
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 20 5F 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       20 5F 5F 5F 
       5F 20 20 5F 
       5F 5F 0D 0A 
042799 20 20 20 20 0264*       db 32,32,32,32,92,95,95,95,95,95,95,32,32,32,92,92,95,95,95,95,95,32,32,92,32,92,32,32,32,92,47,32,32,47,13,10
       5C 5F 5F 5F 
       5F 5F 5F 20 
       20 20 5C 5C 
       5F 5F 5F 5F 
       5F 20 20 5C 
       20 5C 20 20 
       20 5C 2F 20 
       20 2F 0D 0A 
0427BD 20 20 20 20 0265*       db 32,32,32,32,32,124,32,32,32,32,124,32,32,95,47,32,47,32,32,32,124,32,32,32,92,32,92,32,32,32,32,32,47,13,10
       20 7C 20 20 
       20 20 7C 20 
       20 5F 2F 20 
       2F 20 20 20 
       7C 20 20 20 
       5C 20 5C 20 
       20 20 20 20 
       2F 0D 0A    
0427E0 20 20 20 20 0266*       db 32,32,32,32,32,124,32,32,32,32,124,32,32,32,92,47,32,32,32,32,124,32,32,32,32,92,47,32,32,32,32,32,92,13,10
       20 7C 20 20 
       20 20 7C 20 
       20 20 5C 2F 
       20 20 20 20 
       7C 20 20 20 
       20 5C 2F 20 
       20 20 20 20 
       5C 0D 0A    
042803 20 20 20 20 0267*       db 32,32,32,32,32,124,95,95,95,95,95,95,32,32,47,92,95,95,95,95,95,95,95,32,32,47,95,95,95,47,92,32,32,92,13,10
       20 7C 5F 5F 
       5F 5F 5F 5F 
       20 20 2F 5C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       20 2F 5F 5F 
       5F 2F 5C 20 
       20 5C 0D 0A 
042827 20 20 20 20 0268*       db 32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,92,95,47,13,10
       20 20 20 20 
       20 20 20 20 
       5C 2F 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 5C 
       5F 2F 0D 0A 
04284B 00          0269*       db 0 ; list terminator
04284C             0047        ; include "ascii.inc"
04284C             0048        include "browse.inc"
04284C             0001*   bf_files_per_pg: equ 10 ; number of directories / files to display per page
04284C             0002*   
04284C             0003*   bf_get_dir:
04284C             0004*   ; initialize counters
04284C 21 00 00 00 0005*       ld hl,0
042850 22 01 00 05 0006*       ld (bf_dir_num_files),hl
042854             0007*   
042854             0008*   ; initialize pointers to store directory info and print directory name
042854 21 10 00 05 0009*       ld hl,bf_dir_path  ; where to store result
042858 01 FF 00 00 0010*       ld bc,255          ; max length (final byte is zero terminator) [has no effect]
04285C             0011*       FFSCALL ffs_getcwd ; MOS api get current working directory
                       M1 Args: function=ffs_getcwd 
04285C FD E5       0001*M1 			PUSH IY
04285E 3E 9E       0002*M1 			LD	A, function
042860 5B CF       0003*M1 			RST.LIL	08h
042862 FD E1       0004*M1 			POP IY
042864             0012*   
042864             0013*   ; get dir info
042864 21 00 02 05 0014*       ld hl,bf_dir_struct ; define where to store directory info
042868 11 10 00 05 0015*       ld de,bf_dir_path   ; this is pointer to the path to the directory
04286C AF          0016*       xor a               ; tell MOS to expect zero-terminated string
04286D             0017*       FFSCALL ffs_dopen   ; open dir
                       M1 Args: function=ffs_dopen 
04286D FD E5       0001*M1 			PUSH IY
04286F 3E 91       0002*M1 			LD	A, function
042871 5B CF       0003*M1 			RST.LIL	08h
042873 FD E1       0004*M1 			POP IY
042875             0018*   
042875             0019*   ; set up pointers
042875 DD 21 00 06 0020*       ld ix,bf_dir_fil_list ; this is the pointer to the filinfo structs
       05          
04287A FD 21 00 03 0021*       ld iy,bf_filinfo_ptrs ; where to store pointers to filinfo structs
       05          
04287F             0022*   
04287F             0023*   @readFileInfo:               ; we will loop here until all files have been processed
04287F 21 00 02 05 0024*       ld hl,bf_dir_struct      ; HL is where to get directory info
042883 ED 12 00    0025*       lea de,ix                ; DE is where to store filinfo struct
042886             0026*       FFSCALL ffs_dread        ; read next item from dir into filinfo struct
                       M1 Args: function=ffs_dread 
042886 FD E5       0001*M1 			PUSH IY
042888 3E 93       0002*M1 			LD	A, function
04288A 5B CF       0003*M1 			RST.LIL	08h
04288C FD E1       0004*M1 			POP IY
04288E             0027*   
04288E DD 7E 16    0028*       ld a,(ix+filinfo_fname)  ; get first char of file name
042891 B7          0029*       or a                     ; if zero then we are at the end of the listing
042892 CA DF 28 04 0030*       jp z,@allDone
042896             0031*   
042896 DD 7E 08    0032*       ld a,(ix+filinfo_fattrib) ; get the file attribute
042899 CB AF       0033*       res AM_ARC,a ; clear bit 5 (archive) see: https://discord.com/channels/1158535358624039014/1158536667670511726/1328466726098309173
04289B B7          0034*       or a ; if zero this is a file
04289C C2 A5 28 04 0035*       jp nz,@F ; not zero so this is some other file type
0428A0 CB EF       0036*       set AM_ARC,a ; set bit 5 (archive) so will be consistent btw emulator and hardware
0428A2 DD 77 08    0037*       ld (ix+filinfo_fattrib),a ; update so we don't have to do this every time downstream
0428A5             0038*   
0428A5             0039*   @@: ; skip over writing hidden and system files
0428A5 CB 4F       0040*       bit AM_HID,a ; hidden file
0428A7 C2 7F 28 04 0041*       jp nz,@readFileInfo
0428AB CB 57       0042*       bit AM_SYS,a ; system file
0428AD C2 7F 28 04 0043*       jp nz,@readFileInfo
0428B1             0044*   
0428B1             0045*   ; check for valid directory
0428B1 CB 67       0046*       bit AM_DIR,a ; directory
0428B3 C2 C6 28 04 0047*       jp nz,@goodPath ; is directory so skip .wav file check
0428B7             0048*   
0428B7             0049*   ; is file so check for valid .wav format
0428B7 21 00 FF 04 0050*       ld hl,bf_fil_struct ; hl = pointer to fil struct
0428BB ED 12 16    0051*       lea de,ix+filinfo_fname ; de = pointer to filename
0428BE CD 2E 2F 04 0052*       call verify_wav
0428C2 C2 7F 28 04 0053*       jp nz,@readFileInfo ; not a .wav file, so skip it
0428C6             0054*   
0428C6             0055*   @goodPath:
0428C6             0056*   ; valid file or directory
0428C6 FD 3E 00    0057*       ld (iy),ix ; store pointer to filinfo struct
0428C9 2A 01 00 05 0058*       ld hl,(bf_dir_num_files) ; get the current file counter
0428CD 23          0059*       inc hl                  ; increment the counter
0428CE 22 01 00 05 0060*       ld (bf_dir_num_files),hl
0428D2             0061*   ; bump pointers
0428D2 ED 33 03    0062*       lea iy,iy+3
0428D5 11 16 01 00 0063*       ld de,filinfo_struct_size ; length of filinfo record
0428D9 DD 19       0064*       add ix,de
0428DB C3 7F 28 04 0065*       jp @readFileInfo         ; loop around to check next entry
0428DF             0066*   @allDone:
0428DF             0067*   ; compute page statistics
0428DF 11 0A 00 00 0068*       ld de,bf_files_per_pg    ; number of files per page
0428E3 2A 01 00 05 0069*       ld hl,(bf_dir_num_files) ; get the number of files
0428E7             0070*       SIGN_HLU ; check for zero
                       M1 Args: none
0428E7 19          0001*M1     add hl,de ; 1 cycle
0428E8 B7          0002*M1     or a ; clear flags ; 1 cycle
0428E9 ED 52       0003*M1     sbc hl,de ; 2 cycles
0428EB             0004*M1     ; 4 cycles total
0428EB C2 FB 28 04 0071*       jp nz,@not_zero
0428EF 11 00 00 00 0072*       ld de,0 ; number of pages, will increment by 1 later
0428F3 21 00 00 00 0073*       ld hl,0 ; number of files on last page
0428F7 C3 0C 29 04 0074*       jp @write_stats
0428FB             0075*   @not_zero:
0428FB CD 80 03 04 0076*       call udiv24 ; de = hl/bf_files_per_pg, hl = mod(hl,bf_files_per_pg)
0428FF             0077*       SIGN_HLU ; check remainder for zero
                       M1 Args: none
0428FF 19          0001*M1     add hl,de ; 1 cycle
042900 B7          0002*M1     or a ; clear flags ; 1 cycle
042901 ED 52       0003*M1     sbc hl,de ; 2 cycles
042903             0004*M1     ; 4 cycles total
042903 C2 0C 29 04 0078*       jp nz,@write_stats
042907 21 0A 00 00 0079*       ld hl,bf_files_per_pg ; if zero then we have exactly bf_files_per_pg files on the last page ...
04290B 1B          0080*       dec de ; ... and we don't need an additional page for the remainder
04290C             0081*   @write_stats:
04290C 22 07 00 05 0082*       ld (bf_files_last_pg),hl ; save the number of files on the last page
042910 13          0083*       inc de ; bump the page count
042911 ED 53 0D 00 0084*       ld (bf_dir_num_pages),de ; save the number of pages
       05          
042916 21 00 00 00 0085*       ld hl,0 ; reset the page number
04291A 22 0A 00 05 0086*       ld (bf_page_cur),hl
04291E             0087*   ; close the directory
04291E 21 00 02 05 0088*       ld hl,bf_dir_struct      ; load H: with address of the DIR struct
042922             0089*       FFSCALL ffs_dclose       ; close dir
                       M1 Args: function=ffs_dclose 
042922 FD E5       0001*M1 			PUSH IY
042924 3E 92       0002*M1 			LD	A, function
042926 5B CF       0003*M1 			RST.LIL	08h
042928 FD E1       0004*M1 			POP IY
04292A             0090*   ; fall through to bf_get_page_num_files
04292A             0091*   
04292A             0092*   bf_get_page_num_files:
04292A             0093*   ; check whether we're at last page
04292A 2A 0A 00 05 0094*       ld hl,(bf_page_cur)
04292E ED 5B 0D 00 0095*       ld de,(bf_dir_num_pages)
       05          
042933 1B          0096*       dec de ; zero-based
042934 B7          0097*       or a ; clear carry
042935 ED 52       0098*       sbc hl,de
042937 3E 0A       0099*       ld a,bf_files_per_pg ; a = default number of files per page
042939 C2 41 29 04 0100*       jp nz,@F ; not the last page
04293D 3A 07 00 05 0101*       ld a,(bf_files_last_pg) ; get the number of files on the last page
042941             0102*   @@:
042941 32 04 00 05 0103*       ld (bf_files_cur_pg),a ; save the number of files on the page
042945 C9          0104*       ret
042946             0105*   ; end bf_get_page_num_files
042946             0106*   ; end bf_get_dir
042946             0107*   
042946             0108*   bf_print_dir_page:
042946             0109*   ; set text viewport for directory listing
042946 CD 86 23 04 0110*       call vp_dir
04294A CD 49 1B 04 0111*       call vdu_cls
04294E             0112*   ; check for zero files in directory
04294E 2A 01 00 05 0113*       ld hl,(bf_dir_num_files)
042952             0114*       SIGN_HLU
                       M1 Args: none
042952 19          0001*M1     add hl,de ; 1 cycle
042953 B7          0002*M1     or a ; clear flags ; 1 cycle
042954 ED 52       0003*M1     sbc hl,de ; 2 cycles
042956             0004*M1     ; 4 cycles total
042956 C8          0115*       ret z ; no files to display so we're done
042957             0116*   ; set pointer to the correct index in the fileinfo pointer table
042957 2A 0A 00 05 0117*       ld hl,(bf_page_cur) ; get the current page
04295B 11 1E 00 00 0118*       ld de,bf_files_per_pg*3 ; number of files per page * 3 bytes per pointer
04295F CD 67 03 04 0119*       call umul24 ; hl = page * num_files_per_page
042963 EB          0120*       ex de,hl ; can't add ix,hl ...
042964 DD 21 00 03 0121*       ld ix,bf_filinfo_ptrs ; get the pointer to the fileinfo pointer table
       05          
042969 DD 19       0122*       add ix,de ; ix points to the correct index in the fileinfo pointer table
04296B             0123*   ; loop through the fileinfo pointer table and print out the filenames
04296B 3A 04 00 05 0124*       ld a,(bf_files_cur_pg)
04296F 47          0125*       ld b,a ; loop counter
042970 AF          0126*       xor a ; song index
042971             0127*   @loop:
042971 C5          0128*       push bc ; save loop counter
042972 F5          0129*       push af ; save song index
042973 CD 26 30 04 0130*       call printHexA ; print the song index
042977 DD 31 00    0131*       ld iy,(ix) ; iy points to filinfo struct
04297A CD CD 29 04 0132*       call bf_print_dir_or_file
04297E             0133*   @bump_counters:
04297E ED 32 03    0134*       lea ix,ix+3 ; bump the filename pointer
042981 F1          0135*       pop af ; restore song index
042982 3C          0136*       inc a ; increment the song index
042983 C1          0137*       pop bc ; restore loop counter
042984 05          0138*       dec b
042985 CA 91 29 04 0139*       jp z,@done ; if zero, we're done
042989 CD 7C 00 04 0140*       call printNewLine
04298D C3 71 29 04 0141*       jp @loop
042991             0142*   @done:
042991 F6 01       0143*       or a,1 ; reset zero flag indicating there were files to display
042993 C9          0144*       ret
042994             0145*   ; end bf_print_dir_page
042994             0146*   
042994             0147*   bf_highlight_file:
042994             0148*   ; refresh the directory listing
042994 CD 46 29 04 0149*       call bf_print_dir_page
042998 C8          0150*       ret z ; no files to display so we're done
042999             0151*   ; highlight the song being played in the directory listing
042999 3A 00 00 05 0152*       ld a,(bf_file_idx)
04299D 16 17       0153*       ld d,vp_dir_top
04299F 82          0154*       add a,d
0429A0 0E 00       0155*       ld c,text_left
0429A2 57          0156*       ld d,a
0429A3 1E 3F       0157*       ld e,text_right
0429A5 47          0158*       ld b,a
0429A6 CD A2 1B 04 0159*       call vdu_set_txt_viewport
0429AA CD 49 1B 04 0160*       call vdu_cls
0429AE             0161*   ; set text colours to inverse
0429AE CD D4 23 04 0162*       call set_text_colours_inverse
0429B2             0163*   ; print the index and song filename
0429B2 3A 00 00 05 0164*       ld a,(bf_file_idx)
0429B6 CD 26 30 04 0165*       call printHexA
0429BA CD 5C 2B 04 0166*       call bf_get_filinfo_from_pg_idx ; iy = pointer to the filinfo struct
0429BE CD CD 29 04 0167*       call bf_print_dir_or_file
0429C2             0168*   ; set text colours to normal
0429C2 CD C7 23 04 0169*       call set_text_colours_normal
0429C6 C9          0170*       ret
0429C7             0171*   ; end bf_highlight_file
0429C7             0172*   
0429C7             0173*   bf_check_dir_or_file:
0429C7 FD 7E 08    0174*       ld a,(iy+filinfo_fattrib)
0429CA CB 67       0175*       bit AM_DIR,a ; if not zero, is directory
0429CC C9          0176*       ret
0429CD             0177*   ; end bf_check_dir_or_file
0429CD             0178*   
0429CD             0179*   bf_print_dir_or_file:
0429CD CD C7 29 04 0180*       call bf_check_dir_or_file
0429D1 CA E0 29 04 0181*       jp z,@print_file ; not directory so just write filename
0429D5 CD 60 00 04 0182*       call printInline
0429D9 3C 44 49 52 0183*       asciz "<DIR> "
       3E 20 00    
0429E0             0184*   @print_file:
0429E0 ED 23 16    0185*       lea hl,iy+filinfo_fname
0429E3 CD 67 00 04 0186*       call printString ; print the filename
0429E7 C9          0187*       ret
0429E8             0188*   ; end bf_print_dir_or_file
0429E8             0189*   
0429E8             0190*   bf_print_dir_name:
0429E8 CD 79 23 04 0191*       call vp_dir_name
0429EC CD 49 1B 04 0192*       call vdu_cls
0429F0 21 10 00 05 0193*       ld hl,bf_dir_path
0429F4 CD 67 00 04 0194*       call printString
0429F8 C9          0195*       ret
0429F9             0196*   ; end bf_print_dir_name
0429F9             0049        include "input.inc"
0429F9             0001*   get_input:
0429F9             0002*   ; wait for the user to push a button
0429F9 FB          0003*       ei ; enable interrupts
0429FA             0004*       MOSCALL mos_getkey ; a = ascii code of key pressed
                       M1 Args: function=mos_getkey 
0429FA 3E 00       0001*M1 			LD	A, function
0429FC 5B CF       0002*M1 			RST.LIL	08h
0429FE F3          0005*       di ; disable interrupts
0429FF             0006*   
0429FF             0007*   ; RETURN TO MAIN, which re-enables interrupts and exits app
0429FF FE 1B       0008*       cp '\e' ; escape
042A01 C8          0009*       ret z
042A02 FE 71       0010*       cp 'q' ; quit
042A04 C8          0011*       ret z
042A05             0012*   
042A05             0013*   ; FILE BROWSER COMMANDS
042A05 FE 0B       0014*       cp 0x0B ; up arrow
042A07 CA 96 2A 04 0015*       jp z,bf_prev_file
042A0B FE 0A       0016*       cp 0x0A ; down arrow
042A0D CA B7 2A 04 0017*       jp z,bf_next_file
042A11 FE 15       0018*       cp 0x15 ; right arrow
042A13 CA C3 2A 04 0019*       jp z,bf_next_page
042A17 FE 08       0020*       cp 0x08 ; left arrow
042A19 CA EF 2A 04 0021*       jp z,bf_prev_page
042A1D FE 75       0022*       cp 'u' ; go up one directory
042A1F CA 19 2B 04 0023*       jp z,bf_up_dir
042A23             0024*   
042A23             0025*   ; SONG PLAYING COMMANDS
042A23             0026*   ; toggle play / pause
042A23 FE 70       0027*       cp 'p'
042A25 CA 7E 2B 04 0028*       jp z,ps_toggle_pause
042A29             0029*   ; toggle loop
042A29 FE 6C       0030*       cp 'l'
042A2B CA FB 2B 04 0031*       jp z,ps_toggle_loop
042A2F             0032*   ; toggle shuffle
042A2F FE 73       0033*       cp 's'
042A31 CA C2 2B 04 0034*       jp z,ps_toggle_shuffle
042A35             0035*   ; play random song
042A35 FE 72       0036*       cp 'r'
042A37 CA F8 2D 04 0037*       jp z,ps_play_random
042A3B             0038*   ; select song or directory
042A3B FE 0D       0039*       cp '\r' ; ENTER key
042A3D CA 3E 2B 04 0040*       jp z,bf_select_file
042A41             0041*   ; number key selections
042A41 FE 30       0042*       cp '0'
042A43 DA 5F 2A 04 0043*       jp c,@no_cmd ; not a song command
042A47 FE 3A       0044*       cp '9'+1
042A49 D2 5F 2A 04 0045*       jp nc,@no_cmd ; not a song command
042A4D             0046*   ; get pointer to song filename and play it
042A4D D6 30       0047*       sub '0' ; a = file index
042A4F 32 00 00 05 0048*       ld (bf_file_idx),a
042A53 CD 5C 2B 04 0049*       call bf_get_filinfo_from_pg_idx ; iy points to filinfo struct
042A57 CD C7 29 04 0050*       call bf_check_dir_or_file ; if zero then it's a song
042A5B CA 63 2A 04 0051*       jp z,@play_song ; ... otherwise fall through to no_cmd
042A5F             0052*   
042A5F             0053*   @no_cmd: ; no valid commands so loop
042A5F C3 F9 29 04 0054*       jp get_input
042A63             0055*   @play_song:
042A63 CD 94 29 04 0056*       call bf_highlight_file ; highlight the selected file
042A67 C3 47 2C 04 0057*       jp play_song ; play the song
042A6B             0058*   ; end get_input
042A6B             0059*   
042A6B             0060*   get_rand_file_idx:
042A6B 3A 04 00 05 0061*       ld a,(bf_files_cur_pg)
042A6F B7          0062*       or a
042A70 C8          0063*       ret z ; no files on page
042A71 6F          0064*       ld l,a
042A72 CD 38 05 04 0065*       call rand_8 ; a = 0-255
042A76 67          0066*       ld h,a
042A77 CD 74 05 04 0067*       call udiv8 ; a = mod(a,bf_files_per_pg)
042A7B 32 00 00 05 0068*       ld (bf_file_idx),a
042A7F C9          0069*       ret
042A80             0070*   
042A80             0071*   get_prev_file_idx:
042A80             0072*   ; get number of files on current page
042A80 3A 04 00 05 0073*       ld a,(bf_files_cur_pg)
042A84 47          0074*       ld b,a
042A85             0075*   ; decrement the file index
042A85 3A 00 00 05 0076*       ld a,(bf_file_idx)
042A89 3D          0077*       dec a
042A8A B8          0078*       cp b
042A8B DA 91 2A 04 0079*       jp c,@F ; check for wraparound
042A8F 78          0080*       ld a,b ; get the number of files this page
042A90 3D          0081*       dec a ; zero-based
042A91             0082*   @@:
042A91 32 00 00 05 0083*       ld (bf_file_idx),a
042A95 C9          0084*       ret
042A96             0085*   ; end get_prev_file_idx
042A96             0086*   
042A96             0087*   bf_prev_file:
042A96 CD 80 2A 04 0088*       call get_prev_file_idx
042A9A CD 94 29 04 0089*       call bf_highlight_file ; highlight the file
042A9E C3 F9 29 04 0090*       jp get_input
042AA2             0091*   ; end bf_prev_file
042AA2             0092*   
042AA2             0093*   get_next_file_idx:
042AA2             0094*   ; get number of files on current page
042AA2 3A 04 00 05 0095*       ld a,(bf_files_cur_pg)
042AA6 47          0096*       ld b,a
042AA7             0097*   ; increment the file index
042AA7 3A 00 00 05 0098*       ld a,(bf_file_idx)
042AAB 3C          0099*       inc a
042AAC B8          0100*       cp b
042AAD DA B2 2A 04 0101*       jp c,@F ; check for wraparound
042AB1 AF          0102*       xor a ; wrap around to the first file
042AB2             0103*   @@:
042AB2 32 00 00 05 0104*       ld (bf_file_idx),a
042AB6 C9          0105*       ret
042AB7             0106*   ; end get_next_file_idx
042AB7             0107*   
042AB7             0108*   bf_next_file:
042AB7 CD A2 2A 04 0109*       call get_next_file_idx
042ABB CD 94 29 04 0110*       call bf_highlight_file ; highlight the file
042ABF C3 F9 29 04 0111*       jp get_input
042AC3             0112*   ; end bf_next_file
042AC3             0113*   
042AC3             0114*   bf_next_page:
042AC3             0115*   ; advance the page number
042AC3 ED 5B 0A 00 0116*       ld de,(bf_page_cur) ; get the current page number
       05          
042AC8 13          0117*       inc de ; increment the page number
042AC9 2A 0D 00 05 0118*       ld hl,(bf_dir_num_pages) ; get the number of pages
042ACD 2B          0119*       dec hl ; zero-based
042ACE B7          0120*       or a ; clear carry
042ACF ED 52       0121*       sbc hl,de
042AD1 F2 D9 2A 04 0122*       jp p,@F ; not the last page
042AD5 11 00 00 00 0123*       ld de,0 ; wrap around to the first page
042AD9             0124*   @@:
042AD9             0125*   ; print the new page
042AD9 ED 53 0A 00 0126*       ld (bf_page_cur),de
       05          
042ADE AF          0127*       xor a
042ADF 32 00 00 05 0128*       ld (bf_file_idx),a ; reset the file index
042AE3 CD 2A 29 04 0129*       call bf_get_page_num_files ; get the number of files on the new page and store it
042AE7 CD 94 29 04 0130*       call bf_highlight_file ; highlight the first file
042AEB C3 F9 29 04 0131*       jp get_input
042AEF             0132*   ; end bf_next_page
042AEF             0133*   
042AEF             0134*   bf_prev_page:
042AEF             0135*   ; decrement the page number
042AEF 2A 0A 00 05 0136*       ld hl,(bf_page_cur) ; get the current page number
042AF3 2B          0137*       dec hl ; decrement the page number
042AF4             0138*       SIGN_HLU
                       M1 Args: none
042AF4 19          0001*M1     add hl,de ; 1 cycle
042AF5 B7          0002*M1     or a ; clear flags ; 1 cycle
042AF6 ED 52       0003*M1     sbc hl,de ; 2 cycles
042AF8             0004*M1     ; 4 cycles total
042AF8 F2 01 2B 04 0139*       jp p,@F ; not time to wrap around
042AFC 2A 0D 00 05 0140*       ld hl,(bf_dir_num_pages) ; get the number of pages
042B00 2B          0141*       dec hl ; zero-based
042B01             0142*   @@:
042B01             0143*   ; print the new page
042B01 22 0A 00 05 0144*       ld (bf_page_cur),hl
042B05 AF          0145*       xor a
042B06 32 00 00 05 0146*       ld (bf_file_idx),a ; reset the file index
042B0A CD 2A 29 04 0147*       call bf_get_page_num_files ; get the number of files on the new page and store it
042B0E CD 94 29 04 0148*       call bf_highlight_file ; highlight the first file
042B12 C3 F9 29 04 0149*       jp get_input
042B16             0150*   ; end bf_prev_page
042B16             0151*   
042B16 2E 2E 00    0152*   str_up_dir: asciz ".."
042B19             0153*   ; change directory one level up
042B19             0154*   ; inputs: none
042B19             0155*   bf_up_dir:
042B19 21 16 2B 04 0156*       ld hl,str_up_dir
042B1D             0157*   ; change directory
042B1D             0158*   ; inputs: hl = pointer to directory name
042B1D             0159*   bf_change_dir:
042B1D             0160*       MOSCALL mos_cd ; change to the directory
                       M1 Args: function=mos_cd 
042B1D 3E 03       0001*M1 			LD	A, function
042B1F 5B CF       0002*M1 			RST.LIL	08h
042B21 CD 4C 28 04 0161*       call bf_get_dir ; get directory listing
042B25 21 00 00 00 0162*       ld hl,0
042B29 22 0A 00 05 0163*       ld (bf_page_cur),hl ; reset the page number
042B2D AF          0164*       xor a
042B2E 32 00 00 05 0165*       ld (bf_file_idx),a ; reset the file index
042B32 CD 94 29 04 0166*       call bf_highlight_file ; highlight the first file
042B36 CD E8 29 04 0167*       call bf_print_dir_name ; print the directory name
042B3A C3 F9 29 04 0168*       jp get_input ; back to main loop
042B3E             0169*   ; end bf_change_dir
042B3E             0170*   ; end bf_up_dir
042B3E             0171*   
042B3E             0172*   bf_select_file:
042B3E             0173*   ; set up pointers to the fileinfo struct and filename
042B3E CD 5C 2B 04 0174*       call bf_get_filinfo_from_pg_idx ; iy = pointer to filinfo struct
042B42 21 00 FF 04 0175*       ld hl,bf_fil_struct ; hl = pointer to fil struct
042B46 ED 13 16    0176*       lea de,iy+filinfo_fname ; de = pointer to filename
042B49 CD 2E 2F 04 0177*       call verify_wav
042B4D ED 23 16    0178*       lea hl,iy+filinfo_fname ; hl = pointer to filename
042B50 C2 1D 2B 04 0179*       jp nz,bf_change_dir ; not a .wav file, so must be a directory
042B54             0180*   ; play the .wav file
042B54 CD 94 29 04 0181*       call bf_highlight_file ; highlight the selected file
042B58 C3 47 2C 04 0182*       jp play_song
042B5C             0183*   ; end bf_select_file
042B5C             0184*   
042B5C             0185*   ; get a pointer to a filinfo struct from a directory page index
042B5C             0186*   ; inputs: none
042B5C             0187*   ; outputs: iy = pointer to the filinfo struct
042B5C             0188*   bf_get_filinfo_from_pg_idx:
042B5C             0189*   ; get the fileinfo pointer from the fileinfo pointer table
042B5C 2A 0A 00 05 0190*       ld hl,(bf_page_cur) ; get the current page number
042B60 11 1E 00 00 0191*       ld de,bf_files_per_pg*3 ; number of files per page * 3 bytes per pointer
042B64 CD 67 03 04 0192*       call umul24 ; hl = page * num_files_per_page
042B68 3A 00 00 05 0193*       ld a,(bf_file_idx) ; get the file index
042B6C 5F          0194*       ld e,a ; file index
042B6D 16 03       0195*       ld d,3 ; 3 bytes per pointer
042B6F ED 5C       0196*       mlt de ; de = file index * 3
042B71 19          0197*       add hl,de
042B72 EB          0198*       ex de,hl ; can't add iy,hl ...
042B73 FD 21 00 03 0199*       ld iy,bf_filinfo_ptrs ; get the pointer to the fileinfo pointer table
       05          
042B78 FD 19       0200*       add iy,de ; iy points to the first fileinfo pointer in the current page
042B7A FD 37 00    0201*       ld iy,(iy) ; iy points to the filinfo record
042B7D C9          0202*       ret
042B7E             0203*   ; end bf_get_filinfo_from_pg_idx
042B7E             0204*   
042B7E             0205*   ps_toggle_pause:
042B7E CD 38 23 04 0206*       call vp_now_playing
042B82 CD 49 1B 04 0207*       call vdu_cls
042B86 21 34 2C 04 0208*       ld hl,ps_mode
042B8A CB 46       0209*       bit ps_mode_playing,(hl)
042B8C C2 A5 2B 04 0210*       jp nz,@playing
042B90 CB C6       0211*       set ps_mode_playing,(hl)
042B92 CD 60 00 04 0212*       call printInline
042B96 28 50 29 6C 0213*       asciz "(P)laying "
       61 79 69 6E 
       67 20 00    
042BA1 C3 B6 2B 04 0214*       jp @print
042BA5             0215*   @playing:
042BA5 CB 86       0216*       res ps_mode_playing,(hl)
042BA7 CD 60 00 04 0217*       call printInline
042BAB 28 50 29 61 0218*       asciz "(P)aused  "
       75 73 65 64 
       20 20 00    
042BB6             0219*   @print:
042BB6 21 16 01 07 0220*       ld hl,ps_filinfo_fname
042BBA CD 67 00 04 0221*       call printString ; print the song filename
042BBE C3 F9 29 04 0222*       jp get_input
042BC2             0223*   ; end ps_toggle_pause
042BC2             0224*   
042BC2             0225*   ps_toggle_shuffle:
042BC2 CD A0 23 04 0226*       call vp_legend_shuffle
042BC6 CD 49 1B 04 0227*       call vdu_cls
042BCA 21 34 2C 04 0228*       ld hl,ps_mode
042BCE CB 56       0229*       bit ps_mode_shuffle,(hl)
042BD0 C2 ED 2B 04 0230*       jp nz,@shuffling
042BD4 CD D4 23 04 0231*       call set_text_colours_inverse
042BD8 21 34 2C 04 0232*       ld hl,ps_mode
042BDC CB D6       0233*       set ps_mode_shuffle,(hl)
042BDE CD 60 00 04 0234*       call printInline
042BE2 4F 4E 00    0235*       asciz "ON"
042BE5 CD C7 23 04 0236*       call set_text_colours_normal
042BE9 C3 F9 29 04 0237*       jp get_input
042BED             0238*   @shuffling:
042BED CB 96       0239*       res ps_mode_shuffle,(hl)
042BEF CD 60 00 04 0240*       call printInline
042BF3 4F 46 46 00 0241*       asciz "OFF"
042BF7 C3 F9 29 04 0242*       jp get_input
042BFB             0243*   ; end ps_toggle_shuffle
042BFB             0244*   
042BFB             0245*   ps_toggle_loop:
042BFB CD AD 23 04 0246*       call vp_legend_loop
042BFF CD 49 1B 04 0247*       call vdu_cls
042C03 21 34 2C 04 0248*       ld hl,ps_mode
042C07 CB 4E       0249*       bit ps_mode_loop,(hl)
042C09 C2 26 2C 04 0250*       jp nz,@looping
042C0D CD D4 23 04 0251*       call set_text_colours_inverse
042C11 21 34 2C 04 0252*       ld hl,ps_mode
042C15 CB CE       0253*       set ps_mode_loop,(hl)
042C17 CD 60 00 04 0254*       call printInline
042C1B 4F 4E 00    0255*       asciz "ON"
042C1E CD C7 23 04 0256*       call set_text_colours_normal
042C22 C3 F9 29 04 0257*       jp get_input
042C26             0258*   @looping:
042C26 CB 8E       0259*       res ps_mode_loop,(hl)
042C28 CD 60 00 04 0260*       call printInline
042C2C 4F 46 46 00 0261*       asciz "OFF"
042C30 C3 F9 29 04 0262*       jp get_input
042C34             0263*   ; end ps_toggle_loop
042C34             0050        include "play.inc"
042C34             0001*   ; stream a song from the SD card
042C34             0002*   ; inputs: hl = pointer to filename
042C34             0003*   ; requirements: the file must be 8-bit signed PCM mono
042C34             0004*   ; uses: sound channels 0 and 1, buffers 0x3000 and 0x3001
042C34             0005*   ; play_song constants
042C34             0006*   ch0_buffer: equ 0x3000
042C34             0007*   ch1_buffer: equ 0x3001
042C34             0008*   cmd0_buffer: equ 0x3002
042C34             0009*   cmd1_buffer: equ 0x3003
042C34             0010*   
042C34             0011*   ; ps_mode bits
042C34             0012*   ps_mode_playing: equ 0 ; 0 = paused 1 = playing, p key toggles
042C34             0013*   ps_mode_loop:    equ 1 ; 0 = no loop 1 = loop (overrides ps_mode_shuffle if on), l key toggles
042C34             0014*   ps_mode_shuffle: equ 2 ; 0 = shuffle off 1 = on, s key toggles
042C34             0015*   
042C34             0016*   ; play_song state variables
042C34             0017*   ; current active channel and bufferId's
042C34 00          0018*   ps_mode: db 0 ; playback mode bitmask
042C35 00          0019*   ps_channel: db 0 ; channel number
042C36 00 00 00    0020*   ps_cmdId: dl 0 ; command bufferId
042C39 00 00 00    0021*   ps_sampleId: dl 0 ; sample bufferId
042C3C 00 00 00    0022*   ps_chunkpointer: dl 0 ; pointer to current chunk
042C3F 00 00 00    0023*   ps_playhead: dl 0 ; current playhead position in the song in seconds from the start
042C42 00 00 00 00 0024*   ps_song_duration: blkb 5,0 ; duration of the current song in seconds (32-bit word plus a padding byte)
       00          
042C47             0025*   
042C47             0026*   play_song:
042C47             0027*   ; stop the PRT timer and close any currently playing file
042C47 CD 77 2D 04 0028*       call ps_close_file ; also stops prt timer
042C4B             0029*   
042C4B             0030*   ; clear now playing viewport
042C4B CD 38 23 04 0031*       call vp_now_playing
042C4F CD 49 1B 04 0032*       call vdu_cls
042C53             0033*   
042C53             0034*   ; open the file and verify it's a playable .wav file
042C53 CD A8 2F 04 0035*       call open_wav
042C57 CA 8A 2C 04 0036*       jp z,@F ; valid .wav file so continue
042C5B CD 60 00 04 0037*       call printInline
042C5F 49 6E 76 61 0038*       asciz "Invalid .wav file selected, try again."
       6C 69 64 20 
       2E 77 61 76 
       20 66 69 6C 
       65 20 73 65 
       6C 65 63 74 
       65 64 2C 20 
       74 72 79 20 
       61 67 61 69 
       6E 2E 00    
042C86 C3 F9 29 04 0039*       jp get_input ; return to user input loop
042C8A             0040*   
042C8A             0041*   @@: ; copy the directory filinfo struct to ps_filinfo_struct
042C8A ED 23 00    0042*       lea hl,iy ; open_wav set iy to the directory's filinfo struct
042C8D 11 00 01 07 0043*       ld de,ps_filinfo_struct ; destination address
042C91 01 16 01 00 0044*       ld bc,filinfo_struct_size
042C95 ED B0       0045*       ldir
042C97             0046*   
042C97             0047*   ; tell the user what they've won
042C97 CD 60 00 04 0048*       call printInline
042C9B 28 50 29 6C 0049*       asciz "(P)laying "
       61 79 69 6E 
       67 20 00    
042CA6 21 16 01 07 0050*       ld hl,ps_filinfo_fname
042CAA CD 67 00 04 0051*       call printString ; print the song filename
042CAE             0052*   
042CAE             0053*   ; compute the song duration from the file size and sample rate and print it
042CAE             0054*   ; technically we should account for the .wav header, but at 76 bytes it's negligible
042CAE CD 52 23 04 0055*       call vp_duration ; set viewport to duration window
042CB2 3A 07 03 07 0056*       ld a,(ps_wav_header+wav_file_size+3) ; upper byte
042CB6 DD 2A 04 03 0057*       ld ix,(ps_wav_header+wav_file_size+0) ; lower word
       07          
042CBB ED 5B 18 03 0058*       ld de,(ps_wav_header+wav_sample_rate)
       07          
042CC0 CD A5 05 04 0059*       call udiv3223 ; auix = duration in seconds
042CC4 DD 22 42 2C 0060*       ld (ps_song_duration),ix ; duration low word
       04          
042CC9 32 45 2C 04 0061*       ld (ps_song_duration+3),a ; duration high byte
042CCD 2A 42 2C 04 0062*       ld hl,(ps_song_duration) ; ls 24 bits of duration is sufficient and all we're prepared for
042CD1 CD 35 18 04 0063*       call seconds_to_hhmmss ; hl pointer to string representation of HH:MM:SS
042CD5 CD 67 00 04 0064*       call printString ; print the duration
042CD9             0065*   ; reset the playhead counter to zero
042CD9 21 00 00 00 0066*       ld hl,0
042CDD 22 3F 2C 04 0067*       ld (ps_playhead),hl
042CE1             0068*   ; load the command buffers and read the first block of data
042CE1 CD 3A 2E 04 0069*       call ps_load_command_buffers
042CE5 CD F7 2C 04 0070*       call ps_read_sample
042CE9             0071*   ; set ps_mode_playing
042CE9 21 34 2C 04 0072*       ld hl,ps_mode
042CED CB C6       0073*       set ps_mode_playing,(hl)
042CEF             0074*   ; enable interrupts and start the PRT timer
042CEF CD C1 2E 04 0075*       call ps_prt_start
042CF3             0076*   ; jump to user input loop (enables interrupts)
042CF3             0077*   ; the play sample interrupt will return to there
042CF3             0078*   ; and exit app will return to main from there as well
042CF3 C3 F9 29 04 0079*       jp get_input
042CF7             0080*   ; end play_song
042CF7             0081*   
042CF7             0082*   ; read the next 1-second's worth of sound data from the file
042CF7             0083*   ; and upload it to the sample buffer
042CF7             0084*   ps_read_sample:
042CF7             0085*   ; disable interrupts so load is guaranteed to complete
042CF7 F3          0086*       di
042CF8             0087*   
042CF8             0088*   ; 0x82: ffs_fread
042CF8             0089*   ; Read from a file (Requires MOS 1.03 or above)
042CF8             0090*   ; Parameters:
042CF8             0091*   ; HL(U): Pointer to a FIL structure
042CF8             0092*   ; DE(U): Pointer to a buffer to store the data in
042CF8             0093*   ; BC(U): Number of bytes to read (typically the size of the buffer)
042CF8             0094*   ; Preserves: HL(U), DE(U)
042CF8             0095*   ; Returns:
042CF8             0096*   ; BC(U): Number of bytes read
042CF8             0097*   ; A: FRESULT
042CF8 21 00 00 07 0098*       ld hl,ps_fil_struct
042CFC 11 00 04 07 0099*       ld de,ps_wav_data
042D00 ED 4B 18 03 0100*       ld bc,(ps_wav_header+wav_sample_rate)
       07          
042D05             0101*       FFSCALL ffs_fread
                       M1 Args: function=ffs_fread 
042D05 FD E5       0001*M1 			PUSH IY
042D07 3E 82       0002*M1 			LD	A, function
042D09 5B CF       0003*M1 			RST.LIL	08h
042D0B FD E1       0004*M1 			POP IY
042D0D             0102*   
042D0D             0103*   ; test bc for zero bytes read
042D0D 21 00 00 00 0104*       ld hl,0
042D11 AF          0105*       xor a ; clear carry
042D12 ED 42       0106*       sbc hl,bc ; hl = 0-chunksize
042D14 C2 20 2D 04 0107*       jp nz,@load ; we read some data
042D18             0108*   
042D18             0109*   ; no data read so close file and play next song
042D18 CD 77 2D 04 0110*       call ps_close_file
042D1C C3 88 2D 04 0111*       jp ps_song_over
042D20             0112*   
042D20             0113*   ; load a vdu buffer from local memory
042D20             0114*   ; inputs: hl = bufferId ; bc = length ; de = pointer to data
042D20             0115*   @load:
042D20 C5          0116*       push bc ; save how much data to load
042D21 3A 35 2C 04 0117*       ld a,(ps_channel)
042D25 3C          0118*       inc a
042D26 E6 01       0119*       and 1
042D28 32 35 2C 04 0120*       ld (ps_channel),a
042D2C 21 00 30 00 0121*       ld hl,ch0_buffer
042D30 6F          0122*       ld l,a
042D31 22 39 2C 04 0123*       ld (ps_sampleId),hl
042D35 CD 03 1F 04 0124*       call vdu_clear_buffer
042D39 2A 39 2C 04 0125*       ld hl,(ps_sampleId)
042D3D C1          0126*       pop bc ; restore how much data to load
042D3E 11 00 04 07 0127*       ld de,ps_wav_data ; pointer to data
042D42 CD EE 1C 04 0128*       call vdu_load_buffer
042D46             0129*   ; update the playhead counter and display the time elapsed
042D46 CD 45 23 04 0130*       call vp_elapsed
042D4A 2A 3F 2C 04 0131*       ld hl,(ps_playhead)
042D4E 23          0132*       inc hl
042D4F 22 3F 2C 04 0133*       ld (ps_playhead),hl
042D53 CD 35 18 04 0134*       call seconds_to_hhmmss ; hl pointer to string representation of HH:MM:SS
042D57 CD 67 00 04 0135*       call printString ; print the playhead position
042D5B             0136*   ; print a playing breadcrumb
042D5B CD 5F 23 04 0137*       call vp_playhead
042D5F 3E 2E       0138*       ld a,'.'
042D61 5B D7       0139*       rst.lil 10h
042D63 C9          0140*       ret
042D64             0141*   ; end ps_read_sample
042D64             0142*   
042D64             0143*   ; this is called by the PRT timer interrupt
042D64             0144*   ps_play_sample:
042D64             0145*   ; call the command buffer to play the sound
042D64 2A 39 2C 04 0146*       ld hl,(ps_sampleId)
042D68 2C          0147*       inc l
042D69 2C          0148*       inc l
042D6A 22 36 2C 04 0149*       ld (ps_cmdId),hl ; TODO: perhaps not needed
042D6E CD E8 1E 04 0150*       call vdu_call_buffer
042D72             0151*   ; load the next chunk of data
042D72 CD F7 2C 04 0152*       call ps_read_sample
042D76             0153*   ; return to the interrupt handler
042D76 C9          0154*       ret
042D77             0155*   ; end ps_play_sample
042D77             0156*   
042D77             0157*   ; close the file
042D77             0158*   ps_close_file:
042D77 CD DE 2E 04 0159*       call ps_prt_stop ; stop the PRT timer
042D7B             0160*   ; 0x81: ffs_fclose
042D7B             0161*   ; Close a file (Requires MOS 1.03 or above)
042D7B             0162*   ; Parameters:
042D7B             0163*   ; HL(U): Pointer to a FIL structure
042D7B             0164*   ; Preserves: HL(U)
042D7B             0165*   ; Returns:
042D7B             0166*   ; A: FRESULT
042D7B 21 00 00 07 0167*       ld hl,ps_fil_struct
042D7F             0168*       FFSCALL ffs_fclose
                       M1 Args: function=ffs_fclose 
042D7F FD E5       0001*M1 			PUSH IY
042D81 3E 81       0002*M1 			LD	A, function
042D83 5B CF       0003*M1 			RST.LIL	08h
042D85 FD E1       0004*M1 			POP IY
042D87 C9          0169*       ret
042D88             0170*   ; end ps_close_file
042D88             0171*   
042D88             0172*   ps_song_over:
042D88             0173*   ; get playback mode
042D88 21 34 2C 04 0174*       ld hl,ps_mode
042D8C             0175*   
042D8C             0176*   ; are we in loop mode?
042D8C CB 4E       0177*       bit ps_mode_loop,(hl)
042D8E CA 9A 2D 04 0178*       jp z,@F ; no so check next mode
042D92 21 16 01 07 0179*       ld hl,ps_filinfo_fname ; get current song filename
042D96 C3 47 2C 04 0180*       jp play_song ; and play it again, Sam
042D9A             0181*   
042D9A             0182*   @@: ; are we in shuffle mode?
042D9A CB 56       0183*       bit ps_mode_shuffle,(hl)
042D9C C2 F8 2D 04 0184*       jp nz,ps_play_random ; yes so play a random song
042DA0             0185*   
042DA0             0186*   ; loop and shuffle are off so play next song
042DA0 C3 A4 2D 04 0187*       jp ps_play_next_song
042DA4             0188*   ; end ps_song_over
042DA4             0189*   
042DA4             0190*   ps_play_next_song:
042DA4 3A 04 00 05 0191*       ld a,(bf_files_cur_pg)
042DA8 B7          0192*       or a ; check for zero files
042DA9 CA F9 29 04 0193*       jp z,get_input ; no files to play so return to user input loop
042DAD 47          0194*       ld b,a ; loop counter
042DAE             0195*   @next_file:
042DAE C5          0196*       push bc ; save loop counter
042DAF CD A2 2A 04 0197*       call get_next_file_idx ; (bf_file_idx)++ with wraparound
042DB3 CD 5C 2B 04 0198*       call bf_get_filinfo_from_pg_idx ; iy points to filinfo struct
042DB7 CD C7 29 04 0199*       call bf_check_dir_or_file ; if zero then it's a song
042DBB C1          0200*       pop bc ; restore loop counter
042DBC CA C6 2D 04 0201*       jp z,@play_song ; is a file so play song
042DC0 10 EC       0202*       djnz @next_file ; try the next file
042DC2 C3 F9 29 04 0203*       jp get_input ; no files in this directory so return to user input loop
042DC6             0204*   @play_song:
042DC6 CD 94 29 04 0205*       call bf_highlight_file ; highlight the selected file
042DCA C3 47 2C 04 0206*       jp play_song
042DCE             0207*   ; end ps_play_next_song
042DCE             0208*   
042DCE             0209*   ps_play_prev_song:
042DCE 3A 04 00 05 0210*       ld a,(bf_files_cur_pg)
042DD2 B7          0211*       or a ; check for zero files
042DD3 CA F9 29 04 0212*       jp z,get_input ; no files to play so return to user input loop
042DD7 47          0213*       ld b,a ; loop counter
042DD8             0214*   @next_file:
042DD8 C5          0215*       push bc ; save loop counter
042DD9 CD A2 2A 04 0216*       call get_next_file_idx ; (bf_file_idx)++ with wraparound
042DDD CD 5C 2B 04 0217*       call bf_get_filinfo_from_pg_idx ; iy points to filinfo struct
042DE1 CD C7 29 04 0218*       call bf_check_dir_or_file ; if zero then it's a song
042DE5 C1          0219*       pop bc ; restore loop counter
042DE6 CA F0 2D 04 0220*       jp z,@play_song ; is a file so play song
042DEA 10 EC       0221*       djnz @next_file ; try the next file
042DEC C3 F9 29 04 0222*       jp get_input ; no files in this directory so return to user input loop
042DF0             0223*   @play_song:
042DF0 CD 94 29 04 0224*       call bf_highlight_file ; highlight the selected file
042DF4 C3 47 2C 04 0225*       jp play_song
042DF8             0226*   ; end ps_play_prev_song
042DF8             0227*   
042DF8             0228*   ; queue a random song on the current page to play next
042DF8             0229*   ps_play_random:
042DF8 3A 04 00 05 0230*       ld a,(bf_files_cur_pg)
042DFC B7          0231*       or a ; check for zero files
042DFD CA F9 29 04 0232*       jp z,get_input ; no files to play so return to user input loop
042E01 47          0233*       ld b,a ; loop counter
042E02 3A 00 00 05 0234*       ld a,(bf_file_idx) ; save current song index
042E06 32 39 2E 04 0235*       ld (@file_idx),a
042E0A             0236*   @next_file:
042E0A C5          0237*       push bc ; save loop counter
042E0B CD 6B 2A 04 0238*       call get_rand_file_idx ; a->(bf_file_idx)
042E0F 21 39 2E 04 0239*       ld hl,@file_idx
042E13 BE          0240*       cp (hl) ; check for same song
042E14 CA 2B 2E 04 0241*       jp z,@same ; same song so try again
042E18 CD 5C 2B 04 0242*       call bf_get_filinfo_from_pg_idx ; iy points to filinfo struct
042E1C CD C7 29 04 0243*       call bf_check_dir_or_file ; if zero then it's a song
042E20             0244*   @bump_counter:
042E20 C1          0245*       pop bc ; restore loop counter
042E21 CA 31 2E 04 0246*       jp z,@play_song ; is a file so play song
042E25 10 E3       0247*       djnz @next_file ; try the next file
042E27 C3 F9 29 04 0248*       jp get_input ; no files in this directory so return to user input loop
042E2B             0249*   @same:
042E2B F6 01       0250*       or a,1 ; reset zero flag
042E2D C3 20 2E 04 0251*       jp @bump_counter
042E31             0252*   @play_song:
042E31 CD 94 29 04 0253*       call bf_highlight_file ; highlight the selected file
042E35 C3 47 2C 04 0254*       jp play_song
042E39 00          0255*   @file_idx: db 0
042E3A             0256*   ; end ps_play_random
042E3A             0257*   
042E3A             0258*   ps_load_command_buffers:
042E3A 21 02 30 00 0259*       ld hl,cmd0_buffer
042E3E CD 03 1F 04 0260*       call vdu_clear_buffer
042E42 2A 18 03 07 0261*       ld hl,(ps_wav_header+wav_sample_rate)
042E46 22 90 2E 04 0262*       ld (ps_sr0),hl
042E4A 3E 17       0263*       ld a,23
042E4C 32 92 2E 04 0264*       ld (ps_sr0+2),a
042E50 21 02 30 00 0265*       ld hl,cmd0_buffer
042E54 01 1D 00 00 0266*       ld bc,ps_cmd0_end-ps_cmd0
042E58 11 87 2E 04 0267*       ld de,ps_cmd0
042E5C CD C0 1E 04 0268*       call vdu_write_block_to_buffer
042E60             0269*   
042E60 21 03 30 00 0270*       ld hl,cmd1_buffer
042E64 CD 03 1F 04 0271*       call vdu_clear_buffer
042E68 2A 18 03 07 0272*       ld hl,(ps_wav_header+wav_sample_rate)
042E6C 22 AD 2E 04 0273*       ld (ps_sr1),hl
042E70 3E 17       0274*       ld a,23
042E72 32 AF 2E 04 0275*       ld (ps_sr1+2),a
042E76 21 03 30 00 0276*       ld hl,cmd1_buffer
042E7A 01 1D 00 00 0277*       ld bc,ps_cmd1_end-ps_cmd1
042E7E 11 A4 2E 04 0278*       ld de,ps_cmd1
042E82 CD C0 1E 04 0279*       call vdu_write_block_to_buffer
042E86 C9          0280*       ret
042E87             0281*   ps_cmd0:
042E87             0282*   ; vdu_buffer_to_sound command string
042E87             0283*   ; Command 5: Buffer to sound
042E87             0284*   ; VDU 23, 0, &85, channel (ignored), 5, 2, bufferId; format, [sampleRate;]
042E87 17 00 85    0285*       db 23,0,0x85 ; vdu sound command header
042E8A 00          0286*       db 0x00 ; channel (ignored)
042E8B 05          0287*       db 0x05 ; buffer to sound command
042E8C 02          0288*       db 0x02 ; command 2 create sample
042E8D 00 30       0289*       dw ch0_buffer
042E8F 09          0290*       db 1+8 ; 8-bit unsigned PCM mono, 8 = sample rate argument follows
042E90             0291*   ps_sr0:
042E90 00 00       0292*       dw 0x0000 ; sample rate Hz
042E92             0293*   ; vdu_play_sfx command string
042E92             0294*   ; Command 4: Set waveform
042E92             0295*   ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
042E92 17 00 85    0296*       db 23,0,$85 ; vdu sound command header
042E95 00          0297*       db 0 ; channel
042E96 04          0298*       db 4 ; set waveform command
042E97 08          0299*       db 8 ; waveform 8 = sample
042E98 00 30       0300*       dw ch0_buffer ; sample bufferId
042E9A             0301*   ; Command 0: Play note
042E9A             0302*   ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
042E9A 17 00 85    0303*       db 23,0,$85 ; vdu sound command header
042E9D 00          0304*       db 0 ; channel
042E9E 00          0305*       db 0 ; play note command
042E9F 7F          0306*       db 127  ; volume 127 = max
042EA0 00 00       0307*       dw 0 ; frequency (relevant only for tuneable samples)
042EA2 00 00       0308*       dw 0 ; duration (ms), zero means play one time in full
042EA4             0309*   ps_cmd0_end:
042EA4             0310*   
042EA4             0311*   ps_cmd1:
042EA4             0312*   ; vdu_buffer_to_sound command string
042EA4             0313*   ; Command 5: Buffer to sound
042EA4             0314*   ; VDU 23, 0, &85, channel (ignored), 5, 2, bufferId; format, [sampleRate;]
042EA4 17 00 85    0315*       db 23,0,0x85 ; vdu sound command header
042EA7 00          0316*       db 0x00 ; channel (ignored)
042EA8 05          0317*       db 0x05 ; buffer to sound command
042EA9 02          0318*       db 0x02 ; command 2 create sample
042EAA 01 30       0319*       dw ch1_buffer
042EAC 09          0320*       db 1+8 ; 8-bit unsigned PCM mono, 8 = sample rate argument follows
042EAD             0321*   ps_sr1:
042EAD 00 00       0322*       dw 0x0000 ; sample rate Hz
042EAF             0323*   ; vdu_play_sfx command string
042EAF             0324*   ; Command 4: Set waveform
042EAF             0325*   ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
042EAF 17 00 85    0326*       db 23,0,$85 ; vdu sound command header
042EB2 01          0327*       db 1 ; channel
042EB3 04          0328*       db 4 ; set waveform command
042EB4 08          0329*       db 8 ; waveform 8 = sample
042EB5 01 30       0330*       dw ch1_buffer ; sample bufferId
042EB7             0331*   ; Command 0: Play note
042EB7             0332*   ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
042EB7 17 00 85    0333*       db 23,0,$85 ; vdu sound command header
042EBA 01          0334*       db 1 ; channel
042EBB 00          0335*       db 0 ; play note command
042EBC 7F          0336*       db 127  ; volume 127 = max
042EBD 00 00       0337*       dw 0 ; frequency (relevant only for tuneable samples)
042EBF 00 00       0338*       dw 0 ; duration (ms), zero means play one time in full
042EC1             0339*   ps_cmd1_end:
042EC1             0340*   ; end ps_load_command_buffers
042EC1             0051        include "timer_jukebox.inc"
042EC1             0001*   ps_prt_reload: equ [72000/2] ; 36000 = 2 ticks per second at 18.432 MHz with a 256 clock divider
042EC1             0002*   
042EC1             0003*   ; start PRT timer
042EC1             0004*   ps_prt_start:
042EC1 21 00 00 00 0005*       ld hl,0
042EC5 22 00 2F 04 0006*       ld (ps_prt_irq_counter),hl
042EC9 21 A0 8C 00 0007*       ld hl,ps_prt_reload
042ECD ED 29 84    0008*       out0 (TMR1_CTL+TMR_RES_LOW),l
042ED0 ED 21 85    0009*   	out0 (TMR1_CTL+TMR_RES_HIGH),h
042ED3             0010*   ; disable timer (in effect, reset it)
042ED3 3E 0E       0011*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_256 | RST_EN_1 | PRT_EN_0
042ED5 ED 39 83    0012*   	out0 (TMR1_CTL+TMR_REG_CTL),a
042ED8             0013*   ; enable timer,with interrupt and CONTINUOUS mode,clock divider 256
042ED8 3E 5F       0014*       ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_256 | RST_EN_1 | PRT_EN_1
042EDA ED 39 83    0015*   	out0 (TMR1_CTL+TMR_REG_CTL),a
042EDD C9          0016*       ret
042EDE             0017*   
042EDE             0018*   ; stop PRT timer
042EDE             0019*   ps_prt_stop:
042EDE 3E 0E       0020*       ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_256 | RST_EN_1 | PRT_EN_0
042EE0 ED 39 83    0021*   	out0 (TMR1_CTL+TMR_REG_CTL),a
042EE3 C9          0022*       ret
042EE4             0023*   
042EE4             0024*   ; ===============================================
042EE4             0025*   ; PRT Timer Interrupt Handling
042EE4             0026*   ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
042EE4             0027*   ; -----------------------------------------------
042EE4             0028*   ps_prt_irq_init:
042EE4             0029*       ; set up interrupt vector table 2
042EE4 21 00 00 00 0030*   	ld hl,0
042EE8 3A 0C 01 00 0031*   	ld a,($10c)
042EEC 6F          0032*   	ld l,a
042EED 3A 0D 01 00 0033*   	ld a,($10d)
042EF1 67          0034*   	ld h,a
042EF2             0035*   
042EF2             0036*   	; skip over CALL ($c3)
042EF2 23          0037*   	inc hl
042EF3             0038*   	; load address of jump into vector table 2 (in ram)
042EF3 ED 27       0039*   	ld hl,(hl)
042EF5             0040*   
042EF5             0041*   	; write CALL ps_prt_irq_handler to vector table 2
042EF5 3E C3       0042*   	ld a,$c3
042EF7 77          0043*   	ld (hl),a
042EF8 23          0044*   	inc hl
042EF9 11 01 2F 04 0045*   	ld de,ps_prt_irq_handler
042EFD ED 1F       0046*   	ld (hl),de
042EFF             0047*   
042EFF C9          0048*       ret
042F00             0049*   ; end ps_prt_irq_init
042F00             0050*   
042F00             0051*   ; interrupt routine for playing the next sample
042F00             0052*   ps_prt_irq_counter:
042F00 00          0053*   	db 0
042F01             0054*   ps_prt_irq_handler:
042F01 F3          0055*       di
042F02 08          0056*       ex af,af'
042F03 D9          0057*       exx
042F04             0058*   ; clear sysvar_keyascii
042F04             0059*   	MOSCALL mos_sysvars
                       M1 Args: function=mos_sysvars 
042F04 3E 08       0001*M1 			LD	A, function
042F06 5B CF       0002*M1 			RST.LIL	08h
042F08 AF          0060*   	xor a
042F09 DD 77 05    0061*   	ld (IX+sysvar_keyascii),a
042F0C             0062*   ; read the timer interrupt and bump the counter
042F0C ED 38 83    0063*       in0 a,(TMR1_CTL+TMR_REG_CTL)
042F0F 3A 00 2F 04 0064*       ld a,(ps_prt_irq_counter)
042F13 3C          0065*       inc a
042F14 E6 01       0066*       and 1 ; modulo 2
042F16 32 00 2F 04 0067*       ld (ps_prt_irq_counter),a
042F1A             0068*   ; if counter zero, play the next sample
042F1A C2 28 2F 04 0069*       jp nz,@F
042F1E 21 34 2C 04 0070*       ld hl,ps_mode
042F22 CB 46       0071*       bit ps_mode_playing,(hl)
042F24 C4 64 2D 04 0072*       call nz,ps_play_sample
042F28             0073*   @@:
042F28 D9          0074*       exx
042F29 08          0075*       ex af,af'
042F2A FB          0076*       ei
042F2B 5B ED 4D    0077*       reti.l
042F2E             0078*   ; end ps_prt_irq_handler
042F2E             0052        include "wav.inc"
042F2E             0001*   ; WAV File Structure Offsets and Descriptions
042F2E             0002*   wav_riff:          EQU 0    ; 4 bytes: "RIFF" identifier
042F2E             0003*   wav_file_size:     EQU 4    ; 4 bytes: Total file size minus 8 bytes for RIFF header
042F2E             0004*   wav_wave:          EQU 8    ; 4 bytes: "WAVE" identifier
042F2E             0005*   wav_fmt_marker:    EQU 12   ; 4 bytes: "fmt " subchunk marker
042F2E             0006*   wav_fmt_size:      EQU 16   ; 4 bytes: Format chunk size (16 for PCM)
042F2E             0007*   wav_audio_format:  EQU 20   ; 2 bytes: Audio format (1 = PCM)
042F2E             0008*   wav_num_channels:  EQU 22   ; 2 bytes: Number of channels (1 = mono, 2 = stereo)
042F2E             0009*   wav_sample_rate:   EQU 24   ; 4 bytes: Sample rate in Hz (e.g., 32768)
042F2E             0010*   wav_byte_rate:     EQU 28   ; 4 bytes: Bytes per second (SampleRate * NumChannels * BitsPerSample / 8)
042F2E             0011*   wav_block_align:   EQU 32   ; 2 bytes: Bytes per sample block (NumChannels * BitsPerSample / 8)
042F2E             0012*   wav_bits_per_sample: EQU 34 ; 2 bytes: Bits per sample (e.g., 8 or 16)
042F2E             0013*   
042F2E             0014*   ; LIST Chunk (Extra Metadata)
042F2E             0015*   wav_list_marker:   EQU 36   ; 4 bytes: "LIST" marker
042F2E             0016*   wav_list_size:     EQU 40   ; 4 bytes: Size of the LIST chunk (e.g., 26)
042F2E             0017*   wav_info_marker:   EQU 44   ; 4 bytes: "INFO" marker
042F2E             0018*   wav_isft_marker:   EQU 48   ; 4 bytes: "ISFT" marker (software identifier)
042F2E             0019*   wav_isft_data:     EQU 52   ; 14 bytes: Software info string (e.g., "Lavf59.27.100")
042F2E             0020*   wav_isft_padding:  EQU 66   ; 2 bytes: Padding/NULL terminator for alignment
042F2E             0021*   
042F2E             0022*   ; Data Chunk
042F2E             0023*   wav_data_marker:   EQU 68   ; 4 bytes: "data" subchunk marker
042F2E             0024*   wav_data_size:     EQU 72   ; 4 bytes: Size of the audio data in bytes
042F2E             0025*   wav_data_start:    EQU 76   ; Start of audio data
042F2E             0026*   wav_header_size:   EQU wav_data_start ; Total Header Size: 76 bytes
042F2E             0027*   
042F2E             0028*   ; verify that a file is a .wav file
042F2E             0029*   ; inputs: hl = pointer to fil struct, de = pointer to filename
042F2E             0030*   ; returns: zero flag set if a .wav file we can read
042F2E             0031*   ; destroys: af
042F2E             0032*   verify_wav:
042F2E             0033*   ; back up registers
042F2E E5          0034*       push hl
042F2F C5          0035*       push bc
042F30 D5          0036*       push de
042F31 DD E5       0037*       push ix
042F33 FD E5       0038*       push iy
042F35             0039*   
042F35             0040*   ; clear the .wav header buffer
042F35 E5          0041*       push hl
042F36 D5          0042*       push de
042F37 01 4C 00 00 0043*       ld bc,wav_header_size
042F3B 21 00 1C 06 0044*       ld hl,bf_wav_header
042F3F CD 5F 03 04 0045*       call clear_mem
042F43 D1          0046*       pop de
042F44 E1          0047*       pop hl
042F45             0048*   
042F45             0049*   ; open the file
042F45 0E 01       0050*       ld c,fa_read
042F47             0051*       FFSCALL ffs_fopen
                       M1 Args: function=ffs_fopen 
042F47 FD E5       0001*M1 			PUSH IY
042F49 3E 80       0002*M1 			LD	A, function
042F4B 5B CF       0003*M1 			RST.LIL	08h
042F4D FD E1       0004*M1 			POP IY
042F4F             0052*   
042F4F             0053*   ; read the header
042F4F 01 4C 00 00 0054*       ld bc,wav_header_size
042F53 11 00 1C 06 0055*       ld de,bf_wav_header
042F57             0056*       FFSCALL ffs_fread
                       M1 Args: function=ffs_fread 
042F57 FD E5       0001*M1 			PUSH IY
042F59 3E 82       0002*M1 			LD	A, function
042F5B 5B CF       0003*M1 			RST.LIL	08h
042F5D FD E1       0004*M1 			POP IY
042F5F             0057*   
042F5F             0058*   ; close the file
042F5F             0059*       FFSCALL ffs_fclose
                       M1 Args: function=ffs_fclose 
042F5F FD E5       0001*M1 			PUSH IY
042F61 3E 81       0002*M1 			LD	A, function
042F63 5B CF       0003*M1 			RST.LIL	08h
042F65 FD E1       0004*M1 			POP IY
042F67             0060*   
042F67             0061*   ; verify the .wav header
042F67 DD 21 00 1C 0062*       ld ix,bf_wav_header
       06          
042F6C DD 27 00    0063*       ld hl,(ix+wav_riff)
042F6F             0064*   
042F6F 11 52 49 46 0065*       ld de, 0x464952  ; ascii for "RIF" in little-endian order
042F73 B7          0066*       or a ; clear carry
042F74 ED 52       0067*       sbc hl,de
042F76 C2 A0 2F 04 0068*       jp nz,@done ; not a .wav file
042F7A             0069*   
042F7A DD 27 08    0070*       ld hl,(ix+wav_wave)
042F7D 11 57 41 56 0071*       ld de, 0x564157  ; ascii for "WAV" in little-endian order
042F81 B7          0072*       or a ; clear carry
042F82 ED 52       0073*       sbc hl,de
042F84 C2 A0 2F 04 0074*       jp nz,@done ; not a .wav file
042F88             0075*   
042F88 DD 27 0C    0076*       ld hl,(ix+wav_fmt_marker)
042F8B 11 66 6D 74 0077*       ld de, 0x746D66  ; ascii for "fmt" in little-endian order
042F8F B7          0078*       or a ; clear carry
042F90 ED 52       0079*       sbc hl,de
042F92 C2 A0 2F 04 0080*       jp nz,@done ; not a .wav file
042F96             0081*   
042F96 DD 27 14    0082*       ld hl,(ix+wav_audio_format)
042F99 11 01 00 01 0083*       ld de, 0x010001  ; PCM format, 1-channel
042F9D B7          0084*       or a ; clear carry
042F9E ED 52       0085*       sbc hl,de ; if not zero, not a .wav file we can read
042FA0             0086*   
042FA0             0087*   @done:
042FA0             0088*   ; restore registers and return
042FA0 FD E1       0089*       pop iy
042FA2 DD E1       0090*       pop ix
042FA4 D1          0091*       pop de
042FA5 C1          0092*       pop bc
042FA6 E1          0093*       pop hl
042FA7 C9          0094*       ret
042FA8             0095*   ; end verify_wav
042FA8             0096*   
042FA8             0097*   ; open a .wav file and make it ready to play
042FA8             0098*   ; inputs: none
042FA8             0099*   ; returns: zero flag set if a .wav file we can read
042FA8             0100*   ; destroys: af
042FA8             0101*   open_wav:
042FA8             0102*   ; clear the .wav header buffer
042FA8 E5          0103*       push hl
042FA9 D5          0104*       push de
042FAA 01 4C 00 00 0105*       ld bc,wav_header_size
042FAE 21 00 03 07 0106*       ld hl,ps_wav_header
042FB2 CD 5F 03 04 0107*       call clear_mem
042FB6 D1          0108*       pop de
042FB7 E1          0109*       pop hl
042FB8             0110*   
042FB8             0111*   ; get filinfo and fil struct pointers to currently selected file
042FB8 CD 5C 2B 04 0112*       call bf_get_filinfo_from_pg_idx ; iy = pointer to filinfo struct
042FBC ED 13 16    0113*       lea de,iy+filinfo_fname ; de = pointer to filename
042FBF 21 00 00 07 0114*       ld hl,ps_fil_struct
042FC3             0115*   
042FC3             0116*   ; open the file
042FC3 0E 01       0117*       ld c,fa_read
042FC5             0118*       FFSCALL ffs_fopen
                       M1 Args: function=ffs_fopen 
042FC5 FD E5       0001*M1 			PUSH IY
042FC7 3E 80       0002*M1 			LD	A, function
042FC9 5B CF       0003*M1 			RST.LIL	08h
042FCB FD E1       0004*M1 			POP IY
042FCD             0119*   
042FCD             0120*   ; read the header
042FCD 01 4C 00 00 0121*       ld bc,wav_header_size
042FD1 11 00 03 07 0122*       ld de,ps_wav_header
042FD5             0123*       FFSCALL ffs_fread
                       M1 Args: function=ffs_fread 
042FD5 FD E5       0001*M1 			PUSH IY
042FD7 3E 82       0002*M1 			LD	A, function
042FD9 5B CF       0003*M1 			RST.LIL	08h
042FDB FD E1       0004*M1 			POP IY
042FDD             0124*   
042FDD             0125*   ; verify the .wav header
042FDD DD 21 00 03 0126*       ld ix,ps_wav_header
       07          
042FE2 DD 27 00    0127*       ld hl,(ix+wav_riff)
042FE5             0128*   
042FE5 11 52 49 46 0129*       ld de, 0x464952  ; ascii for "RIF" in little-endian order
042FE9 B7          0130*       or a ; clear carry
042FEA ED 52       0131*       sbc hl,de
042FEC C2 1B 30 04 0132*       jp nz,@not_wav ; not a .wav file
042FF0             0133*   
042FF0 DD 27 08    0134*       ld hl,(ix+wav_wave)
042FF3 11 57 41 56 0135*       ld de, 0x564157  ; ascii for "WAV" in little-endian order
042FF7 B7          0136*       or a ; clear carry
042FF8 ED 52       0137*       sbc hl,de
042FFA C2 1B 30 04 0138*       jp nz,@not_wav ; not a .wav file
042FFE             0139*   
042FFE DD 27 0C    0140*       ld hl,(ix+wav_fmt_marker)
043001 11 66 6D 74 0141*       ld de, 0x746D66  ; ascii for "fmt" in little-endian order
043005 B7          0142*       or a ; clear carry
043006 ED 52       0143*       sbc hl,de
043008 C2 1B 30 04 0144*       jp nz,@not_wav ; not a .wav file
04300C             0145*   
04300C DD 27 14    0146*       ld hl,(ix+wav_audio_format)
04300F 11 01 00 01 0147*       ld de, 0x010001  ; PCM format, 1-channel
043013 B7          0148*       or a ; clear carry
043014 ED 52       0149*       sbc hl,de ; if not zero, not a .wav file we can read
043016 C2 1B 30 04 0150*       jp nz,@not_wav ; not a .wav file
04301A             0151*   ; valid .wav file so return with zero flag set and file still open
04301A C9          0152*       ret
04301B             0153*   @not_wav:
04301B             0154*   ; close the file and return to caller
04301B             0155*       FFSCALL ffs_fclose
                       M1 Args: function=ffs_fclose 
04301B FD E5       0001*M1 			PUSH IY
04301D 3E 81       0002*M1 			LD	A, function
04301F 5B CF       0003*M1 			RST.LIL	08h
043021 FD E1       0004*M1 			POP IY
043023 F6 01       0156*       or a,1 ; reset zero flag indicating invalid .wav file
043025 C9          0157*       ret
043026             0158*   ; end open_wav
043026             0053        include "debug.inc"
043026             0001*   printHexA:
043026 F5          0002*       push af
043027 C5          0003*       push bc
043028 CD AE 00 04 0004*       call printHex8
04302C 3E 20       0005*       ld a,' '
04302E 5B D7       0006*       rst.lil 10h
043030 C1          0007*       pop bc
043031 F1          0008*       pop af
043032 C9          0009*       ret
043033             0010*   
043033             0011*   printHexHL:
043033 F5          0012*       push af
043034 C5          0013*       push bc
043035 CD A8 00 04 0014*       call printHex16
043039 3E 20       0015*       ld a,' '
04303B 5B D7       0016*       rst.lil 10h
04303D C1          0017*       pop bc
04303E F1          0018*       pop af
04303F C9          0019*       ret
043040             0020*   
043040             0021*   printHexUHL:
043040 F5          0022*       push af
043041 C5          0023*       push bc
043042 CD A0 00 04 0024*       call printHex24
043046 3E 20       0025*       ld a,' '
043048 5B D7       0026*       rst.lil 10h
04304A C1          0027*       pop bc
04304B F1          0028*       pop af
04304C C9          0029*       ret
04304D             0030*   
04304D             0031*   printHexAUHL:
04304D F5          0032*       push af
04304E C5          0033*       push bc
04304F CD AE 00 04 0034*       call printHex8
043053 3E 2E       0035*       ld a,'.'
043055 5B D7       0036*       rst.lil 10h
043057 CD A0 00 04 0037*       call printHex24
04305B 3E 20       0038*       ld a,' '
04305D 5B D7       0039*       rst.lil 10h
04305F C1          0040*       pop bc
043060 F1          0041*       pop af
043061 C9          0042*       ret
043062             0043*   
043062             0044*   printHexABHL:
043062             0045*   ; preserve registers
043062 C5          0046*       push bc ; b will be ok c will not
043063 F5          0047*       push af ; will get totally destroyed
043064             0048*   ; print a
043064 CD AE 00 04 0049*       call printHex8
043068             0050*   ; print b
043068 78          0051*       ld a,b
043069 CD AE 00 04 0052*       call printHex8
04306D             0053*   ; print hl
04306D CD A8 00 04 0054*       call printHex16
043071             0055*   ; restore registers
043071 F1          0056*       pop af
043072 C1          0057*       pop bc
043073 C9          0058*       ret
043074             0059*   
043074             0060*   printHexBHL:
043074             0061*   ; preserve registers
043074 C5          0062*       push bc ; b will be ok c will not
043075 F5          0063*       push af ; will get totally destroyed
043076             0064*   ; print b
043076 78          0065*       ld a,b
043077 CD AE 00 04 0066*       call printHex8
04307B             0067*   ; print hl
04307B CD A8 00 04 0068*       call printHex16
04307F             0069*   ; restore registers
04307F F1          0070*       pop af
043080 C1          0071*       pop bc
043081 C9          0072*       ret
043082             0073*   
043082             0074*   printHexCDE:
043082             0075*   ; preserve registers
043082 C5          0076*       push bc ; b will be ok c will not
043083 F5          0077*       push af ; will get totally destroyed
043084             0078*   ; print c
043084 79          0079*       ld a,c
043085 CD AE 00 04 0080*       call printHex8
043089             0081*   ; print de
043089 EB          0082*       ex de,hl
04308A CD A8 00 04 0083*       call printHex16
04308E EB          0084*       ex de,hl
04308F             0085*   ; restore registers
04308F F1          0086*       pop af
043090 C1          0087*       pop bc
043091 C9          0088*       ret
043092             0089*   
043092             0090*   printHexUIX:
043092             0091*   ; store everything in scratch
043092 22 35 03 04 0092*       ld (uhl),hl
043096 ED 43 38 03 0093*       ld (ubc),bc
       04          
04309B ED 53 3B 03 0094*       ld (ude),de
       04          
0430A0 DD 22 3E 03 0095*       ld (uix),ix
       04          
0430A5 FD 22 41 03 0096*       ld (uiy),iy
       04          
0430AA F5          0097*       push af ; fml
0430AB             0098*   
0430AB 21 CC 02 04 0099*       ld hl,str_ixu
0430AF CD 67 00 04 0100*       call printString
0430B3 2A 3E 03 04 0101*       ld hl,(uix)
0430B7 CD A0 00 04 0102*       call printHex24
0430BB CD 7C 00 04 0103*       call printNewLine
0430BF             0104*   
0430BF             0105*   ; restore everything
0430BF 2A 35 03 04 0106*       ld hl, (uhl)
0430C3 ED 4B 38 03 0107*       ld bc, (ubc)
       04          
0430C8 ED 5B 3B 03 0108*       ld de, (ude)
       04          
0430CD DD 2A 3E 03 0109*       ld ix, (uix)
       04          
0430D2 FD 2A 41 03 0110*       ld iy, (uiy)
       04          
0430D7 F1          0111*       pop af
0430D8             0112*   ; all done
0430D8 C9          0113*       ret
0430D9             0114*   
0430D9             0115*   
0430D9             0116*   ; print registers to screen in hexidecimal format
0430D9             0117*   ; inputs: none
0430D9             0118*   ; outputs: values of every register printed to screen
0430D9             0119*   ;    values of each register in global scratch memory
0430D9             0120*   ; destroys: nothing
0430D9             0121*   stepRegistersHex:
0430D9             0122*   ; store everything in scratch
0430D9 22 35 03 04 0123*       ld (uhl),hl
0430DD ED 43 38 03 0124*       ld (ubc),bc
       04          
0430E2 ED 53 3B 03 0125*       ld (ude),de
       04          
0430E7 DD 22 3E 03 0126*       ld (uix),ix
       04          
0430EC FD 22 41 03 0127*       ld (uiy),iy
       04          
0430F1 F5          0128*       push af ; fml
0430F2 E1          0129*       pop hl ; thanks, zilog
0430F3 22 32 03 04 0130*       ld (uaf),hl
0430F7 F5          0131*       push af ; dammit
0430F8             0132*   
0430F8             0133*   ; home the cursor
0430F8             0134*       ; call vdu_home_cursor
0430F8             0135*   
0430F8             0136*   ; print each register
0430F8 21 B8 02 04 0137*       ld hl,str_afu
0430FC CD 67 00 04 0138*       call printString
043100 2A 32 03 04 0139*       ld hl,(uaf)
043104 CD A0 00 04 0140*       call printHex24
043108 CD 7C 00 04 0141*       call printNewLine
04310C             0142*   
04310C 21 BD 02 04 0143*       ld hl,str_hlu
043110 CD 67 00 04 0144*       call printString
043114 2A 35 03 04 0145*       ld hl,(uhl)
043118 CD A0 00 04 0146*       call printHex24
04311C CD 7C 00 04 0147*       call printNewLine
043120             0148*   
043120 21 C2 02 04 0149*       ld hl,str_bcu
043124 CD 67 00 04 0150*       call printString
043128 2A 38 03 04 0151*       ld hl,(ubc)
04312C CD A0 00 04 0152*       call printHex24
043130 CD 7C 00 04 0153*       call printNewLine
043134             0154*   
043134 21 C7 02 04 0155*       ld hl,str_deu
043138 CD 67 00 04 0156*       call printString
04313C 2A 3B 03 04 0157*       ld hl,(ude)
043140 CD A0 00 04 0158*       call printHex24
043144 CD 7C 00 04 0159*       call printNewLine
043148             0160*   
043148 21 CC 02 04 0161*       ld hl,str_ixu
04314C CD 67 00 04 0162*       call printString
043150 2A 3E 03 04 0163*       ld hl,(uix)
043154 CD A0 00 04 0164*       call printHex24
043158 CD 7C 00 04 0165*       call printNewLine
04315C             0166*   
04315C 21 D1 02 04 0167*       ld hl,str_iyu
043160 CD 67 00 04 0168*       call printString
043164 2A 41 03 04 0169*       ld hl,(uiy)
043168 CD A0 00 04 0170*       call printHex24
04316C CD 7C 00 04 0171*       call printNewLine
043170             0172*   
043170             0173*       ; call vsync
043170             0174*   
043170 CD 7C 00 04 0175*       call printNewLine
043174             0176*   
043174             0177*   ; check for right shift key and quit if pressed
043174             0178*       MOSCALL mos_getkbmap
                       M1 Args: function=mos_getkbmap 
043174 3E 1E       0001*M1 			LD	A, function
043176 5B CF       0002*M1 			RST.LIL	08h
043178             0179*   @stayhere:
043178             0180*   ; 7 RightShift
043178 DD CB 00 76 0181*       bit 6,(ix+0)
04317C 20 02       0182*       jr nz,@RightShift
04317E 18 F8       0183*       jr @stayhere
043180             0184*   @RightShift:
043180 DD CB 0E 86 0185*       res 0,(ix+14) ; debounce the key (hopefully)
043184 3E 80       0186*       ld a,%10000000
043186             0187*       ; call multiPurposeDelay
043186             0188*   
043186             0189*   ; restore everything
043186 2A 35 03 04 0190*       ld hl, (uhl)
04318A ED 4B 38 03 0191*       ld bc, (ubc)
       04          
04318F ED 5B 3B 03 0192*       ld de, (ude)
       04          
043194 DD 2A 3E 03 0193*       ld ix, (uix)
       04          
043199 FD 2A 41 03 0194*       ld iy, (uiy)
       04          
04319E F1          0195*       pop af
04319F             0196*   ; all done
04319F C9          0197*       ret
0431A0             0198*   
0431A0             0199*   ; print registers to screen in hexidecimal format
0431A0             0200*   ; inputs: none
0431A0             0201*   ; outputs: values of every register printed to screen
0431A0             0202*   ;    values of each register in global scratch memory
0431A0             0203*   ; destroys: nothing
0431A0             0204*   dumpRegistersHex:
0431A0             0205*   ; store everything in scratch
0431A0 22 35 03 04 0206*       ld (uhl),hl
0431A4 ED 43 38 03 0207*       ld (ubc),bc
       04          
0431A9 ED 53 3B 03 0208*       ld (ude),de
       04          
0431AE DD 22 3E 03 0209*       ld (uix),ix
       04          
0431B3 FD 22 41 03 0210*       ld (uiy),iy
       04          
0431B8 F5          0211*       push af ; fml
0431B9 E1          0212*       pop hl ; thanks, zilog
0431BA 22 32 03 04 0213*       ld (uaf),hl
0431BE F5          0214*       push af ; dammit
0431BF             0215*   
0431BF             0216*   ; home the cursor
0431BF             0217*       ; call vdu_home_cursor
0431BF             0218*       ; call printNewLine
0431BF             0219*   
0431BF             0220*   ; print each register
0431BF 21 B8 02 04 0221*       ld hl,str_afu
0431C3 CD 67 00 04 0222*       call printString
0431C7 2A 32 03 04 0223*       ld hl,(uaf)
0431CB CD A0 00 04 0224*       call printHex24
0431CF             0225*       ; call printNewLine
0431CF             0226*   
0431CF 21 BD 02 04 0227*       ld hl,str_hlu
0431D3 CD 67 00 04 0228*       call printString
0431D7 2A 35 03 04 0229*       ld hl,(uhl)
0431DB CD A0 00 04 0230*       call printHex24
0431DF             0231*       ; call printNewLine
0431DF             0232*   
0431DF 21 C2 02 04 0233*       ld hl,str_bcu
0431E3 CD 67 00 04 0234*       call printString
0431E7 2A 38 03 04 0235*       ld hl,(ubc)
0431EB CD A0 00 04 0236*       call printHex24
0431EF             0237*       ; call printNewLine
0431EF             0238*   
0431EF 21 C7 02 04 0239*       ld hl,str_deu
0431F3 CD 67 00 04 0240*       call printString
0431F7 2A 3B 03 04 0241*       ld hl,(ude)
0431FB CD A0 00 04 0242*       call printHex24
0431FF             0243*       ; call printNewLine
0431FF             0244*   
0431FF 21 CC 02 04 0245*       ld hl,str_ixu
043203 CD 67 00 04 0246*       call printString
043207 2A 3E 03 04 0247*       ld hl,(uix)
04320B CD A0 00 04 0248*       call printHex24
04320F             0249*       ; call printNewLine
04320F             0250*   
04320F 21 D1 02 04 0251*       ld hl,str_iyu
043213 CD 67 00 04 0252*       call printString
043217 2A 41 03 04 0253*       ld hl,(uiy)
04321B CD A0 00 04 0254*       call printHex24
04321F             0255*   
04321F CD 7C 00 04 0256*       call printNewLine
043223 CD 7C 00 04 0257*       call printNewLine
043227             0258*   ; restore everything
043227 2A 35 03 04 0259*       ld hl, (uhl)
04322B ED 4B 38 03 0260*       ld bc, (ubc)
       04          
043230 ED 5B 3B 03 0261*       ld de, (ude)
       04          
043235 DD 2A 3E 03 0262*       ld ix, (uix)
       04          
04323A FD 2A 41 03 0263*       ld iy, (uiy)
       04          
04323F F1          0264*       pop af
043240             0265*   ; all done
043240 C9          0266*       ret
043241             0267*   
043241             0268*   dumpRegistersHexPrime:
043241 D9          0269*       exx
043242 08          0270*       ex af,af'
043243 CD A0 31 04 0271*       call dumpRegistersHex
043247 08          0272*       ex af,af'
043248 D9          0273*       exx
043249 C9          0274*       ret
04324A             0275*   
04324A             0276*   ; additionally dump prime registers
04324A             0277*   ; inputs: none
04324A             0278*   ; outputs: values of every register printed to screen
04324A             0279*   ; destroys: nothing
04324A             0280*   dumpRegistersHexAll:
04324A CD A0 31 04 0281*       call dumpRegistersHex
04324E 08          0282*       ex af,af'
04324F D9          0283*       exx
043250 CD A0 31 04 0284*       call dumpRegistersHex
043254 08          0285*       ex af,af'
043255 D9          0286*       exx
043256 C9          0287*       ret
043257             0288*   
043257             0289*   ; print hlu to screen in hexidecimal format
043257             0290*   ; inputs: none
043257             0291*   ; destroys: nothing
043257             0292*   print_hex_hl:
043257 F5          0293*       push af
043258 E5          0294*       push hl
043259 21 BD 02 04 0295*       ld hl,str_hlu
04325D CD 67 00 04 0296*       call printString
043261 E1          0297*       pop hl
043262 E5          0298*       push hl
043263 CD A0 00 04 0299*       call printHex24
043267 3E 20       0300*       ld a,' '
043269 5B D7       0301*       rst.lil 10h
04326B E1          0302*       pop hl
04326C F1          0303*       pop af
04326D C9          0304*       ret
04326E             0305*   
04326E             0306*   ; print bcu to screen in hexidecimal format
04326E             0307*   ; inputs: none
04326E             0308*   ; destroys: nothing
04326E             0309*   print_hex_bc:
04326E F5          0310*       push af
04326F E5          0311*       push hl
043270 C5          0312*       push bc
043271 21 C2 02 04 0313*       ld hl,str_bcu
043275 CD 67 00 04 0314*       call printString
043279 E1          0315*       pop hl
04327A E5          0316*       push hl
04327B CD A0 00 04 0317*       call printHex24
04327F 3E 20       0318*       ld a,' '
043281 5B D7       0319*       rst.lil 10h
043283 C1          0320*       pop bc
043284 E1          0321*       pop hl
043285 F1          0322*       pop af
043286 C9          0323*       ret
043287             0324*   
043287             0325*   ; print deu to screen in hexidecimal format
043287             0326*   ; inputs: none
043287             0327*   ; destroys: nothing
043287             0328*   print_hex_de:
043287 F5          0329*       push af
043288 E5          0330*       push hl
043289 D5          0331*       push de
04328A 21 C7 02 04 0332*       ld hl,str_deu
04328E CD 67 00 04 0333*       call printString
043292 E1          0334*       pop hl
043293 E5          0335*       push hl
043294 CD A0 00 04 0336*       call printHex24
043298 3E 20       0337*       ld a,' '
04329A 5B D7       0338*       rst.lil 10h
04329C D1          0339*       pop de
04329D E1          0340*       pop hl
04329E F1          0341*       pop af
04329F C9          0342*       ret
0432A0             0343*   
0432A0             0344*   
0432A0             0345*   ; inputs: whatever is in the flags register
0432A0             0346*   ; outputs: binary representation of flags
0432A0             0347*   ;          with a header so we know which is what
0432A0             0348*   ; destroys: nothing
0432A0             0349*   ; preserves: everything
0432A0             0350*   dumpFlags:
0432A0             0351*   ; first we curse zilog for not giving direct access to flags
0432A0 F5          0352*       push af ; this is so we can send it back unharmed
0432A1 F5          0353*       push af ; this is so we can pop it to hl
0432A2             0354*   ; store everything in scratch
0432A2 22 35 03 04 0355*       ld (uhl),hl
0432A6 ED 43 38 03 0356*       ld (ubc),bc
       04          
0432AB ED 53 3B 03 0357*       ld (ude),de
       04          
0432B0 DD 22 3E 03 0358*       ld (uix),ix
       04          
0432B5 FD 22 41 03 0359*       ld (uiy),iy
       04          
0432BA             0360*   ; next we print the header
0432BA 21 E6 32 04 0361*       ld hl,@header
0432BE CD 67 00 04 0362*       call printString
0432C2 E1          0363*       pop hl ; flags are now in l
0432C3 7D          0364*       ld a,l ; flags are now in a
0432C4 CD 6E 02 04 0365*       call printBin8
0432C8 CD 7C 00 04 0366*       call printNewLine
0432CC             0367*   ; restore everything
0432CC 2A 35 03 04 0368*       ld hl, (uhl)
0432D0 ED 4B 38 03 0369*       ld bc, (ubc)
       04          
0432D5 ED 5B 3B 03 0370*       ld de, (ude)
       04          
0432DA DD 2A 3E 03 0371*       ld ix, (uix)
       04          
0432DF FD 2A 41 03 0372*       ld iy, (uiy)
       04          
0432E4 F1          0373*       pop af ; send her home the way she came
0432E5 C9          0374*       ret
0432E6             0375*   ; Bit 7 (S): Sign flag
0432E6             0376*   ; Bit 6 (Z): Zero flag
0432E6             0377*   ; Bit 5 (5): Reserved (copy of bit 5 of the result)
0432E6             0378*   ; Bit 4 (H): Half Carry flag
0432E6             0379*   ; Bit 3 (3): Reserved (copy of bit 3 of the result)
0432E6             0380*   ; Bit 2 (PV): Parity/Overflow flag
0432E6             0381*   ; Bit 1 (N): Subtract flag
0432E6             0382*   ; Bit 0 (C): Carry flag
0432E6 53 5A 78 48 0383*   @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
0432F1             0384*   
0432F1             0385*   
0432F1             0386*   ; print bytes from an address to the screen in hexidecimal format
0432F1             0387*   ; inputs: hl = address of first byte to print, a = number of bytes to print
0432F1             0388*   ; outputs: values of each byte printed to screen separated by spaces
0432F1             0389*   ; destroys: nothing
0432F1             0390*   dumpMemoryHex:
0432F1             0391*   ; save registers to the stack
0432F1 C5          0392*       push bc
0432F2 E5          0393*       push hl
0432F3 F5          0394*       push af
0432F4             0395*   
0432F4             0396*   ; print the address and separator
0432F4 CD A0 00 04 0397*       call printHex24
0432F8 3E 3A       0398*       ld a,':'
0432FA 5B D7       0399*       rst.lil 10h
0432FC 3E 20       0400*       ld a,' '
0432FE 5B D7       0401*       rst.lil 10h
043300             0402*   
043300             0403*   ; set b to be our loop counter
043300 F1          0404*       pop af
043301 47          0405*       ld b,a
043302 E1          0406*       pop hl
043303 E5          0407*       push hl
043304 F5          0408*       push af
043305             0409*   @loop:
043305             0410*   ; print the byte
043305 7E          0411*       ld a,(hl)
043306 CD AE 00 04 0412*       call printHex8
04330A             0413*   ; print a space
04330A 3E 20       0414*       ld a,' '
04330C 5B D7       0415*       rst.lil 10h
04330E 23          0416*       inc hl
04330F 10 F4       0417*       djnz @loop
043311             0418*       ; call printNewLine
043311             0419*   
043311             0420*   ; restore everything
043311 F1          0421*       pop af
043312 E1          0422*       pop hl
043313 C1          0423*       pop bc
043314             0424*   
043314             0425*   ; all done
043314 C9          0426*       ret
043315             0427*   
043315             0428*   
043315             0429*   ; print bytes from an address to the screen in binary format
043315             0430*   ; inputs: hl = address of first byte to print, a = number of bytes to print
043315             0431*   ; outputs: values of each byte printed to screen separated by spaces
043315             0432*   ; destroys: nothing
043315             0433*   dumpMemoryBin:
043315             0434*   ; save all registers to the stack
043315 F5          0435*       push af
043316 C5          0436*       push bc
043317 D5          0437*       push de
043318 E5          0438*       push hl
043319 DD E5       0439*       push ix
04331B FD E5       0440*       push iy
04331D             0441*   
04331D             0442*   ; set b to be our loop counter
04331D 47          0443*       ld b,a
04331E             0444*   @loop:
04331E             0445*   ; print the byte
04331E 7E          0446*       ld a,(hl)
04331F E5          0447*       push hl
043320 C5          0448*       push bc
043321 CD 6E 02 04 0449*       call printBin8
043325 C1          0450*       pop bc
043326             0451*   ; print a space
043326 3E 20       0452*       ld a,' '
043328 5B D7       0453*       rst.lil 10h
04332A E1          0454*       pop hl
04332B 23          0455*       inc hl
04332C 10 F0       0456*       djnz @loop
04332E CD 7C 00 04 0457*       call printNewLine
043332             0458*   
043332             0459*   ; restore everything
043332 FD E1       0460*       pop iy
043334 DD E1       0461*       pop ix
043336 E1          0462*       pop hl
043337 D1          0463*       pop de
043338 C1          0464*       pop bc
043339 F1          0465*       pop af
04333A             0466*   ; all done
04333A C9          0467*       ret
04333B             0468*   
04333B             0469*   ; print bytes from an address to the screen in binary format
04333B             0470*   ; with the bits of each byte in reverse order (lsb first)
04333B             0471*   ; inputs: hl = address of first byte to print, a = number of bytes to print
04333B             0472*   ; outputs: values of each byte printed to screen separated by spaces
04333B             0473*   ; destroys: nothing
04333B             0474*   dumpMemoryBinRev:
04333B             0475*   ; save all registers to the stack
04333B F5          0476*       push af
04333C C5          0477*       push bc
04333D D5          0478*       push de
04333E E5          0479*       push hl
04333F DD E5       0480*       push ix
043341 FD E5       0481*       push iy
043343             0482*   
043343             0483*   ; set b to be our loop counter
043343 47          0484*       ld b,a
043344             0485*   @loop:
043344             0486*   ; print the byte
043344 7E          0487*       ld a,(hl)
043345 E5          0488*       push hl
043346 C5          0489*       push bc
043347 CD 93 02 04 0490*       call printBin8Rev
04334B C1          0491*       pop bc
04334C             0492*   ; print a space
04334C 3E 20       0493*       ld a,' '
04334E 5B D7       0494*       rst.lil 10h
043350 E1          0495*       pop hl
043351 23          0496*       inc hl
043352 10 F0       0497*       djnz @loop
043354 CD 7C 00 04 0498*       call printNewLine
043358             0499*   
043358             0500*   ; restore everything
043358 FD E1       0501*       pop iy
04335A DD E1       0502*       pop ix
04335C E1          0503*       pop hl
04335D D1          0504*       pop de
04335E C1          0505*       pop bc
04335F F1          0506*       pop af
043360             0507*   ; all done
043360 C9          0508*       ret
043361             0509*   
043361             0510*   DEBUG_PRINT:
043361             0511*       PUSH_ALL
                       M1 Args: none
043361 08          0001*M1     ex af,af'
043362 D9          0002*M1     exx
043363 F5          0003*M1     push af
043364 E5          0004*M1     push hl
043365 C5          0005*M1     push bc
043366 D5          0006*M1     push de
043367             0007*M1 
043367 08          0008*M1     ex af,af'
043368 D9          0009*M1     exx
043369 F5          0010*M1     push af
04336A E5          0011*M1     push hl
04336B C5          0012*M1     push bc
04336C D5          0013*M1     push de
04336D DD E5       0014*M1     push ix
04336F FD E5       0015*M1     push iy
043371             0512*       ; ld c,0 ; X
043371             0513*       ; ld b,0 ; Y
043371             0514*       ; call vdu_move_cursor
043371 CD 7C 00 04 0515*       call printNewLine
043375             0516*       POP_ALL
                       M1 Args: none
043375 FD E1       0001*M1     pop iy
043377 DD E1       0002*M1     pop ix
043379 D1          0003*M1     pop de
04337A C1          0004*M1     pop bc
04337B E1          0005*M1     pop hl
04337C F1          0006*M1     pop af
04337D 08          0007*M1     ex af,af'
04337E D9          0008*M1     exx
04337F             0009*M1 
04337F D1          0010*M1     pop de
043380 C1          0011*M1     pop bc
043381 E1          0012*M1     pop hl
043382 F1          0013*M1     pop af
043383 08          0014*M1     ex af,af'
043384 D9          0015*M1     exx
043385             0517*       PUSH_ALL
                       M1 Args: none
043385 08          0001*M1     ex af,af'
043386 D9          0002*M1     exx
043387 F5          0003*M1     push af
043388 E5          0004*M1     push hl
043389 C5          0005*M1     push bc
04338A D5          0006*M1     push de
04338B             0007*M1 
04338B 08          0008*M1     ex af,af'
04338C D9          0009*M1     exx
04338D F5          0010*M1     push af
04338E E5          0011*M1     push hl
04338F C5          0012*M1     push bc
043390 D5          0013*M1     push de
043391 DD E5       0014*M1     push ix
043393 FD E5       0015*M1     push iy
043395 CD A0 32 04 0518*       call dumpFlags
043399             0519*       POP_ALL
                       M1 Args: none
043399 FD E1       0001*M1     pop iy
04339B DD E1       0002*M1     pop ix
04339D D1          0003*M1     pop de
04339E C1          0004*M1     pop bc
04339F E1          0005*M1     pop hl
0433A0 F1          0006*M1     pop af
0433A1 08          0007*M1     ex af,af'
0433A2 D9          0008*M1     exx
0433A3             0009*M1 
0433A3 D1          0010*M1     pop de
0433A4 C1          0011*M1     pop bc
0433A5 E1          0012*M1     pop hl
0433A6 F1          0013*M1     pop af
0433A7 08          0014*M1     ex af,af'
0433A8 D9          0015*M1     exx
0433A9             0520*       PUSH_ALL
                       M1 Args: none
0433A9 08          0001*M1     ex af,af'
0433AA D9          0002*M1     exx
0433AB F5          0003*M1     push af
0433AC E5          0004*M1     push hl
0433AD C5          0005*M1     push bc
0433AE D5          0006*M1     push de
0433AF             0007*M1 
0433AF 08          0008*M1     ex af,af'
0433B0 D9          0009*M1     exx
0433B1 F5          0010*M1     push af
0433B2 E5          0011*M1     push hl
0433B3 C5          0012*M1     push bc
0433B4 D5          0013*M1     push de
0433B5 DD E5       0014*M1     push ix
0433B7 FD E5       0015*M1     push iy
0433B9 CD A0 31 04 0521*       call dumpRegistersHex
0433BD             0522*       ; call waitKeypress
0433BD CD 7C 00 04 0523*       call printNewLine
0433C1             0524*       POP_ALL
                       M1 Args: none
0433C1 FD E1       0001*M1     pop iy
0433C3 DD E1       0002*M1     pop ix
0433C5 D1          0003*M1     pop de
0433C6 C1          0004*M1     pop bc
0433C7 E1          0005*M1     pop hl
0433C8 F1          0006*M1     pop af
0433C9 08          0007*M1     ex af,af'
0433CA D9          0008*M1     exx
0433CB             0009*M1 
0433CB D1          0010*M1     pop de
0433CC C1          0011*M1     pop bc
0433CD E1          0012*M1     pop hl
0433CE F1          0013*M1     pop af
0433CF 08          0014*M1     ex af,af'
0433D0 D9          0015*M1     exx
0433D1 C9          0525*       ret
0433D2             0526*   DEBUG_WAITKEYPRESS:
0433D2             0527*       PUSH_ALL
                       M1 Args: none
0433D2 08          0001*M1     ex af,af'
0433D3 D9          0002*M1     exx
0433D4 F5          0003*M1     push af
0433D5 E5          0004*M1     push hl
0433D6 C5          0005*M1     push bc
0433D7 D5          0006*M1     push de
0433D8             0007*M1 
0433D8 08          0008*M1     ex af,af'
0433D9 D9          0009*M1     exx
0433DA F5          0010*M1     push af
0433DB E5          0011*M1     push hl
0433DC C5          0012*M1     push bc
0433DD D5          0013*M1     push de
0433DE DD E5       0014*M1     push ix
0433E0 FD E5       0015*M1     push iy
0433E2 CD 5A 03 04 0528*       call waitKeypress
0433E6             0529*       POP_ALL
                       M1 Args: none
0433E6 FD E1       0001*M1     pop iy
0433E8 DD E1       0002*M1     pop ix
0433EA D1          0003*M1     pop de
0433EB C1          0004*M1     pop bc
0433EC E1          0005*M1     pop hl
0433ED F1          0006*M1     pop af
0433EE 08          0007*M1     ex af,af'
0433EF D9          0008*M1     exx
0433F0             0009*M1 
0433F0 D1          0010*M1     pop de
0433F1 C1          0011*M1     pop bc
0433F2 E1          0012*M1     pop hl
0433F3 F1          0013*M1     pop af
0433F4 08          0014*M1     ex af,af'
0433F5 D9          0015*M1     exx
0433F6 C9          0530*       RET
0433F7             0531*   
0433F7             0532*   dumpVduCmdStr:
0433F7             0533*       PUSH_ALL
                       M1 Args: none
0433F7 08          0001*M1     ex af,af'
0433F8 D9          0002*M1     exx
0433F9 F5          0003*M1     push af
0433FA E5          0004*M1     push hl
0433FB C5          0005*M1     push bc
0433FC D5          0006*M1     push de
0433FD             0007*M1 
0433FD 08          0008*M1     ex af,af'
0433FE D9          0009*M1     exx
0433FF F5          0010*M1     push af
043400 E5          0011*M1     push hl
043401 C5          0012*M1     push bc
043402 D5          0013*M1     push de
043403 DD E5       0014*M1     push ix
043405 FD E5       0015*M1     push iy
043407 79          0534*       ld a,c
043408 CD F1 32 04 0535*       call dumpMemoryHex
04340C CD 5A 03 04 0536*       call waitKeypress
043410             0537*       POP_ALL
                       M1 Args: none
043410 FD E1       0001*M1     pop iy
043412 DD E1       0002*M1     pop ix
043414 D1          0003*M1     pop de
043415 C1          0004*M1     pop bc
043416 E1          0005*M1     pop hl
043417 F1          0006*M1     pop af
043418 08          0007*M1     ex af,af'
043419 D9          0008*M1     exx
04341A             0009*M1 
04341A D1          0010*M1     pop de
04341B C1          0011*M1     pop bc
04341C E1          0012*M1     pop hl
04341D F1          0013*M1     pop af
04341E 08          0014*M1     ex af,af'
04341F D9          0015*M1     exx
043420 C9          0538*       ret
043421             0539*   ; end dumpVduCmdStr
043421             0054    
043421             0055    ; --- MAIN PROGRAM FILE ---
043421             0056    init:
043421 CD 4C 28 04 0057        call bf_get_dir
043425 CD E1 23 04 0058        call ui_init
043429 CD E4 2E 04 0059        call ps_prt_irq_init
04342D C9          0060        ret
04342E             0061    ; end init
04342E             0062    main:
04342E             0063    ; call the change directory routine and jp to user input
04342E CD F9 29 04 0064        call get_input
043432             0065    
043432             0066    ; we come back here when user wants to quit app
043432             0067    ; shut down everytyhing and gracefully exit to MOS
043432 CD 77 2D 04 0068        call ps_close_file ; close any playing file and stop the PRT timer
043436 FB          0069        ei ; interrupts were disabled by get_input
043437             0070    ; restore original screen mode
043437 3A B5 22 04 0071        ld a,(original_screen_mode)
04343B CD 17 1C 04 0072        call vdu_set_screen_mode
04343F CD 12 1C 04 0073        call vdu_reset_viewports
043443 CD 49 1B 04 0074        call vdu_cls
043447             0075    ; print thanks for playing message
043447 CD 60 00 04 0076        call printInline
04344B 54 68 61 6E 0077        asciz "Thank you for using\r\n"
       6B 20 79 6F 
       75 20 66 6F 
       72 20 75 73 
       69 6E 67 0D 
       0A 00       
043461 21 7A 25 04 0078        ld hl,agon_jukebox_ascii
043465 CD 67 00 04 0079        call printString
043469             0080    ; set cursor behaviuor
043469 CD C3 1A 04 0081        call vdu_cursor_on
04346D 26 10       0082        ld h,%00010000 ; bit 4 controls cursor scroll at bottom of screen
04346F 2E 00       0083        ld l,%00000000 ; bit 4 reset means cursor scrolls screen
043471 CD 35 1B 04 0084        call vdu_cursor_behaviour
043475 C9          0085        ret ; back to MOS
043476             0086    ; end main
043476             0087    
043476             0088    ; must be final include in program so file data does not stomp on program code or other data
043476             0089        include "files.inc"
043476             0001*   ; THIS MUST BE LAST INCLUDE SO FILE DATA DOES NOT OVERWRITE OTHER CODE OR DATA
043476             0002*   
043476             0003*   ; buffer for loading files unrelated to audio
043476             0004*   ; e.g.: fonts, sprites, etc. (limited to 8k)
043476             0005*   filedata: equ 0xB7E000 ; address of onboard 8k sram
043476             0006*   
043476             0007*   bf_fil_struct: equ 0x04FF00 ;
043476             0008*   bf_fil_obj: equ 0x04FF00 ; 15 bytes: Object identifier
043476             0009*   bf_fil_flag: equ 0x04FF0F ; 1 bytes: File status flags
043476             0010*   bf_fil_err: equ 0x04FF10 ; 1 bytes: Abort flag (error code)
043476             0011*   bf_fil_fptr: equ 0x04FF11 ; 4 bytes: File read/write pointer (Zeroed on file open)
043476             0012*   bf_fil_clust: equ 0x04FF15 ; 4 bytes: Current cluster of fpter (invalid when fptr is 0)
043476             0013*   bf_fil_sect: equ 0x04FF19 ; 4 bytes: Sector number appearing in buf[] (0
043476             0014*   bf_fil_dir_sect: equ 0x04FF1D ; 4 bytes: Sector number containing the directory entry
043476             0015*   bf_fil_dir_ptr: equ 0x04FF21 ; 3 bytes: Pointer to the directory entry in the win[]
043476             0016*   
043476             0017*   
043476             0018*   bf_struct: equ 0x050000 ; browsing song jukebox info
043476             0019*   bf_file_idx: equ 0x050000 ; 1 bytes: Current file index in the directory page
043476             0020*   bf_dir_num_files: equ 0x050001 ; 3 bytes: Number of files/directories in the directory (virtually unlimited)
043476             0021*   bf_files_cur_pg: equ 0x050004 ; 3 bytes: Number of files/directories of the current directory page
043476             0022*   bf_files_last_pg: equ 0x050007 ; 3 bytes: Number of files/directories of the last directory page
043476             0023*   bf_page_cur: equ 0x05000A ; 3 bytes: Current directory page number
043476             0024*   bf_dir_num_pages: equ 0x05000D ; 3 bytes: Number of pages in the directory (virtually unlimited)
043476             0025*   bf_dir_path: equ 0x050010 ; 256 bytes: Path of the current directory
043476             0026*   bf_struct_size: equ 512
043476             0027*   
043476             0028*   bf_dir_struct: equ 0x050200 ; browsing song directory info
043476             0029*   bf_dir_obj: equ 0x050200 ; 15 bytes: Object identifier
043476             0030*   bf_dir_dptr: equ 0x05020F ; 4 bytes: Current read/write offset
043476             0031*   bf_dir_clust: equ 0x050213 ; 4 bytes: Current cluster
043476             0032*   bf_dir_sect: equ 0x050217 ; 4 bytes: Current sector (0:Read operation has terminated)
043476             0033*   bf_dir_dir: equ 0x05021B ; 3 bytes: Pointer to the directory item in the win[]
043476             0034*   bf_dir_fn: equ 0x05021E ; 12 bytes: SFN (in/out) {body[8],ext[3],status[1]}
043476             0035*   bf_dir_blk_ofs: equ 0x05022A ; 4 bytes: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
043476             0036*   
043476             0037*   
043476             0038*   bf_filinfo_ptrs: equ 0x050300 ; 768 bytes: List of filename pointers in the current directory page (256*3)
043476             0039*   bf_filinfo_ptrs_size: equ 768
043476             0040*   
043476             0041*   bf_dir_fil_list: equ 0x050600 ; 71168 bytes: browsing song directory file list
043476             0042*   bf_dir_fil_list_size: equ 71168
043476             0043*   
043476             0044*   bf_wav_header: equ 0x061C00 ; 76 bytes: browsing song .wav file header
043476             0045*   
043476             0046*   ps_fil_struct: equ 0x070000 ;
043476             0047*   ps_fil_obj: equ 0x070000 ; 15 bytes: Object identifier
043476             0048*   ps_fil_flag: equ 0x07000F ; 1 bytes: File status flags
043476             0049*   ps_fil_err: equ 0x070010 ; 1 bytes: Abort flag (error code)
043476             0050*   ps_fil_fptr: equ 0x070011 ; 4 bytes: File read/write pointer (Zeroed on file open)
043476             0051*   ps_fil_clust: equ 0x070015 ; 4 bytes: Current cluster of fpter (invalid when fptr is 0)
043476             0052*   ps_fil_sect: equ 0x070019 ; 4 bytes: Sector number appearing in buf[] (0
043476             0053*   ps_fil_dir_sect: equ 0x07001D ; 4 bytes: Sector number containing the directory entry
043476             0054*   ps_fil_dir_ptr: equ 0x070021 ; 3 bytes: Pointer to the directory entry in the win[]
043476             0055*   
043476             0056*   
043476             0057*   ps_filinfo_struct: equ 0x070100 ;
043476             0058*   ps_filinfo_fsize: equ 0x070100 ; 4 bytes: File size
043476             0059*   ps_filinfo_fdate: equ 0x070104 ; 2 bytes: Modified date
043476             0060*   ps_filinfo_ftime: equ 0x070106 ; 2 bytes: Modified time
043476             0061*   ps_filinfo_fattrib: equ 0x070108 ; 1 bytes: File attribute
043476             0062*   ps_filinfo_altname: equ 0x070109 ; 13 bytes: Alternative file name
043476             0063*   ps_filinfo_fname: equ 0x070116 ; 256 bytes: Primary file name
043476             0064*   
043476             0065*   
043476             0066*   ps_wav_header: equ 0x070300 ; 76 bytes: playing song .wav file header
043476             0067*   
043476             0068*   
043476             0069*   ps_wav_data: equ 0x070400 ; virtually unlimited bytes:
