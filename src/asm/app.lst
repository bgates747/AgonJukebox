PC     Output      Line
040000             0001         assume adl=1
040000             0002         org 0x040000
040000 C3 45 00 04 0003         jp start
040004             0004         align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005         db "MOS"
040043 00          0006         db 00h
040044 01          0007         db 01h
040045             0008     
040045             0009     start:
040045 F5          0010         push af
040046 C5          0011         push bc
040047 D5          0012         push de
040048 DD E5       0013         push ix
04004A FD E5       0014         push iy
04004C             0015     
04004C CD BD 6E 04 0016         call init
040050 CD CA 6E 04 0017         call main
040054             0018     
040054             0019     exit:
040054 FD E1       0020         pop iy
040056 DD E1       0021         pop ix
040058 D1          0022         pop de
040059 C1          0023         pop bc
04005A F1          0024         pop af
04005B 21 00 00 00 0025         ld hl,0
04005F             0026     
04005F C9          0027         ret
040060             0028     
040060             0029     ; API INCLUDES
040060             0030         include "mos_api.inc"
040060             0001*    ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*    ; Title:	AGON MOS - API for user projects
040060             0003*    ; Author:	Dean Belfield
040060             0004*    ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*    ;			Added MOS error codes for return in HL
040060             0006*    ; Created:	03/08/2022
040060             0007*    ; Last Updated:	10/08/2023
040060             0008*    ;
040060             0009*    ; Modinfo:
040060             0010*    ; 05/08/2022:	Added mos_feof
040060             0011*    ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*    ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*    ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*    ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*    ; 13/10/2022:	Added mos_oscli
040060             0016*    ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*    ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*    ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*    ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*    ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*    ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*    ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*    ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*    ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*    ; 19/05/2023:	Added sysvar_scrMode
040060             0026*    ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*    ; 03/08/2023:	Added mos_setkbvector
040060             0028*    ; 10/08/2023:	Added mos_getkbmap
040060             0029*    
040060             0030*    ; VDP control (VDU 23, 0, n)
040060             0031*    ;
040060             0032*    vdp_gp:				EQU 80h
040060             0033*    vdp_keycode:		EQU 81h
040060             0034*    vdp_cursor:			EQU	82h
040060             0035*    vdp_scrchar:		EQU	83h
040060             0036*    vdp_scrpixel:		EQU	84h
040060             0037*    vdp_audio:			EQU	85h
040060             0038*    vdp_mode:			EQU	86h
040060             0039*    vdp_rtc:			EQU	87h
040060             0040*    vdp_keystate:		EQU	88h
040060             0041*    vdp_logicalcoords:	EQU	C0h
040060             0042*    vdp_terminalmode:	EQU	FFh
040060             0043*    
040060             0044*    ; MOS high level functions
040060             0045*    ;
040060             0046*    mos_getkey:			EQU	00h
040060             0047*    mos_load:			EQU	01h
040060             0048*    mos_save:			EQU	02h
040060             0049*    mos_cd:				EQU	03h
040060             0050*    mos_dir:			EQU	04h
040060             0051*    mos_del:			EQU	05h
040060             0052*    mos_ren:			EQU	06h
040060             0053*    mos_mkdir:			EQU	07h
040060             0054*    mos_sysvars:		EQU	08h
040060             0055*    mos_editline:		EQU	09h
040060             0056*    mos_fopen:			EQU	0Ah
040060             0057*    mos_fclose:			EQU	0Bh
040060             0058*    mos_fgetc:			EQU	0Ch
040060             0059*    mos_fputc:			EQU	0Dh
040060             0060*    mos_feof:			EQU	0Eh
040060             0061*    mos_getError:		EQU	0Fh
040060             0062*    mos_oscli:			EQU	10h
040060             0063*    mos_copy:			EQU	11h
040060             0064*    mos_getrtc:			EQU	12h
040060             0065*    mos_setrtc:			EQU	13h
040060             0066*    mos_setintvector:	EQU	14h
040060             0067*    mos_uopen:			EQU	15h
040060             0068*    mos_uclose:			EQU	16h
040060             0069*    mos_ugetc:			EQU	17h
040060             0070*    mos_uputc:			EQU	18h
040060             0071*    mos_getfil:			EQU	19h
040060             0072*    mos_fread:			EQU	1Ah
040060             0073*    mos_fwrite:			EQU	1Bh
040060             0074*    mos_flseek:			EQU	1Ch
040060             0075*    mos_setkbvector:	EQU	1Dh
040060             0076*    mos_getkbmap:		EQU	1Eh
040060             0077*    
040060             0078*    ; MOS program exit codes
040060             0079*    ;
040060             0080*    EXIT_OK:				EQU  0;	"OK",
040060             0081*    EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*    EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*    EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*    EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*    EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*    EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*    EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*    EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*    EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*    EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*    EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*    EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*    EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*    EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*    EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*    EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*    EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*    EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*    EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*    EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*    EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*    ; FatFS file access functions
040060             0103*    ;
040060             0104*    ffs_fopen:			EQU	80h
040060             0105*    ffs_fclose:			EQU	81h
040060             0106*    ffs_fread:			EQU	82h
040060             0107*    ffs_fwrite:			EQU	83h
040060             0108*    ffs_flseek:			EQU	84h
040060             0109*    ffs_ftruncate:		EQU	85h
040060             0110*    ffs_fsync:			EQU	86h
040060             0111*    ffs_fforward:		EQU	87h
040060             0112*    ffs_fexpand:		EQU	88h
040060             0113*    ffs_fgets:			EQU	89h
040060             0114*    ffs_fputc:			EQU	8Ah
040060             0115*    ffs_fputs:			EQU	8Bh
040060             0116*    ffs_fprintf:		EQU	8Ch
040060             0117*    ffs_ftell:			EQU	8Dh
040060             0118*    ffs_feof:			EQU	8Eh
040060             0119*    ffs_fsize:			EQU	8Fh
040060             0120*    ffs_ferror:			EQU	90h
040060             0121*    
040060             0122*    ; FatFS directory access functions
040060             0123*    ;
040060             0124*    ffs_dopen:			EQU	91h
040060             0125*    ffs_dclose:			EQU	92h
040060             0126*    ffs_dread:			EQU	93h
040060             0127*    ffs_dfindfirst:		EQU	94h
040060             0128*    ffs_dfindnext:		EQU	95h
040060             0129*    
040060             0130*    ; FatFS file and directory management functions
040060             0131*    ;
040060             0132*    ffs_stat:			EQU	96h
040060             0133*    ffs_unlink:			EQU	97h
040060             0134*    ffs_rename:			EQU	98h
040060             0135*    ffs_chmod:			EQU	99h
040060             0136*    ffs_utime:			EQU	9Ah
040060             0137*    ffs_mkdir:			EQU	9Bh
040060             0138*    ffs_chdir:			EQU	9Ch
040060             0139*    ffs_chdrive:		EQU	9Dh
040060             0140*    ffs_getcwd:			EQU	9Eh
040060             0141*    
040060             0142*    ; FatFS volume management and system configuration functions
040060             0143*    ;
040060             0144*    ffs_mount:			EQU	9Fh
040060             0145*    ffs_mkfs:			EQU	A0h
040060             0146*    ffs_fdisk:			EQU	A1h
040060             0147*    ffs_getfree:		EQU	A2h
040060             0148*    ffs_getlabel:		EQU	A3h
040060             0149*    ffs_setlabel:		EQU	A4h
040060             0150*    ffs_setcp:			EQU	A5h
040060             0151*    
040060             0152*    ; File access modes
040060             0153*    ;
040060             0154*    fa_read:			EQU	01h
040060             0155*    fa_write:			EQU	02h
040060             0156*    fa_open_existing:	EQU	00h
040060             0157*    fa_create_new:		EQU	04h
040060             0158*    fa_create_always:	EQU	08h
040060             0159*    fa_open_always:		EQU	10h
040060             0160*    fa_open_append:		EQU	30h
040060             0161*    
040060             0162*    ; System variable indexes for api_sysvars
040060             0163*    ; Index into _sysvars in globals.inc
040060             0164*    ;
040060             0165*    sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*    sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*    sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*    sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*    sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*    sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*    sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*    sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*    sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*    sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*    sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*    sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*    sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*    sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*    sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*    sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*    sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*    sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*    sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*    sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*    sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*    sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*    sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*    sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*    sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*    sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*    
040060             0192*    ; Flags for the VPD protocol
040060             0193*    ;
040060             0194*    vdp_pflag_cursor:		EQU	00000001b
040060             0195*    vdp_pflag_scrchar:		EQU	00000010b
040060             0196*    vdp_pflag_point:		EQU	00000100b
040060             0197*    vdp_pflag_audio:		EQU	00001000b
040060             0198*    vdp_pflag_mode:			EQU	00010000b
040060             0199*    vdp_pflag_rtc:			EQU	00100000b
040060             0200*    
040060             0201*    ;
040060             0202*    ; FatFS structures
040060             0203*    ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*    ;
040060             0205*    ; Object ID and allocation information (FFOBJID)
040060             0206*    ;
040060             0207*    ; Indexes into FFOBJID structure
040060             0208*    ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*    ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*    ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*    ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*    ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*    ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*    ;
040060             0215*    ; File object structure (FIL)
040060             0216*    ;
040060             0217*    ; Indexes into FIL structure
040060             0218*    fil_obj:		EQU 0	; 15: Object identifier
040060             0219*    fil_flag:		EQU	15 	;  1: File status flags
040060             0220*    fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*    fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*    fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*    fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*    fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*    fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*    ;
040060             0227*    ; Directory object structure (DIR)
040060             0228*    ; Indexes into DIR structure
040060             0229*    dir_obj:		EQU  0	; 15: Object identifier
040060             0230*    dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*    dir_clust:		EQU	19	;  4: Current cluster
040060             0232*    dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*    dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*    dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*    dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*    dir_struct_size:	EQU	46	;  4: Size of the struct
040060             0237*    ;
040060             0238*    ; File information structure (FILINFO)
040060             0239*    ;
040060             0240*    ; Indexes into FILINFO structure
040060             0241*    filinfo_fsize:		EQU 0	;   4: File size
040060             0242*    filinfo_fdate:		EQU	4	;   2: Modified date
040060             0243*    filinfo_ftime:		EQU	6	;   2: Modified time
040060             0244*    filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0245*    filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0246*    filinfo_fname:		EQU	22	; 256: Primary file name
040060             0247*    filinfo_struct_size: EQU filinfo_fname+256 ; size of the FILINFO structure
040060             0248*    
040060             0249*    ; /* File attribute bits for directory entry (FILINFO.fattrib) */
040060             0250*    AM_RDO: equ 0 ; Bit 0 - Read Only
040060             0251*    AM_HID: equ 1 ; Bit 1 - Hidden
040060             0252*    AM_SYS: equ 2 ; Bit 2 - System
040060             0253*    AM_DIR: equ 4 ; Bit 4 - Directory
040060             0254*    AM_ARC: equ 5 ; Bit 5 - Archive
040060             0255*    
040060             0256*    ;
040060             0257*    ; Macro for calling the API
040060             0258*    ; Parameters:
040060             0259*    ; - function: One of the function numbers listed above
040060             0260*    ;
040060             0261*    	MACRO	MOSCALL	function
040060             0262*    			LD	A, function
040060             0263*    			RST.LIL	08h
040060             0264*    	ENDMACRO
040060             0265*    
040060             0266*    ;
040060             0267*    ; Same as above but keeps IY safe on FFS calls
040060             0268*    ; (can be use for regular MOS calls as well)
040060             0269*    ;
040060             0270*    	MACRO	FFSCALL	function
040060             0271*    			PUSH IY
040060             0272*    			LD	A, function
040060             0273*    			RST.LIL	08h
040060             0274*    			POP IY
040060             0275*    	ENDMACRO
040060             0031         include "macros.inc"
040060             0001*    
040060             0002*    ; test the sign of HL
040060             0003*    ; inputs: HL obviously
040060             0004*    ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
040060             0005*    ; destroys: flags
040060             0006*        MACRO SIGN_HLU
040060             0007*        add hl,de ; 1 cycle
040060             0008*        or a ; clear flags ; 1 cycle
040060             0009*        sbc hl,de ; 2 cycles
040060             0010*        ; 4 cycles total
040060             0011*        ENDMACRO
040060             0012*    
040060             0013*    ; put the value in A into HLU
040060             0014*    ; affects: HLU
040060             0015*    ; destroys: nothing
040060             0016*    ; note: $ instead of @@ b/c anon labels deprecated in ez80asm
040060             0017*        MACRO A_TO_HLU
040060             0018*        xor a ; 1 cycle
040060             0019*        ld ($+8+1),hl ; 7 cycles
040060             0020*        ld ($+4+3),a ; 5 cycles
040060             0021*        ld hl,0x000000 ; 4 cycles
040060             0022*        ; 17 cycles total
040060             0023*        ENDMACRO
040060             0024*    
040060             0025*    ; alternative: https://discord.com/channels/1158535358624039014/1282290921815408681/1318315567102300220
040060             0026*    ; one cycle less but burns flags
040060             0027*        MACRO A_TO_HLU_ALT
040060             0028*        push hl ; 4 cycles
040060             0029*        ld hl,2 ; 4 cycles
040060             0030*        add hl,sp ; 1 cycle
040060             0031*        ld (hl),a ; 2 cycles
040060             0032*        pop hl ; 4 cycles
040060             0033*        ; 15 cycles total
040060             0034*        ENDMACRO
040060             0035*    
040060             0036*        MACRO hlu_mul256
040060             0037*        add hl,hl ; * 2
040060             0038*        add hl,hl ; * 4
040060             0039*        add hl,hl ; * 8
040060             0040*        add hl,hl ; * 16
040060             0041*        add hl,hl ; * 32
040060             0042*        add hl,hl ; * 64
040060             0043*        add hl,hl ; * 128
040060             0044*        add hl,hl ; * 256
040060             0045*        ENDMACRO
040060             0046*    
040060             0047*    ; https://discord.com/channels/1158535358624039014/1282290921815408681/1317793870070812715
040060             0048*        MACRO SRL_UHL
040060             0049*        dec sp ; 1 cycle
040060             0050*        push hl ; 4 cycles
040060             0051*        inc sp ; 1 cycle
040060             0052*        pop hl ; 4 cycles
040060             0053*        inc hl ; 1 cycle
040060             0054*        dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040060             0055*        ; 13 cycles total
040060             0056*        ENDMACRO
040060             0057*    
040060             0058*        MACRO printChar char
040060             0059*        LD A, char
040060             0060*        RST.LIL 10h
040060             0061*        ENDMACRO
040060             0062*    
040060             0063*    ; Simulated call to subroutine at HL
040060             0064*    ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040060             0065*    ; outputs: whatever the subroutine does, including HL and BC
040060             0066*    ; destroys: only what the subroutine does, but always BC
040060             0067*        MACRO CALL_HL
040060             0068*        ld bc,$+6 ; Address of first instruction after the jump
040060             0069*        push bc ; which constitutes the return address
040060             0070*        jp (hl) ; Jump to the address in HL
040060             0071*        ENDMACRO
040060             0072*    
040060             0073*    ; Simulated call to subroutine at IX
040060             0074*    ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040060             0075*    ; outputs: whatever the subroutine does, including IX and BC
040060             0076*    ; destroys: only what the subroutine does, but always BC
040060             0077*        MACRO CALL_IX
040060             0078*        ld bc,$+6 ; Address of first instruction after the jump
040060             0079*        push bc ; which constitutes the return address
040060             0080*        jp (ix) ; Jump to the address in IX
040060             0081*        ENDMACRO
040060             0082*    
040060             0083*    ; Simulated call to soubroutinte at IY
040060             0084*    ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040060             0085*    ; outputs: whatever the subroutine does, including IY and BC
040060             0086*    ; destroys: only what the subroutine does, but always BC
040060             0087*        MACRO CALL_IY
040060             0088*        ld bc,$+6 ; Address of first instruction after the jump
040060             0089*        push bc ; which constitutes the return address
040060             0090*        jp (iy) ; Jump to the address in IY
040060             0091*        ENDMACRO
040060             0092*    
040060             0093*    ; put the value in HLU into A
040060             0094*    ; destroys: af
040060             0095*        MACRO HLU_TO_A
040060             0096*        dec sp ; 1 cycle
040060             0097*        push hl ; 4 cycles
040060             0098*        inc sp ; 1 cycle
040060             0099*        pop af ; 4 cycles
040060             0100*        ; 10 cycles total
040060             0101*        ENDMACRO
040060             0102*    
040060             0103*        MACRO PUSH_ALL
040060             0104*        ex af,af'
040060             0105*        exx
040060             0106*        push af
040060             0107*        push hl
040060             0108*        push bc
040060             0109*        push de
040060             0110*    
040060             0111*        ex af,af'
040060             0112*        exx
040060             0113*        push af
040060             0114*        push hl
040060             0115*        push bc
040060             0116*        push de
040060             0117*        push ix
040060             0118*        push iy
040060             0119*        ENDMACRO
040060             0120*    
040060             0121*        MACRO POP_ALL
040060             0122*        pop iy
040060             0123*        pop ix
040060             0124*        pop de
040060             0125*        pop bc
040060             0126*        pop hl
040060             0127*        pop af
040060             0128*        ex af,af'
040060             0129*        exx
040060             0130*    
040060             0131*        pop de
040060             0132*        pop bc
040060             0133*        pop hl
040060             0134*        pop af
040060             0135*        ex af,af'
040060             0136*        exx
040060             0137*        ENDMACRO
040060             0032         include "functions.inc"
040060             0001*    ; Print a zero-terminated string inline with code, e.g.:
040060             0002*    ;
040060             0003*    ;    call printInline
040060             0004*    ;    ASCIZ "Hello, world!\r\n"
040060             0005*    ;
040060             0006*    ; Destroys: HL,AF
040060             0007*    printInline:
040060 E1          0008*        pop hl ; get the return address = pointer to start of string
040061 CD 67 00 04 0009*        call printString ; HL advances to end of string
040065 E5          0010*        push hl ; restore the return address = pointer to end of string
040066 C9          0011*        ret
040067             0012*    
040067             0013*    ; Print a zero-terminated string
040067             0014*    ; IX: Pointer to string, A: signed offset from IX
040067             0015*    printStringIX:
040067             0016*    
040067             0017*    ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040067             0018*    ; Print a zero-terminated string
040067             0019*    ; HL: Pointer to string
040067             0020*    ; returns: hl pointed to character after string terminator
040067             0021*    ; destroys: af, hl
040067             0022*    printString:
040067 C5          0023*        PUSH BC
040068 01 00 00 00 0024*        LD BC,0
04006C 3E 00       0025*        LD A,0
04006E 5B DF       0026*        RST.LIL 18h
040070 C1          0027*        POP BC
040071 C9          0028*        RET
040072             0029*    ; print a VDU sequence
040072             0030*    ; HL: Pointer to VDU sequence - <1 byte length> <data>
040072             0031*    sendVDUsequence:
040072 C5          0032*        PUSH BC
040073 01 00 00 00 0033*        LD BC, 0
040077 4E          0034*        LD C, (HL)
040078 5B DF       0035*        RST.LIL 18h
04007A C1          0036*        POP BC
04007B C9          0037*        RET
04007C             0038*    ; Print Newline sequence to VDP
04007C             0039*    ; destroys: nothing
04007C             0040*    printNewLine:
04007C F5          0041*        push af ; for some reason rst.lil 10h sets carry flag
04007D 3E 0D       0042*        LD A, '\r'
04007F 5B D7       0043*        RST.LIL 10h
040081 3E 0A       0044*        LD A, '\n'
040083 5B D7       0045*        RST.LIL 10h
040085 F1          0046*        pop af
040086 C9          0047*        RET
040087             0048*    
040087             0049*    ; print a zero-terminated string at a graphics coordinate
040087             0050*    ; Inputs: HL Pointer to string, BC,DE x,y position (in pixels)
040087             0051*    printStringGfx:
040087 E5          0052*        push hl ; preserve string pointer
040088             0053*    ; move graphics cursor to x,y location
040088 3E 44       0054*        ld a,plot_pt+mv_abs
04008A CD 54 20 04 0055*        call vdu_plot
04008E             0056*    ; print string
04008E E1          0057*        pop hl ; restore string pointer
04008F             0058*    @print_loop:
04008F 7E          0059*        ld a,(hl)
040090 B7          0060*        or a ; check for end of string
040091 C8          0061*        ret z ; if zero, we're done
040092 08          0062*        ex af,af' ; preserve character
040093 3E 05       0063*        ld a,5 ; VDU 5 char to gfx cursor
040095 5B D7       0064*        rst.lil 10h ; send it
040097 08          0065*        ex af,af' ; restore character
040098 5B D7       0066*        rst.lil 10h ; print character
04009A 23          0067*        inc hl
04009B C3 8F 00 04 0068*        jp @print_loop
04009F C9          0069*        ret
0400A0             0070*    ; end printStringGfx
0400A0             0071*    
0400A0             0072*    ; Print a 24-bit HEX number
0400A0             0073*    ; HLU: Number to print
0400A0             0074*    printHex24:
0400A0             0075*        HLU_TO_A
                       M1 Args: none
0400A0 3B          0001*M1      dec sp ; 1 cycle
0400A1 E5          0002*M1      push hl ; 4 cycles
0400A2 33          0003*M1      inc sp ; 1 cycle
0400A3 F1          0004*M1      pop af ; 4 cycles
0400A4             0005*M1      ; 10 cycles total
0400A4 CD AE 00 04 0076*        CALL printHex8
0400A8             0077*    ; Print a 16-bit HEX number
0400A8             0078*    ; HL: Number to print
0400A8             0079*    printHex16:
0400A8 7C          0080*        LD A,H
0400A9 CD AE 00 04 0081*        CALL printHex8
0400AD 7D          0082*        LD A,L
0400AE             0083*    ; Print an 8-bit HEX number
0400AE             0084*    ; A: Number to print
0400AE             0085*    printHex8:
0400AE 4F          0086*        LD C,A
0400AF 1F          0087*        RRA
0400B0 1F          0088*        RRA
0400B1 1F          0089*        RRA
0400B2 1F          0090*        RRA
0400B3 CD B8 00 04 0091*        CALL @F
0400B7 79          0092*        LD A,C
0400B8             0093*    @@:
0400B8 E6 0F       0094*        AND 0Fh
0400BA C6 90       0095*        ADD A,90h
0400BC 27          0096*        DAA
0400BD CE 40       0097*        ADC A,40h
0400BF 27          0098*        DAA
0400C0 5B D7       0099*        RST.LIL 10h
0400C2 C9          0100*        RET
0400C3             0101*    
0400C3             0102*    ; Print a 0x HEX prefix
0400C3             0103*    DisplayHexPrefix:
0400C3 3E 30       0104*        LD A, '0'
0400C5 5B D7       0105*        RST.LIL 10h
0400C7 3E 78       0106*        LD A, 'x'
0400C9 5B D7       0107*        RST.LIL 10h
0400CB C9          0108*        RET
0400CC             0109*    
0400CC             0110*        MACRO printDecBC
0400CC             0111*        push hl
0400CC             0112*        push bc
0400CC             0113*        pop hl
0400CC             0114*        call printDec
0400CC             0115*        pop hl
0400CC             0116*        ENDMACRO
0400CC             0117*    
0400CC             0118*        MACRO printDecDE
0400CC             0119*        push hl
0400CC             0120*        push de
0400CC             0121*        pop hl
0400CC             0122*        call printDec
0400CC             0123*        pop hl
0400CC             0124*        ENDMACRO
0400CC             0125*    
0400CC             0126*        MACRO printDecHL
0400CC             0127*        call printDec
0400CC             0128*        ENDMACRO
0400CC             0129*    
0400CC             0130*        MACRO printDecIX
0400CC             0131*        push hl
0400CC             0132*        push ix
0400CC             0133*        pop hl
0400CC             0134*        call printDec
0400CC             0135*        pop hl
0400CC             0136*        ENDMACRO
0400CC             0137*    
0400CC             0138*        MACRO printDecIY
0400CC             0139*        push hl
0400CC             0140*        push iy
0400CC             0141*        pop hl
0400CC             0142*        call printDec
0400CC             0143*        pop hl
0400CC             0144*        ENDMACRO
0400CC             0145*    
0400CC             0146*    
0400CC             0147*    ; Prints the right justified decimal value in HL without leading zeroes
0400CC             0148*    ; HL : Value to print
0400CC             0149*    ; preserves all registers and flags
0400CC             0150*    printDec:
0400CC             0151*    ; BEGIN MY CODE
0400CC             0152*    ; back up all the things
0400CC F5          0153*        push af
0400CD C5          0154*        push bc
0400CE D5          0155*        push de
0400CF E5          0156*        push hl
0400D0             0157*    ; END MY CODE
0400D0 11 F8 00 04 0158*        LD DE, _printDecBuffer
0400D4 CD 39 01 04 0159*        CALL u24_to_ascii
0400D8             0160*    ; BEGIN MY CODE
0400D8             0161*    ; replace leading zeroes with spaces
0400D8 21 F8 00 04 0162*        LD HL, _printDecBuffer
0400DC 06 07       0163*        ld B, 7 ; if HL was 0, we want to keep the final zero
0400DE             0164*    @loop:
0400DE 7E          0165*        LD A, (HL)
0400DF FE 30       0166*        CP '0'
0400E1 C2 EB 00 04 0167*        JP NZ, @done
0400E5 3E 20       0168*        LD A, ' '
0400E7 77          0169*        LD (HL), A
0400E8 23          0170*        INC HL
0400E9             0171*        ; CALL vdu_cursor_forward
0400E9 10 F3       0172*        DJNZ @loop
0400EB             0173*    @done:
0400EB             0174*    ; END MY CODE
0400EB 21 F8 00 04 0175*        LD HL, _printDecBuffer
0400EF CD 67 00 04 0176*        CALL printString
0400F3             0177*    ; BEGIN MY CODE
0400F3             0178*    ; restore all the things
0400F3 E1          0179*        pop hl
0400F4 D1          0180*        pop de
0400F5 C1          0181*        pop bc
0400F6 F1          0182*        pop af
0400F7             0183*    ; END MY CODE
0400F7 C9          0184*        RET
0400F8 00 00 00 00 0185*    _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040108             0186*    
040108             0187*    printDec8:
040108             0188*    ; back up all the things
040108 F5          0189*        push af
040109 C5          0190*        push bc
04010A D5          0191*        push de
04010B E5          0192*        push hl
04010C             0193*    ; initialize hl to 0 and load it with a
04010C 21 00 00 00 0194*        ld hl,0
040110 6F          0195*        ld l,a
040111             0196*    ; convert l to ascii
040111 11 F8 00 04 0197*        LD DE, _printDecBuffer
040115 CD 59 01 04 0198*        CALL u8_to_ascii
040119             0199*    ; replace leading zeroes with spaces
040119 21 F8 00 04 0200*        LD HL, _printDecBuffer
04011D 06 03       0201*        ld B, 3 ; if A was 0, we want to keep the final zero
04011F             0202*    @loop:
04011F 7E          0203*        LD A, (HL)
040120 FE 30       0204*        CP '0'
040122 C2 2C 01 04 0205*        JP NZ, @done
040126 3E 20       0206*        LD A, ' '
040128 77          0207*        LD (HL), A
040129 23          0208*        INC HL
04012A 10 F3       0209*        DJNZ @loop
04012C             0210*    @done:
04012C 21 F8 00 04 0211*        LD HL, _printDecBuffer
040130 CD 67 00 04 0212*        CALL printString
040134             0213*    ; restore all the things
040134 E1          0214*        pop hl
040135 D1          0215*        pop de
040136 C1          0216*        pop bc
040137 F1          0217*        pop af
040138 C9          0218*        RET
040139             0219*    ; end printDec8
040139             0220*    
040139             0221*    ; This routine converts the unsigned 24-bit value in HLU into its ASCII representation,
040139             0222*    ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040139             0223*    ; so it will allways be 8 characters length
040139             0224*    ; HL : Value to convert to string
040139             0225*    ; DE : pointer to buffer, at least 8 byte + 0
040139             0226*    u24_to_ascii:
040139 01 80 69 67 0227*        LD BC,-10000000
04013D CD 70 01 04 0228*        CALL one_digit
040141 01 C0 BD F0 0229*        LD BC,-1000000
040145 CD 70 01 04 0230*        CALL one_digit
040149 01 60 79 FE 0231*        LD BC,-100000
04014D CD 70 01 04 0232*        CALL one_digit
040151 01 F0 D8 FF 0233*        LD BC,-10000
040155 CD 70 01 04 0234*        CALL one_digit
040159             0235*    u8_to_ascii: ; same arguments but hl <= 255, uhl and h = 0
040159 01 18 FC FF 0236*        LD BC,-1000
04015D CD 70 01 04 0237*        CALL one_digit
040161 01 9C FF FF 0238*        LD BC,-100
040165 CD 70 01 04 0239*        CALL one_digit
040169 0E F6       0240*        LD C,-10
04016B CD 70 01 04 0241*        CALL one_digit
04016F 48          0242*        LD C,B
040170             0243*    one_digit:
040170 3E 2F       0244*        LD A,'0'-1
040172             0245*    @divide_me:
040172 3C          0246*        INC A
040173 09          0247*        ADD HL,BC
040174 38 FC       0248*        JR C,@divide_me
040176 ED 42       0249*        SBC HL,BC
040178 12          0250*        LD (DE),A
040179 13          0251*        INC DE
04017A C9          0252*        RET
04017B             0253*    
04017B             0254*    print_u24:
04017B D5          0255*        push de
04017C E5          0256*        push hl
04017D 11 F8 00 04 0257*        ld de,_printDecBuffer
040181 CD 39 01 04 0258*        call u24_to_ascii
040185 21 F8 00 04 0259*        ld hl,_printDecBuffer
040189 CD 67 00 04 0260*        call printString
04018D 3E 20       0261*        ld a,' '
04018F 5B D7       0262*        rst.lil 10h
040191 E1          0263*        pop hl
040192 D1          0264*        pop de
040193 C9          0265*        ret
040194             0266*    
040194             0267*    ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
040194             0268*    ; HL : Value to convert to string (integer part in H, fractional part in L)
040194             0269*    ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
040194             0270*    u168_to_ascii:
040194             0271*    ; add a leading space to make room for sign flag if needed
040194 3E 20       0272*        ld a,' '
040196 12          0273*        ld (de),a
040197 13          0274*        inc de
040198             0275*    ; Convert integer part
040198 E5          0276*        push hl ; Save HL (we’ll need the fractional part later)
040199             0277*        ; call hlu_udiv256 ; Shift to get integer portion in HL
040199             0278*        SRL_UHL ; Shift to get integer portion in HL
                       M1 Args: none
040199 3B          0001*M1      dec sp ; 1 cycle
04019A E5          0002*M1      push hl ; 4 cycles
04019B 33          0003*M1      inc sp ; 1 cycle
04019C E1          0004*M1      pop hl ; 4 cycles
04019D 23          0005*M1      inc hl ; 1 cycle
04019E 52 2B       0006*M1      dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
0401A0             0007*M1      ; 13 cycles total
0401A0 01 F0 D8 FF 0279*        ld bc, -10000
0401A4 CD C7 01 04 0280*        call @one_int
0401A8 01 18 FC FF 0281*        ld bc, -1000
0401AC CD C7 01 04 0282*        call @one_int
0401B0 01 9C FF FF 0283*        ld bc, -100
0401B4 CD C7 01 04 0284*        call @one_int
0401B8 0E F6       0285*        ld c, -10
0401BA CD C7 01 04 0286*        call @one_int
0401BE 48          0287*        ld c, b
0401BF CD C7 01 04 0288*        call @one_int
0401C3 C3 D2 01 04 0289*        jp @frac ; Jump to fractional part conversion
0401C7             0290*    @one_int:
0401C7 3E 2F       0291*        ld a, '0' - 1 ; Start ASCII character at '0'
0401C9             0292*    @divide_me:
0401C9 3C          0293*        inc a
0401CA 09          0294*        add hl, bc ; Accumulate until overflow
0401CB 38 FC       0295*        jr c, @divide_me
0401CD ED 42       0296*        sbc hl, bc ; Remove excess after overflow
0401CF 12          0297*        ld (de), a ; Store ASCII digit
0401D0 13          0298*        inc de
0401D1 C9          0299*        ret
0401D2             0300*    ; Convert fractional part
0401D2             0301*    @frac:
0401D2 3E 2E       0302*        ld a, '.' ; Decimal point
0401D4 12          0303*        ld (de), a
0401D5 13          0304*        inc de
0401D6 E1          0305*        pop hl ; Restore HL with original fraction
0401D7 06 03       0306*        ld b, 3 ; Loop counter for 3 fractional digits
0401D9             0307*    @frac_loop:
0401D9 26 0A       0308*        ld h, 10 ; Load multiplier for fractional part
0401DB ED 6C       0309*        mlt hl ; Multiply by 10, result in HL (H holds the integer part)
0401DD 3E 30       0310*        ld a, '0'
0401DF 84          0311*        add a, h ; Convert integer part to ASCII
0401E0 12          0312*        ld (de), a
0401E1 13          0313*        inc de
0401E2 10 F5       0314*        djnz @frac_loop ; Repeat for each fractional digit
0401E4             0315*    ; Add null terminator
0401E4 AF          0316*        xor a ; Null terminator
0401E5 12          0317*        ld (de), a
0401E6 C9          0318*        ret
0401E7             0319*    
0401E7             0320*    print_u168:
0401E7 D5          0321*        push de
0401E8 E5          0322*        push hl
0401E9 11 F8 00 04 0323*        ld de,_printDecBuffer
0401ED CD 94 01 04 0324*        call u168_to_ascii
0401F1 21 F8 00 04 0325*        ld hl,_printDecBuffer
0401F5 CD 67 00 04 0326*        call printString
0401F9 E1          0327*        pop hl
0401FA D1          0328*        pop de
0401FB C9          0329*        ret
0401FC             0330*    
0401FC             0331*    ; signed version of u168_to_ascii
0401FC             0332*    s168_to_ascii:
0401FC D5          0333*        push de ; save starting address of buffer
0401FD CD A1 04 04 0334*        call hlu_abs
040201 F5          0335*        push af ; save sign flag
040202 CD 94 01 04 0336*        call u168_to_ascii
040206 F1          0337*        pop af ; restore sign flag
040207 D1          0338*        pop de ; restore starting address of buffer
040208 F0          0339*        ret p ; hlu was positive so nothing to do
040209 3E 2D       0340*        ld a,'-'
04020B 12          0341*        ld (de),a
04020C C9          0342*        ret
04020D             0343*    
04020D             0344*    print_s168:
04020D D5          0345*        push de
04020E E5          0346*        push hl
04020F 11 F8 00 04 0347*        ld de,_printDecBuffer
040213 CD FC 01 04 0348*        call s168_to_ascii
040217 21 F8 00 04 0349*        ld hl,_printDecBuffer
04021B CD 67 00 04 0350*        call printString
04021F E1          0351*        pop hl
040220 D1          0352*        pop de
040221 C9          0353*        ret
040222             0354*    
040222             0355*    print_s168_hl:
040222 F5          0356*        push af
040223 E5          0357*        push hl
040224 CD 0D 02 04 0358*        call print_s168
040228 3E 20       0359*        ld a,' '
04022A 5B D7       0360*        rst.lil 10h
04022C E1          0361*        pop hl
04022D F1          0362*        pop af
04022E C9          0363*        ret
04022F             0364*    
04022F             0365*    print_s168_bc:
04022F F5          0366*        push af
040230 C5          0367*        push bc
040231 E5          0368*        push hl
040232 C5          0369*        push bc
040233 E1          0370*        pop hl
040234 CD 0D 02 04 0371*        call print_s168
040238 3E 20       0372*        ld a,' '
04023A 5B D7       0373*        rst.lil 10h
04023C E1          0374*        pop hl
04023D C1          0375*        pop bc
04023E F1          0376*        pop af
04023F C9          0377*        ret
040240             0378*    
040240             0379*    print_s168_de:
040240 F5          0380*        push af
040241 D5          0381*        push de
040242 E5          0382*        push hl
040243 EB          0383*        ex de,hl
040244 CD 0D 02 04 0384*        call print_s168
040248 3E 20       0385*        ld a,' '
04024A 5B D7       0386*        rst.lil 10h
04024C E1          0387*        pop hl
04024D D1          0388*        pop de
04024E F1          0389*        pop af
04024F C9          0390*        ret
040250             0391*    
040250             0392*    print_s168_hl_bc_de:
040250 F5          0393*        push af
040251 C5          0394*        push bc
040252 D5          0395*        push de
040253 E5          0396*        push hl
040254 CD 0D 02 04 0397*        call print_s168
040258 3E 20       0398*        ld a,' '
04025A 5B D7       0399*        rst.lil 10h
04025C C5          0400*        push bc
04025D E1          0401*        pop hl
04025E CD 0D 02 04 0402*        call print_s168
040262 3E 20       0403*        ld a,' '
040264 5B D7       0404*        rst.lil 10h
040266 EB          0405*        ex de,hl
040267 CD 0D 02 04 0406*        call print_s168
04026B 3E 20       0407*        ld a,' '
04026D 5B D7       0408*        rst.lil 10h
04026F E1          0409*        pop hl
040270 D1          0410*        pop de
040271 C1          0411*        pop bc
040272 F1          0412*        pop af
040273 C9          0413*        ret
040274             0414*    
040274             0415*    print_s168_bc_de:
040274 F5          0416*        push af
040275 C5          0417*        push bc
040276 D5          0418*        push de
040277 C5          0419*        push bc
040278 E1          0420*        pop hl
040279 CD 0D 02 04 0421*        call print_s168
04027D 3E 20       0422*        ld a,' '
04027F 5B D7       0423*        rst.lil 10h
040281 EB          0424*        ex de,hl
040282 CD 0D 02 04 0425*        call print_s168
040286 3E 20       0426*        ld a,' '
040288 5B D7       0427*        rst.lil 10h
04028A E1          0428*        pop hl
04028B D1          0429*        pop de
04028C C1          0430*        pop bc
04028D F1          0431*        pop af
04028E C9          0432*        ret
04028F             0433*    
04028F             0434*    print_s168_a:
04028F F5          0435*        push af
040290 C5          0436*        push bc
040291 E5          0437*        push hl
040292 21 00 00 00 0438*        ld hl,0
040296 6F          0439*        ld l,a
040297 CD 22 02 04 0440*        call print_s168_hl
04029B E1          0441*        pop hl
04029C C1          0442*        pop bc
04029D F1          0443*        pop af
04029E C9          0444*        ret
04029F             0445*    
04029F             0446*    ; #### new functions added by Brandon R. Gates ####
04029F             0447*    
04029F             0448*    ; print the binary representation of the 8-bit value in a
04029F             0449*    ; destroys a, hl, bc
04029F             0450*    printBin8:
04029F 06 08       0451*        ld b,8 ; loop counter for 8 bits
0402A1 21 BC 02 04 0452*        ld hl,@cmd ; set hl to the low byte of the output string
0402A5             0453*        ; (which will be the high bit of the value in a)
0402A5             0454*    @loop:
0402A5 07          0455*        rlca ; put the next highest bit into carry
0402A6 38 04       0456*        jr c,@one
0402A8 36 30       0457*        ld (hl),'0'
0402AA 18 02       0458*        jr @next_bit
0402AC             0459*    @one:
0402AC 36 31       0460*        ld (hl),'1'
0402AE             0461*    @next_bit:
0402AE 23          0462*        inc hl
0402AF 10 F4       0463*        djnz @loop
0402B1             0464*    ; print it
0402B1 21 BC 02 04 0465*        ld hl,@cmd
0402B5 01 08 00 00 0466*        ld bc,@end-@cmd
0402B9 5B DF       0467*        rst.lil $18
0402BB C9          0468*        ret
0402BC             0469*    @cmd: ds 8 ; eight bytes for eight bits
0402C4             0470*    @end:
0402C4             0471*    
0402C4             0472*    ; print the binary representation of the 8-bit value in a
0402C4             0473*    ; in reverse order (lsb first)
0402C4             0474*    ; destroys a, hl, bc
0402C4             0475*    printBin8Rev:
       FF FF FF FF 
       FF FF FF FF 
0402C4 06 08       0476*        ld b,8 ; loop counter for 8 bits
0402C6 21 E1 02 04 0477*        ld hl,@cmd ; set hl to the low byte of the output string
0402CA             0478*        ; (which will be the high bit of the value in a)
0402CA             0479*    @loop:
0402CA 0F          0480*        rrca ; put the next lowest bit into carry
0402CB 38 04       0481*        jr c,@one
0402CD 36 30       0482*        ld (hl),'0'
0402CF 18 02       0483*        jr @next_bit
0402D1             0484*    @one:
0402D1 36 31       0485*        ld (hl),'1'
0402D3             0486*    @next_bit:
0402D3 23          0487*        inc hl
0402D4 10 F4       0488*        djnz @loop
0402D6             0489*    ; print it
0402D6 21 E1 02 04 0490*        ld hl,@cmd
0402DA 01 08 00 00 0491*        ld bc,@end-@cmd
0402DE 5B DF       0492*        rst.lil $18
0402E0 C9          0493*        ret
0402E1             0494*    @cmd: ds 8 ; eight bytes for eight bits
0402E9             0495*    @end:
0402E9             0496*    
       FF FF FF FF 
       FF FF FF FF 
0402E9 20 61 66 3D 0497*    str_afu: db " af=",0
       00          
0402EE 20 68 6C 3D 0498*    str_hlu: db " hl=",0
       00          
0402F3 20 62 63 3D 0499*    str_bcu: db " bc=",0
       00          
0402F8 20 64 65 3D 0500*    str_deu: db " de=",0
       00          
0402FD 20 69 78 3D 0501*    str_ixu: db " ix=",0
       00          
040302 20 69 79 3D 0502*    str_iyu: db " iy=",0
       00          
040307             0503*    
040307             0504*    ; print udeuhl to screen in hexidecimal format
040307             0505*    ; inputs: none
040307             0506*    ; outputs: concatenated hexidecimal udeuhl
040307             0507*    ; destroys: nothing
040307             0508*    dumpUDEUHLHex:
040307             0509*    ; store everything in scratch
040307 22 66 03 04 0510*        ld (uhl),hl
04030B ED 43 69 03 0511*        ld (ubc),bc
       04          
040310 ED 53 6C 03 0512*        ld (ude),de
       04          
040315 DD 22 6F 03 0513*        ld (uix),ix
       04          
04031A FD 22 72 03 0514*        ld (uiy),iy
       04          
04031F F5          0515*        push af
040320             0516*    
040320             0517*    ; print each register
040320             0518*    
040320 21 5A 03 04 0519*        ld hl,str_udeuhl
040324 CD 67 00 04 0520*        call printString
040328 2A 6C 03 04 0521*        ld hl,(ude)
04032C CD A0 00 04 0522*        call printHex24
040330 3E 2E       0523*        ld a,'.' ; print a dot to separate the values
040332 5B D7       0524*        rst.lil 10h
040334 2A 66 03 04 0525*        ld hl,(uhl)
040338 CD A0 00 04 0526*        call printHex24
04033C CD 7C 00 04 0527*        call printNewLine
040340             0528*    
040340             0529*    ; restore everything
040340 2A 66 03 04 0530*        ld hl, (uhl)
040344 ED 4B 69 03 0531*        ld bc, (ubc)
       04          
040349 ED 5B 6C 03 0532*        ld de, (ude)
       04          
04034E DD 2A 6F 03 0533*        ld ix, (uix)
       04          
040353 FD 2A 72 03 0534*        ld iy, (uiy)
       04          
040358 F1          0535*        pop af
040359             0536*    ; all done
040359 C9          0537*        ret
04035A             0538*    
04035A 75 64 65 2E 0539*    str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
040363             0540*    
040363             0541*    ; global scratch memory for registers
040363 00 00 00    0542*    uaf: dl 0
040366 00 00 00    0543*    uhl: dl 0
040369 00 00 00    0544*    ubc: dl 0
04036C 00 00 00    0545*    ude: dl 0
04036F 00 00 00    0546*    uix: dl 0
040372 00 00 00    0547*    uiy: dl 0
040375 00 00 00    0548*    usp: dl 0
040378 00 00 00    0549*    upc: dl 0
04037B             0550*    
04037B             0551*    
04037B             0552*    ; set all the bits in the flag register
04037B             0553*    ; more of an academic exercise than anything useful
04037B             0554*    ; inputs; none
04037B             0555*    ; outputs; a=0,f=255
04037B             0556*    ; destroys: flags, hl
04037B             0557*    ; preserves: a, because why not
04037B             0558*    setAllFlags:
04037B 21 FF 00 00 0559*        ld hl,255
04037F 67          0560*        ld h,a ; four cycles to preserve a is cheap
040380 E5          0561*        push hl
040381 F1          0562*        pop af
040382 C9          0563*        ret
040383             0564*    
040383             0565*    ; reset all the bits in the flag register
040383             0566*    ; unlike its inverse counterpart, this may actually be useful
040383             0567*    ; inputs; none
040383             0568*    ; outputs; a=0,f=0
040383             0569*    ; destroys: flags, hl
040383             0570*    ; preserves: a, because why not
040383             0571*    resetAllFlags:
040383 21 00 00 00 0572*        ld hl,0
040387 67          0573*        ld h,a ; four cycles to preserve a is cheap
040388 E5          0574*        push hl
040389 F1          0575*        pop af
04038A C9          0576*        ret
04038B             0577*    
04038B             0578*    ; wait until user presses a key
04038B             0579*    ; inputs: none
04038B             0580*    ; outputs: ascii code of key pressed in a
04038B             0581*    ; destroys: af,ix
04038B             0582*    waitKeypress:
04038B             0583*        MOSCALL mos_getkey
                       M1 Args: function=mos_getkey 
04038B 3E 00       0001*M1  			LD	A, function
04038D 5B CF       0002*M1  			RST.LIL	08h
04038F C9          0584*        ret
040390             0585*    
040390             0586*    ; clear a block of memory by writing a prescribed value to each byte in the range
040390             0587*    ; inputs: a = value to write, hl = address of first byte, bc = number of bytes
040390             0588*    ; outputs: memory block is cleared
040390             0589*    ; destroys: hl, bc, de
040390             0590*    clear_mem:
040390 0B          0591*        dec bc ; we do this because we will increment de before writing the first byte
040391 77          0592*        ld (hl),a
040392 E5          0593*        push hl
040393 D1          0594*        pop de
040394 13          0595*        inc de ; target address
040395 ED B0       0596*        ldir
040397 C9          0597*        ret
040398             0033         include "arith24.inc"
040398             0001*    ;------------------------------------------------------------------------
040398             0002*    ;  arith24.asm
040398             0003*    ;  24-bit ez80 arithmetic routines
040398             0004*    ;  Copyright (c) Shawn Sijnstra 2024
040398             0005*    ;  MIT license
040398             0006*    ;
040398             0007*    ;  This library was created as a tool to help make ez80
040398             0008*    ;  24-bit native assembly routines for simple mathematical problems
040398             0009*    ;  more widely available.
040398             0010*    ;
040398             0011*    ;------------------------------------------------------------------------
040398             0012*    
040398             0013*    ;------------------------------------------------------------------------
040398             0014*    ; umul24:	HL = HL*DE (unsigned)
040398             0015*    ; Preserves AF, BC, DE
040398             0016*    ; Uses a fast multiply routine.
040398             0017*    ;------------------------------------------------------------------------
040398             0018*    umul24:
040398 D5          0019*    	push	DE
040399 C5          0020*    	push	BC
04039A F5          0021*    	push	AF
04039B E5          0022*    	push	HL
04039C C1          0023*    	pop		BC
04039D 3E 18       0024*        ld	 	a, 24 ; No. of bits to process
04039F 21 00 00 00 0025*        ld	 	hl, 0 ; Result
0403A3             0026*    umul24_lp:
0403A3 29          0027*    	add	hl,hl
0403A4 EB          0028*    	ex	de,hl
0403A5 29          0029*    	add	hl,hl
0403A6 EB          0030*    	ex	de,hl
0403A7 30 01       0031*    	jr	nc,umul24_nc
0403A9 09          0032*    	add	hl,bc
0403AA             0033*    umul24_nc:
0403AA 3D          0034*    	dec	a
0403AB 20 F6       0035*    	jr	nz,umul24_lp
0403AD F1          0036*    	pop	af
0403AE C1          0037*    	pop	bc
0403AF D1          0038*    	pop	de
0403B0 C9          0039*    	ret
0403B1             0040*    
0403B1             0041*    
0403B1             0042*    ;------------------------------------------------------------------------
0403B1             0043*    ; udiv24
0403B1             0044*    ; Unsigned 24-bit division
0403B1             0045*    ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
0403B1             0046*    ;
0403B1             0047*    ; Uses AF BC DE HL
0403B1             0048*    ; Uses Restoring Division algorithm
0403B1             0049*    ;------------------------------------------------------------------------
0403B1             0050*    
0403B1             0051*    udiv24:
0403B1 E5          0052*    	push	hl
0403B2 C1          0053*    	pop		bc	;move dividend to BCU
0403B3 21 00 00 00 0054*    	ld		hl,0	;result
0403B7 A7          0055*    	and		a
0403B8 ED 52       0056*    	sbc		hl,de	;test for div by 0
0403BA C8          0057*    	ret		z		;it's zero, carry flag is clear
0403BB 19          0058*    	add		hl,de	;HL is 0 again
0403BC 3E 18       0059*    	ld		a,24	;number of loops through.
0403BE             0060*    udiv1:
0403BE C5          0061*    	push	bc	;complicated way of doing this because of lack of access to top bits
0403BF E3          0062*    	ex		(sp),hl
0403C0 37          0063*    	scf
0403C1 ED 6A       0064*    	adc	hl,hl
0403C3 E3          0065*    	ex	(sp),hl
0403C4 C1          0066*    	pop	bc		;we now have bc = (bc * 2) + 1
0403C5             0067*    
0403C5 ED 6A       0068*    	adc	hl,hl
0403C7 A7          0069*    	and	a		;is this the bug
0403C8 ED 52       0070*    	sbc	hl,de
0403CA 30 02       0071*    	jr	nc,udiv2
0403CC 19          0072*    	add	hl,de
0403CD             0073*    ;	dec	c
0403CD 0B          0074*    	dec	bc
0403CE             0075*    udiv2:
0403CE 3D          0076*    	dec	a
0403CF 20 ED       0077*    	jr	nz,udiv1
0403D1 37          0078*    	scf		;flag used for div0 error
0403D2 C5          0079*    	push	bc
0403D3 D1          0080*    	pop		de	;remainder
0403D4 C9          0081*    	ret
0403D5             0082*    
0403D5             0083*    
0403D5             0084*    
0403D5             0085*    ;------------------------------------------------------------------------
0403D5             0086*    ; neg24
0403D5             0087*    ; Returns: HLU = 0-HLU
0403D5             0088*    ; preserves all other registers
0403D5             0089*    ;------------------------------------------------------------------------
0403D5             0090*    neg24:
0403D5 D5          0091*    	push	de
0403D6 EB          0092*    	ex		de,hl
0403D7 21 00 00 00 0093*    	ld		hl,0
0403DB B7          0094*    	or		a
0403DC ED 52       0095*    	sbc		hl,de
0403DE D1          0096*    	pop		de
0403DF C9          0097*    	ret
0403E0             0098*    
0403E0             0099*    ;------------------------------------------------------------------------
0403E0             0100*    ; or_hlu_deu: 24 bit bitwise OR
0403E0             0101*    ; Returns: hlu = hlu OR deu
0403E0             0102*    ; preserves all other registers
0403E0             0103*    ;------------------------------------------------------------------------
0403E0             0104*    or_hlu_deu:
0403E0 22 69 04 04 0105*    	ld	(bitbuf1),hl
0403E4 ED 53 6C 04 0106*    	ld	(bitbuf2),de
       04          
0403E9 D5          0107*    	push	de	;preserve DEU
0403EA C5          0108*    	push	bc	;preserve BCU
0403EB 06 03       0109*    	ld		b,3
0403ED 21 69 04 04 0110*    	ld	hl,bitbuf1
0403F1 11 69 04 04 0111*    	ld	de,bitbuf1
0403F5             0112*    orloop_24:
0403F5 1A          0113*    	ld	a,(de)
0403F6 B6          0114*    	or	(hl)
0403F7 12          0115*    	ld	(de),a
0403F8 13          0116*    	inc	de
0403F9 23          0117*    	inc	hl
0403FA 10 F9       0118*    	djnz	orloop_24
0403FC 2A 6C 04 04 0119*    	ld	hl,(bitbuf2)
040400 C1          0120*    	pop		bc	;restore BC
040401 D1          0121*    	pop		de	;restore DE
040402             0122*    
040402             0123*    ;------------------------------------------------------------------------
040402             0124*    ; and_hlu_deu: 24 bit bitwise AND
040402             0125*    ; Returns: hlu = hlu AND deu
040402             0126*    ; preserves all other registers
040402             0127*    ;------------------------------------------------------------------------
040402             0128*    and_hlu_deu:
040402 22 69 04 04 0129*    	ld	(bitbuf1),hl
040406 ED 53 6C 04 0130*    	ld	(bitbuf2),de
       04          
04040B D5          0131*    	push	de	;preserve DEU
04040C C5          0132*    	push	bc	;preserve BCU
04040D 06 03       0133*    	ld		b,3
04040F 21 69 04 04 0134*    	ld	hl,bitbuf1
040413 11 69 04 04 0135*    	ld	de,bitbuf1
040417             0136*    andloop_24:
040417 1A          0137*    	ld	a,(de)
040418 A6          0138*    	and	(hl)
040419 12          0139*    	ld	(de),a
04041A 13          0140*    	inc	de
04041B 23          0141*    	inc	hl
04041C 10 F9       0142*    	djnz	andloop_24
04041E 2A 6C 04 04 0143*    	ld	hl,(bitbuf2)
040422 C1          0144*    	pop		bc	;restore BC
040423 D1          0145*    	pop		de	;restore DE
040424             0146*    
040424             0147*    ;------------------------------------------------------------------------
040424             0148*    ; xor_hlu_deu: 24 bit bitwise XOR
040424             0149*    ; Returns: hlu = hlu XOR deu
040424             0150*    ; preserves all other registers
040424             0151*    ;------------------------------------------------------------------------
040424             0152*    xor_hlu_deu:
040424 22 69 04 04 0153*    	ld	(bitbuf1),hl
040428 ED 53 6C 04 0154*    	ld	(bitbuf2),de
       04          
04042D D5          0155*    	push	de	;preserve DEU
04042E C5          0156*    	push	bc	;preserve BCU
04042F 06 03       0157*    	ld		b,3
040431 21 69 04 04 0158*    	ld	hl,bitbuf1
040435 11 69 04 04 0159*    	ld	de,bitbuf1
040439             0160*    xorloop_24:
040439 1A          0161*    	ld	a,(de)
04043A AE          0162*    	xor	(hl)
04043B 12          0163*    	ld	(de),a
04043C 13          0164*    	inc	de
04043D 23          0165*    	inc	hl
04043E 10 F9       0166*    	djnz	xorloop_24
040440 2A 6C 04 04 0167*    	ld	hl,(bitbuf2)
040444 C1          0168*    	pop		bc	;restore BC
040445 D1          0169*    	pop		de	;restore DE
040446             0170*    
040446             0171*    ;------------------------------------------------------------------------
040446             0172*    ; shl_hlu: 24 bit shift left hlu by a positions
040446             0173*    ; Returns: hlu = hlu << a
040446             0174*    ;		   a = 0
040446             0175*    ; NOTE: only considers a up to 16 bits.
040446             0176*    ; preserves all other registers
040446             0177*    ; modified by Brandon R. Gates to use a instead of de
040446             0178*    ;------------------------------------------------------------------------
040446             0179*    shl_hlu:
040446 B7          0180*    	or a
040447 C8          0181*    	ret		z		;we're done
040448 29          0182*    	add		hl,hl	;shift HLU left
040449 3D          0183*    	dec a
04044A 18 FA       0184*    	jr		shl_hlu
04044C             0185*    
04044C             0186*    ;------------------------------------------------------------------------
04044C             0187*    ; shr_hlu: 24 bit shift right hlu by a positions
04044C             0188*    ; Returns: hlu = hlu >> a
04044C             0189*    ;		   a = 0
04044C             0190*    ; NOTE: only considers a up to 16 bits.
04044C             0191*    ; preserves all other registers
04044C             0192*    ; modified by Brandon R. Gates to use a instead of de
04044C             0193*    ;------------------------------------------------------------------------
04044C             0194*    shr_hlu:
04044C 22 69 04 04 0195*    	ld		(bitbuf1),hl
040450 21 6B 04 04 0196*    	ld		hl,bitbuf1+2
040454             0197*    @shr_loop:
040454 B7          0198*    	or a
040455 28 0D       0199*    	jr		z,@shr_done		;we're done
040457             0200*    ;carry is clear from or instruction
040457 CB 1E       0201*    	rr		(hl)
040459 2B          0202*    	dec		hl
04045A CB 1E       0203*    	rr		(hl)
04045C 2B          0204*    	dec		hl
04045D CB 1E       0205*    	rr		(hl)
04045F 23          0206*    	inc		hl
040460 23          0207*    	inc		hl
040461 3D          0208*    	dec a
040462 18 F0       0209*    	jr		@shr_loop
040464             0210*    @shr_done:
040464 2A 69 04 04 0211*    	ld		hl,(bitbuf1)	;collect result
040468 C9          0212*    	ret
040469             0213*    
040469             0214*    ;------------------------------------------------------------------------
040469             0215*    ; Scratch area for calculations
040469             0216*    ;------------------------------------------------------------------------
040469 00 00 00    0217*    bitbuf1:	dw24	0	;bit manipulation buffer 1
04046C 00 00 00    0218*    bitbuf2:	dw24	0	;bit manipulation buffer 2
04046F             0219*    
04046F             0220*    ; -----------------------------------------------------------------------
04046F             0221*    ; Functions added by Brandon R. Gates
04046F             0222*    ; -----------------------------------------------------------------------
04046F             0223*    
04046F             0224*    ;------------------------------------------------------------------------
04046F             0225*    ; shr_hlu_div: Quick division by powers of two based on log2 of A
04046F             0226*    ;              Determines the LSB of A and shifts HLU accordingly.
04046F             0227*    ;              HLU = HLU >> LSB(A)
04046F             0228*    ; Returns: HLU = HLU >> LSB(A)
04046F             0229*    ; Destroys: af
04046F             0230*    ;------------------------------------------------------------------------
04046F             0231*    shr_hlu_log2a:
04046F B7          0232*    	or a    ; check for zero
040470 C8          0233*    	ret z   ; nothing to shift so we're done
040471 C5          0234*    	push 	bc ; preserve
040472 06 00       0235*    	ld		b,0 ; clear b
040474             0236*    @find_bit:
040474 0F          0237*    	rrca ; bit 0 to carry
040475 DA 7E 04 04 0238*    	jp c,@found_bit
040479 04          0239*    	inc b ; next bit
04047A C3 74 04 04 0240*    	jp @find_bit
04047E             0241*    @found_bit:
04047E 78          0242*    	ld a,b
04047F CD 4C 04 04 0243*    	call shr_hlu
040483 C1          0244*    	pop 	bc ; restore
040484 C9          0245*    	ret
040485             0246*    ; end shr_hlu_log2a
040485             0247*    
040485             0248*    ;------------------------------------------------------------------------
040485             0249*    ; shl_hlu_log2a: Quick multiplication by powers of two based on log2 of A
040485             0250*    ;                Determines the LSB of A and shifts HLU accordingly.
040485             0251*    ;                HLU = HLU << LSB(A)
040485             0252*    ; Returns: HLU = HLU << LSB(A)
040485             0253*    ; Destroys: af
040485             0254*    ;------------------------------------------------------------------------
040485             0255*    shl_hlu_log2a:
040485 B7          0256*    	or a    ; check for zero
040486 C8          0257*    	ret z   ; nothing to shift so we're done
040487 C5          0258*    	push 	bc ; preserve
040488 06 00       0259*    	ld		b,0 ; clear b
04048A             0260*    @find_bit:
04048A 0F          0261*    	rrca ; bit 0 to carry
04048B DA 94 04 04 0262*    	jp c,@found_bit
04048F 04          0263*    	inc b ; next bit
040490 C3 8A 04 04 0264*    	jp @find_bit
040494             0265*    @found_bit:
040494 78          0266*    	ld a,b
040495 CD 46 04 04 0267*    	call shl_hlu
040499 C1          0268*    	pop 	bc ; restore
04049A C9          0269*    	ret
04049B             0270*    ; end shl_hlu_log2a
04049B             0034         include "maths.inc"
04049B             0001*    ;------------------------------------------------------------------------
04049B             0002*    ; Scratch area for calculations
04049B             0003*    ;------------------------------------------------------------------------
04049B 00 00 00    0004*    scratch1: dw24 0 ;bit manipulation buffer 1
04049E 00 00 00    0005*    scratch2: dw24 0 ;bit manipulation buffer 2
0404A1             0006*    
0404A1             0007*    ; absolute value of hlu
0404A1             0008*    ; returns: abs(hlu), flags set according to the incoming sign of hlu:
0404A1             0009*    ;         s1,z0,pv0,n1,c0 if hlu was negative
0404A1             0010*    ;         s0,z1,pv0,n1,c0 if hlu was zero
0404A1             0011*    ;         s0,z0,pv0,n1,c0 if hlu was positive
0404A1             0012*    ; destroys: a
0404A1             0013*    hlu_abs:
0404A1 19          0014*        add hl,de
0404A2 B7          0015*        or a
0404A3 ED 52       0016*        sbc hl,de
0404A5 FA AA 04 04 0017*        jp m,@is_neg
0404A9 C9          0018*        ret ; hlu is positive or zero so we're done
0404AA             0019*    @is_neg:
0404AA F5          0020*        push af ; otherwise, save current flags for return
0404AB CD B1 04 04 0021*        call neg_hlu ; negate hlu
0404AF F1          0022*        pop af ; get back flags
0404B0 C9          0023*        ret
0404B1             0024*    
0404B1             0025*    ; flip the sign of hlu
0404B1             0026*    ; inputs: hlu
0404B1             0027*    ; returns: 0-hlu, flags set appropriately for the result:
0404B1             0028*    ;         s1,z0,pv0,n1,c1 if result is negative
0404B1             0029*    ;         s0,z1,pv0,n1,c0 if result is zero
0404B1             0030*    ;         s0,z0,pv0,n1,c1 if result is positive
0404B1             0031*    ; destroys a
0404B1             0032*    neg_hlu:
0404B1 D5          0033*        push de ; save de
0404B2 EB          0034*        ex de,hl ; put hl into de
0404B3 21 00 00 00 0035*        ld hl,0 ; clear hl
0404B7 AF          0036*        xor a ; clear carry
0404B8 ED 52       0037*        sbc hl,de ; 0-hlu = -hlu
0404BA D1          0038*        pop de ; get de back
0404BB C9          0039*        ret ; easy peasy
0404BC             0040*    
0404BC             0041*    ;------------------------------------------------------------------------
0404BC             0042*    ; divide hlu by 2, inspired by above
0404BC             0043*    ;------------------------------------------------------------------------
0404BC             0044*    hlu_div2:
0404BC 22 9B 04 04 0045*        ld (scratch1),hl
0404C0 21 9D 04 04 0046*        ld hl,scratch1+2
0404C4 CB 1E       0047*        rr (hl)
0404C6 2B          0048*        dec hl
0404C7 CB 1E       0049*        rr (hl)
0404C9 2B          0050*        dec hl
0404CA CB 1E       0051*        rr (hl)
0404CC 23          0052*        inc hl
0404CD 23          0053*        inc hl
0404CE 2A 9B 04 04 0054*        ld hl,(scratch1)
0404D2 C9          0055*        ret
0404D3             0056*    
0404D3             0057*    ; this is my little hack to divide by 16
0404D3             0058*    hlu_div16:
0404D3 AF          0059*        xor a
0404D4 29          0060*        add hl,hl
0404D5 17          0061*        rla
0404D6 29          0062*        add hl,hl
0404D7 17          0063*        rla
0404D8 29          0064*        add hl,hl
0404D9 17          0065*        rla
0404DA 29          0066*        add hl,hl
0404DB 17          0067*        rla
0404DC 22 E9 04 04 0068*        ld (@scratch),hl
0404E0 32 EC 04 04 0069*        ld (@scratch+3),a
0404E4 2A EA 04 04 0070*        ld hl,(@scratch+1)
0404E8 C9          0071*        ret
0404E9             0072*    @scratch: ds 4
0404ED             0073*    
0404ED             0074*    ; hlu signed division by 256
0404ED             0075*    ; returns: hlu / 256
0404ED             0076*    ; destroys: af
0404ED             0077*    hlu_sdiv256:
       FF FF FF FF 
0404ED AF          0078*        xor a ; assume hl is positive
0404EE 22 04 05 04 0079*        ld (@buffer),hl
0404F2             0080*        SIGN_HLU
                       M1 Args: none
0404F2 19          0001*M1      add hl,de ; 1 cycle
0404F3 B7          0002*M1      or a ; clear flags ; 1 cycle
0404F4 ED 52       0003*M1      sbc hl,de ; 2 cycles
0404F6             0004*M1      ; 4 cycles total
0404F6 F2 FB 04 04 0081*        jp p,@hl_pos
0404FA 3D          0082*        dec a
0404FB             0083*    @hl_pos:
0404FB 32 07 05 04 0084*        ld (@buffer+3),a
0404FF 2A 05 05 04 0085*        ld hl,(@buffer+1)
040503 C9          0086*        ret
040504             0087*    @buffer: ds 4
040508             0088*    
040508             0089*    ; hlu 1 byte right shift, unsigned
040508             0090*    ; returns: hlu / 256, fractional portion in a
040508             0091*    ; destroys: af
040508             0092*    hlu_udiv256:
       FF FF FF FF 
040508 AF          0093*        xor a
040509 32 1A 05 04 0094*        ld (@buffer+3),a
04050D 7D          0095*        ld a,l ; save the fractional portion
04050E 22 17 05 04 0096*        ld (@buffer),hl
040512 2A 18 05 04 0097*        ld hl,(@buffer+1)
040516 C9          0098*        ret
040517             0099*    @buffer: ds 4
04051B             0100*    
04051B             0101*    ; floor(value,n)
04051B             0102*    ; inputs: hl = value to floor, de = n
04051B             0103*    ; outputs: hl = value floored to n
04051B             0104*    ; destroys: af, hl, bc, de
04051B             0105*    hlu_floor:
       FF FF FF FF 
04051B D5          0106*        push de ; save n
04051C CD B1 03 04 0107*        call udiv24 ; de = quotient, hl = remainder
040520 E1          0108*        pop hl ; get n back (was de)
040521 CD 98 03 04 0109*        call umul24 ; hl = n * quotient
040525 C9          0110*        ret
040526             0111*    ; end hlu_floor
040526             0112*    
040526             0113*    ; ceil(value,n)
040526             0114*    ; inputs: hl = value to ceil, de = n
040526             0115*    ; outputs: hl = value ceiled to n
040526             0116*    ; destroys: af, hl, bc, de
040526             0117*    hlu_ceiling:
040526 D5          0118*        push de ; save n
040527 CD B1 03 04 0119*        call udiv24 ; de = quotient, hl = remainder
04052B             0120*        SIGN_HLU ; test remaider for zero
                       M1 Args: none
04052B 19          0001*M1      add hl,de ; 1 cycle
04052C B7          0002*M1      or a ; clear flags ; 1 cycle
04052D ED 52       0003*M1      sbc hl,de ; 2 cycles
04052F             0004*M1      ; 4 cycles total
04052F CA 34 05 04 0121*        jp z,@F ; if zero, nothing to add
040533 13          0122*        inc de ; add 1 to quotient for the ceiling
040534             0123*    @@:
040534 E1          0124*        pop hl ; get n back (was de)
040535 CD 98 03 04 0125*        call umul24 ; hl = n * quotient
040539 C9          0126*        ret
04053A             0127*    ; end hlu_ceiling
04053A             0128*    
04053A C9          0129*        ret
04053B             0130*    
04053B 00 00 00 00 0131*    add_bcd_arg1: db #00,#00,#00,#00
04053F 00 00 00 00 0132*    add_bcd_arg2: db #00,#00,#00,#00
040543             0133*    
040543             0134*    ; set bcd values in a scratch memory address from registers bcde
040543             0135*    ; input: hl; scratch address,bcde; 8-place bcd number
040543             0136*    ; destroys ; hl
040543             0137*    set_bcd:
040543 73          0138*        ld (hl),e
040544 23          0139*        inc hl
040545 72          0140*        ld (hl),d
040546 23          0141*        inc hl
040547 71          0142*        ld (hl),c
040548 23          0143*        inc hl
040549 70          0144*        ld (hl),b
04054A C9          0145*        ret
04054B             0146*    
04054B             0147*    ; load bcd values from a scratch memory address to bcde
04054B             0148*    ; input: hl; scratch address
04054B             0149*    ; output: bcde; 8-place bcd number
04054B             0150*    ; destroys: hl
04054B             0151*    get_bcd:
04054B 5E          0152*        ld e,(hl)
04054C 23          0153*        inc hl
04054D 56          0154*        ld d,(hl)
04054E 23          0155*        inc hl
04054F 4E          0156*        ld c,(hl)
040550 23          0157*        inc hl
040551 46          0158*        ld b,(hl)
040552 C9          0159*        ret
040553             0160*    
040553             0161*    ; BCD addition
040553             0162*    ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
040553             0163*    ;       a is the number of bytes holding each number (number of places/2)
040553             0164*    ; outputs: (hl) + (de) --> (hl)
040553             0165*    ; destroys: a,b,de,hl
040553             0166*    add_bcd:
040553 47          0167*        ld b,a ; loop counter
040554 AF          0168*        xor a ; reset a, clear carry flag
040555             0169*    adcec:
040555 1A          0170*        ld a,(de) ; addend to acc
040556 8E          0171*        adc a,(hl) ; add (hl) to acc
040557 27          0172*        daa ; adjust result to bcd
040558 77          0173*        ld (hl),a ; store result
040559 23          0174*        inc hl ; advance memory pointers
04055A 13          0175*        inc de
04055B 10 F8       0176*        djnz adcec ; loop until b == 0
04055D C9          0177*        ret
04055E             0178*    
04055E             0179*    ; BCD subtraction
04055E             0180*    ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04055E             0181*    ;       a is the number of bytes holding each number (number of places/2)
04055E             0182*    ; outputs: (hl) - (de) --> (hl)
04055E             0183*    ; destroys: a,b,de,hl
04055E             0184*    sub_bcd:
04055E 47          0185*        ld b,a ; loop counter
04055F AF          0186*        xor a ; reset a,clear carry flag
040560             0187*    subdec:
040560 1A          0188*        ld a,(de) ; subtrahend to acc
040561 9E          0189*        sbc a,(hl) ; subtract (hl) from acc
040562 27          0190*        daa ; adjust result to bcd
040563 77          0191*        ld (hl),a ; store result
040564 23          0192*        inc hl ; advance memory pointers
040565 13          0193*        inc de
040566 10 F8       0194*        djnz subdec ; loop until b == 0
040568 C9          0195*        ret
040569             0196*    
040569             0197*    ; http://www.z80.info/pseudo-random.txt
040569             0198*    rand_8:
040569 C5          0199*        push bc
04056A 3A 7D 05 04 0200*        ld a,(r_seed)
04056E 4F          0201*        ld c,a
04056F             0202*    
04056F 0F          0203*        rrca ; multiply by 32
040570 0F          0204*        rrca
040571 0F          0205*        rrca
040572 EE 1F       0206*        xor 0x1f
040574             0207*    
040574 81          0208*        add a,c
040575 DE FF       0209*        sbc a,255 ; carry
040577             0210*    
040577 32 7D 05 04 0211*        ld (r_seed),a
04057B C1          0212*        pop bc
04057C C9          0213*        ret
04057D 50          0214*    r_seed: defb $50
04057E             0215*    
04057E             0216*    ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
04057E             0217*    prng24:
04057E             0218*    ;;Expects ADL mode.
04057E             0219*    ;;Output: HL
04057E             0220*    ;;50cc
04057E             0221*    ;;33 bytes
04057E             0222*    ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
04057E ED 5B 9F 05 0223*        ld de,(seed1)
       04          
040583 B7          0224*        or a
040584 ED 62       0225*        sbc hl,hl
040586 19          0226*        add hl,de
040587 29          0227*        add hl,hl
040588 29          0228*        add hl,hl
040589 2C          0229*        inc l
04058A 19          0230*        add hl,de
04058B 22 9F 05 04 0231*        ld (seed1),hl
04058F 2A A2 05 04 0232*        ld hl,(seed2)
040593 29          0233*        add hl,hl
040594 9F          0234*        sbc a,a
040595 E6 1B       0235*        and %00011011
040597 AD          0236*        xor l
040598 6F          0237*        ld l,a
040599 22 A2 05 04 0238*        ld (seed2),hl
04059D 19          0239*        add hl,de
04059E C9          0240*        ret
04059F 00 00 00    0241*    seed1: dl 0
0405A2 00 00 00    0242*    seed2: dl 0
0405A5             0243*    
0405A5             0244*    
0405A5             0245*    ; https://map.grauw.nl/sources/external/z80bits.html#2.1
0405A5             0246*    ; h / l -> h, remain a
0405A5             0247*    ; 2.1 Restoring 8-bit / 8-bit Unsigned
0405A5             0248*    ; Input: H = Dividend, L = Divisor, A = 0
0405A5             0249*    ; Output: H = Quotient, A = Remainder, L = Divisor (unchanged)
0405A5             0250*    udiv8:
0405A5 AF          0251*        xor a
0405A6 06 08       0252*        ld b,8
0405A8             0253*    @loop:
0405A8 CB 24       0254*        sla h
0405AA 17          0255*        rla
0405AB BD          0256*        cp l
0405AC 38 02       0257*        jr c,$+4
0405AE 95          0258*        sub l
0405AF 24          0259*        inc h
0405B0 10 F6       0260*        djnz @loop
0405B2 C9          0261*        ret
0405B3             0262*    
0405B3             0263*    ; https://www.omnimaga.org/asm-language/(z80)-32-bit-by-16-bits-division-and-32-bit-square-root/msg406903/#msg406903
0405B3             0264*    ; This divides HLIX by BC
0405B3             0265*    ; The result is stored in HLIX, the remainder in DE
0405B3             0266*    ; BC is unmodified
0405B3             0267*    ; A is 0
0405B3             0268*    udiv3216:
0405B3 11 00 00 00 0269*        ld de,0		; 10
0405B7 3E 20       0270*        ld a,32		; 7
0405B9             0271*    @loop:
0405B9 52 DD 29    0272*        add.s ix,ix		; 15
0405BC 52 ED 6A    0273*        adc.s hl,hl		; 15
0405BF EB          0274*        ex de,hl		; 4
0405C0 52 ED 6A    0275*        adc.s hl,hl		; 15
0405C3 B7          0276*        or a			; 4
0405C4 52 ED 42    0277*        sbc.s hl,bc		; 15
0405C7 52 DD 23    0278*        inc.s ix		; 10
0405CA 30 05       0279*        jr nc,@cansub		; 12/7
0405CC 52 09       0280*        add.s hl,bc		; 11
0405CE 52 DD 2B    0281*        dec.s ix		; 10
0405D1             0282*    @cansub:
0405D1 EB          0283*        ex de,hl		; 4
0405D2 3D          0284*        dec a		; 4
0405D3 20 E4       0285*        jr nz,@loop	; 12/7
0405D5 C9          0286*        ret			; 10
0405D6             0287*    ; end udiv3216
0405D6             0288*    
0405D6             0289*    ; https://discord.com/channels/1158535358624039014/1282290921815408681/1329274504022720512
0405D6             0290*    ; calc84maniac's 32-bit by 23-bit division routine
0405D6             0291*    ; This divides AUIX by UDE (maximum 23 bits)
0405D6             0292*    ; The result is stored in AUIX, the remainder in UHL
0405D6             0293*    ; UDE, C are unmodified
0405D6             0294*    ; B is 0
0405D6             0295*    udiv3223:
0405D6 B7          0296*        or a,a         ; 1
0405D7 ED 62       0297*        sbc hl,hl      ; 2
0405D9 06 20       0298*        ld b,32        ; 2
0405DB             0299*    @loop:
0405DB DD 29       0300*        add ix,ix      ; 2
0405DD 8F          0301*        adc a,a        ; 1
0405DE ED 6A       0302*        adc hl,hl      ; 2
0405E0 ED 52       0303*        sbc hl,de      ; 2
0405E2 DD 23       0304*        inc ix         ; 2
0405E4 30 03       0305*        jr nc,@cansub  ; 2/4
0405E6 19          0306*        add hl,de      ; 1
0405E7 DD 2B       0307*        dec ix         ; 2
0405E9             0308*    @cansub:
0405E9 10 F0       0309*        djnz @loop     ; 2/4
0405EB C9          0310*        ret            ; 10
0405EC             0311*    ; end udiv3223
0405EC             0312*    
0405EC             0313*    ; calc84maniac https://discord.com/channels/1158535358624039014/1282290921815408681/1330991583369101322
0405EC             0314*    ; add uhl to signed integer a
0405EC             0315*    add_uhl_a_signed:
0405EC D5          0316*        push de    ; 4 cycles
0405ED EB          0317*        ex de, hl  ; 1 cycle  UDE = UHL
0405EE 07          0318*        rlca       ; 1 cycle  CF = signbit(A)
0405EF ED 62       0319*        sbc hl, hl ; 2 cycles UHL = -signbit(A)
0405F1 0F          0320*        rrca       ; 1 cycle  Restore A
0405F2 6F          0321*        ld l, a    ; 1 cycle  UHL = signext(A)
0405F3 19          0322*        add hl, de ; 1 cycle  UHL = UDE + signext(A)
0405F4 D1          0323*        pop de     ; 4 cycles
0405F5             0324*                   ; 15 cycles total
0405F5 C9          0325*        ret
0405F6             0326*    ; end hlu_add_a_signed
0405F6             0035         include "font.inc"
0405F6             0001*    Lat2_VGA8_8x8: equ 64016
0405F6             0002*    font_data:
0405F6             0003*        ; incbin "../assets/fonts/Lat2-VGA8_8x8.font"
0405F6             0004*        include "../fonts/Lat2-VGA8_8x8.font.inc"
0405F6             0001**   ; 0 NULL
0405F6 00          0002**       db %00000000
0405F7 00          0003**       db %00000000
0405F8 78          0004**       db %01111000
0405F9 0C          0005**       db %00001100
0405FA 7C          0006**       db %01111100
0405FB CC          0007**       db %11001100
0405FC 76          0008**       db %01110110
0405FD 0F          0009**       db %00001111
0405FE             0010**   
0405FE             0011**   ; 1 START_OF_HEADING
0405FE 3C          0012**       db %00111100
0405FF 42          0013**       db %01000010
040600 B9          0014**       db %10111001
040601 A5          0015**       db %10100101
040602 B9          0016**       db %10111001
040603 A5          0017**       db %10100101
040604 42          0018**       db %01000010
040605 3C          0019**       db %00111100
040606             0020**   
040606             0021**   ; 2 START_OF_TEXT
040606 00          0022**       db %00000000
040607 00          0023**       db %00000000
040608 18          0024**       db %00011000
040609 3C          0025**       db %00111100
04060A 66          0026**       db %01100110
04060B FF          0027**       db %11111111
04060C 00          0028**       db %00000000
04060D 00          0029**       db %00000000
04060E             0030**   
04060E             0031**   ; 3 END_OF_TEXT
04060E 7E          0032**       db %01111110
04060F 81          0033**       db %10000001
040610 A5          0034**       db %10100101
040611 81          0035**       db %10000001
040612 BD          0036**       db %10111101
040613 99          0037**       db %10011001
040614 81          0038**       db %10000001
040615 7E          0039**       db %01111110
040616             0040**   
040616             0041**   ; 4 END_OF_TRANSMISSION
040616 10          0042**       db %00010000
040617 38          0043**       db %00111000
040618 7C          0044**       db %01111100
040619 FE          0045**       db %11111110
04061A 7C          0046**       db %01111100
04061B 38          0047**       db %00111000
04061C 10          0048**       db %00010000
04061D 00          0049**       db %00000000
04061E             0050**   
04061E             0051**   ; 5 ENQUIRY
04061E 3C          0052**       db %00111100
04061F 7E          0053**       db %01111110
040620 DB          0054**       db %11011011
040621 FF          0055**       db %11111111
040622 C3          0056**       db %11000011
040623 7E          0057**       db %01111110
040624 3C          0058**       db %00111100
040625 00          0059**       db %00000000
040626             0060**   
040626             0061**   ; 6 ACKNOWLEDGE
040626 10          0062**       db %00010000
040627 38          0063**       db %00111000
040628 7C          0064**       db %01111100
040629 FE          0065**       db %11111110
04062A FE          0066**       db %11111110
04062B 10          0067**       db %00010000
04062C 38          0068**       db %00111000
04062D 00          0069**       db %00000000
04062E             0070**   
04062E             0071**   ; 7 BELL
04062E 00          0072**       db %00000000
04062F 00          0073**       db %00000000
040630 18          0074**       db %00011000
040631 3C          0075**       db %00111100
040632 18          0076**       db %00011000
040633 00          0077**       db %00000000
040634 00          0078**       db %00000000
040635 00          0079**       db %00000000
040636             0080**   
040636             0081**   ; 8 BACKSPACE
040636 00          0082**       db %00000000
040637 3C          0083**       db %00111100
040638 18          0084**       db %00011000
040639 FF          0085**       db %11111111
04063A FF          0086**       db %11111111
04063B 08          0087**       db %00001000
04063C 18          0088**       db %00011000
04063D 00          0089**       db %00000000
04063E             0090**   
04063E             0091**   ; 9 HORIZONTAL_TAB
04063E 00          0092**       db %00000000
04063F EE          0093**       db %11101110
040640 FE          0094**       db %11111110
040641 FE          0095**       db %11111110
040642 7C          0096**       db %01111100
040643 38          0097**       db %00111000
040644 10          0098**       db %00010000
040645 00          0099**       db %00000000
040646             0100**   
040646             0101**   ; 10 LINE_FEED
040646 00          0102**       db %00000000
040647 3C          0103**       db %00111100
040648 42          0104**       db %01000010
040649 81          0105**       db %10000001
04064A 81          0106**       db %10000001
04064B 42          0107**       db %01000010
04064C 3C          0108**       db %00111100
04064D 00          0109**       db %00000000
04064E             0110**   
04064E             0111**   ; 11 VERTICAL_TAB
04064E 1F          0112**       db %00011111
04064F 07          0113**       db %00000111
040650 0D          0114**       db %00001101
040651 7C          0115**       db %01111100
040652 C6          0116**       db %11000110
040653 C6          0117**       db %11000110
040654 7C          0118**       db %01111100
040655 00          0119**       db %00000000
040656             0120**   
040656             0121**   ; 12 FORM_FEED
040656 00          0122**       db %00000000
040657 7E          0123**       db %01111110
040658 C3          0124**       db %11000011
040659 C3          0125**       db %11000011
04065A 7E          0126**       db %01111110
04065B 18          0127**       db %00011000
04065C 7E          0128**       db %01111110
04065D 18          0129**       db %00011000
04065E             0130**   
04065E             0131**   ; 13 CARRIAGE_RETURN
04065E 04          0132**       db %00000100
04065F 06          0133**       db %00000110
040660 07          0134**       db %00000111
040661 04          0135**       db %00000100
040662 04          0136**       db %00000100
040663 FC          0137**       db %11111100
040664 F8          0138**       db %11111000
040665 00          0139**       db %00000000
040666             0140**   
040666             0141**   ; 14 SHIFT_OUT
040666 0C          0142**       db %00001100
040667 0A          0143**       db %00001010
040668 0D          0144**       db %00001101
040669 0B          0145**       db %00001011
04066A F9          0146**       db %11111001
04066B F9          0147**       db %11111001
04066C 1F          0148**       db %00011111
04066D 1F          0149**       db %00011111
04066E             0150**   
04066E             0151**   ; 15 SHIFT_IN
04066E 00          0152**       db %00000000
04066F 92          0153**       db %10010010
040670 7C          0154**       db %01111100
040671 44          0155**       db %01000100
040672 C6          0156**       db %11000110
040673 7C          0157**       db %01111100
040674 92          0158**       db %10010010
040675 00          0159**       db %00000000
040676             0160**   
040676             0161**   ; 16 DATA_LINK_ESCAPE
040676 FF          0162**       db %11111111
040677 FF          0163**       db %11111111
040678 E7          0164**       db %11100111
040679 C3          0165**       db %11000011
04067A E7          0166**       db %11100111
04067B FF          0167**       db %11111111
04067C FF          0168**       db %11111111
04067D FF          0169**       db %11111111
04067E             0170**   
04067E             0171**   ; 17 DEVICE_CONTROL_1
04067E FF          0172**       db %11111111
04067F C3          0173**       db %11000011
040680 BD          0174**       db %10111101
040681 7E          0175**       db %01111110
040682 7E          0176**       db %01111110
040683 BD          0177**       db %10111101
040684 C3          0178**       db %11000011
040685 FF          0179**       db %11111111
040686             0180**   
040686             0181**   ; 18 DEVICE_CONTROL_2
040686 18          0182**       db %00011000
040687 3C          0183**       db %00111100
040688 7E          0184**       db %01111110
040689 18          0185**       db %00011000
04068A 18          0186**       db %00011000
04068B 7E          0187**       db %01111110
04068C 3C          0188**       db %00111100
04068D 18          0189**       db %00011000
04068E             0190**   
04068E             0191**   ; 19 DEVICE_CONTROL_3
04068E 66          0192**       db %01100110
04068F 66          0193**       db %01100110
040690 66          0194**       db %01100110
040691 66          0195**       db %01100110
040692 66          0196**       db %01100110
040693 00          0197**       db %00000000
040694 66          0198**       db %01100110
040695 00          0199**       db %00000000
040696             0200**   
040696             0201**   ; 20 DEVICE_CONTROL_4
040696 7F          0202**       db %01111111
040697 DB          0203**       db %11011011
040698 7B          0204**       db %01111011
040699 3B          0205**       db %00111011
04069A 1B          0206**       db %00011011
04069B 1B          0207**       db %00011011
04069C 1B          0208**       db %00011011
04069D 00          0209**       db %00000000
04069E             0210**   
04069E             0211**   ; 21 NEGATIVE_ACKNOWLEDGE
04069E 3E          0212**       db %00111110
04069F 61          0213**       db %01100001
0406A0 3C          0214**       db %00111100
0406A1 66          0215**       db %01100110
0406A2 66          0216**       db %01100110
0406A3 3C          0217**       db %00111100
0406A4 86          0218**       db %10000110
0406A5 7C          0219**       db %01111100
0406A6             0220**   
0406A6             0221**   ; 22 SYNCHRONOUS_IDLE
0406A6 38          0222**       db %00111000
0406A7 64          0223**       db %01100100
0406A8 F0          0224**       db %11110000
0406A9 60          0225**       db %01100000
0406AA F0          0226**       db %11110000
0406AB 64          0227**       db %01100100
0406AC 38          0228**       db %00111000
0406AD 00          0229**       db %00000000
0406AE             0230**   
0406AE             0231**   ; 23 END_OF_TRANSMISSION_BLOCK
0406AE 18          0232**       db %00011000
0406AF 7E          0233**       db %01111110
0406B0 18          0234**       db %00011000
0406B1 18          0235**       db %00011000
0406B2 7E          0236**       db %01111110
0406B3 18          0237**       db %00011000
0406B4 00          0238**       db %00000000
0406B5 FF          0239**       db %11111111
0406B6             0240**   
0406B6             0241**   ; 24 CANCEL
0406B6 18          0242**       db %00011000
0406B7 3C          0243**       db %00111100
0406B8 7E          0244**       db %01111110
0406B9 18          0245**       db %00011000
0406BA 18          0246**       db %00011000
0406BB 18          0247**       db %00011000
0406BC 18          0248**       db %00011000
0406BD 00          0249**       db %00000000
0406BE             0250**   
0406BE             0251**   ; 25 END_OF_MEDIUM
0406BE 18          0252**       db %00011000
0406BF 18          0253**       db %00011000
0406C0 18          0254**       db %00011000
0406C1 18          0255**       db %00011000
0406C2 7E          0256**       db %01111110
0406C3 3C          0257**       db %00111100
0406C4 18          0258**       db %00011000
0406C5 00          0259**       db %00000000
0406C6             0260**   
0406C6             0261**   ; 26 SUBSTITUTE
0406C6 00          0262**       db %00000000
0406C7 18          0263**       db %00011000
0406C8 0C          0264**       db %00001100
0406C9 FE          0265**       db %11111110
0406CA 0C          0266**       db %00001100
0406CB 18          0267**       db %00011000
0406CC 00          0268**       db %00000000
0406CD 00          0269**       db %00000000
0406CE             0270**   
0406CE             0271**   ; 27 ESCAPE
0406CE 00          0272**       db %00000000
0406CF 30          0273**       db %00110000
0406D0 60          0274**       db %01100000
0406D1 FE          0275**       db %11111110
0406D2 60          0276**       db %01100000
0406D3 30          0277**       db %00110000
0406D4 00          0278**       db %00000000
0406D5 00          0279**       db %00000000
0406D6             0280**   
0406D6             0281**   ; 28 FILE_SEPARATOR
0406D6 00          0282**       db %00000000
0406D7 00          0283**       db %00000000
0406D8 00          0284**       db %00000000
0406D9 C0          0285**       db %11000000
0406DA C0          0286**       db %11000000
0406DB C0          0287**       db %11000000
0406DC FF          0288**       db %11111111
0406DD 00          0289**       db %00000000
0406DE             0290**   
0406DE             0291**   ; 29 GROUP_SEPARATOR
0406DE 00          0292**       db %00000000
0406DF 24          0293**       db %00100100
0406E0 66          0294**       db %01100110
0406E1 FF          0295**       db %11111111
0406E2 66          0296**       db %01100110
0406E3 24          0297**       db %00100100
0406E4 00          0298**       db %00000000
0406E5 00          0299**       db %00000000
0406E6             0300**   
0406E6             0301**   ; 30 RECORD_SEPARATOR
0406E6 48          0302**       db %01001000
0406E7 78          0303**       db %01111000
0406E8 84          0304**       db %10000100
0406E9 60          0305**       db %01100000
0406EA 18          0306**       db %00011000
0406EB 84          0307**       db %10000100
0406EC 78          0308**       db %01111000
0406ED 00          0309**       db %00000000
0406EE             0310**   
0406EE             0311**   ; 31 UNIT_SEPARATOR
0406EE 78          0312**       db %01111000
0406EF 00          0313**       db %00000000
0406F0 7C          0314**       db %01111100
0406F1 C0          0315**       db %11000000
0406F2 78          0316**       db %01111000
0406F3 0C          0317**       db %00001100
0406F4 F8          0318**       db %11111000
0406F5 00          0319**       db %00000000
0406F6             0320**   
0406F6             0321**   ; 32
0406F6 00          0322**       db %00000000
0406F7 00          0323**       db %00000000
0406F8 00          0324**       db %00000000
0406F9 00          0325**       db %00000000
0406FA 00          0326**       db %00000000
0406FB 00          0327**       db %00000000
0406FC 00          0328**       db %00000000
0406FD 00          0329**       db %00000000
0406FE             0330**   
0406FE             0331**   ; 33 !
0406FE 30          0332**       db %00110000
0406FF 78          0333**       db %01111000
040700 78          0334**       db %01111000
040701 30          0335**       db %00110000
040702 30          0336**       db %00110000
040703 00          0337**       db %00000000
040704 30          0338**       db %00110000
040705 00          0339**       db %00000000
040706             0340**   
040706             0341**   ; 34 "
040706 6C          0342**       db %01101100
040707 6C          0343**       db %01101100
040708 00          0344**       db %00000000
040709 00          0345**       db %00000000
04070A 00          0346**       db %00000000
04070B 00          0347**       db %00000000
04070C 00          0348**       db %00000000
04070D 00          0349**       db %00000000
04070E             0350**   
04070E             0351**   ; 35 #
04070E 6C          0352**       db %01101100
04070F 6C          0353**       db %01101100
040710 FE          0354**       db %11111110
040711 6C          0355**       db %01101100
040712 FE          0356**       db %11111110
040713 6C          0357**       db %01101100
040714 6C          0358**       db %01101100
040715 00          0359**       db %00000000
040716             0360**   
040716             0361**   ; 36 $
040716 10          0362**       db %00010000
040717 7E          0363**       db %01111110
040718 90          0364**       db %10010000
040719 7C          0365**       db %01111100
04071A 12          0366**       db %00010010
04071B FC          0367**       db %11111100
04071C 10          0368**       db %00010000
04071D 00          0369**       db %00000000
04071E             0370**   
04071E             0371**   ; 37 %
04071E 00          0372**       db %00000000
04071F C6          0373**       db %11000110
040720 CC          0374**       db %11001100
040721 18          0375**       db %00011000
040722 30          0376**       db %00110000
040723 66          0377**       db %01100110
040724 C6          0378**       db %11000110
040725 00          0379**       db %00000000
040726             0380**   
040726             0381**   ; 38 &
040726 38          0382**       db %00111000
040727 6C          0383**       db %01101100
040728 38          0384**       db %00111000
040729 76          0385**       db %01110110
04072A DC          0386**       db %11011100
04072B CC          0387**       db %11001100
04072C 76          0388**       db %01110110
04072D 00          0389**       db %00000000
04072E             0390**   
04072E             0391**   ; 39 '
04072E 30          0392**       db %00110000
04072F 30          0393**       db %00110000
040730 60          0394**       db %01100000
040731 00          0395**       db %00000000
040732 00          0396**       db %00000000
040733 00          0397**       db %00000000
040734 00          0398**       db %00000000
040735 00          0399**       db %00000000
040736             0400**   
040736             0401**   ; 40 (
040736 18          0402**       db %00011000
040737 30          0403**       db %00110000
040738 60          0404**       db %01100000
040739 60          0405**       db %01100000
04073A 60          0406**       db %01100000
04073B 30          0407**       db %00110000
04073C 18          0408**       db %00011000
04073D 00          0409**       db %00000000
04073E             0410**   
04073E             0411**   ; 41 )
04073E 60          0412**       db %01100000
04073F 30          0413**       db %00110000
040740 18          0414**       db %00011000
040741 18          0415**       db %00011000
040742 18          0416**       db %00011000
040743 30          0417**       db %00110000
040744 60          0418**       db %01100000
040745 00          0419**       db %00000000
040746             0420**   
040746             0421**   ; 42 *
040746 00          0422**       db %00000000
040747 66          0423**       db %01100110
040748 3C          0424**       db %00111100
040749 FF          0425**       db %11111111
04074A 3C          0426**       db %00111100
04074B 66          0427**       db %01100110
04074C 00          0428**       db %00000000
04074D 00          0429**       db %00000000
04074E             0430**   
04074E             0431**   ; 43 +
04074E 00          0432**       db %00000000
04074F 30          0433**       db %00110000
040750 30          0434**       db %00110000
040751 FC          0435**       db %11111100
040752 30          0436**       db %00110000
040753 30          0437**       db %00110000
040754 00          0438**       db %00000000
040755 00          0439**       db %00000000
040756             0440**   
040756             0441**   ; 44 ,
040756 00          0442**       db %00000000
040757 00          0443**       db %00000000
040758 00          0444**       db %00000000
040759 00          0445**       db %00000000
04075A 00          0446**       db %00000000
04075B 30          0447**       db %00110000
04075C 30          0448**       db %00110000
04075D 60          0449**       db %01100000
04075E             0450**   
04075E             0451**   ; 45 -
04075E 00          0452**       db %00000000
04075F 00          0453**       db %00000000
040760 00          0454**       db %00000000
040761 FC          0455**       db %11111100
040762 00          0456**       db %00000000
040763 00          0457**       db %00000000
040764 00          0458**       db %00000000
040765 00          0459**       db %00000000
040766             0460**   
040766             0461**   ; 46 .
040766 00          0462**       db %00000000
040767 00          0463**       db %00000000
040768 00          0464**       db %00000000
040769 00          0465**       db %00000000
04076A 00          0466**       db %00000000
04076B 30          0467**       db %00110000
04076C 30          0468**       db %00110000
04076D 00          0469**       db %00000000
04076E             0470**   
04076E             0471**   ; 47 /
04076E 00          0472**       db %00000000
04076F 06          0473**       db %00000110
040770 0C          0474**       db %00001100
040771 18          0475**       db %00011000
040772 30          0476**       db %00110000
040773 60          0477**       db %01100000
040774 C0          0478**       db %11000000
040775 00          0479**       db %00000000
040776             0480**   
040776             0481**   ; 48 0
040776 7C          0482**       db %01111100
040777 C6          0483**       db %11000110
040778 C6          0484**       db %11000110
040779 D6          0485**       db %11010110
04077A C6          0486**       db %11000110
04077B C6          0487**       db %11000110
04077C 7C          0488**       db %01111100
04077D 00          0489**       db %00000000
04077E             0490**   
04077E             0491**   ; 49 1
04077E 30          0492**       db %00110000
04077F 70          0493**       db %01110000
040780 30          0494**       db %00110000
040781 30          0495**       db %00110000
040782 30          0496**       db %00110000
040783 30          0497**       db %00110000
040784 FC          0498**       db %11111100
040785 00          0499**       db %00000000
040786             0500**   
040786             0501**   ; 50 2
040786 78          0502**       db %01111000
040787 CC          0503**       db %11001100
040788 0C          0504**       db %00001100
040789 38          0505**       db %00111000
04078A 60          0506**       db %01100000
04078B CC          0507**       db %11001100
04078C FC          0508**       db %11111100
04078D 00          0509**       db %00000000
04078E             0510**   
04078E             0511**   ; 51 3
04078E 78          0512**       db %01111000
04078F CC          0513**       db %11001100
040790 0C          0514**       db %00001100
040791 38          0515**       db %00111000
040792 0C          0516**       db %00001100
040793 CC          0517**       db %11001100
040794 78          0518**       db %01111000
040795 00          0519**       db %00000000
040796             0520**   
040796             0521**   ; 52 4
040796 1C          0522**       db %00011100
040797 3C          0523**       db %00111100
040798 6C          0524**       db %01101100
040799 CC          0525**       db %11001100
04079A FE          0526**       db %11111110
04079B 0C          0527**       db %00001100
04079C 1E          0528**       db %00011110
04079D 00          0529**       db %00000000
04079E             0530**   
04079E             0531**   ; 53 5
04079E FC          0532**       db %11111100
04079F C0          0533**       db %11000000
0407A0 F8          0534**       db %11111000
0407A1 0C          0535**       db %00001100
0407A2 0C          0536**       db %00001100
0407A3 CC          0537**       db %11001100
0407A4 78          0538**       db %01111000
0407A5 00          0539**       db %00000000
0407A6             0540**   
0407A6             0541**   ; 54 6
0407A6 38          0542**       db %00111000
0407A7 60          0543**       db %01100000
0407A8 C0          0544**       db %11000000
0407A9 F8          0545**       db %11111000
0407AA CC          0546**       db %11001100
0407AB CC          0547**       db %11001100
0407AC 78          0548**       db %01111000
0407AD 00          0549**       db %00000000
0407AE             0550**   
0407AE             0551**   ; 55 7
0407AE FC          0552**       db %11111100
0407AF CC          0553**       db %11001100
0407B0 0C          0554**       db %00001100
0407B1 18          0555**       db %00011000
0407B2 30          0556**       db %00110000
0407B3 30          0557**       db %00110000
0407B4 30          0558**       db %00110000
0407B5 00          0559**       db %00000000
0407B6             0560**   
0407B6             0561**   ; 56 8
0407B6 78          0562**       db %01111000
0407B7 CC          0563**       db %11001100
0407B8 CC          0564**       db %11001100
0407B9 78          0565**       db %01111000
0407BA CC          0566**       db %11001100
0407BB CC          0567**       db %11001100
0407BC 78          0568**       db %01111000
0407BD 00          0569**       db %00000000
0407BE             0570**   
0407BE             0571**   ; 57 9
0407BE 78          0572**       db %01111000
0407BF CC          0573**       db %11001100
0407C0 CC          0574**       db %11001100
0407C1 7C          0575**       db %01111100
0407C2 0C          0576**       db %00001100
0407C3 18          0577**       db %00011000
0407C4 70          0578**       db %01110000
0407C5 00          0579**       db %00000000
0407C6             0580**   
0407C6             0581**   ; 58 :
0407C6 00          0582**       db %00000000
0407C7 30          0583**       db %00110000
0407C8 30          0584**       db %00110000
0407C9 00          0585**       db %00000000
0407CA 00          0586**       db %00000000
0407CB 30          0587**       db %00110000
0407CC 30          0588**       db %00110000
0407CD 00          0589**       db %00000000
0407CE             0590**   
0407CE             0591**   ; 59 ;
0407CE 00          0592**       db %00000000
0407CF 30          0593**       db %00110000
0407D0 30          0594**       db %00110000
0407D1 00          0595**       db %00000000
0407D2 00          0596**       db %00000000
0407D3 30          0597**       db %00110000
0407D4 30          0598**       db %00110000
0407D5 60          0599**       db %01100000
0407D6             0600**   
0407D6             0601**   ; 60 <
0407D6 18          0602**       db %00011000
0407D7 30          0603**       db %00110000
0407D8 60          0604**       db %01100000
0407D9 C0          0605**       db %11000000
0407DA 60          0606**       db %01100000
0407DB 30          0607**       db %00110000
0407DC 18          0608**       db %00011000
0407DD 00          0609**       db %00000000
0407DE             0610**   
0407DE             0611**   ; 61 =
0407DE 00          0612**       db %00000000
0407DF 00          0613**       db %00000000
0407E0 FC          0614**       db %11111100
0407E1 00          0615**       db %00000000
0407E2 00          0616**       db %00000000
0407E3 FC          0617**       db %11111100
0407E4 00          0618**       db %00000000
0407E5 00          0619**       db %00000000
0407E6             0620**   
0407E6             0621**   ; 62 >
0407E6 60          0622**       db %01100000
0407E7 30          0623**       db %00110000
0407E8 18          0624**       db %00011000
0407E9 0C          0625**       db %00001100
0407EA 18          0626**       db %00011000
0407EB 30          0627**       db %00110000
0407EC 60          0628**       db %01100000
0407ED 00          0629**       db %00000000
0407EE             0630**   
0407EE             0631**   ; 63 ?
0407EE 78          0632**       db %01111000
0407EF CC          0633**       db %11001100
0407F0 0C          0634**       db %00001100
0407F1 18          0635**       db %00011000
0407F2 30          0636**       db %00110000
0407F3 00          0637**       db %00000000
0407F4 30          0638**       db %00110000
0407F5 00          0639**       db %00000000
0407F6             0640**   
0407F6             0641**   ; 64 @
0407F6 7C          0642**       db %01111100
0407F7 C6          0643**       db %11000110
0407F8 DE          0644**       db %11011110
0407F9 DE          0645**       db %11011110
0407FA DE          0646**       db %11011110
0407FB C0          0647**       db %11000000
0407FC 78          0648**       db %01111000
0407FD 00          0649**       db %00000000
0407FE             0650**   
0407FE             0651**   ; 65 A
0407FE 30          0652**       db %00110000
0407FF 78          0653**       db %01111000
040800 CC          0654**       db %11001100
040801 CC          0655**       db %11001100
040802 FC          0656**       db %11111100
040803 CC          0657**       db %11001100
040804 CC          0658**       db %11001100
040805 00          0659**       db %00000000
040806             0660**   
040806             0661**   ; 66 B
040806 FC          0662**       db %11111100
040807 66          0663**       db %01100110
040808 66          0664**       db %01100110
040809 7C          0665**       db %01111100
04080A 66          0666**       db %01100110
04080B 66          0667**       db %01100110
04080C FC          0668**       db %11111100
04080D 00          0669**       db %00000000
04080E             0670**   
04080E             0671**   ; 67 C
04080E 3C          0672**       db %00111100
04080F 66          0673**       db %01100110
040810 C0          0674**       db %11000000
040811 C0          0675**       db %11000000
040812 C0          0676**       db %11000000
040813 66          0677**       db %01100110
040814 3C          0678**       db %00111100
040815 00          0679**       db %00000000
040816             0680**   
040816             0681**   ; 68 D
040816 F8          0682**       db %11111000
040817 6C          0683**       db %01101100
040818 66          0684**       db %01100110
040819 66          0685**       db %01100110
04081A 66          0686**       db %01100110
04081B 6C          0687**       db %01101100
04081C F8          0688**       db %11111000
04081D 00          0689**       db %00000000
04081E             0690**   
04081E             0691**   ; 69 E
04081E FE          0692**       db %11111110
04081F 62          0693**       db %01100010
040820 68          0694**       db %01101000
040821 78          0695**       db %01111000
040822 68          0696**       db %01101000
040823 62          0697**       db %01100010
040824 FE          0698**       db %11111110
040825 00          0699**       db %00000000
040826             0700**   
040826             0701**   ; 70 F
040826 FE          0702**       db %11111110
040827 62          0703**       db %01100010
040828 68          0704**       db %01101000
040829 78          0705**       db %01111000
04082A 68          0706**       db %01101000
04082B 60          0707**       db %01100000
04082C F0          0708**       db %11110000
04082D 00          0709**       db %00000000
04082E             0710**   
04082E             0711**   ; 71 G
04082E 3C          0712**       db %00111100
04082F 66          0713**       db %01100110
040830 C0          0714**       db %11000000
040831 C0          0715**       db %11000000
040832 CE          0716**       db %11001110
040833 66          0717**       db %01100110
040834 3E          0718**       db %00111110
040835 00          0719**       db %00000000
040836             0720**   
040836             0721**   ; 72 H
040836 CC          0722**       db %11001100
040837 CC          0723**       db %11001100
040838 CC          0724**       db %11001100
040839 FC          0725**       db %11111100
04083A CC          0726**       db %11001100
04083B CC          0727**       db %11001100
04083C CC          0728**       db %11001100
04083D 00          0729**       db %00000000
04083E             0730**   
04083E             0731**   ; 73 I
04083E 78          0732**       db %01111000
04083F 30          0733**       db %00110000
040840 30          0734**       db %00110000
040841 30          0735**       db %00110000
040842 30          0736**       db %00110000
040843 30          0737**       db %00110000
040844 78          0738**       db %01111000
040845 00          0739**       db %00000000
040846             0740**   
040846             0741**   ; 74 J
040846 1E          0742**       db %00011110
040847 0C          0743**       db %00001100
040848 0C          0744**       db %00001100
040849 0C          0745**       db %00001100
04084A CC          0746**       db %11001100
04084B CC          0747**       db %11001100
04084C 78          0748**       db %01111000
04084D 00          0749**       db %00000000
04084E             0750**   
04084E             0751**   ; 75 K
04084E E6          0752**       db %11100110
04084F 66          0753**       db %01100110
040850 6C          0754**       db %01101100
040851 78          0755**       db %01111000
040852 6C          0756**       db %01101100
040853 66          0757**       db %01100110
040854 E6          0758**       db %11100110
040855 00          0759**       db %00000000
040856             0760**   
040856             0761**   ; 76 L
040856 F0          0762**       db %11110000
040857 60          0763**       db %01100000
040858 60          0764**       db %01100000
040859 60          0765**       db %01100000
04085A 62          0766**       db %01100010
04085B 66          0767**       db %01100110
04085C FE          0768**       db %11111110
04085D 00          0769**       db %00000000
04085E             0770**   
04085E             0771**   ; 77 M
04085E C6          0772**       db %11000110
04085F EE          0773**       db %11101110
040860 FE          0774**       db %11111110
040861 FE          0775**       db %11111110
040862 D6          0776**       db %11010110
040863 C6          0777**       db %11000110
040864 C6          0778**       db %11000110
040865 00          0779**       db %00000000
040866             0780**   
040866             0781**   ; 78 N
040866 C6          0782**       db %11000110
040867 E6          0783**       db %11100110
040868 F6          0784**       db %11110110
040869 DE          0785**       db %11011110
04086A CE          0786**       db %11001110
04086B C6          0787**       db %11000110
04086C C6          0788**       db %11000110
04086D 00          0789**       db %00000000
04086E             0790**   
04086E             0791**   ; 79 O
04086E 38          0792**       db %00111000
04086F 6C          0793**       db %01101100
040870 C6          0794**       db %11000110
040871 C6          0795**       db %11000110
040872 C6          0796**       db %11000110
040873 6C          0797**       db %01101100
040874 38          0798**       db %00111000
040875 00          0799**       db %00000000
040876             0800**   
040876             0801**   ; 80 P
040876 FC          0802**       db %11111100
040877 66          0803**       db %01100110
040878 66          0804**       db %01100110
040879 7C          0805**       db %01111100
04087A 60          0806**       db %01100000
04087B 60          0807**       db %01100000
04087C F0          0808**       db %11110000
04087D 00          0809**       db %00000000
04087E             0810**   
04087E             0811**   ; 81 Q
04087E 78          0812**       db %01111000
04087F CC          0813**       db %11001100
040880 CC          0814**       db %11001100
040881 CC          0815**       db %11001100
040882 DC          0816**       db %11011100
040883 78          0817**       db %01111000
040884 1C          0818**       db %00011100
040885 00          0819**       db %00000000
040886             0820**   
040886             0821**   ; 82 R
040886 FC          0822**       db %11111100
040887 66          0823**       db %01100110
040888 66          0824**       db %01100110
040889 7C          0825**       db %01111100
04088A 6C          0826**       db %01101100
04088B 66          0827**       db %01100110
04088C E6          0828**       db %11100110
04088D 00          0829**       db %00000000
04088E             0830**   
04088E             0831**   ; 83 S
04088E 78          0832**       db %01111000
04088F CC          0833**       db %11001100
040890 E0          0834**       db %11100000
040891 70          0835**       db %01110000
040892 1C          0836**       db %00011100
040893 CC          0837**       db %11001100
040894 78          0838**       db %01111000
040895 00          0839**       db %00000000
040896             0840**   
040896             0841**   ; 84 T
040896 FC          0842**       db %11111100
040897 B4          0843**       db %10110100
040898 30          0844**       db %00110000
040899 30          0845**       db %00110000
04089A 30          0846**       db %00110000
04089B 30          0847**       db %00110000
04089C 78          0848**       db %01111000
04089D 00          0849**       db %00000000
04089E             0850**   
04089E             0851**   ; 85 U
04089E CC          0852**       db %11001100
04089F CC          0853**       db %11001100
0408A0 CC          0854**       db %11001100
0408A1 CC          0855**       db %11001100
0408A2 CC          0856**       db %11001100
0408A3 CC          0857**       db %11001100
0408A4 78          0858**       db %01111000
0408A5 00          0859**       db %00000000
0408A6             0860**   
0408A6             0861**   ; 86 V
0408A6 CC          0862**       db %11001100
0408A7 CC          0863**       db %11001100
0408A8 CC          0864**       db %11001100
0408A9 CC          0865**       db %11001100
0408AA CC          0866**       db %11001100
0408AB 78          0867**       db %01111000
0408AC 30          0868**       db %00110000
0408AD 00          0869**       db %00000000
0408AE             0870**   
0408AE             0871**   ; 87 W
0408AE C6          0872**       db %11000110
0408AF C6          0873**       db %11000110
0408B0 C6          0874**       db %11000110
0408B1 D6          0875**       db %11010110
0408B2 FE          0876**       db %11111110
0408B3 EE          0877**       db %11101110
0408B4 C6          0878**       db %11000110
0408B5 00          0879**       db %00000000
0408B6             0880**   
0408B6             0881**   ; 88 X
0408B6 C6          0882**       db %11000110
0408B7 C6          0883**       db %11000110
0408B8 6C          0884**       db %01101100
0408B9 38          0885**       db %00111000
0408BA 6C          0886**       db %01101100
0408BB C6          0887**       db %11000110
0408BC C6          0888**       db %11000110
0408BD 00          0889**       db %00000000
0408BE             0890**   
0408BE             0891**   ; 89 Y
0408BE CC          0892**       db %11001100
0408BF CC          0893**       db %11001100
0408C0 CC          0894**       db %11001100
0408C1 78          0895**       db %01111000
0408C2 30          0896**       db %00110000
0408C3 30          0897**       db %00110000
0408C4 78          0898**       db %01111000
0408C5 00          0899**       db %00000000
0408C6             0900**   
0408C6             0901**   ; 90 Z
0408C6 FE          0902**       db %11111110
0408C7 C6          0903**       db %11000110
0408C8 0C          0904**       db %00001100
0408C9 18          0905**       db %00011000
0408CA 30          0906**       db %00110000
0408CB 66          0907**       db %01100110
0408CC FE          0908**       db %11111110
0408CD 00          0909**       db %00000000
0408CE             0910**   
0408CE             0911**   ; 91 [
0408CE 78          0912**       db %01111000
0408CF 60          0913**       db %01100000
0408D0 60          0914**       db %01100000
0408D1 60          0915**       db %01100000
0408D2 60          0916**       db %01100000
0408D3 60          0917**       db %01100000
0408D4 78          0918**       db %01111000
0408D5 00          0919**       db %00000000
0408D6             0920**   
0408D6             0921**   ; 92 \
0408D6 00          0922**       db %00000000
0408D7 C0          0923**       db %11000000
0408D8 60          0924**       db %01100000
0408D9 30          0925**       db %00110000
0408DA 18          0926**       db %00011000
0408DB 0C          0927**       db %00001100
0408DC 06          0928**       db %00000110
0408DD 00          0929**       db %00000000
0408DE             0930**   
0408DE             0931**   ; 93 ]
0408DE 78          0932**       db %01111000
0408DF 18          0933**       db %00011000
0408E0 18          0934**       db %00011000
0408E1 18          0935**       db %00011000
0408E2 18          0936**       db %00011000
0408E3 18          0937**       db %00011000
0408E4 78          0938**       db %01111000
0408E5 00          0939**       db %00000000
0408E6             0940**   
0408E6             0941**   ; 94 ^
0408E6 18          0942**       db %00011000
0408E7 3C          0943**       db %00111100
0408E8 66          0944**       db %01100110
0408E9 00          0945**       db %00000000
0408EA 00          0946**       db %00000000
0408EB 00          0947**       db %00000000
0408EC 00          0948**       db %00000000
0408ED 00          0949**       db %00000000
0408EE             0950**   
0408EE             0951**   ; 95 _
0408EE 00          0952**       db %00000000
0408EF 00          0953**       db %00000000
0408F0 00          0954**       db %00000000
0408F1 00          0955**       db %00000000
0408F2 00          0956**       db %00000000
0408F3 00          0957**       db %00000000
0408F4 00          0958**       db %00000000
0408F5 FF          0959**       db %11111111
0408F6             0960**   
0408F6             0961**   ; 96 `
0408F6 30          0962**       db %00110000
0408F7 30          0963**       db %00110000
0408F8 18          0964**       db %00011000
0408F9 00          0965**       db %00000000
0408FA 00          0966**       db %00000000
0408FB 00          0967**       db %00000000
0408FC 00          0968**       db %00000000
0408FD 00          0969**       db %00000000
0408FE             0970**   
0408FE             0971**   ; 97 a
0408FE 00          0972**       db %00000000
0408FF 00          0973**       db %00000000
040900 78          0974**       db %01111000
040901 0C          0975**       db %00001100
040902 7C          0976**       db %01111100
040903 CC          0977**       db %11001100
040904 76          0978**       db %01110110
040905 00          0979**       db %00000000
040906             0980**   
040906             0981**   ; 98 b
040906 E0          0982**       db %11100000
040907 60          0983**       db %01100000
040908 60          0984**       db %01100000
040909 7C          0985**       db %01111100
04090A 66          0986**       db %01100110
04090B 66          0987**       db %01100110
04090C DC          0988**       db %11011100
04090D 00          0989**       db %00000000
04090E             0990**   
04090E             0991**   ; 99 c
04090E 00          0992**       db %00000000
04090F 00          0993**       db %00000000
040910 78          0994**       db %01111000
040911 CC          0995**       db %11001100
040912 C0          0996**       db %11000000
040913 CC          0997**       db %11001100
040914 78          0998**       db %01111000
040915 00          0999**       db %00000000
040916             1000**   
040916             1001**   ; 100 d
040916 1C          1002**       db %00011100
040917 0C          1003**       db %00001100
040918 0C          1004**       db %00001100
040919 7C          1005**       db %01111100
04091A CC          1006**       db %11001100
04091B CC          1007**       db %11001100
04091C 76          1008**       db %01110110
04091D 00          1009**       db %00000000
04091E             1010**   
04091E             1011**   ; 101 e
04091E 00          1012**       db %00000000
04091F 00          1013**       db %00000000
040920 78          1014**       db %01111000
040921 CC          1015**       db %11001100
040922 FC          1016**       db %11111100
040923 C0          1017**       db %11000000
040924 78          1018**       db %01111000
040925 00          1019**       db %00000000
040926             1020**   
040926             1021**   ; 102 f
040926 38          1022**       db %00111000
040927 6C          1023**       db %01101100
040928 60          1024**       db %01100000
040929 F0          1025**       db %11110000
04092A 60          1026**       db %01100000
04092B 60          1027**       db %01100000
04092C F0          1028**       db %11110000
04092D 00          1029**       db %00000000
04092E             1030**   
04092E             1031**   ; 103 g
04092E 00          1032**       db %00000000
04092F 00          1033**       db %00000000
040930 76          1034**       db %01110110
040931 CC          1035**       db %11001100
040932 CC          1036**       db %11001100
040933 7C          1037**       db %01111100
040934 0C          1038**       db %00001100
040935 F8          1039**       db %11111000
040936             1040**   
040936             1041**   ; 104 h
040936 E0          1042**       db %11100000
040937 60          1043**       db %01100000
040938 6C          1044**       db %01101100
040939 76          1045**       db %01110110
04093A 66          1046**       db %01100110
04093B 66          1047**       db %01100110
04093C E6          1048**       db %11100110
04093D 00          1049**       db %00000000
04093E             1050**   
04093E             1051**   ; 105 i
04093E 30          1052**       db %00110000
04093F 00          1053**       db %00000000
040940 70          1054**       db %01110000
040941 30          1055**       db %00110000
040942 30          1056**       db %00110000
040943 30          1057**       db %00110000
040944 78          1058**       db %01111000
040945 00          1059**       db %00000000
040946             1060**   
040946             1061**   ; 106 j
040946 0C          1062**       db %00001100
040947 00          1063**       db %00000000
040948 0C          1064**       db %00001100
040949 0C          1065**       db %00001100
04094A 0C          1066**       db %00001100
04094B CC          1067**       db %11001100
04094C CC          1068**       db %11001100
04094D 78          1069**       db %01111000
04094E             1070**   
04094E             1071**   ; 107 k
04094E E0          1072**       db %11100000
04094F 60          1073**       db %01100000
040950 66          1074**       db %01100110
040951 6C          1075**       db %01101100
040952 78          1076**       db %01111000
040953 6C          1077**       db %01101100
040954 E6          1078**       db %11100110
040955 00          1079**       db %00000000
040956             1080**   
040956             1081**   ; 108 l
040956 E0          1082**       db %11100000
040957 60          1083**       db %01100000
040958 60          1084**       db %01100000
040959 60          1085**       db %01100000
04095A 60          1086**       db %01100000
04095B 68          1087**       db %01101000
04095C 30          1088**       db %00110000
04095D 00          1089**       db %00000000
04095E             1090**   
04095E             1091**   ; 109 m
04095E 00          1092**       db %00000000
04095F 00          1093**       db %00000000
040960 CC          1094**       db %11001100
040961 FE          1095**       db %11111110
040962 FE          1096**       db %11111110
040963 D6          1097**       db %11010110
040964 C6          1098**       db %11000110
040965 00          1099**       db %00000000
040966             1100**   
040966             1101**   ; 110 n
040966 00          1102**       db %00000000
040967 00          1103**       db %00000000
040968 F8          1104**       db %11111000
040969 CC          1105**       db %11001100
04096A CC          1106**       db %11001100
04096B CC          1107**       db %11001100
04096C CC          1108**       db %11001100
04096D 00          1109**       db %00000000
04096E             1110**   
04096E             1111**   ; 111 o
04096E 00          1112**       db %00000000
04096F 00          1113**       db %00000000
040970 78          1114**       db %01111000
040971 CC          1115**       db %11001100
040972 CC          1116**       db %11001100
040973 CC          1117**       db %11001100
040974 78          1118**       db %01111000
040975 00          1119**       db %00000000
040976             1120**   
040976             1121**   ; 112 p
040976 00          1122**       db %00000000
040977 00          1123**       db %00000000
040978 DC          1124**       db %11011100
040979 66          1125**       db %01100110
04097A 66          1126**       db %01100110
04097B 7C          1127**       db %01111100
04097C 60          1128**       db %01100000
04097D F0          1129**       db %11110000
04097E             1130**   
04097E             1131**   ; 113 q
04097E 00          1132**       db %00000000
04097F 00          1133**       db %00000000
040980 76          1134**       db %01110110
040981 CC          1135**       db %11001100
040982 CC          1136**       db %11001100
040983 7C          1137**       db %01111100
040984 0C          1138**       db %00001100
040985 1E          1139**       db %00011110
040986             1140**   
040986             1141**   ; 114 r
040986 00          1142**       db %00000000
040987 00          1143**       db %00000000
040988 DC          1144**       db %11011100
040989 76          1145**       db %01110110
04098A 66          1146**       db %01100110
04098B 60          1147**       db %01100000
04098C F0          1148**       db %11110000
04098D 00          1149**       db %00000000
04098E             1150**   
04098E             1151**   ; 115 s
04098E 00          1152**       db %00000000
04098F 00          1153**       db %00000000
040990 7C          1154**       db %01111100
040991 C0          1155**       db %11000000
040992 78          1156**       db %01111000
040993 0C          1157**       db %00001100
040994 F8          1158**       db %11111000
040995 00          1159**       db %00000000
040996             1160**   
040996             1161**   ; 116 t
040996 10          1162**       db %00010000
040997 30          1163**       db %00110000
040998 7C          1164**       db %01111100
040999 30          1165**       db %00110000
04099A 30          1166**       db %00110000
04099B 34          1167**       db %00110100
04099C 18          1168**       db %00011000
04099D 00          1169**       db %00000000
04099E             1170**   
04099E             1171**   ; 117 u
04099E 00          1172**       db %00000000
04099F 00          1173**       db %00000000
0409A0 CC          1174**       db %11001100
0409A1 CC          1175**       db %11001100
0409A2 CC          1176**       db %11001100
0409A3 CC          1177**       db %11001100
0409A4 76          1178**       db %01110110
0409A5 00          1179**       db %00000000
0409A6             1180**   
0409A6             1181**   ; 118 v
0409A6 00          1182**       db %00000000
0409A7 00          1183**       db %00000000
0409A8 CC          1184**       db %11001100
0409A9 CC          1185**       db %11001100
0409AA CC          1186**       db %11001100
0409AB 78          1187**       db %01111000
0409AC 30          1188**       db %00110000
0409AD 00          1189**       db %00000000
0409AE             1190**   
0409AE             1191**   ; 119 w
0409AE 00          1192**       db %00000000
0409AF 00          1193**       db %00000000
0409B0 C6          1194**       db %11000110
0409B1 D6          1195**       db %11010110
0409B2 FE          1196**       db %11111110
0409B3 FE          1197**       db %11111110
0409B4 6C          1198**       db %01101100
0409B5 00          1199**       db %00000000
0409B6             1200**   
0409B6             1201**   ; 120 x
0409B6 00          1202**       db %00000000
0409B7 00          1203**       db %00000000
0409B8 C6          1204**       db %11000110
0409B9 6C          1205**       db %01101100
0409BA 38          1206**       db %00111000
0409BB 6C          1207**       db %01101100
0409BC C6          1208**       db %11000110
0409BD 00          1209**       db %00000000
0409BE             1210**   
0409BE             1211**   ; 121 y
0409BE 00          1212**       db %00000000
0409BF 00          1213**       db %00000000
0409C0 CC          1214**       db %11001100
0409C1 CC          1215**       db %11001100
0409C2 CC          1216**       db %11001100
0409C3 7C          1217**       db %01111100
0409C4 0C          1218**       db %00001100
0409C5 F8          1219**       db %11111000
0409C6             1220**   
0409C6             1221**   ; 122 z
0409C6 00          1222**       db %00000000
0409C7 00          1223**       db %00000000
0409C8 FC          1224**       db %11111100
0409C9 98          1225**       db %10011000
0409CA 30          1226**       db %00110000
0409CB 64          1227**       db %01100100
0409CC FC          1228**       db %11111100
0409CD 00          1229**       db %00000000
0409CE             1230**   
0409CE             1231**   ; 123 {
0409CE 1C          1232**       db %00011100
0409CF 30          1233**       db %00110000
0409D0 30          1234**       db %00110000
0409D1 E0          1235**       db %11100000
0409D2 30          1236**       db %00110000
0409D3 30          1237**       db %00110000
0409D4 1C          1238**       db %00011100
0409D5 00          1239**       db %00000000
0409D6             1240**   
0409D6             1241**   ; 124 |
0409D6 30          1242**       db %00110000
0409D7 30          1243**       db %00110000
0409D8 30          1244**       db %00110000
0409D9 30          1245**       db %00110000
0409DA 30          1246**       db %00110000
0409DB 30          1247**       db %00110000
0409DC 30          1248**       db %00110000
0409DD 00          1249**       db %00000000
0409DE             1250**   
0409DE             1251**   ; 125 }
0409DE E0          1252**       db %11100000
0409DF 30          1253**       db %00110000
0409E0 30          1254**       db %00110000
0409E1 1C          1255**       db %00011100
0409E2 30          1256**       db %00110000
0409E3 30          1257**       db %00110000
0409E4 E0          1258**       db %11100000
0409E5 00          1259**       db %00000000
0409E6             1260**   
0409E6             1261**   ; 126 ~
0409E6 76          1262**       db %01110110
0409E7 DC          1263**       db %11011100
0409E8 00          1264**       db %00000000
0409E9 00          1265**       db %00000000
0409EA 00          1266**       db %00000000
0409EB 00          1267**       db %00000000
0409EC 00          1268**       db %00000000
0409ED 00          1269**       db %00000000
0409EE             1270**   
0409EE             1271**   ; 127 DELETE
0409EE 7C          1272**       db %01111100
0409EF 82          1273**       db %10000010
0409F0 9A          1274**       db %10011010
0409F1 A2          1275**       db %10100010
0409F2 A2          1276**       db %10100010
0409F3 9A          1277**       db %10011010
0409F4 82          1278**       db %10000010
0409F5 7C          1279**       db %01111100
0409F6             1280**   
0409F6             1281**   ; 128 NON_PRINTABLE_128
0409F6 3C          1282**       db %00111100
0409F7 66          1283**       db %01100110
0409F8 C0          1284**       db %11000000
0409F9 C0          1285**       db %11000000
0409FA 66          1286**       db %01100110
0409FB 3C          1287**       db %00111100
0409FC 0C          1288**       db %00001100
0409FD 78          1289**       db %01111000
0409FE             1290**   
0409FE             1291**   ; 129 NON_PRINTABLE_129
0409FE CC          1292**       db %11001100
0409FF 00          1293**       db %00000000
040A00 CC          1294**       db %11001100
040A01 CC          1295**       db %11001100
040A02 CC          1296**       db %11001100
040A03 CC          1297**       db %11001100
040A04 76          1298**       db %01110110
040A05 00          1299**       db %00000000
040A06             1300**   
040A06             1301**   ; 130 NON_PRINTABLE_130
040A06 0C          1302**       db %00001100
040A07 18          1303**       db %00011000
040A08 78          1304**       db %01111000
040A09 CC          1305**       db %11001100
040A0A FC          1306**       db %11111100
040A0B C0          1307**       db %11000000
040A0C 78          1308**       db %01111000
040A0D 00          1309**       db %00000000
040A0E             1310**   
040A0E             1311**   ; 131 NON_PRINTABLE_131
040A0E 78          1312**       db %01111000
040A0F 84          1313**       db %10000100
040A10 78          1314**       db %01111000
040A11 0C          1315**       db %00001100
040A12 7C          1316**       db %01111100
040A13 CC          1317**       db %11001100
040A14 76          1318**       db %01110110
040A15 00          1319**       db %00000000
040A16             1320**   
040A16             1321**   ; 132 NON_PRINTABLE_132
040A16 6C          1322**       db %01101100
040A17 00          1323**       db %00000000
040A18 78          1324**       db %01111000
040A19 0C          1325**       db %00001100
040A1A 7C          1326**       db %01111100
040A1B CC          1327**       db %11001100
040A1C 76          1328**       db %01110110
040A1D 00          1329**       db %00000000
040A1E             1330**   
040A1E             1331**   ; 133 NON_PRINTABLE_133
040A1E 60          1332**       db %01100000
040A1F 30          1333**       db %00110000
040A20 78          1334**       db %01111000
040A21 0C          1335**       db %00001100
040A22 7C          1336**       db %01111100
040A23 CC          1337**       db %11001100
040A24 76          1338**       db %01110110
040A25 00          1339**       db %00000000
040A26             1340**   
040A26             1341**   ; 134 NON_PRINTABLE_134
040A26 7C          1342**       db %01111100
040A27 82          1343**       db %10000010
040A28 B2          1344**       db %10110010
040A29 AA          1345**       db %10101010
040A2A B2          1346**       db %10110010
040A2B AA          1347**       db %10101010
040A2C 82          1348**       db %10000010
040A2D 7C          1349**       db %01111100
040A2E             1350**   
040A2E             1351**   ; 135 NON_PRINTABLE_135
040A2E 00          1352**       db %00000000
040A2F 78          1353**       db %01111000
040A30 CC          1354**       db %11001100
040A31 C0          1355**       db %11000000
040A32 CC          1356**       db %11001100
040A33 78          1357**       db %01111000
040A34 18          1358**       db %00011000
040A35 70          1359**       db %01110000
040A36             1360**   
040A36             1361**   ; 136 NON_PRINTABLE_136
040A36 78          1362**       db %01111000
040A37 84          1363**       db %10000100
040A38 78          1364**       db %01111000
040A39 CC          1365**       db %11001100
040A3A FC          1366**       db %11111100
040A3B C0          1367**       db %11000000
040A3C 78          1368**       db %01111000
040A3D 00          1369**       db %00000000
040A3E             1370**   
040A3E             1371**   ; 137 NON_PRINTABLE_137
040A3E CC          1372**       db %11001100
040A3F 00          1373**       db %00000000
040A40 78          1374**       db %01111000
040A41 CC          1375**       db %11001100
040A42 FC          1376**       db %11111100
040A43 C0          1377**       db %11000000
040A44 78          1378**       db %01111000
040A45 00          1379**       db %00000000
040A46             1380**   
040A46             1381**   ; 138 NON_PRINTABLE_138
040A46 60          1382**       db %01100000
040A47 30          1383**       db %00110000
040A48 78          1384**       db %01111000
040A49 CC          1385**       db %11001100
040A4A FC          1386**       db %11111100
040A4B C0          1387**       db %11000000
040A4C 78          1388**       db %01111000
040A4D 00          1389**       db %00000000
040A4E             1390**   
040A4E             1391**   ; 139 NON_PRINTABLE_139
040A4E 00          1392**       db %00000000
040A4F D8          1393**       db %11011000
040A50 00          1394**       db %00000000
040A51 70          1395**       db %01110000
040A52 30          1396**       db %00110000
040A53 30          1397**       db %00110000
040A54 78          1398**       db %01111000
040A55 00          1399**       db %00000000
040A56             1400**   
040A56             1401**   ; 140 NON_PRINTABLE_140
040A56 70          1402**       db %01110000
040A57 D8          1403**       db %11011000
040A58 00          1404**       db %00000000
040A59 70          1405**       db %01110000
040A5A 30          1406**       db %00110000
040A5B 30          1407**       db %00110000
040A5C 78          1408**       db %01111000
040A5D 00          1409**       db %00000000
040A5E             1410**   
040A5E             1411**   ; 141 NON_PRINTABLE_141
040A5E 6C          1412**       db %01101100
040A5F FE          1413**       db %11111110
040A60 CC          1414**       db %11001100
040A61 18          1415**       db %00011000
040A62 30          1416**       db %00110000
040A63 66          1417**       db %01100110
040A64 FE          1418**       db %11111110
040A65 00          1419**       db %00000000
040A66             1420**   
040A66             1421**   ; 142 NON_PRINTABLE_142
040A66 CC          1422**       db %11001100
040A67 00          1423**       db %00000000
040A68 78          1424**       db %01111000
040A69 CC          1425**       db %11001100
040A6A FC          1426**       db %11111100
040A6B CC          1427**       db %11001100
040A6C CC          1428**       db %11001100
040A6D 00          1429**       db %00000000
040A6E             1430**   
040A6E             1431**   ; 143 NON_PRINTABLE_143
040A6E 78          1432**       db %01111000
040A6F 00          1433**       db %00000000
040A70 FC          1434**       db %11111100
040A71 98          1435**       db %10011000
040A72 30          1436**       db %00110000
040A73 64          1437**       db %01100100
040A74 FC          1438**       db %11111100
040A75 00          1439**       db %00000000
040A76             1440**   
040A76             1441**   ; 144 NON_PRINTABLE_144
040A76 0C          1442**       db %00001100
040A77 18          1443**       db %00011000
040A78 FE          1444**       db %11111110
040A79 62          1445**       db %01100010
040A7A 78          1446**       db %01111000
040A7B 62          1447**       db %01100010
040A7C FE          1448**       db %11111110
040A7D 00          1449**       db %00000000
040A7E             1450**   
040A7E             1451**   ; 145 NON_PRINTABLE_145
040A7E 00          1452**       db %00000000
040A7F 00          1453**       db %00000000
040A80 7E          1454**       db %01111110
040A81 1B          1455**       db %00011011
040A82 7E          1456**       db %01111110
040A83 D8          1457**       db %11011000
040A84 7E          1458**       db %01111110
040A85 00          1459**       db %00000000
040A86             1460**   
040A86             1461**   ; 146 NON_PRINTABLE_146
040A86 3E          1462**       db %00111110
040A87 78          1463**       db %01111000
040A88 D8          1464**       db %11011000
040A89 FC          1465**       db %11111100
040A8A D8          1466**       db %11011000
040A8B D8          1467**       db %11011000
040A8C DE          1468**       db %11011110
040A8D 00          1469**       db %00000000
040A8E             1470**   
040A8E             1471**   ; 147 NON_PRINTABLE_147
040A8E 78          1472**       db %01111000
040A8F CC          1473**       db %11001100
040A90 00          1474**       db %00000000
040A91 78          1475**       db %01111000
040A92 CC          1476**       db %11001100
040A93 CC          1477**       db %11001100
040A94 78          1478**       db %01111000
040A95 00          1479**       db %00000000
040A96             1480**   
040A96             1481**   ; 148 NON_PRINTABLE_148
040A96 00          1482**       db %00000000
040A97 CC          1483**       db %11001100
040A98 00          1484**       db %00000000
040A99 78          1485**       db %01111000
040A9A CC          1486**       db %11001100
040A9B CC          1487**       db %11001100
040A9C 78          1488**       db %01111000
040A9D 00          1489**       db %00000000
040A9E             1490**   
040A9E             1491**   ; 149 NON_PRINTABLE_149
040A9E 18          1492**       db %00011000
040A9F 30          1493**       db %00110000
040AA0 78          1494**       db %01111000
040AA1 CC          1495**       db %11001100
040AA2 FC          1496**       db %11111100
040AA3 CC          1497**       db %11001100
040AA4 CC          1498**       db %11001100
040AA5 00          1499**       db %00000000
040AA6             1500**   
040AA6             1501**   ; 150 NON_PRINTABLE_150
040AA6 78          1502**       db %01111000
040AA7 CC          1503**       db %11001100
040AA8 00          1504**       db %00000000
040AA9 CC          1505**       db %11001100
040AAA CC          1506**       db %11001100
040AAB CC          1507**       db %11001100
040AAC 76          1508**       db %01110110
040AAD 00          1509**       db %00000000
040AAE             1510**   
040AAE             1511**   ; 151 NON_PRINTABLE_151
040AAE 60          1512**       db %01100000
040AAF 30          1513**       db %00110000
040AB0 CC          1514**       db %11001100
040AB1 CC          1515**       db %11001100
040AB2 CC          1516**       db %11001100
040AB3 CC          1517**       db %11001100
040AB4 76          1518**       db %01110110
040AB5 00          1519**       db %00000000
040AB6             1520**   
040AB6             1521**   ; 152 NON_PRINTABLE_152
040AB6 CC          1522**       db %11001100
040AB7 00          1523**       db %00000000
040AB8 CC          1524**       db %11001100
040AB9 CC          1525**       db %11001100
040ABA CC          1526**       db %11001100
040ABB 7C          1527**       db %01111100
040ABC 0C          1528**       db %00001100
040ABD F8          1529**       db %11111000
040ABE             1530**   
040ABE             1531**   ; 153 NON_PRINTABLE_153
040ABE CC          1532**       db %11001100
040ABF 00          1533**       db %00000000
040AC0 78          1534**       db %01111000
040AC1 CC          1535**       db %11001100
040AC2 CC          1536**       db %11001100
040AC3 CC          1537**       db %11001100
040AC4 78          1538**       db %01111000
040AC5 00          1539**       db %00000000
040AC6             1540**   
040AC6             1541**   ; 154 NON_PRINTABLE_154
040AC6 CC          1542**       db %11001100
040AC7 00          1543**       db %00000000
040AC8 CC          1544**       db %11001100
040AC9 CC          1545**       db %11001100
040ACA CC          1546**       db %11001100
040ACB CC          1547**       db %11001100
040ACC 78          1548**       db %01111000
040ACD 00          1549**       db %00000000
040ACE             1550**   
040ACE             1551**   ; 155 NON_PRINTABLE_155
040ACE 30          1552**       db %00110000
040ACF 78          1553**       db %01111000
040AD0 CC          1554**       db %11001100
040AD1 C0          1555**       db %11000000
040AD2 CC          1556**       db %11001100
040AD3 78          1557**       db %01111000
040AD4 30          1558**       db %00110000
040AD5 00          1559**       db %00000000
040AD6             1560**   
040AD6             1561**   ; 156 NON_PRINTABLE_156
040AD6 38          1562**       db %00111000
040AD7 6C          1563**       db %01101100
040AD8 64          1564**       db %01100100
040AD9 F0          1565**       db %11110000
040ADA 60          1566**       db %01100000
040ADB E6          1567**       db %11100110
040ADC FC          1568**       db %11111100
040ADD 00          1569**       db %00000000
040ADE             1570**   
040ADE             1571**   ; 157 NON_PRINTABLE_157
040ADE CC          1572**       db %11001100
040ADF CC          1573**       db %11001100
040AE0 78          1574**       db %01111000
040AE1 FC          1575**       db %11111100
040AE2 30          1576**       db %00110000
040AE3 FC          1577**       db %11111100
040AE4 30          1578**       db %00110000
040AE5 30          1579**       db %00110000
040AE6             1580**   
040AE6             1581**   ; 158 NON_PRINTABLE_158
040AE6 78          1582**       db %01111000
040AE7 84          1583**       db %10000100
040AE8 78          1584**       db %01111000
040AE9 CC          1585**       db %11001100
040AEA FC          1586**       db %11111100
040AEB CC          1587**       db %11001100
040AEC CC          1588**       db %11001100
040AED 00          1589**       db %00000000
040AEE             1590**   
040AEE             1591**   ; 159 NON_PRINTABLE_159
040AEE 6C          1592**       db %01101100
040AEF 00          1593**       db %00000000
040AF0 FE          1594**       db %11111110
040AF1 62          1595**       db %01100010
040AF2 78          1596**       db %01111000
040AF3 62          1597**       db %01100010
040AF4 FE          1598**       db %11111110
040AF5 00          1599**       db %00000000
040AF6             1600**   
040AF6             1601**   ; 160 NON_PRINTABLE_160
040AF6 18          1602**       db %00011000
040AF7 30          1603**       db %00110000
040AF8 78          1604**       db %01111000
040AF9 0C          1605**       db %00001100
040AFA 7C          1606**       db %01111100
040AFB CC          1607**       db %11001100
040AFC 76          1608**       db %01110110
040AFD 00          1609**       db %00000000
040AFE             1610**   
040AFE             1611**   ; 161 NON_PRINTABLE_161
040AFE 18          1612**       db %00011000
040AFF 30          1613**       db %00110000
040B00 00          1614**       db %00000000
040B01 70          1615**       db %01110000
040B02 30          1616**       db %00110000
040B03 30          1617**       db %00110000
040B04 78          1618**       db %01111000
040B05 00          1619**       db %00000000
040B06             1620**   
040B06             1621**   ; 162 NON_PRINTABLE_162
040B06 18          1622**       db %00011000
040B07 30          1623**       db %00110000
040B08 00          1624**       db %00000000
040B09 78          1625**       db %01111000
040B0A CC          1626**       db %11001100
040B0B CC          1627**       db %11001100
040B0C 78          1628**       db %01111000
040B0D 00          1629**       db %00000000
040B0E             1630**   
040B0E             1631**   ; 163 NON_PRINTABLE_163
040B0E 18          1632**       db %00011000
040B0F 30          1633**       db %00110000
040B10 CC          1634**       db %11001100
040B11 CC          1635**       db %11001100
040B12 CC          1636**       db %11001100
040B13 CC          1637**       db %11001100
040B14 76          1638**       db %01110110
040B15 00          1639**       db %00000000
040B16             1640**   
040B16             1641**   ; 164 NON_PRINTABLE_164
040B16 76          1642**       db %01110110
040B17 DC          1643**       db %11011100
040B18 F8          1644**       db %11111000
040B19 CC          1645**       db %11001100
040B1A CC          1646**       db %11001100
040B1B CC          1647**       db %11001100
040B1C CC          1648**       db %11001100
040B1D 00          1649**       db %00000000
040B1E             1650**   
040B1E             1651**   ; 165 NON_PRINTABLE_165
040B1E 76          1652**       db %01110110
040B1F DC          1653**       db %11011100
040B20 E6          1654**       db %11100110
040B21 F6          1655**       db %11110110
040B22 DE          1656**       db %11011110
040B23 CE          1657**       db %11001110
040B24 C6          1658**       db %11000110
040B25 00          1659**       db %00000000
040B26             1660**   
040B26             1661**   ; 166 NON_PRINTABLE_166
040B26 3C          1662**       db %00111100
040B27 6C          1663**       db %01101100
040B28 3E          1664**       db %00111110
040B29 00          1665**       db %00000000
040B2A 7E          1666**       db %01111110
040B2B 00          1667**       db %00000000
040B2C 00          1668**       db %00000000
040B2D 00          1669**       db %00000000
040B2E             1670**   
040B2E             1671**   ; 167 NON_PRINTABLE_167
040B2E 38          1672**       db %00111000
040B2F 6C          1673**       db %01101100
040B30 38          1674**       db %00111000
040B31 00          1675**       db %00000000
040B32 7C          1676**       db %01111100
040B33 00          1677**       db %00000000
040B34 00          1678**       db %00000000
040B35 00          1679**       db %00000000
040B36             1680**   
040B36             1681**   ; 168 NON_PRINTABLE_168
040B36 00          1682**       db %00000000
040B37 18          1683**       db %00011000
040B38 00          1684**       db %00000000
040B39 18          1685**       db %00011000
040B3A 30          1686**       db %00110000
040B3B 60          1687**       db %01100000
040B3C 66          1688**       db %01100110
040B3D 3C          1689**       db %00111100
040B3E             1690**   
040B3E             1691**   ; 169 NON_PRINTABLE_169
040B3E 18          1692**       db %00011000
040B3F 30          1693**       db %00110000
040B40 78          1694**       db %01111000
040B41 30          1695**       db %00110000
040B42 30          1696**       db %00110000
040B43 30          1697**       db %00110000
040B44 78          1698**       db %01111000
040B45 00          1699**       db %00000000
040B46             1700**   
040B46             1701**   ; 170 NON_PRINTABLE_170
040B46 00          1702**       db %00000000
040B47 00          1703**       db %00000000
040B48 00          1704**       db %00000000
040B49 FC          1705**       db %11111100
040B4A 0C          1706**       db %00001100
040B4B 0C          1707**       db %00001100
040B4C 00          1708**       db %00000000
040B4D 00          1709**       db %00000000
040B4E             1710**   
040B4E             1711**   ; 171 NON_PRINTABLE_171
040B4E 00          1712**       db %00000000
040B4F 00          1713**       db %00000000
040B50 7E          1714**       db %01111110
040B51 DB          1715**       db %11011011
040B52 DE          1716**       db %11011110
040B53 D8          1717**       db %11011000
040B54 7E          1718**       db %01111110
040B55 00          1719**       db %00000000
040B56             1720**   
040B56             1721**   ; 172 NON_PRINTABLE_172
040B56 7E          1722**       db %01111110
040B57 D8          1723**       db %11011000
040B58 D8          1724**       db %11011000
040B59 DC          1725**       db %11011100
040B5A D8          1726**       db %11011000
040B5B D8          1727**       db %11011000
040B5C 7E          1728**       db %01111110
040B5D 00          1729**       db %00000000
040B5E             1730**   
040B5E             1731**   ; 173 NON_PRINTABLE_173
040B5E 00          1732**       db %00000000
040B5F 30          1733**       db %00110000
040B60 00          1734**       db %00000000
040B61 30          1735**       db %00110000
040B62 30          1736**       db %00110000
040B63 78          1737**       db %01111000
040B64 78          1738**       db %01111000
040B65 30          1739**       db %00110000
040B66             1740**   
040B66             1741**   ; 174 NON_PRINTABLE_174
040B66 00          1742**       db %00000000
040B67 33          1743**       db %00110011
040B68 66          1744**       db %01100110
040B69 CC          1745**       db %11001100
040B6A 66          1746**       db %01100110
040B6B 33          1747**       db %00110011
040B6C 00          1748**       db %00000000
040B6D 00          1749**       db %00000000
040B6E             1750**   
040B6E             1751**   ; 175 NON_PRINTABLE_175
040B6E 00          1752**       db %00000000
040B6F CC          1753**       db %11001100
040B70 66          1754**       db %01100110
040B71 33          1755**       db %00110011
040B72 66          1756**       db %01100110
040B73 CC          1757**       db %11001100
040B74 00          1758**       db %00000000
040B75 00          1759**       db %00000000
040B76             1760**   
040B76             1761**   ; 176 NON_PRINTABLE_176
040B76 22          1762**       db %00100010
040B77 88          1763**       db %10001000
040B78 22          1764**       db %00100010
040B79 88          1765**       db %10001000
040B7A 22          1766**       db %00100010
040B7B 88          1767**       db %10001000
040B7C 22          1768**       db %00100010
040B7D 88          1769**       db %10001000
040B7E             1770**   
040B7E             1771**   ; 177 NON_PRINTABLE_177
040B7E 55          1772**       db %01010101
040B7F AA          1773**       db %10101010
040B80 55          1774**       db %01010101
040B81 AA          1775**       db %10101010
040B82 55          1776**       db %01010101
040B83 AA          1777**       db %10101010
040B84 55          1778**       db %01010101
040B85 AA          1779**       db %10101010
040B86             1780**   
040B86             1781**   ; 178 NON_PRINTABLE_178
040B86 78          1782**       db %01111000
040B87 CC          1783**       db %11001100
040B88 78          1784**       db %01111000
040B89 30          1785**       db %00110000
040B8A 30          1786**       db %00110000
040B8B 30          1787**       db %00110000
040B8C 78          1788**       db %01111000
040B8D 00          1789**       db %00000000
040B8E             1790**   
040B8E             1791**   ; 179 NON_PRINTABLE_179
040B8E 18          1792**       db %00011000
040B8F 18          1793**       db %00011000
040B90 18          1794**       db %00011000
040B91 18          1795**       db %00011000
040B92 18          1796**       db %00011000
040B93 18          1797**       db %00011000
040B94 18          1798**       db %00011000
040B95 18          1799**       db %00011000
040B96             1800**   
040B96             1801**   ; 180 NON_PRINTABLE_180
040B96 18          1802**       db %00011000
040B97 18          1803**       db %00011000
040B98 18          1804**       db %00011000
040B99 F8          1805**       db %11111000
040B9A 18          1806**       db %00011000
040B9B 18          1807**       db %00011000
040B9C 18          1808**       db %00011000
040B9D 18          1809**       db %00011000
040B9E             1810**   
040B9E             1811**   ; 181 NON_PRINTABLE_181
040B9E 18          1812**       db %00011000
040B9F 30          1813**       db %00110000
040BA0 78          1814**       db %01111000
040BA1 CC          1815**       db %11001100
040BA2 CC          1816**       db %11001100
040BA3 CC          1817**       db %11001100
040BA4 78          1818**       db %01111000
040BA5 00          1819**       db %00000000
040BA6             1820**   
040BA6             1821**   ; 182 NON_PRINTABLE_182
040BA6 78          1822**       db %01111000
040BA7 CC          1823**       db %11001100
040BA8 78          1824**       db %01111000
040BA9 CC          1825**       db %11001100
040BAA CC          1826**       db %11001100
040BAB CC          1827**       db %11001100
040BAC 78          1828**       db %01111000
040BAD 00          1829**       db %00000000
040BAE             1830**   
040BAE             1831**   ; 183 NON_PRINTABLE_183
040BAE 00          1832**       db %00000000
040BAF 6C          1833**       db %01101100
040BB0 38          1834**       db %00111000
040BB1 38          1835**       db %00111000
040BB2 6C          1836**       db %01101100
040BB3 00          1837**       db %00000000
040BB4 00          1838**       db %00000000
040BB5 00          1839**       db %00000000
040BB6             1840**   
040BB6             1841**   ; 184 NON_PRINTABLE_184
040BB6 18          1842**       db %00011000
040BB7 30          1843**       db %00110000
040BB8 CC          1844**       db %11001100
040BB9 CC          1845**       db %11001100
040BBA CC          1846**       db %11001100
040BBB CC          1847**       db %11001100
040BBC 78          1848**       db %01111000
040BBD 00          1849**       db %00000000
040BBE             1850**   
040BBE             1851**   ; 185 NON_PRINTABLE_185
040BBE 18          1852**       db %00011000
040BBF 30          1853**       db %00110000
040BC0 CC          1854**       db %11001100
040BC1 CC          1855**       db %11001100
040BC2 78          1856**       db %01111000
040BC3 30          1857**       db %00110000
040BC4 78          1858**       db %01111000
040BC5 00          1859**       db %00000000
040BC6             1860**   
040BC6             1861**   ; 186 NON_PRINTABLE_186
040BC6 18          1862**       db %00011000
040BC7 30          1863**       db %00110000
040BC8 CC          1864**       db %11001100
040BC9 CC          1865**       db %11001100
040BCA CC          1866**       db %11001100
040BCB 7C          1867**       db %01111100
040BCC 0C          1868**       db %00001100
040BCD F8          1869**       db %11111000
040BCE             1870**   
040BCE             1871**   ; 187 NON_PRINTABLE_187
040BCE 38          1872**       db %00111000
040BCF 6C          1873**       db %01101100
040BD0 C6          1874**       db %11000110
040BD1 FE          1875**       db %11111110
040BD2 C6          1876**       db %11000110
040BD3 CE          1877**       db %11001110
040BD4 18          1878**       db %00011000
040BD5 0E          1879**       db %00001110
040BD6             1880**   
040BD6             1881**   ; 188 NON_PRINTABLE_188
040BD6 6C          1882**       db %01101100
040BD7 38          1883**       db %00111000
040BD8 7C          1884**       db %01111100
040BD9 C6          1885**       db %11000110
040BDA C0          1886**       db %11000000
040BDB C0          1887**       db %11000000
040BDC C6          1888**       db %11000110
040BDD 7C          1889**       db %01111100
040BDE             1890**   
040BDE             1891**   ; 189 NON_PRINTABLE_189
040BDE 00          1892**       db %00000000
040BDF CC          1893**       db %11001100
040BE0 78          1894**       db %01111000
040BE1 78          1895**       db %01111000
040BE2 CC          1896**       db %11001100
040BE3 C0          1897**       db %11000000
040BE4 CC          1898**       db %11001100
040BE5 78          1899**       db %01111000
040BE6             1900**   
040BE6             1901**   ; 190 NON_PRINTABLE_190
040BE6 F8          1902**       db %11111000
040BE7 6C          1903**       db %01101100
040BE8 66          1904**       db %01100110
040BE9 F6          1905**       db %11110110
040BEA 66          1906**       db %01100110
040BEB 6C          1907**       db %01101100
040BEC F8          1908**       db %11111000
040BED 00          1909**       db %00000000
040BEE             1910**   
040BEE             1911**   ; 191 NON_PRINTABLE_191
040BEE 00          1912**       db %00000000
040BEF 00          1913**       db %00000000
040BF0 00          1914**       db %00000000
040BF1 F8          1915**       db %11111000
040BF2 18          1916**       db %00011000
040BF3 18          1917**       db %00011000
040BF4 18          1918**       db %00011000
040BF5 18          1919**       db %00011000
040BF6             1920**   
040BF6             1921**   ; 192 NON_PRINTABLE_192
040BF6 18          1922**       db %00011000
040BF7 18          1923**       db %00011000
040BF8 18          1924**       db %00011000
040BF9 1F          1925**       db %00011111
040BFA 00          1926**       db %00000000
040BFB 00          1927**       db %00000000
040BFC 00          1928**       db %00000000
040BFD 00          1929**       db %00000000
040BFE             1930**   
040BFE             1931**   ; 193 NON_PRINTABLE_193
040BFE 18          1932**       db %00011000
040BFF 18          1933**       db %00011000
040C00 18          1934**       db %00011000
040C01 FF          1935**       db %11111111
040C02 00          1936**       db %00000000
040C03 00          1937**       db %00000000
040C04 00          1938**       db %00000000
040C05 00          1939**       db %00000000
040C06             1940**   
040C06             1941**   ; 194 NON_PRINTABLE_194
040C06 00          1942**       db %00000000
040C07 00          1943**       db %00000000
040C08 00          1944**       db %00000000
040C09 FF          1945**       db %11111111
040C0A 18          1946**       db %00011000
040C0B 18          1947**       db %00011000
040C0C 18          1948**       db %00011000
040C0D 18          1949**       db %00011000
040C0E             1950**   
040C0E             1951**   ; 195 NON_PRINTABLE_195
040C0E 18          1952**       db %00011000
040C0F 18          1953**       db %00011000
040C10 18          1954**       db %00011000
040C11 1F          1955**       db %00011111
040C12 18          1956**       db %00011000
040C13 18          1957**       db %00011000
040C14 18          1958**       db %00011000
040C15 18          1959**       db %00011000
040C16             1960**   
040C16             1961**   ; 196 NON_PRINTABLE_196
040C16 00          1962**       db %00000000
040C17 00          1963**       db %00000000
040C18 00          1964**       db %00000000
040C19 FF          1965**       db %11111111
040C1A 00          1966**       db %00000000
040C1B 00          1967**       db %00000000
040C1C 00          1968**       db %00000000
040C1D 00          1969**       db %00000000
040C1E             1970**   
040C1E             1971**   ; 197 NON_PRINTABLE_197
040C1E 18          1972**       db %00011000
040C1F 18          1973**       db %00011000
040C20 18          1974**       db %00011000
040C21 FF          1975**       db %11111111
040C22 18          1976**       db %00011000
040C23 18          1977**       db %00011000
040C24 18          1978**       db %00011000
040C25 18          1979**       db %00011000
040C26             1980**   
040C26             1981**   ; 198 NON_PRINTABLE_198
040C26 00          1982**       db %00000000
040C27 0C          1983**       db %00001100
040C28 3E          1984**       db %00111110
040C29 0C          1985**       db %00001100
040C2A 7C          1986**       db %01111100
040C2B CC          1987**       db %11001100
040C2C CC          1988**       db %11001100
040C2D 76          1989**       db %01110110
040C2E             1990**   
040C2E             1991**   ; 199 NON_PRINTABLE_199
040C2E FE          1992**       db %11111110
040C2F 66          1993**       db %01100110
040C30 60          1994**       db %01100000
040C31 78          1995**       db %01111000
040C32 60          1996**       db %01100000
040C33 66          1997**       db %01100110
040C34 FE          1998**       db %11111110
040C35 1C          1999**       db %00011100
040C36             2000**   
040C36             2001**   ; 200 NON_PRINTABLE_200
040C36 00          2002**       db %00000000
040C37 00          2003**       db %00000000
040C38 7C          2004**       db %01111100
040C39 C6          2005**       db %11000110
040C3A FE          2006**       db %11111110
040C3B C0          2007**       db %11000000
040C3C 7A          2008**       db %01111010
040C3D 1E          2009**       db %00011110
040C3E             2010**   
040C3E             2011**   ; 201 NON_PRINTABLE_201
040C3E 48          2012**       db %01001000
040C3F 78          2013**       db %01111000
040C40 84          2014**       db %10000100
040C41 60          2015**       db %01100000
040C42 18          2016**       db %00011000
040C43 84          2017**       db %10000100
040C44 78          2018**       db %01111000
040C45 00          2019**       db %00000000
040C46             2020**   
040C46             2021**   ; 202 NON_PRINTABLE_202
040C46 78          2022**       db %01111000
040C47 00          2023**       db %00000000
040C48 7C          2024**       db %01111100
040C49 C0          2025**       db %11000000
040C4A 78          2026**       db %01111000
040C4B 0C          2027**       db %00001100
040C4C F8          2028**       db %11111000
040C4D 00          2029**       db %00000000
040C4E             2030**   
040C4E             2031**   ; 203 NON_PRINTABLE_203
040C4E 6C          2032**       db %01101100
040C4F FE          2033**       db %11111110
040C50 CC          2034**       db %11001100
040C51 18          2035**       db %00011000
040C52 30          2036**       db %00110000
040C53 66          2037**       db %01100110
040C54 FE          2038**       db %11111110
040C55 00          2039**       db %00000000
040C56             2040**   
040C56             2041**   ; 204 NON_PRINTABLE_204
040C56 78          2042**       db %01111000
040C57 00          2043**       db %00000000
040C58 FC          2044**       db %11111100
040C59 98          2045**       db %10011000
040C5A 30          2046**       db %00110000
040C5B 64          2047**       db %01100100
040C5C FC          2048**       db %11111100
040C5D 00          2049**       db %00000000
040C5E             2050**   
040C5E             2051**   ; 205 NON_PRINTABLE_205
040C5E 6C          2052**       db %01101100
040C5F 38          2053**       db %00111000
040C60 00          2054**       db %00000000
040C61 00          2055**       db %00000000
040C62 00          2056**       db %00000000
040C63 00          2057**       db %00000000
040C64 00          2058**       db %00000000
040C65 00          2059**       db %00000000
040C66             2060**   
040C66             2061**   ; 206 NON_PRINTABLE_206
040C66 18          2062**       db %00011000
040C67 00          2063**       db %00000000
040C68 00          2064**       db %00000000
040C69 00          2065**       db %00000000
040C6A 00          2066**       db %00000000
040C6B 00          2067**       db %00000000
040C6C 00          2068**       db %00000000
040C6D 00          2069**       db %00000000
040C6E             2070**   
040C6E             2071**   ; 207 NON_PRINTABLE_207
040C6E 00          2072**       db %00000000
040C6F 00          2073**       db %00000000
040C70 00          2074**       db %00000000
040C71 00          2075**       db %00000000
040C72 00          2076**       db %00000000
040C73 00          2077**       db %00000000
040C74 10          2078**       db %00010000
040C75 1C          2079**       db %00011100
040C76             2080**   
040C76             2081**   ; 208 NON_PRINTABLE_208
040C76 00          2082**       db %00000000
040C77 00          2083**       db %00000000
040C78 00          2084**       db %00000000
040C79 00          2085**       db %00000000
040C7A FE          2086**       db %11111110
040C7B 00          2087**       db %00000000
040C7C 00          2088**       db %00000000
040C7D 00          2089**       db %00000000
040C7E             2090**   
040C7E             2091**   ; 209 NON_PRINTABLE_209
040C7E 00          2092**       db %00000000
040C7F 38          2093**       db %00111000
040C80 30          2094**       db %00110000
040C81 18          2095**       db %00011000
040C82 00          2096**       db %00000000
040C83 00          2097**       db %00000000
040C84 00          2098**       db %00000000
040C85 00          2099**       db %00000000
040C86             2100**   
040C86             2101**   ; 210 NON_PRINTABLE_210
040C86 00          2102**       db %00000000
040C87 38          2103**       db %00111000
040C88 18          2104**       db %00011000
040C89 70          2105**       db %01110000
040C8A 00          2106**       db %00000000
040C8B 00          2107**       db %00000000
040C8C 00          2108**       db %00000000
040C8D 00          2109**       db %00000000
040C8E             2110**   
040C8E             2111**   ; 211 NON_PRINTABLE_211
040C8E 00          2112**       db %00000000
040C8F 00          2113**       db %00000000
040C90 00          2114**       db %00000000
040C91 00          2115**       db %00000000
040C92 00          2116**       db %00000000
040C93 38          2117**       db %00111000
040C94 18          2118**       db %00011000
040C95 70          2119**       db %01110000
040C96             2120**   
040C96             2121**   ; 212 NON_PRINTABLE_212
040C96 66          2122**       db %01100110
040C97 CC          2123**       db %11001100
040C98 EE          2124**       db %11101110
040C99 00          2125**       db %00000000
040C9A 00          2126**       db %00000000
040C9B 00          2127**       db %00000000
040C9C 00          2128**       db %00000000
040C9D 00          2129**       db %00000000
040C9E             2130**   
040C9E             2131**   ; 213 NON_PRINTABLE_213
040C9E 00          2132**       db %00000000
040C9F EE          2133**       db %11101110
040CA0 66          2134**       db %01100110
040CA1 CC          2135**       db %11001100
040CA2 00          2136**       db %00000000
040CA3 00          2137**       db %00000000
040CA4 00          2138**       db %00000000
040CA5 00          2139**       db %00000000
040CA6             2140**   
040CA6             2141**   ; 214 NON_PRINTABLE_214
040CA6 00          2142**       db %00000000
040CA7 00          2143**       db %00000000
040CA8 00          2144**       db %00000000
040CA9 00          2145**       db %00000000
040CAA 00          2146**       db %00000000
040CAB EE          2147**       db %11101110
040CAC 66          2148**       db %01100110
040CAD CC          2149**       db %11001100
040CAE             2150**   
040CAE             2151**   ; 215 NON_PRINTABLE_215
040CAE 00          2152**       db %00000000
040CAF 00          2153**       db %00000000
040CB0 18          2154**       db %00011000
040CB1 30          2155**       db %00110000
040CB2 60          2156**       db %01100000
040CB3 30          2157**       db %00110000
040CB4 18          2158**       db %00011000
040CB5 00          2159**       db %00000000
040CB6             2160**   
040CB6             2161**   ; 216 NON_PRINTABLE_216
040CB6 00          2162**       db %00000000
040CB7 00          2163**       db %00000000
040CB8 30          2164**       db %00110000
040CB9 18          2165**       db %00011000
040CBA 0C          2166**       db %00001100
040CBB 18          2167**       db %00011000
040CBC 30          2168**       db %00110000
040CBD 00          2169**       db %00000000
040CBE             2170**   
040CBE             2171**   ; 217 NON_PRINTABLE_217
040CBE 18          2172**       db %00011000
040CBF 18          2173**       db %00011000
040CC0 18          2174**       db %00011000
040CC1 F8          2175**       db %11111000
040CC2 00          2176**       db %00000000
040CC3 00          2177**       db %00000000
040CC4 00          2178**       db %00000000
040CC5 00          2179**       db %00000000
040CC6             2180**   
040CC6             2181**   ; 218 NON_PRINTABLE_218
040CC6 00          2182**       db %00000000
040CC7 00          2183**       db %00000000
040CC8 00          2184**       db %00000000
040CC9 1F          2185**       db %00011111
040CCA 18          2186**       db %00011000
040CCB 18          2187**       db %00011000
040CCC 18          2188**       db %00011000
040CCD 18          2189**       db %00011000
040CCE             2190**   
040CCE             2191**   ; 219 NON_PRINTABLE_219
040CCE FF          2192**       db %11111111
040CCF FF          2193**       db %11111111
040CD0 FF          2194**       db %11111111
040CD1 FF          2195**       db %11111111
040CD2 FF          2196**       db %11111111
040CD3 FF          2197**       db %11111111
040CD4 FF          2198**       db %11111111
040CD5 FF          2199**       db %11111111
040CD6             2200**   
040CD6             2201**   ; 220 NON_PRINTABLE_220
040CD6 38          2202**       db %00111000
040CD7 64          2203**       db %01100100
040CD8 F0          2204**       db %11110000
040CD9 60          2205**       db %01100000
040CDA F0          2206**       db %11110000
040CDB 64          2207**       db %01100100
040CDC 38          2208**       db %00111000
040CDD 00          2209**       db %00000000
040CDE             2210**   
040CDE             2211**   ; 221 NON_PRINTABLE_221
040CDE 00          2212**       db %00000000
040CDF 0C          2213**       db %00001100
040CE0 FE          2214**       db %11111110
040CE1 18          2215**       db %00011000
040CE2 30          2216**       db %00110000
040CE3 FE          2217**       db %11111110
040CE4 60          2218**       db %01100000
040CE5 00          2219**       db %00000000
040CE6             2220**   
040CE6             2221**   ; 222 NON_PRINTABLE_222
040CE6 60          2222**       db %01100000
040CE7 30          2223**       db %00110000
040CE8 78          2224**       db %01111000
040CE9 CC          2225**       db %11001100
040CEA FC          2226**       db %11111100
040CEB CC          2227**       db %11001100
040CEC CC          2228**       db %11001100
040CED 00          2229**       db %00000000
040CEE             2230**   
040CEE             2231**   ; 223 NON_PRINTABLE_223
040CEE 60          2232**       db %01100000
040CEF 30          2233**       db %00110000
040CF0 FE          2234**       db %11111110
040CF1 62          2235**       db %01100010
040CF2 78          2236**       db %01111000
040CF3 62          2237**       db %01100010
040CF4 FE          2238**       db %11111110
040CF5 00          2239**       db %00000000
040CF6             2240**   
040CF6             2241**   ; 224 NON_PRINTABLE_224
040CF6 38          2242**       db %00111000
040CF7 6C          2243**       db %01101100
040CF8 FE          2244**       db %11111110
040CF9 62          2245**       db %01100010
040CFA 78          2246**       db %01111000
040CFB 62          2247**       db %01100010
040CFC FE          2248**       db %11111110
040CFD 00          2249**       db %00000000
040CFE             2250**   
040CFE             2251**   ; 225 NON_PRINTABLE_225
040CFE 7C          2252**       db %01111100
040CFF C6          2253**       db %11000110
040D00 C6          2254**       db %11000110
040D01 CC          2255**       db %11001100
040D02 C6          2256**       db %11000110
040D03 D6          2257**       db %11010110
040D04 DC          2258**       db %11011100
040D05 80          2259**       db %10000000
040D06             2260**   
040D06             2261**   ; 226 NON_PRINTABLE_226
040D06 CC          2262**       db %11001100
040D07 00          2263**       db %00000000
040D08 78          2264**       db %01111000
040D09 30          2265**       db %00110000
040D0A 30          2266**       db %00110000
040D0B 30          2267**       db %00110000
040D0C 78          2268**       db %01111000
040D0D 00          2269**       db %00000000
040D0E             2270**   
040D0E             2271**   ; 227 NON_PRINTABLE_227
040D0E 00          2272**       db %00000000
040D0F C0          2273**       db %11000000
040D10 7C          2274**       db %01111100
040D11 6E          2275**       db %01101110
040D12 6C          2276**       db %01101100
040D13 6C          2277**       db %01101100
040D14 6C          2278**       db %01101100
040D15 00          2279**       db %00000000
040D16             2280**   
040D16             2281**   ; 228 NON_PRINTABLE_228
040D16 76          2282**       db %01110110
040D17 D8          2283**       db %11011000
040D18 D8          2284**       db %11011000
040D19 DC          2285**       db %11011100
040D1A D8          2286**       db %11011000
040D1B D8          2287**       db %11011000
040D1C 76          2288**       db %01110110
040D1D 00          2289**       db %00000000
040D1E             2290**   
040D1E             2291**   ; 229 NON_PRINTABLE_229
040D1E 00          2292**       db %00000000
040D1F 00          2293**       db %00000000
040D20 6E          2294**       db %01101110
040D21 D8          2295**       db %11011000
040D22 DE          2296**       db %11011110
040D23 D8          2297**       db %11011000
040D24 6E          2298**       db %01101110
040D25 00          2299**       db %00000000
040D26             2300**   
040D26             2301**   ; 230 NON_PRINTABLE_230
040D26 00          2302**       db %00000000
040D27 00          2303**       db %00000000
040D28 CC          2304**       db %11001100
040D29 CC          2305**       db %11001100
040D2A CC          2306**       db %11001100
040D2B CC          2307**       db %11001100
040D2C F6          2308**       db %11110110
040D2D C0          2309**       db %11000000
040D2E             2310**   
040D2E             2311**   ; 231 NON_PRINTABLE_231
040D2E 60          2312**       db %01100000
040D2F 30          2313**       db %00110000
040D30 CC          2314**       db %11001100
040D31 CC          2315**       db %11001100
040D32 CC          2316**       db %11001100
040D33 CC          2317**       db %11001100
040D34 78          2318**       db %01111000
040D35 00          2319**       db %00000000
040D36             2320**   
040D36             2321**   ; 232 NON_PRINTABLE_232
040D36 78          2322**       db %01111000
040D37 CC          2323**       db %11001100
040D38 00          2324**       db %00000000
040D39 CC          2325**       db %11001100
040D3A CC          2326**       db %11001100
040D3B CC          2327**       db %11001100
040D3C 78          2328**       db %01111000
040D3D 00          2329**       db %00000000
040D3E             2330**   
040D3E             2331**   ; 233 NON_PRINTABLE_233
040D3E CC          2332**       db %11001100
040D3F 00          2333**       db %00000000
040D40 CC          2334**       db %11001100
040D41 CC          2335**       db %11001100
040D42 78          2336**       db %01111000
040D43 30          2337**       db %00110000
040D44 78          2338**       db %01111000
040D45 00          2339**       db %00000000
040D46             2340**   
040D46             2341**   ; 234 NON_PRINTABLE_234
040D46 60          2342**       db %01100000
040D47 E0          2343**       db %11100000
040D48 60          2344**       db %01100000
040D49 60          2345**       db %01100000
040D4A F0          2346**       db %11110000
040D4B 00          2347**       db %00000000
040D4C 00          2348**       db %00000000
040D4D 00          2349**       db %00000000
040D4E             2350**   
040D4E             2351**   ; 235 NON_PRINTABLE_235
040D4E 70          2352**       db %01110000
040D4F D8          2353**       db %11011000
040D50 30          2354**       db %00110000
040D51 D8          2355**       db %11011000
040D52 70          2356**       db %01110000
040D53 00          2357**       db %00000000
040D54 00          2358**       db %00000000
040D55 00          2359**       db %00000000
040D56             2360**   
040D56             2361**   ; 236 NON_PRINTABLE_236
040D56 CC          2362**       db %11001100
040D57 00          2363**       db %00000000
040D58 CC          2364**       db %11001100
040D59 78          2365**       db %01111000
040D5A 30          2366**       db %00110000
040D5B 30          2367**       db %00110000
040D5C 78          2368**       db %01111000
040D5D 00          2369**       db %00000000
040D5E             2370**   
040D5E             2371**   ; 237 NON_PRINTABLE_237
040D5E 06          2372**       db %00000110
040D5F 06          2373**       db %00000110
040D60 36          2374**       db %00110110
040D61 66          2375**       db %01100110
040D62 FE          2376**       db %11111110
040D63 60          2377**       db %01100000
040D64 30          2378**       db %00110000
040D65 00          2379**       db %00000000
040D66             2380**   
040D66             2381**   ; 238 NON_PRINTABLE_238
040D66 10          2382**       db %00010000
040D67 38          2383**       db %00111000
040D68 7C          2384**       db %01111100
040D69 FE          2385**       db %11111110
040D6A 7C          2386**       db %01111100
040D6B 38          2387**       db %00111000
040D6C 10          2388**       db %00010000
040D6D 00          2389**       db %00000000
040D6E             2390**   
040D6E             2391**   ; 239 NON_PRINTABLE_239
040D6E A0          2392**       db %10100000
040D6F A0          2393**       db %10100000
040D70 E0          2394**       db %11100000
040D71 AE          2395**       db %10101110
040D72 A4          2396**       db %10100100
040D73 04          2397**       db %00000100
040D74 04          2398**       db %00000100
040D75 04          2399**       db %00000100
040D76             2400**   
040D76             2401**   ; 240 NON_PRINTABLE_240
040D76 80          2402**       db %10000000
040D77 80          2403**       db %10000000
040D78 80          2404**       db %10000000
040D79 8E          2405**       db %10001110
040D7A E8          2406**       db %11101000
040D7B 0C          2407**       db %00001100
040D7C 08          2408**       db %00001000
040D7D 08          2409**       db %00001000
040D7E             2410**   
040D7E             2411**   ; 241 NON_PRINTABLE_241
040D7E 30          2412**       db %00110000
040D7F 30          2413**       db %00110000
040D80 FC          2414**       db %11111100
040D81 30          2415**       db %00110000
040D82 30          2416**       db %00110000
040D83 00          2417**       db %00000000
040D84 FC          2418**       db %11111100
040D85 00          2419**       db %00000000
040D86             2420**   
040D86             2421**   ; 242 NON_PRINTABLE_242
040D86 60          2422**       db %01100000
040D87 30          2423**       db %00110000
040D88 18          2424**       db %00011000
040D89 30          2425**       db %00110000
040D8A 60          2426**       db %01100000
040D8B 00          2427**       db %00000000
040D8C FC          2428**       db %11111100
040D8D 00          2429**       db %00000000
040D8E             2430**   
040D8E             2431**   ; 243 NON_PRINTABLE_243
040D8E 18          2432**       db %00011000
040D8F 30          2433**       db %00110000
040D90 60          2434**       db %01100000
040D91 30          2435**       db %00110000
040D92 18          2436**       db %00011000
040D93 00          2437**       db %00000000
040D94 FC          2438**       db %11111100
040D95 00          2439**       db %00000000
040D96             2440**   
040D96             2441**   ; 244 NON_PRINTABLE_244
040D96 08          2442**       db %00001000
040D97 14          2443**       db %00010100
040D98 10          2444**       db %00010000
040D99 10          2445**       db %00010000
040D9A 10          2446**       db %00010000
040D9B 10          2447**       db %00010000
040D9C 10          2448**       db %00010000
040D9D 10          2449**       db %00010000
040D9E             2450**   
040D9E             2451**   ; 245 NON_PRINTABLE_245
040D9E 10          2452**       db %00010000
040D9F 10          2453**       db %00010000
040DA0 10          2454**       db %00010000
040DA1 10          2455**       db %00010000
040DA2 10          2456**       db %00010000
040DA3 50          2457**       db %01010000
040DA4 20          2458**       db %00100000
040DA5 00          2459**       db %00000000
040DA6             2460**   
040DA6             2461**   ; 246 NON_PRINTABLE_246
040DA6 00          2462**       db %00000000
040DA7 30          2463**       db %00110000
040DA8 00          2464**       db %00000000
040DA9 FC          2465**       db %11111100
040DAA 00          2466**       db %00000000
040DAB 30          2467**       db %00110000
040DAC 00          2468**       db %00000000
040DAD 00          2469**       db %00000000
040DAE             2470**   
040DAE             2471**   ; 247 NON_PRINTABLE_247
040DAE 00          2472**       db %00000000
040DAF 76          2473**       db %01110110
040DB0 DC          2474**       db %11011100
040DB1 00          2475**       db %00000000
040DB2 76          2476**       db %01110110
040DB3 DC          2477**       db %11011100
040DB4 00          2478**       db %00000000
040DB5 00          2479**       db %00000000
040DB6             2480**   
040DB6             2481**   ; 248 NON_PRINTABLE_248
040DB6 70          2482**       db %01110000
040DB7 D8          2483**       db %11011000
040DB8 70          2484**       db %01110000
040DB9 00          2485**       db %00000000
040DBA 00          2486**       db %00000000
040DBB 00          2487**       db %00000000
040DBC 00          2488**       db %00000000
040DBD 00          2489**       db %00000000
040DBE             2490**   
040DBE             2491**   ; 249 NON_PRINTABLE_249
040DBE 00          2492**       db %00000000
040DBF 00          2493**       db %00000000
040DC0 00          2494**       db %00000000
040DC1 30          2495**       db %00110000
040DC2 30          2496**       db %00110000
040DC3 00          2497**       db %00000000
040DC4 00          2498**       db %00000000
040DC5 00          2499**       db %00000000
040DC6             2500**   
040DC6             2501**   ; 250 NON_PRINTABLE_250
040DC6 00          2502**       db %00000000
040DC7 00          2503**       db %00000000
040DC8 00          2504**       db %00000000
040DC9 18          2505**       db %00011000
040DCA 18          2506**       db %00011000
040DCB 00          2507**       db %00000000
040DCC 00          2508**       db %00000000
040DCD 00          2509**       db %00000000
040DCE             2510**   
040DCE             2511**   ; 251 NON_PRINTABLE_251
040DCE 1F          2512**       db %00011111
040DCF 10          2513**       db %00010000
040DD0 10          2514**       db %00010000
040DD1 90          2515**       db %10010000
040DD2 50          2516**       db %01010000
040DD3 30          2517**       db %00110000
040DD4 10          2518**       db %00010000
040DD5 00          2519**       db %00000000
040DD6             2520**   
040DD6             2521**   ; 252 NON_PRINTABLE_252
040DD6 A0          2522**       db %10100000
040DD7 D0          2523**       db %11010000
040DD8 90          2524**       db %10010000
040DD9 90          2525**       db %10010000
040DDA 90          2526**       db %10010000
040DDB 00          2527**       db %00000000
040DDC 00          2528**       db %00000000
040DDD 00          2529**       db %00000000
040DDE             2530**   
040DDE             2531**   ; 253 NON_PRINTABLE_253
040DDE 70          2532**       db %01110000
040DDF D8          2533**       db %11011000
040DE0 30          2534**       db %00110000
040DE1 60          2535**       db %01100000
040DE2 F8          2536**       db %11111000
040DE3 00          2537**       db %00000000
040DE4 00          2538**       db %00000000
040DE5 00          2539**       db %00000000
040DE6             2540**   
040DE6             2541**   ; 254 NON_PRINTABLE_254
040DE6 00          2542**       db %00000000
040DE7 00          2543**       db %00000000
040DE8 3C          2544**       db %00111100
040DE9 3C          2545**       db %00111100
040DEA 3C          2546**       db %00111100
040DEB 3C          2547**       db %00111100
040DEC 00          2548**       db %00000000
040DED 00          2549**       db %00000000
040DEE             2550**   
040DEE             2551**   ; 255 NON_PRINTABLE_255
040DEE A0          2552**       db %10100000
040DEF A0          2553**       db %10100000
040DF0 A0          2554**       db %10100000
040DF1 AE          2555**       db %10101110
040DF2 44          2556**       db %01000100
040DF3 04          2557**       db %00000100
040DF4 04          2558**       db %00000100
040DF5 04          2559**       db %00000100
040DF6             2560**   
040DF6             0005*        ; incbin "../fonts/Lat2-VGA8_8x8.font"
040DF6             0006*    font_data_end:
040DF6             0007*    font_load:
040DF6             0008*    ; load font into a buffer
040DF6 21 10 FA 00 0009*        ld hl,Lat2_VGA8_8x8
040DFA 11 F6 05 04 0010*        ld de,font_data
040DFE 01 00 08 00 0011*        ld bc,font_data_end-font_data
040E02 CD 1F 1D 04 0012*        call vdu_load_buffer
040E06             0013*    ; create font from buffer
040E06 21 10 FA 00 0014*        ld hl,Lat2_VGA8_8x8
040E0A 1E 08       0015*        ld e,8
040E0C 16 08       0016*        ld d,8
040E0E 3E 00       0017*        ld a,0 ; flags
040E10 CD DB 1F 04 0018*        call vdu_font_create
040E14             0019*    ; all done
040E14 C9          0020*        ret
040E15             0036         include "fixed168.inc"
040E15             0001*    ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040E15             0002*    ; uses EZ80 MLT instruction for speed
040E15             0003*    ; operation: UHL * A --> UHL
040E15             0004*    ; destroys: AF, HL
040E15             0005*    smul24x8:
040E15             0006*    ; make hl positive and store sign flag
040E15 CD A1 04 04 0007*        call hlu_abs
040E19 F5          0008*        push af
040E1A             0009*    ; do the division
040E1A CD 25 0E 04 0010*        call mul24x8 ; hl = product
040E1E             0011*    ; adjust sign of result
040E1E F1          0012*        pop af ; sign de
040E1F F0          0013*        ret p ; hl was positive, nothing to do
040E20 CD B1 04 04 0014*        call neg_hlu ; result is negative
040E24 C9          0015*        ret
040E25             0016*    
040E25             0017*    ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040E25             0018*    ; uses EZ80 MLT instruction for speed
040E25             0019*    ; operation: UHL * A --> AUHL
040E25             0020*    ; destroys: AF, HL
040E25             0021*    mul24x8:
040E25 D5          0022*        push de ; preserve de
040E26             0023*    ; low byte
040E26 5D          0024*        ld e,l
040E27 57          0025*        ld d,a
040E28 ED 5C       0026*        mlt de
040E2A 6B          0027*        ld l,e ; product low byte
040E2B 08          0028*        ex af,af' ; save multiplier
040E2C 7A          0029*        ld a,d ; carry
040E2D 08          0030*        ex af,af' ; save carry, restore multiplier
040E2E             0031*    ; high byte
040E2E 5C          0032*        ld e,h
040E2F 57          0033*        ld d,a
040E30 ED 5C       0034*        mlt de
040E32 08          0035*        ex af,af' ; save multiplier, restore carry
040E33 83          0036*        add a,e ; add carry
040E34 67          0037*        ld h,a ; product middle byte
040E35 7A          0038*        ld a,d ; carry
040E36 08          0039*        ex af,af' ; save carry, restore multiplier
040E37             0040*    ; upper byte
040E37 22 52 0E 04 0041*        ld (@scratch),hl ; 7 cycles
040E3B 5F          0042*        ld e,a
040E3C 3A 54 0E 04 0043*        ld a,(@scratch+2)
040E40 57          0044*        ld d,a
040E41 ED 5C       0045*        mlt de
040E43 08          0046*        ex af,af' ; restore carry
040E44 8B          0047*        adc a,e ; add carry
040E45 32 54 0E 04 0048*        ld (@scratch+2),a ; 5 cycles
040E49 2A 52 0E 04 0049*        ld hl,(@scratch) ; 7 cycles
040E4D             0050*    ; highest byte
040E4D 3E 00       0051*        ld a,0 ; preserve carry flag
040E4F 8A          0052*        adc a,d ; product highest byte
040E50 D1          0053*        pop de ; restore de
040E51 C9          0054*        ret
040E52             0055*    @scratch: ds 3
040E55             0056*    
       FF FF FF 
040E55 00 00 00 00 0057*    mul24out: blkb 6,0
       00 00       
040E5B             0058*    
040E5B             0059*    ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
040E5B             0060*    ; operation: UHL * UDE --> mul24out
040E5B             0061*    mul24:
040E5B DD E5       0062*        push ix ; preserve
040E5D             0063*    ; point to output buffer and clear it
040E5D DD 21 55 0E 0064*        ld ix,mul24out
       04          
040E62 C5          0065*        push bc
040E63 01 00 00 00 0066*        ld bc,0
040E67 DD 0F 00    0067*        ld (ix),bc
040E6A DD 0F 03    0068*        ld (ix+3),bc
040E6D C1          0069*        pop bc
040E6E             0070*    ; STEP 1: UHL * E
040E6E 7B          0071*        ld a,e
040E6F E5          0072*        push hl
040E70 CD 25 0E 04 0073*        call mul24x8
040E74 DD 2F 00    0074*        ld (ix+0),hl
040E77 DD 77 03    0075*        ld (ix+3),a
040E7A             0076*    ; STEP 2: UHL * D
040E7A E1          0077*        pop hl
040E7B E5          0078*        push hl
040E7C 7A          0079*        ld a,d
040E7D CD 25 0E 04 0080*        call mul24x8
040E81 CD 9A 0E 04 0081*        call @accumulate
040E85             0082*    ; STEP 3: UHL * DEU
040E85 E1          0083*        pop hl
040E86 ED 53 CA 0E 0084*        ld (@de),de
       04          
040E8B 3A CC 0E 04 0085*        ld a,(@de+2)
040E8F CD 25 0E 04 0086*        call mul24x8
040E93 CD 9A 0E 04 0087*        call @accumulate
040E97             0088*    ; all done
040E97 DD E1       0089*        pop ix ; restore
040E99 C9          0090*        ret
040E9A             0091*    @accumulate:
040E9A DD 23       0092*        inc ix
040E9C             0093*    ; highest byte of product to carry
040E9C DD 77 03    0094*        ld (ix+3),a
040E9F             0095*    ; low byte of product
040E9F 7D          0096*        ld a,l
040EA0 DD 86 00    0097*        add a,(ix+0)
040EA3 DD 77 00    0098*        ld (ix+0),a
040EA6             0099*    ; high byte of product
040EA6 7C          0100*        ld a,h
040EA7 DD 8E 01    0101*        adc a,(ix+1)
040EAA DD 77 01    0102*        ld (ix+1),a
040EAD             0103*    ; uppper byte of product
040EAD 22 C7 0E 04 0104*        ld (@hl),hl
040EB1 3A C9 0E 04 0105*        ld a,(@hl+2)
040EB5 DD 8E 02    0106*        adc a,(ix+2)
040EB8 DD 77 02    0107*        ld (ix+2),a
040EBB             0108*    ; carry
040EBB 3E 00       0109*        ld a,0 ; preserve flags
040EBD DD 8E 03    0110*        adc a,(ix+3)
040EC0 DD 77 03    0111*        ld (ix+3),a
040EC3 C9          0112*        ret
040EC4             0113*    
040EC4 00 00 00    0114*    @ix: dl 0
040EC7 00 00 00    0115*    @hl: dl 0
040ECA 00 00 00    0116*    @de: dl 0
040ECD             0117*    
040ECD             0118*    ; ; UHL * UDE --> UHL (unsigned)
040ECD             0119*    ; umul24:
040ECD             0120*    ;     call mul24
040ECD             0121*    ;     ld hl,(mul24out)
040ECD             0122*    ;     ret
040ECD             0123*    
040ECD             0124*    ; UH.L = UH.L*UD.E (unsigned)
040ECD             0125*    umul168:
040ECD CD 5B 0E 04 0126*        call mul24
040ED1 2A 56 0E 04 0127*        ld hl,(mul24out+1)
040ED5 C9          0128*        ret
040ED6             0129*    
040ED6             0130*    ; UH.L * UD.E --> UH.L (signed)
040ED6             0131*    smul168:
040ED6             0132*    ; make everything positive and store sign flags
040ED6 CD A1 04 04 0133*        call hlu_abs
040EDA F5          0134*        push af
040EDB EB          0135*        ex de,hl
040EDC CD A1 04 04 0136*        call hlu_abs
040EE0 EB          0137*        ex de,hl
040EE1 F5          0138*        push af
040EE2             0139*    ; do the division
040EE2 CD CD 0E 04 0140*        call umul168 ; hl = product
040EE6             0141*    ; adjust sign of result
040EE6 F1          0142*        pop af ; sign de
040EE7 FA F2 0E 04 0143*        jp m,@de_neg
040EEB F1          0144*        pop af ; sign hl
040EEC F0          0145*        ret p ; both positive, nothing to do
040EED             0146*    @hl_neg:
040EED CD B1 04 04 0147*        call neg_hlu ; de pos, hl neg, result is negative
040EF1 C9          0148*        ret
040EF2             0149*    @de_neg:
040EF2 F1          0150*        pop af
040EF3 F8          0151*        ret m ; both negative, nothing to do
040EF4 CD B1 04 04 0152*        call neg_hlu ; result is negative
040EF8 C9          0153*        ret
040EF9             0154*    
040EF9             0155*    ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040EF9             0156*    ; perform unsigned division of 16.8 fixed place values
040EF9             0157*    ; with an unsigned 16.8 fixed place result and 24-bit remainder
040EF9             0158*    udiv168:
040EF9             0159*    ; back up divisor
040EF9 ED 53 30 0F 0160*        ld (@ude),de
       04          
040EFE             0161*    ; get the 16-bit integer part of the quotient
040EFE CD B1 03 04 0162*        call udiv24 ; de = quotient, hl = remainder
040F02             0163*    ; load quotient to upper three bytes of output
040F02 ED 53 37 0F 0164*        ld (div168_out+1),de
       04          
040F07             0165*    @div256:
040F07             0166*    ; multiply remainder by 256
040F07             0167*        hlu_mul256
                       M1 Args: none
040F07 29          0001*M1      add hl,hl ; * 2
040F08 29          0002*M1      add hl,hl ; * 4
040F09 29          0003*M1      add hl,hl ; * 8
040F0A 29          0004*M1      add hl,hl ; * 16
040F0B 29          0005*M1      add hl,hl ; * 32
040F0C 29          0006*M1      add hl,hl ; * 64
040F0D 29          0007*M1      add hl,hl ; * 128
040F0E 29          0008*M1      add hl,hl ; * 256
040F0F             0168*    ; skip fractional computation if remainder is zero
040F0F             0169*        SIGN_HLU
                       M1 Args: none
040F0F 19          0001*M1      add hl,de ; 1 cycle
040F10 B7          0002*M1      or a ; clear flags ; 1 cycle
040F11 ED 52       0003*M1      sbc hl,de ; 2 cycles
040F13             0004*M1      ; 4 cycles total
040F13 20 03       0170*        jr nz,@div_frac
040F15 AF          0171*        xor a
040F16 18 0A       0172*        jr @write_frac
040F18             0173*    ; now divide the shifted remainder by the divisor
040F18             0174*    @div_frac:
040F18 ED 5B 30 0F 0175*        ld de,(@ude) ; get back divisor
       04          
040F1D CD B1 03 04 0176*        call udiv24 ; de = quotient, hl = remainder
040F21             0177*    ; load low byte of quotient to low byte of output
040F21 7B          0178*        ld a,e
040F22             0179*    @write_frac:
040F22 32 36 0F 04 0180*        ld (div168_out),a
040F26             0181*    ; load de with return value
040F26 ED 5B 36 0F 0182*        ld de,(div168_out)
       04          
040F2B             0183*    ; load a with any overflow
040F2B 3A 39 0F 04 0184*        ld a,(div168_out+3)
040F2F C9          0185*        ret ; ud.e is the 16.8 result
040F30             0186*    @ude: ds 6
040F36             0187*    div168_out: ds 4 ; the extra byte is for overflow
040F3A             0188*    
040F3A             0189*    ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
040F3A             0190*    ; perform signed division of 16.8 fixed place values
040F3A             0191*    ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
040F3A             0192*    sdiv168:
040F3A             0193*    ; make everything positive and store sign flags
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
040F3A CD A1 04 04 0194*        call hlu_abs
040F3E F5          0195*        push af
040F3F EB          0196*        ex de,hl
040F40 CD A1 04 04 0197*        call hlu_abs
040F44 EB          0198*        ex de,hl
040F45 F5          0199*        push af
040F46             0200*    ; do the division
040F46 CD F9 0E 04 0201*        call udiv168 ; de = quotient, hl = remainder
040F4A             0202*    ; adjust sign of result
040F4A F1          0203*        pop af ; sign de
040F4B FA 58 0F 04 0204*        jp m,@de_neg
040F4F F1          0205*        pop af ; sign hl
040F50 F0          0206*        ret p ; both positive, nothing to do
040F51             0207*    @hl_neg:
040F51 EB          0208*        ex de,hl ; hl = quotient, de = remainder
040F52 CD B1 04 04 0209*        call neg_hlu ; de pos, hl neg, result is negative
040F56 EB          0210*        ex de,hl ; de = negated quotient, hl = remainder
040F57 C9          0211*        ret
040F58             0212*    @de_neg:
040F58 F1          0213*        pop af
040F59 F8          0214*        ret m ; both negative, nothing to do
040F5A EB          0215*        ex de,hl ; hl = quotient, de = remainder
040F5B CD B1 04 04 0216*        call neg_hlu ; result is negative
040F5F EB          0217*        ex de,hl ; de = negated quotient, hl = remainder
040F60 C9          0218*        ret
040F61             0219*    
040F61             0220*    ; convert signed angles from a 360 to 256 degree circle
040F61             0221*    ; inputs: uh.l is the angle360 in 16.8 fixed format
040F61             0222*    ; outputs: uh.l is the angle256 in 16.8 fixed format
040F61             0223*    ; destroys: TODO
040F61             0224*    deg_360_to_256:
040F61 D5          0225*        push de ; preserve de
040F62             0226*    ; make angle positive and store sign flag
040F62 CD A1 04 04 0227*        call hlu_abs
040F66 F5          0228*        push af
040F67             0229*    ; multiply by coversion factor of 256/360
040F67 11 B6 00 00 0230*        ld de,0x0000B6 ; 0.711
040F6B CD CD 0E 04 0231*        call umul168 ; uh.l = uh.l * 0.711
040F6F             0232*    ; restore sign flag and adjust output accordingly
040F6F F1          0233*        pop af
040F70 F2 78 0F 04 0234*        jp p,@pos ; positive number
040F74 CD B1 04 04 0235*        call neg_hlu
040F78             0236*    @pos:
040F78             0237*    ; restore de and return uh.l as the result
040F78 D1          0238*        pop de
040F79 C9          0239*        ret
040F7A             0240*    
040F7A             0241*    ; convert signed angles from a 256 to 360 degree circle
040F7A             0242*    ; inputs: uh.l is the angle256 in 16.8 fixed format
040F7A             0243*    ; outputs: uh.l is the angle360 in 16.8 fixed format
040F7A             0244*    ; destroys: TODO
040F7A             0245*    deg_256_to_360:
040F7A D5          0246*        push de ; preserve de
040F7B             0247*    ; make angle positive and store sign flag
040F7B CD A1 04 04 0248*        call hlu_abs
040F7F F5          0249*        push af
040F80             0250*    ; multiply by coversion factor of 360/256
040F80 11 68 01 00 0251*        ld de,0x000168 ; 1.406
040F84 CD CD 0E 04 0252*        call umul168 ; uh.l = uh.l * 1.406
040F88             0253*    ; restore sign flag and adjust output accordingly
040F88 F1          0254*        pop af
040F89 F2 91 0F 04 0255*        jp p,@pos ; positive number
040F8D CD B1 04 04 0256*        call neg_hlu
040F91             0257*    @pos:
040F91             0258*    ; restore de and return uh.l as the result
040F91 D1          0259*        pop de
040F92 C9          0260*        ret
040F93             0261*    
040F93             0262*    ; fixed 16.8 routine
040F93             0263*    ; cos(uh.l) --> uh.l
040F93             0264*    ; destroys: f, hl
040F93             0265*    cos168:
040F93 D5          0266*        push de ; preserve de
040F94             0267*    ; for cos we simply increment the angle by 90 degrees
040F94             0268*    ; or 0x004000 in 16.8 degrees256
040F94             0269*    ; which makes it a sin problem
040F94 11 00 40 00 0270*        ld de,0x004000
040F98 19          0271*        add hl,de ; modulo 256 happens below
040F99 D1          0272*        pop de ; restore de
040F9A             0273*    ; fall through to sin168
040F9A             0274*    
040F9A             0275*    ; ---------------------
040F9A             0276*    ; fixed 16.8 routine
040F9A             0277*    ; sin(uh.l) --> uh.l
040F9A             0278*    ; destroys: f, hl
040F9A             0279*    sin168:
040F9A D5          0280*        push de
040F9B             0281*    ; handle negative angles appropriately
040F9B CD A1 04 04 0282*        call hlu_abs
040F9F F2 A8 0F 04 0283*        jp p,@F
040FA3 11 00 00 FF 0284*        ld de,-256*256
040FA7 19          0285*        add hl,de
040FA8             0286*    @@:
040FA8 2E 03       0287*        ld l,3 ; multiply by 3 to get our lookup index
040FAA ED 6C       0288*        mlt hl
040FAC 11 60 12 04 0289*        ld de,sin_lut_168 ; grab the lut address
040FB0 19          0290*        add hl,de ; bump hl by the index
040FB1 ED 27       0291*        ld hl,(hl) ; don't try this on a z80!
040FB3 D1          0292*        pop de
040FB4 C9          0293*        ret
040FB5             0294*    
040FB5             0295*    ; 16.8 fixed inputs / outputs
040FB5             0296*    ; takes: uh.l as angle in degrees 256
040FB5             0297*    ;        ud.e as radius
040FB5             0298*    ; returns ub.c as dx, ud.e as dy, uh.l as radius
040FB5             0299*    ;        displacements from origin (0,0)
040FB5             0300*    ; destroys: everything except indexes
040FB5             0301*    polar_to_cartesian:
040FB5             0302*    ; back up input parameters
040FB5 22 E4 0F 04 0303*        ld (@angle), hl
040FB9 ED 53 E7 0F 0304*        ld (@radius), de
       04          
040FBE             0305*    ; compute dx = sin(uh.l) * ud.e
040FBE CD 9A 0F 04 0306*        call sin168 ; uh.l = sin(uh.l)
040FC2 ED 5B E7 0F 0307*        ld de,(@radius)
       04          
040FC7 CD D6 0E 04 0308*        call smul168 ; uh.l = dx
040FCB E5          0309*        push hl
040FCC             0310*    ; compute dy = -cos(uh.l) * ud.e
040FCC 2A E4 0F 04 0311*        ld hl,(@angle)
040FD0 CD 93 0F 04 0312*        call cos168 ; uh.l = cos(uh.l)
040FD4 ED 5B E7 0F 0313*        ld de,(@radius)
       04          
040FD9 CD D6 0E 04 0314*        call smul168 ; uh.l = dy
040FDD CD B1 04 04 0315*        call neg_hlu ; invert dy for screen coords convention
040FE1 EB          0316*        ex de,hl ; de = dy for output
040FE2 C1          0317*        pop bc ; bc = dx for output
040FE3             0318*    ; and out
040FE3 C9          0319*        ret
040FE4             0320*    @angle: ds 3
040FE7             0321*    @radius: ds 3
040FEA             0322*    
040FEA             0323*    ; 16.8 fixed inputs / outputs
040FEA             0324*    ; inputs: ub.c as dx, ud.e as dy
040FEA             0325*    ;        displacements from origin (0,0)
040FEA             0326*    ; returns: uh.l as angle in degrees 256
040FEA             0327*    ;        ud.e as radius
040FEA             0328*    ; destroys: everything except indexes
040FEA             0329*    cartesian_to_polar:
       FF FF FF FF 
       FF FF 
040FEA ED 43 43 10 0330*        ld (dx168),bc ; dx argument for distance168
       04          
040FEF ED 53 49 10 0331*        ld (dy168),de ; dy argument for distance168
       04          
040FF4             0332*    ; compute radius
040FF4 CD 4F 10 04 0333*        call distance168 ; uh.l = radius
040FF8 E5          0334*        push hl ; save radius
040FF9             0335*    ; compute angle
040FF9 ED 4B 43 10 0336*        ld bc,(dx168) ; dx argument for atan2_168fast
       04          
040FFE ED 5B 49 10 0337*        ld de,(dy168) ; dy argument for atan2_168fast
       04          
041003 CD AF 10 04 0338*        call atan2_168fast ; uh.l = angle
041007             0339*    ; return result
041007 D1          0340*        pop de ; de = radius (was hl)
041008 C9          0341*        ret
041009             0342*    ; end cartesian_to_polar
041009             0343*    
041009             0344*    ; 16.8 fixed inputs / outputs
041009             0345*    ; inputs: ub.c as dx, ud.e as dy
041009             0346*    ;        displacements from origin (0,0)
041009             0347*    ; returns: uh.l as angle in degrees 256
041009             0348*    ;        ud.e as radius
041009             0349*    ; destroys: everything except indexes
041009             0350*    ; note: uses distance168sm which is more accurate for small deltas
041009             0351*    cartesian_to_polar_sm:
041009 ED 43 43 10 0352*        ld (dx168),bc ; dx argument for distance168
       04          
04100E ED 53 49 10 0353*        ld (dy168),de ; dy argument for distance168
       04          
041013             0354*    ; compute radius
041013 CD 8A 10 04 0355*        call distance168sm ; uh.l = radius
041017 E5          0356*        push hl ; save radius
041018             0357*    ; compute angle
041018 ED 4B 43 10 0358*        ld bc,(dx168) ; dx argument for atan2_168fast
       04          
04101D ED 5B 49 10 0359*        ld de,(dy168) ; dy argument for atan2_168fast
       04          
041022 CD AF 10 04 0360*        call atan2_168fast ; uh.l = angle
041026             0361*    ; return result
041026 D1          0362*        pop de ; de = radius (was hl)
041027 C9          0363*        ret
041028             0364*    ; end cartesian_to_polar
041028             0365*    
041028             0366*    ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
041028             0367*    ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
041028             0368*    ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
041028             0369*    ;         also populates scratch locations dx168 and dy168
041028             0370*    ; destroys: a,hl,bc,de
041028             0371*    dxy168:
041028             0372*    ; compute dx = x1-x0
041028 AF          0373*        xor a ; clear carry
041029 DD E5       0374*        push ix ; move ix to hl via the stack
04102B E1          0375*        pop hl ; hl = x1
04102C ED 42       0376*        sbc hl,bc ; hl = dx
04102E 22 43 10 04 0377*        ld (dx168),hl ; dx to scratch
041032             0378*    ; compute dy = y1-y0
041032 AF          0379*        xor a ; clear carry
041033 FD E5       0380*        push iy ; move iy to hl via the stack
041035 E1          0381*        pop hl ; hl = y1
041036 ED 52       0382*        sbc hl,de ; hl = dy
041038 22 49 10 04 0383*        ld (dy168),hl ; dy to scratch
04103C             0384*    ; populate output registers and return
04103C EB          0385*        ex de,hl ; ud.e = dy
04103D ED 4B 43 10 0386*        ld bc,(dx168) ; ub.c = dx
       04          
041042 C9          0387*        ret
041043 00 00 00 00 0388*    dx168: blkb 6,0
       00 00       
041049 00 00 00 00 0389*    dy168: blkb 6,0
       00 00       
04104F             0390*    
04104F             0391*    ; compute the euclidian distance between two cartesian coordinates
04104F             0392*    ; using the formula d = sqrt(dx^2+dy^2)
04104F             0393*    ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
04104F             0394*    ; output; uh.l is the 16.8 fixed format distance
04104F             0395*    ;         also populates scratch locations dx168 and dy168
04104F             0396*    ; destroys: a,hl,bc,de
04104F             0397*    ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
04104F             0398*    ;       thus the result will always be an integer, albeit in 16.8 format
04104F             0399*    distance168:
04104F             0400*    ; compute dy^2
04104F 2A 49 10 04 0401*        ld hl,(dy168)
041053 CD A1 04 04 0402*        call hlu_abs
041057             0403*        ; call hlu_udiv256 ; make integer to avoid overflow
041057             0404*        SRL_UHL ; make integer to avoid overflow
                       M1 Args: none
041057 3B          0001*M1      dec sp ; 1 cycle
041058 E5          0002*M1      push hl ; 4 cycles
041059 33          0003*M1      inc sp ; 1 cycle
04105A E1          0004*M1      pop hl ; 4 cycles
04105B 23          0005*M1      inc hl ; 1 cycle
04105C 52 2B       0006*M1      dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
04105E             0007*M1      ; 13 cycles total
04105E E5          0405*        push hl
04105F D1          0406*        pop de
041060 CD 98 03 04 0407*        call umul24 ; hl = dy^2
041064 E5          0408*        push hl ; save dy^2
041065             0409*    ; compute dx^2
041065 2A 43 10 04 0410*        ld hl,(dx168)
041069 CD A1 04 04 0411*        call hlu_abs
04106D             0412*        ; call hlu_udiv256 ; make integer to avoid overflow
04106D             0413*        SRL_UHL ; make integer to avoid overflow
                       M1 Args: none
04106D 3B          0001*M1      dec sp ; 1 cycle
04106E E5          0002*M1      push hl ; 4 cycles
04106F 33          0003*M1      inc sp ; 1 cycle
041070 E1          0004*M1      pop hl ; 4 cycles
041071 23          0005*M1      inc hl ; 1 cycle
041072 52 2B       0006*M1      dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
041074             0007*M1      ; 13 cycles total
041074 E5          0414*        push hl
041075 D1          0415*        pop de
041076 CD 98 03 04 0416*        call umul24 ; hl = dx^2
04107A             0417*    ; add dx^2 and dy^2
04107A D1          0418*        pop de ; de = dy^2 (was hl)
04107B 19          0419*        add hl,de ; hl = dx^2 + dy^2
04107C             0420*    ; compute the square root
04107C CD 7A 11 04 0421*        call sqrt24 ; de = sqrt(dx^2 + dy^2)
041080 EB          0422*        ex de,hl ; hl = distance
041081             0423*        hlu_mul256 ; convert back to 16.8 fixed
                       M1 Args: none
041081 29          0001*M1      add hl,hl ; * 2
041082 29          0002*M1      add hl,hl ; * 4
041083 29          0003*M1      add hl,hl ; * 8
041084 29          0004*M1      add hl,hl ; * 16
041085 29          0005*M1      add hl,hl ; * 32
041086 29          0006*M1      add hl,hl ; * 64
041087 29          0007*M1      add hl,hl ; * 128
041088 29          0008*M1      add hl,hl ; * 256
041089 C9          0424*        ret
04108A             0425*    
04108A             0426*    ; compute the euclidian distance between two cartesian coordinates
04108A             0427*    ; using the formula d = sqrt(dx^2+dy^2)
04108A             0428*    ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
04108A             0429*    ; output; uh.l is the 16.8 fixed format distance
04108A             0430*    ;         also populates scratch locations dx168 and dy168
04108A             0431*    ; destroys: a,hl,bc,de
04108A             0432*    ; NOTE: sm means 'small' because it doesn't round down the deltas
04108A             0433*    ;       making it more accurate for small deltas,
04108A             0434*    ;       but will overflow if used for screen-sized deltas
04108A             0435*    distance168sm:
04108A             0436*    ; compute dy^2
04108A 2A 49 10 04 0437*        ld hl,(dy168)
04108E CD A1 04 04 0438*        call hlu_abs
041092 E5          0439*        push hl
041093 D1          0440*        pop de
041094 CD 98 03 04 0441*        call umul24 ; hl = dy^2
041098 E5          0442*        push hl ; save dy^2
041099             0443*    ; compute dx^2
041099 2A 43 10 04 0444*        ld hl,(dx168)
04109D CD A1 04 04 0445*        call hlu_abs
0410A1 E5          0446*        push hl
0410A2 D1          0447*        pop de
0410A3 CD 98 03 04 0448*        call umul24 ; hl = dx^2
0410A7             0449*    ; add dx^2 and dy^2
0410A7 D1          0450*        pop de ; de = dy^2 (was hl)
0410A8 19          0451*        add hl,de ; hl = dx^2 + dy^2
0410A9             0452*    ; compute the square root
0410A9 CD 7A 11 04 0453*        call sqrt24 ; de = sqrt(dx^2 + dy^2)
0410AD EB          0454*        ex de,hl ; hl = distance
0410AE C9          0455*        ret
0410AF             0456*    
0410AF             0457*    ; atan2_(ub.c,ud.e) --> uh.l
0410AF             0458*    ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0410AF             0459*    ;   whether inputs are integers or fractional doesn't matter
0410AF             0460*    ;   so long as the sign bit of the upper byte is correct
0410AF             0461*    ; output: uh.l is the 16.8 fixed angle in degrees 256
0410AF             0462*    ; angles are COMPASS HEADINGS based on
0410AF             0463*    ; screen coordinate conventions,where the y axis is flipped
0410AF             0464*    ; #E0 224      0       32 #20
0410AF             0465*    ;        -x,-y | +x,-y
0410AF             0466*    ; #C0 192------+------ 64 #40
0410AF             0467*    ;        -x,+y | +x,+y
0410AF             0468*    ; #A0 160   128 #80   96 #60
0410AF             0469*    atan2_168fast:
0410AF             0470*    ; get signs and make everything positive
0410AF             0471*    ; get abs(x) and store its original sign
0410AF C5          0472*        push bc
0410B0 E1          0473*        pop hl
0410B1 CD A1 04 04 0474*        call hlu_abs ; if x was negative this also sets the sign flag
0410B5 E5          0475*        push hl ; store abs(x)
0410B6 C1          0476*        pop bc ; bc = abs(x)
0410B7 F5          0477*        push af ; store sign of x
0410B8             0478*    ; get abs(y) and store its original sign
0410B8 EB          0479*        ex de,hl ; hl = y
0410B9 CD A1 04 04 0480*        call hlu_abs ; if y was negative this also sets the sign flag
0410BD EB          0481*        ex de,hl ; de = abs(y)
0410BE F5          0482*        push af ; store sign of y
0410BF             0483*    ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
0410BF             0484*    ; this ensures that our lookup value is between 0 and 1 inclusive
0410BF AF          0485*        xor a ; clear the carry flag
0410C0 D5          0486*        push de
0410C1 E1          0487*        pop hl
0410C2 ED 42       0488*        sbc hl,bc
0410C4 F5          0489*        push af ; save sign of de - bc
0410C5 F2 CE 10 04 0490*        jp p,@1 ; bc <= de, so we skip ahead
0410C9             0491*    ; otherwise we swap bc and de
0410C9 C5          0492*        push bc
0410CA E1          0493*        pop hl
0410CB EB          0494*        ex de,hl
0410CC E5          0495*        push hl
0410CD C1          0496*        pop bc
0410CE             0497*    @1:
0410CE             0498*    ; now we're ready to snag our preliminary result
0410CE C5          0499*        push bc
0410CF E1          0500*        pop hl
0410D0 CD 3E 11 04 0501*        call atan_168fast ; uh.l comes back with prelim result
0410D4             0502*    ; now we adjust uh.l based on sign of de - bc
0410D4 F1          0503*        pop af
0410D5 F2 E1 10 04 0504*        jp p,@2 ; bc <= de,so we skip ahead
0410D9 EB          0505*        ex de,hl
0410DA 21 00 40 00 0506*        ld hl,64*256 ; subtract from 64 (90) degrees
0410DE AF          0507*        xor a ; clear the carry flag
0410DF ED 52       0508*        sbc hl,de
0410E1             0509*    @2:
0410E1             0510*    ; adjust the result based on quadrant
0410E1             0511*    ; #E0 224      0       32 #20
0410E1             0512*    ;        -x,-y | +x,-y
0410E1             0513*    ; #C0 192------+------ 64 #40
0410E1             0514*    ;        -x,+y | +x,+y
0410E1             0515*    ; #A0 160   128 #80   96 #60
0410E1 F1          0516*        pop af ; sign of y
0410E2 CA 1F 11 04 0517*        jp z,@y_zero
0410E6 F2 FF 10 04 0518*        jp p,@y_pos
0410EA             0519*    ; y neg,check x
0410EA F1          0520*        pop af ; sign of x
0410EB CA F9 10 04 0521*        jp z,@y_neg_x_zero
0410EF F2 FE 10 04 0522*        jp p,@y_neg_x_pos
0410F3             0523*    ; y neg,x neg
0410F3             0524*    ; angle is 128 to 256 (270 to 360)
0410F3             0525*    ; negating the intermediate does the trick
0410F3 CD B1 04 04 0526*        call neg_hlu
0410F7 18 31       0527*        jr @zero_hlu
0410F9             0528*    
0410F9             0529*    @y_neg_x_zero:
0410F9             0530*    ; y neg,x zero
0410F9             0531*    ; angle is 0
0410F9 21 00 00 00 0532*        ld hl,0
0410FD C9          0533*        ret
0410FE             0534*    @y_neg_x_pos:
0410FE             0535*    ; y neg,x pos
0410FE             0536*    ; angle is 0 to 64 (0 to 90)
0410FE             0537*    ; so we're good
0410FE C9          0538*        ret
0410FF             0539*    
0410FF             0540*    @y_pos:
0410FF F1          0541*        pop af ; sign of x
041100 CA 0F 11 04 0542*        jp z,@y_pos_x_zero
041104 F2 14 11 04 0543*        jp p,@y_pos_x_pos
041108             0544*    ; y pos,x neg
041108             0545*    ; angle is 128 to 192 (180-270)
041108             0546*    ; so we add 128 to intermediate
041108 11 00 80 00 0547*        ld de,128*256
04110C 19          0548*        add hl,de
04110D 18 1B       0549*        jr @zero_hlu
04110F             0550*    @y_pos_x_zero:
04110F             0551*    ; y pos,x zero
04110F             0552*    ; angle is 128 (180)
04110F 21 00 80 00 0553*        ld hl,128*256
041113 C9          0554*        ret
041114             0555*    @y_pos_x_pos:
041114             0556*    ; y pos,x pos
041114             0557*    ; angle is 64 to 128 (90 to 180)
041114             0558*    ; neg the intermediate and add 180 degrees
041114 CD B1 04 04 0559*        call neg_hlu
041118 11 00 80 00 0560*        ld de,128*256
04111C 19          0561*        add hl,de
04111D 18 0B       0562*        jr @zero_hlu
04111F             0563*    
04111F             0564*    @y_zero:
04111F F1          0565*        pop af ; sign of x
041120 FA 25 11 04 0566*        jp m,@y_zero_x_neg
041124             0567*    ; y zero,x pos
041124             0568*    ; angle is 64 (90),nothing to do
041124 C9          0569*        ret
041125             0570*    @y_zero_x_neg:
041125             0571*    ; y zero ,x neg
041125             0572*    ; angle is 192 (270)
041125 21 00 C0 00 0573*        ld hl,192*256
041129 C9          0574*        ret
04112A             0575*    @zero_hlu:
04112A AF          0576*        xor a
04112B 22 38 11 04 0577*        ld (@scratch),hl
04112F 32 3A 11 04 0578*        ld (@scratch+2),a
041133 2A 38 11 04 0579*        ld hl,(@scratch)
041137 C9          0580*        ret
041138             0581*    @scratch: ds 6
04113E             0582*    
04113E             0583*    ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
04113E             0584*    ; output: uh.l is the 16.8 fixed format angle in degrees 256
04113E             0585*    ; destroys: a,hl,bc,de
04113E             0586*    ; note: only works for angles from 0 to 32 (45) degrees
04113E             0587*    ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
04113E             0588*    atan_168fast:
04113E             0589*    ; because we use compass headings instead of geometric angles
04113E             0590*    ; we compute dx/dy which is 1/tan(theta) in the maths world
04113E             0591*    ; we can do faster unsigned division here because we know dx and dy are positive
       FF FF FF FF 
       FF FF 
04113E CD F9 0E 04 0592*        call udiv168 ; ud.e = dx/dy
041142 EB          0593*        ex de,hl ; uh.l = dx/dy
041143             0594*    ; test uh.l for 0
041143 19          0595*        add hl,de
041144 B7          0596*        or a
041145 ED 52       0597*        sbc hl,de
041147 28 22       0598*        jr z,@is_zero
041149             0599*    ; test uh.l for 1
041149 AF          0600*        xor a ; clear carry
04114A EB          0601*        ex de,hl
04114B 21 00 01 00 0602*        ld hl,1*256 ; 1 in 16.8 fixed format
04114F ED 52       0603*        sbc hl,de
041151 28 13       0604*        jr z,@is_45
041153 EB          0605*        ex de,hl
041154             0606*    ; no special cases so we move on
041154             0607*    ; l contains the fractional portion of tan(uh.l)
041154             0608*    ; we multiply it by three to get our lookup table index
041154 26 03       0609*        ld h,3
041156 ED 6C       0610*        mlt hl ; index into lut
041158 11 00 00 00 0611*        ld de,0 ; clear deu
04115C 54          0612*        ld d,h ; copy hl to de
04115D 5D          0613*        ld e,l ; de contains our index
04115E 21 63 15 04 0614*        ld hl,atan_lut_168 ; grab the lut address
041162 19          0615*        add hl,de ; bump hl by the index
041163 ED 27       0616*        ld hl,(hl) ; don't try this on a z80!
041165 C9          0617*        ret ; and out
041166             0618*    @is_45:
041166 21 00 20 00 0619*        ld hl,32*256
04116A C9          0620*        ret
04116B             0621*    ; for the case tan(0)
04116B             0622*    @is_zero:
04116B 21 00 00 00 0623*        ld hl,0*256
04116F C9          0624*        ret
041170             0625*    
041170             0626*    ; Expects  ADL mode
041170             0627*    ; Inputs:  UH.L
041170             0628*    ; Outputs: UH.L is the 16.8 square root
041170             0629*    ;          UDE is the integer difference inputHL-DE^2
041170             0630*    sqrt168:
041170 CD 7A 11 04 0631*        call sqrt24
041174 EB          0632*        ex de,hl
041175 29          0633*        add hl,hl
041176 29          0634*        add hl,hl
041177 29          0635*        add hl,hl
041178 29          0636*        add hl,hl
041179 C9          0637*        ret
04117A             0638*    
04117A             0639*    ; credit: xeda112358
04117A             0640*    ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
04117A             0641*    sqrt24:
04117A             0642*    ; Expects ADL mode
04117A             0643*    ; Inputs: HL
04117A             0644*    ; Outputs: DE is the integer square root
04117A             0645*    ;  HL is the difference inputHL-DE^2
04117A             0646*    ;  c flag reset
04117A 01 00 00 00 0647*        ld bc,0 ; clear bcu
04117E 11 00 00 00 0648*        ld de,0 ; clear deu
041182 AF          0649*        xor a
041183 45          0650*        ld b,l
041184 C5          0651*        push bc
041185 47          0652*        ld b,a
041186 6F          0653*        ld l,a
041187             0654*    ; Iteration 1
041187 29          0655*        add hl,hl
041188 CB 11       0656*        rl c
04118A 29          0657*        add hl,hl
04118B CB 11       0658*        rl c
04118D 91          0659*        sub c
04118E 30 04       0660*        jr nc,$+6
041190 1C          0661*        inc e
041191 1C          0662*        inc e
041192 2F          0663*        cpl
041193 4F          0664*        ld c,a
041194             0665*    ; Iteration 2
041194 29          0666*        add hl,hl
041195 CB 11       0667*        rl c
041197 29          0668*        add hl,hl
041198 CB 11       0669*        rl c
04119A CB 13       0670*        rl e
04119C 7B          0671*        ld a,e
04119D 91          0672*        sub c
04119E 30 04       0673*        jr nc,$+6
0411A0 1C          0674*        inc e
0411A1 1C          0675*        inc e
0411A2 2F          0676*        cpl
0411A3 4F          0677*        ld c,a
0411A4             0678*    ; Iteration 3
0411A4 29          0679*        add hl,hl
0411A5 CB 11       0680*        rl c
0411A7 29          0681*        add hl,hl
0411A8 CB 11       0682*        rl c
0411AA CB 13       0683*        rl e
0411AC 7B          0684*        ld a,e
0411AD 91          0685*        sub c
0411AE 30 04       0686*        jr nc,$+6
0411B0 1C          0687*        inc e
0411B1 1C          0688*        inc e
0411B2 2F          0689*        cpl
0411B3 4F          0690*        ld c,a
0411B4             0691*    ; Iteration 4
0411B4 29          0692*        add hl,hl
0411B5 CB 11       0693*        rl c
0411B7 29          0694*        add hl,hl
0411B8 CB 11       0695*        rl c
0411BA CB 13       0696*        rl e
0411BC 7B          0697*        ld a,e
0411BD 91          0698*        sub c
0411BE 30 04       0699*        jr nc,$+6
0411C0 1C          0700*        inc e
0411C1 1C          0701*        inc e
0411C2 2F          0702*        cpl
0411C3 4F          0703*        ld c,a
0411C4             0704*    ; Iteration 5
0411C4 29          0705*        add hl,hl
0411C5 CB 11       0706*        rl c
0411C7 29          0707*        add hl,hl
0411C8 CB 11       0708*        rl c
0411CA CB 13       0709*        rl e
0411CC 7B          0710*        ld a,e
0411CD 91          0711*        sub c
0411CE 30 04       0712*        jr nc,$+6
0411D0 1C          0713*        inc e
0411D1 1C          0714*        inc e
0411D2 2F          0715*        cpl
0411D3 4F          0716*        ld c,a
0411D4             0717*    ; Iteration 6
0411D4 29          0718*        add hl,hl
0411D5 CB 11       0719*        rl c
0411D7 29          0720*        add hl,hl
0411D8 CB 11       0721*        rl c
0411DA CB 13       0722*        rl e
0411DC 7B          0723*        ld a,e
0411DD 91          0724*        sub c
0411DE 30 04       0725*        jr nc,$+6
0411E0 1C          0726*        inc e
0411E1 1C          0727*        inc e
0411E2 2F          0728*        cpl
0411E3 4F          0729*        ld c,a
0411E4             0730*    ; Iteration 7
0411E4 29          0731*        add hl,hl
0411E5 CB 11       0732*        rl c
0411E7 29          0733*        add hl,hl
0411E8 CB 11       0734*        rl c
0411EA CB 10       0735*        rl b
0411EC EB          0736*        ex de,hl
0411ED 29          0737*        add hl,hl
0411EE E5          0738*        push hl
0411EF ED 42       0739*        sbc hl,bc
0411F1 30 06       0740*        jr nc,$+8
0411F3 7C          0741*        ld a,h
0411F4 2F          0742*        cpl
0411F5 47          0743*        ld b,a
0411F6 7D          0744*        ld a,l
0411F7 2F          0745*        cpl
0411F8 4F          0746*        ld c,a
0411F9 E1          0747*        pop hl
0411FA 30 02       0748*        jr nc,$+4
0411FC 23          0749*        inc hl
0411FD 23          0750*        inc hl
0411FE EB          0751*        ex de,hl
0411FF             0752*    ; Iteration 8
0411FF 29          0753*        add hl,hl
041200 69          0754*        ld l,c
041201 60          0755*        ld h,b
041202 ED 6A       0756*        adc hl,hl
041204 ED 6A       0757*        adc hl,hl
041206 EB          0758*        ex de,hl
041207 29          0759*        add hl,hl
041208 ED 52       0760*        sbc hl,de
04120A 19          0761*        add hl,de
04120B EB          0762*        ex de,hl
04120C 30 04       0763*        jr nc,$+6
04120E ED 52       0764*        sbc hl,de
041210 13          0765*        inc de
041211 13          0766*        inc de
041212             0767*    ; Iteration 9
041212 F1          0768*        pop af
041213 17          0769*        rla
041214 ED 6A       0770*        adc hl,hl
041216 17          0771*        rla
041217 ED 6A       0772*        adc hl,hl
041219 EB          0773*        ex de,hl
04121A 29          0774*        add hl,hl
04121B ED 52       0775*        sbc hl,de
04121D 19          0776*        add hl,de
04121E EB          0777*        ex de,hl
04121F 30 04       0778*        jr nc,$+6
041221 ED 52       0779*        sbc hl,de
041223 13          0780*        inc de
041224 13          0781*        inc de
041225             0782*    ; Iteration 10
041225 17          0783*        rla
041226 ED 6A       0784*        adc hl,hl
041228 17          0785*        rla
041229 ED 6A       0786*        adc hl,hl
04122B EB          0787*        ex de,hl
04122C 29          0788*        add hl,hl
04122D ED 52       0789*        sbc hl,de
04122F 19          0790*        add hl,de
041230 EB          0791*        ex de,hl
041231 30 04       0792*        jr nc,$+6
041233 ED 52       0793*        sbc hl,de
041235 13          0794*        inc de
041236 13          0795*        inc de
041237             0796*    ; Iteration 11
041237 17          0797*        rla
041238 ED 6A       0798*        adc hl,hl
04123A 17          0799*        rla
04123B ED 6A       0800*        adc hl,hl
04123D EB          0801*        ex de,hl
04123E 29          0802*        add hl,hl
04123F ED 52       0803*        sbc hl,de
041241 19          0804*        add hl,de
041242 EB          0805*        ex de,hl
041243 30 04       0806*        jr nc,$+6
041245 ED 52       0807*        sbc hl,de
041247 13          0808*        inc de
041248 13          0809*        inc de
041249             0810*    ; Iteration 12
041249 17          0811*        rla
04124A ED 6A       0812*        adc hl,hl
04124C 17          0813*        rla
04124D ED 6A       0814*        adc hl,hl
04124F EB          0815*        ex de,hl
041250 29          0816*        add hl,hl
041251 ED 52       0817*        sbc hl,de
041253 19          0818*        add hl,de
041254 EB          0819*        ex de,hl
041255 30 04       0820*        jr nc,$+6
041257 ED 52       0821*        sbc hl,de
041259 13          0822*        inc de
04125A 13          0823*        inc de
04125B CB 1A       0824*        rr d
04125D CB 1B       0825*        rr e
04125F C9          0826*        ret
041260             0827*    
041260             0828*    sin_lut_168:
041260 00 00 00    0829*        dl 0x000000 ; 0.000 00, 0.000
041263 06 00 00    0830*        dl 0x000006 ; 1.406 01, 0.025
041266 0C 00 00    0831*        dl 0x00000C ; 2.813 02, 0.049
041269 12 00 00    0832*        dl 0x000012 ; 4.219 03, 0.074
04126C 19 00 00    0833*        dl 0x000019 ; 5.625 04, 0.098
04126F 1F 00 00    0834*        dl 0x00001F ; 7.031 05, 0.122
041272 25 00 00    0835*        dl 0x000025 ; 8.438 06, 0.147
041275 2B 00 00    0836*        dl 0x00002B ; 9.844 07, 0.171
041278 31 00 00    0837*        dl 0x000031 ; 11.250 08, 0.195
04127B 38 00 00    0838*        dl 0x000038 ; 12.656 09, 0.219
04127E 3E 00 00    0839*        dl 0x00003E ; 14.063 0A, 0.243
041281 44 00 00    0840*        dl 0x000044 ; 15.469 0B, 0.267
041284 4A 00 00    0841*        dl 0x00004A ; 16.875 0C, 0.290
041287 50 00 00    0842*        dl 0x000050 ; 18.281 0D, 0.314
04128A 56 00 00    0843*        dl 0x000056 ; 19.688 0E, 0.337
04128D 5C 00 00    0844*        dl 0x00005C ; 21.094 0F, 0.360
041290 61 00 00    0845*        dl 0x000061 ; 22.500 10, 0.383
041293 67 00 00    0846*        dl 0x000067 ; 23.906 11, 0.405
041296 6D 00 00    0847*        dl 0x00006D ; 25.313 12, 0.428
041299 73 00 00    0848*        dl 0x000073 ; 26.719 13, 0.450
04129C 78 00 00    0849*        dl 0x000078 ; 28.125 14, 0.471
04129F 7E 00 00    0850*        dl 0x00007E ; 29.531 15, 0.493
0412A2 83 00 00    0851*        dl 0x000083 ; 30.938 16, 0.514
0412A5 88 00 00    0852*        dl 0x000088 ; 32.344 17, 0.535
0412A8 8E 00 00    0853*        dl 0x00008E ; 33.750 18, 0.556
0412AB 93 00 00    0854*        dl 0x000093 ; 35.156 19, 0.576
0412AE 98 00 00    0855*        dl 0x000098 ; 36.563 1A, 0.596
0412B1 9D 00 00    0856*        dl 0x00009D ; 37.969 1B, 0.615
0412B4 A2 00 00    0857*        dl 0x0000A2 ; 39.375 1C, 0.634
0412B7 A7 00 00    0858*        dl 0x0000A7 ; 40.781 1D, 0.653
0412BA AB 00 00    0859*        dl 0x0000AB ; 42.188 1E, 0.672
0412BD B0 00 00    0860*        dl 0x0000B0 ; 43.594 1F, 0.690
0412C0 B5 00 00    0861*        dl 0x0000B5 ; 45.000 20, 0.707
0412C3 B9 00 00    0862*        dl 0x0000B9 ; 46.406 21, 0.724
0412C6 BD 00 00    0863*        dl 0x0000BD ; 47.813 22, 0.741
0412C9 C1 00 00    0864*        dl 0x0000C1 ; 49.219 23, 0.757
0412CC C5 00 00    0865*        dl 0x0000C5 ; 50.625 24, 0.773
0412CF C9 00 00    0866*        dl 0x0000C9 ; 52.031 25, 0.788
0412D2 CD 00 00    0867*        dl 0x0000CD ; 53.438 26, 0.803
0412D5 D1 00 00    0868*        dl 0x0000D1 ; 54.844 27, 0.818
0412D8 D4 00 00    0869*        dl 0x0000D4 ; 56.250 28, 0.831
0412DB D8 00 00    0870*        dl 0x0000D8 ; 57.656 29, 0.845
0412DE DB 00 00    0871*        dl 0x0000DB ; 59.063 2A, 0.858
0412E1 DE 00 00    0872*        dl 0x0000DE ; 60.469 2B, 0.870
0412E4 E1 00 00    0873*        dl 0x0000E1 ; 61.875 2C, 0.882
0412E7 E4 00 00    0874*        dl 0x0000E4 ; 63.281 2D, 0.893
0412EA E7 00 00    0875*        dl 0x0000E7 ; 64.688 2E, 0.904
0412ED EA 00 00    0876*        dl 0x0000EA ; 66.094 2F, 0.914
0412F0 EC 00 00    0877*        dl 0x0000EC ; 67.500 30, 0.924
0412F3 EE 00 00    0878*        dl 0x0000EE ; 68.906 31, 0.933
0412F6 F1 00 00    0879*        dl 0x0000F1 ; 70.313 32, 0.942
0412F9 F3 00 00    0880*        dl 0x0000F3 ; 71.719 33, 0.950
0412FC F4 00 00    0881*        dl 0x0000F4 ; 73.125 34, 0.957
0412FF F6 00 00    0882*        dl 0x0000F6 ; 74.531 35, 0.964
041302 F8 00 00    0883*        dl 0x0000F8 ; 75.938 36, 0.970
041305 F9 00 00    0884*        dl 0x0000F9 ; 77.344 37, 0.976
041308 FB 00 00    0885*        dl 0x0000FB ; 78.750 38, 0.981
04130B FC 00 00    0886*        dl 0x0000FC ; 80.156 39, 0.985
04130E FD 00 00    0887*        dl 0x0000FD ; 81.563 3A, 0.989
041311 FE 00 00    0888*        dl 0x0000FE ; 82.969 3B, 0.992
041314 FE 00 00    0889*        dl 0x0000FE ; 84.375 3C, 0.995
041317 FF 00 00    0890*        dl 0x0000FF ; 85.781 3D, 0.997
04131A FF 00 00    0891*        dl 0x0000FF ; 87.188 3E, 0.999
04131D FF 00 00    0892*        dl 0x0000FF ; 88.594 3F, 1.000
041320 00 01 00    0893*        dl 0x000100 ; 90.000 40, 1.000
041323 FF 00 00    0894*        dl 0x0000FF ; 91.406 41, 1.000
041326 FF 00 00    0895*        dl 0x0000FF ; 92.813 42, 0.999
041329 FF 00 00    0896*        dl 0x0000FF ; 94.219 43, 0.997
04132C FE 00 00    0897*        dl 0x0000FE ; 95.625 44, 0.995
04132F FE 00 00    0898*        dl 0x0000FE ; 97.031 45, 0.992
041332 FD 00 00    0899*        dl 0x0000FD ; 98.438 46, 0.989
041335 FC 00 00    0900*        dl 0x0000FC ; 99.844 47, 0.985
041338 FB 00 00    0901*        dl 0x0000FB ; 101.250 48, 0.981
04133B F9 00 00    0902*        dl 0x0000F9 ; 102.656 49, 0.976
04133E F8 00 00    0903*        dl 0x0000F8 ; 104.063 4A, 0.970
041341 F6 00 00    0904*        dl 0x0000F6 ; 105.469 4B, 0.964
041344 F4 00 00    0905*        dl 0x0000F4 ; 106.875 4C, 0.957
041347 F3 00 00    0906*        dl 0x0000F3 ; 108.281 4D, 0.950
04134A F1 00 00    0907*        dl 0x0000F1 ; 109.688 4E, 0.942
04134D EE 00 00    0908*        dl 0x0000EE ; 111.094 4F, 0.933
041350 EC 00 00    0909*        dl 0x0000EC ; 112.500 50, 0.924
041353 EA 00 00    0910*        dl 0x0000EA ; 113.906 51, 0.914
041356 E7 00 00    0911*        dl 0x0000E7 ; 115.313 52, 0.904
041359 E4 00 00    0912*        dl 0x0000E4 ; 116.719 53, 0.893
04135C E1 00 00    0913*        dl 0x0000E1 ; 118.125 54, 0.882
04135F DE 00 00    0914*        dl 0x0000DE ; 119.531 55, 0.870
041362 DB 00 00    0915*        dl 0x0000DB ; 120.938 56, 0.858
041365 D8 00 00    0916*        dl 0x0000D8 ; 122.344 57, 0.845
041368 D4 00 00    0917*        dl 0x0000D4 ; 123.750 58, 0.831
04136B D1 00 00    0918*        dl 0x0000D1 ; 125.156 59, 0.818
04136E CD 00 00    0919*        dl 0x0000CD ; 126.563 5A, 0.803
041371 C9 00 00    0920*        dl 0x0000C9 ; 127.969 5B, 0.788
041374 C5 00 00    0921*        dl 0x0000C5 ; 129.375 5C, 0.773
041377 C1 00 00    0922*        dl 0x0000C1 ; 130.781 5D, 0.757
04137A BD 00 00    0923*        dl 0x0000BD ; 132.188 5E, 0.741
04137D B9 00 00    0924*        dl 0x0000B9 ; 133.594 5F, 0.724
041380 B5 00 00    0925*        dl 0x0000B5 ; 135.000 60, 0.707
041383 B0 00 00    0926*        dl 0x0000B0 ; 136.406 61, 0.690
041386 AB 00 00    0927*        dl 0x0000AB ; 137.813 62, 0.672
041389 A7 00 00    0928*        dl 0x0000A7 ; 139.219 63, 0.653
04138C A2 00 00    0929*        dl 0x0000A2 ; 140.625 64, 0.634
04138F 9D 00 00    0930*        dl 0x00009D ; 142.031 65, 0.615
041392 98 00 00    0931*        dl 0x000098 ; 143.438 66, 0.596
041395 93 00 00    0932*        dl 0x000093 ; 144.844 67, 0.576
041398 8E 00 00    0933*        dl 0x00008E ; 146.250 68, 0.556
04139B 88 00 00    0934*        dl 0x000088 ; 147.656 69, 0.535
04139E 83 00 00    0935*        dl 0x000083 ; 149.063 6A, 0.514
0413A1 7E 00 00    0936*        dl 0x00007E ; 150.469 6B, 0.493
0413A4 78 00 00    0937*        dl 0x000078 ; 151.875 6C, 0.471
0413A7 73 00 00    0938*        dl 0x000073 ; 153.281 6D, 0.450
0413AA 6D 00 00    0939*        dl 0x00006D ; 154.688 6E, 0.428
0413AD 67 00 00    0940*        dl 0x000067 ; 156.094 6F, 0.405
0413B0 61 00 00    0941*        dl 0x000061 ; 157.500 70, 0.383
0413B3 5C 00 00    0942*        dl 0x00005C ; 158.906 71, 0.360
0413B6 56 00 00    0943*        dl 0x000056 ; 160.313 72, 0.337
0413B9 50 00 00    0944*        dl 0x000050 ; 161.719 73, 0.314
0413BC 4A 00 00    0945*        dl 0x00004A ; 163.125 74, 0.290
0413BF 44 00 00    0946*        dl 0x000044 ; 164.531 75, 0.267
0413C2 3E 00 00    0947*        dl 0x00003E ; 165.938 76, 0.243
0413C5 38 00 00    0948*        dl 0x000038 ; 167.344 77, 0.219
0413C8 31 00 00    0949*        dl 0x000031 ; 168.750 78, 0.195
0413CB 2B 00 00    0950*        dl 0x00002B ; 170.156 79, 0.171
0413CE 25 00 00    0951*        dl 0x000025 ; 171.563 7A, 0.147
0413D1 1F 00 00    0952*        dl 0x00001F ; 172.969 7B, 0.122
0413D4 19 00 00    0953*        dl 0x000019 ; 174.375 7C, 0.098
0413D7 12 00 00    0954*        dl 0x000012 ; 175.781 7D, 0.074
0413DA 0C 00 00    0955*        dl 0x00000C ; 177.188 7E, 0.049
0413DD 06 00 00    0956*        dl 0x000006 ; 178.594 7F, 0.025
0413E0 00 00 00    0957*        dl 0x000000 ; 180.000 80, 0.000
0413E3 FA FF FF    0958*        dl 0xFFFFFA ; 181.406 81, -0.025
0413E6 F4 FF FF    0959*        dl 0xFFFFF4 ; 182.813 82, -0.049
0413E9 EE FF FF    0960*        dl 0xFFFFEE ; 184.219 83, -0.074
0413EC E7 FF FF    0961*        dl 0xFFFFE7 ; 185.625 84, -0.098
0413EF E1 FF FF    0962*        dl 0xFFFFE1 ; 187.031 85, -0.122
0413F2 DB FF FF    0963*        dl 0xFFFFDB ; 188.438 86, -0.147
0413F5 D5 FF FF    0964*        dl 0xFFFFD5 ; 189.844 87, -0.171
0413F8 CF FF FF    0965*        dl 0xFFFFCF ; 191.250 88, -0.195
0413FB C8 FF FF    0966*        dl 0xFFFFC8 ; 192.656 89, -0.219
0413FE C2 FF FF    0967*        dl 0xFFFFC2 ; 194.063 8A, -0.243
041401 BC FF FF    0968*        dl 0xFFFFBC ; 195.469 8B, -0.267
041404 B6 FF FF    0969*        dl 0xFFFFB6 ; 196.875 8C, -0.290
041407 B0 FF FF    0970*        dl 0xFFFFB0 ; 198.281 8D, -0.314
04140A AA FF FF    0971*        dl 0xFFFFAA ; 199.688 8E, -0.337
04140D A4 FF FF    0972*        dl 0xFFFFA4 ; 201.094 8F, -0.360
041410 9F FF FF    0973*        dl 0xFFFF9F ; 202.500 90, -0.383
041413 99 FF FF    0974*        dl 0xFFFF99 ; 203.906 91, -0.405
041416 93 FF FF    0975*        dl 0xFFFF93 ; 205.313 92, -0.428
041419 8D FF FF    0976*        dl 0xFFFF8D ; 206.719 93, -0.450
04141C 88 FF FF    0977*        dl 0xFFFF88 ; 208.125 94, -0.471
04141F 82 FF FF    0978*        dl 0xFFFF82 ; 209.531 95, -0.493
041422 7D FF FF    0979*        dl 0xFFFF7D ; 210.938 96, -0.514
041425 78 FF FF    0980*        dl 0xFFFF78 ; 212.344 97, -0.535
041428 72 FF FF    0981*        dl 0xFFFF72 ; 213.750 98, -0.556
04142B 6D FF FF    0982*        dl 0xFFFF6D ; 215.156 99, -0.576
04142E 68 FF FF    0983*        dl 0xFFFF68 ; 216.563 9A, -0.596
041431 63 FF FF    0984*        dl 0xFFFF63 ; 217.969 9B, -0.615
041434 5E FF FF    0985*        dl 0xFFFF5E ; 219.375 9C, -0.634
041437 59 FF FF    0986*        dl 0xFFFF59 ; 220.781 9D, -0.653
04143A 55 FF FF    0987*        dl 0xFFFF55 ; 222.188 9E, -0.672
04143D 50 FF FF    0988*        dl 0xFFFF50 ; 223.594 9F, -0.690
041440 4B FF FF    0989*        dl 0xFFFF4B ; 225.000 A0, -0.707
041443 47 FF FF    0990*        dl 0xFFFF47 ; 226.406 A1, -0.724
041446 43 FF FF    0991*        dl 0xFFFF43 ; 227.813 A2, -0.741
041449 3F FF FF    0992*        dl 0xFFFF3F ; 229.219 A3, -0.757
04144C 3B FF FF    0993*        dl 0xFFFF3B ; 230.625 A4, -0.773
04144F 37 FF FF    0994*        dl 0xFFFF37 ; 232.031 A5, -0.788
041452 33 FF FF    0995*        dl 0xFFFF33 ; 233.438 A6, -0.803
041455 2F FF FF    0996*        dl 0xFFFF2F ; 234.844 A7, -0.818
041458 2C FF FF    0997*        dl 0xFFFF2C ; 236.250 A8, -0.831
04145B 28 FF FF    0998*        dl 0xFFFF28 ; 237.656 A9, -0.845
04145E 25 FF FF    0999*        dl 0xFFFF25 ; 239.063 AA, -0.858
041461 22 FF FF    1000*        dl 0xFFFF22 ; 240.469 AB, -0.870
041464 1F FF FF    1001*        dl 0xFFFF1F ; 241.875 AC, -0.882
041467 1C FF FF    1002*        dl 0xFFFF1C ; 243.281 AD, -0.893
04146A 19 FF FF    1003*        dl 0xFFFF19 ; 244.688 AE, -0.904
04146D 16 FF FF    1004*        dl 0xFFFF16 ; 246.094 AF, -0.914
041470 14 FF FF    1005*        dl 0xFFFF14 ; 247.500 B0, -0.924
041473 12 FF FF    1006*        dl 0xFFFF12 ; 248.906 B1, -0.933
041476 0F FF FF    1007*        dl 0xFFFF0F ; 250.313 B2, -0.942
041479 0D FF FF    1008*        dl 0xFFFF0D ; 251.719 B3, -0.950
04147C 0C FF FF    1009*        dl 0xFFFF0C ; 253.125 B4, -0.957
04147F 0A FF FF    1010*        dl 0xFFFF0A ; 254.531 B5, -0.964
041482 08 FF FF    1011*        dl 0xFFFF08 ; 255.938 B6, -0.970
041485 07 FF FF    1012*        dl 0xFFFF07 ; 257.344 B7, -0.976
041488 05 FF FF    1013*        dl 0xFFFF05 ; 258.750 B8, -0.981
04148B 04 FF FF    1014*        dl 0xFFFF04 ; 260.156 B9, -0.985
04148E 03 FF FF    1015*        dl 0xFFFF03 ; 261.563 BA, -0.989
041491 02 FF FF    1016*        dl 0xFFFF02 ; 262.969 BB, -0.992
041494 02 FF FF    1017*        dl 0xFFFF02 ; 264.375 BC, -0.995
041497 01 FF FF    1018*        dl 0xFFFF01 ; 265.781 BD, -0.997
04149A 01 FF FF    1019*        dl 0xFFFF01 ; 267.188 BE, -0.999
04149D 01 FF FF    1020*        dl 0xFFFF01 ; 268.594 BF, -1.000
0414A0 00 FF FF    1021*        dl 0xFFFF00 ; 270.000 C0, -1.000
0414A3 01 FF FF    1022*        dl 0xFFFF01 ; 271.406 C1, -1.000
0414A6 01 FF FF    1023*        dl 0xFFFF01 ; 272.813 C2, -0.999
0414A9 01 FF FF    1024*        dl 0xFFFF01 ; 274.219 C3, -0.997
0414AC 02 FF FF    1025*        dl 0xFFFF02 ; 275.625 C4, -0.995
0414AF 02 FF FF    1026*        dl 0xFFFF02 ; 277.031 C5, -0.992
0414B2 03 FF FF    1027*        dl 0xFFFF03 ; 278.438 C6, -0.989
0414B5 04 FF FF    1028*        dl 0xFFFF04 ; 279.844 C7, -0.985
0414B8 05 FF FF    1029*        dl 0xFFFF05 ; 281.250 C8, -0.981
0414BB 07 FF FF    1030*        dl 0xFFFF07 ; 282.656 C9, -0.976
0414BE 08 FF FF    1031*        dl 0xFFFF08 ; 284.063 CA, -0.970
0414C1 0A FF FF    1032*        dl 0xFFFF0A ; 285.469 CB, -0.964
0414C4 0C FF FF    1033*        dl 0xFFFF0C ; 286.875 CC, -0.957
0414C7 0D FF FF    1034*        dl 0xFFFF0D ; 288.281 CD, -0.950
0414CA 0F FF FF    1035*        dl 0xFFFF0F ; 289.688 CE, -0.942
0414CD 12 FF FF    1036*        dl 0xFFFF12 ; 291.094 CF, -0.933
0414D0 14 FF FF    1037*        dl 0xFFFF14 ; 292.500 D0, -0.924
0414D3 16 FF FF    1038*        dl 0xFFFF16 ; 293.906 D1, -0.914
0414D6 19 FF FF    1039*        dl 0xFFFF19 ; 295.313 D2, -0.904
0414D9 1C FF FF    1040*        dl 0xFFFF1C ; 296.719 D3, -0.893
0414DC 1F FF FF    1041*        dl 0xFFFF1F ; 298.125 D4, -0.882
0414DF 22 FF FF    1042*        dl 0xFFFF22 ; 299.531 D5, -0.870
0414E2 25 FF FF    1043*        dl 0xFFFF25 ; 300.938 D6, -0.858
0414E5 28 FF FF    1044*        dl 0xFFFF28 ; 302.344 D7, -0.845
0414E8 2C FF FF    1045*        dl 0xFFFF2C ; 303.750 D8, -0.831
0414EB 2F FF FF    1046*        dl 0xFFFF2F ; 305.156 D9, -0.818
0414EE 33 FF FF    1047*        dl 0xFFFF33 ; 306.563 DA, -0.803
0414F1 37 FF FF    1048*        dl 0xFFFF37 ; 307.969 DB, -0.788
0414F4 3B FF FF    1049*        dl 0xFFFF3B ; 309.375 DC, -0.773
0414F7 3F FF FF    1050*        dl 0xFFFF3F ; 310.781 DD, -0.757
0414FA 43 FF FF    1051*        dl 0xFFFF43 ; 312.188 DE, -0.741
0414FD 47 FF FF    1052*        dl 0xFFFF47 ; 313.594 DF, -0.724
041500 4B FF FF    1053*        dl 0xFFFF4B ; 315.000 E0, -0.707
041503 50 FF FF    1054*        dl 0xFFFF50 ; 316.406 E1, -0.690
041506 55 FF FF    1055*        dl 0xFFFF55 ; 317.813 E2, -0.672
041509 59 FF FF    1056*        dl 0xFFFF59 ; 319.219 E3, -0.653
04150C 5E FF FF    1057*        dl 0xFFFF5E ; 320.625 E4, -0.634
04150F 63 FF FF    1058*        dl 0xFFFF63 ; 322.031 E5, -0.615
041512 68 FF FF    1059*        dl 0xFFFF68 ; 323.438 E6, -0.596
041515 6D FF FF    1060*        dl 0xFFFF6D ; 324.844 E7, -0.576
041518 72 FF FF    1061*        dl 0xFFFF72 ; 326.250 E8, -0.556
04151B 78 FF FF    1062*        dl 0xFFFF78 ; 327.656 E9, -0.535
04151E 7D FF FF    1063*        dl 0xFFFF7D ; 329.063 EA, -0.514
041521 82 FF FF    1064*        dl 0xFFFF82 ; 330.469 EB, -0.493
041524 88 FF FF    1065*        dl 0xFFFF88 ; 331.875 EC, -0.471
041527 8D FF FF    1066*        dl 0xFFFF8D ; 333.281 ED, -0.450
04152A 93 FF FF    1067*        dl 0xFFFF93 ; 334.688 EE, -0.428
04152D 99 FF FF    1068*        dl 0xFFFF99 ; 336.094 EF, -0.405
041530 9F FF FF    1069*        dl 0xFFFF9F ; 337.500 F0, -0.383
041533 A4 FF FF    1070*        dl 0xFFFFA4 ; 338.906 F1, -0.360
041536 AA FF FF    1071*        dl 0xFFFFAA ; 340.313 F2, -0.337
041539 B0 FF FF    1072*        dl 0xFFFFB0 ; 341.719 F3, -0.314
04153C B6 FF FF    1073*        dl 0xFFFFB6 ; 343.125 F4, -0.290
04153F BC FF FF    1074*        dl 0xFFFFBC ; 344.531 F5, -0.267
041542 C2 FF FF    1075*        dl 0xFFFFC2 ; 345.938 F6, -0.243
041545 C8 FF FF    1076*        dl 0xFFFFC8 ; 347.344 F7, -0.219
041548 CF FF FF    1077*        dl 0xFFFFCF ; 348.750 F8, -0.195
04154B D5 FF FF    1078*        dl 0xFFFFD5 ; 350.156 F9, -0.171
04154E DB FF FF    1079*        dl 0xFFFFDB ; 351.563 FA, -0.147
041551 E1 FF FF    1080*        dl 0xFFFFE1 ; 352.969 FB, -0.122
041554 E7 FF FF    1081*        dl 0xFFFFE7 ; 354.375 FC, -0.098
041557 EE FF FF    1082*        dl 0xFFFFEE ; 355.781 FD, -0.074
04155A F4 FF FF    1083*        dl 0xFFFFF4 ; 357.188 FE, -0.049
04155D FA FF FF    1084*        dl 0xFFFFFA ; 358.594 FF, -0.025
041560 00 00 00    1085*        dl 0x000000 ; 0.000 00, 0.000 for interpolation
041563             1086*    
041563             1087*    atan_lut_168:
041563 00 00 00    1088*        dl 0x000000 ; 000000, 0.000
041566 28 00 00    1089*        dl 0x000028 ; 000001, 0.224
041569 51 00 00    1090*        dl 0x000051 ; 000002, 0.448
04156C 7A 00 00    1091*        dl 0x00007A ; 000003, 0.671
04156F A2 00 00    1092*        dl 0x0000A2 ; 000004, 0.895
041572 CB 00 00    1093*        dl 0x0000CB ; 000005, 1.119
041575 F4 00 00    1094*        dl 0x0000F4 ; 000006, 1.343
041578 1D 01 00    1095*        dl 0x00011D ; 000007, 1.566
04157B 45 01 00    1096*        dl 0x000145 ; 000008, 1.790
04157E 6E 01 00    1097*        dl 0x00016E ; 000009, 2.013
041581 97 01 00    1098*        dl 0x000197 ; 00000A, 2.237
041584 BF 01 00    1099*        dl 0x0001BF ; 00000B, 2.460
041587 E8 01 00    1100*        dl 0x0001E8 ; 00000C, 2.684
04158A 11 02 00    1101*        dl 0x000211 ; 00000D, 2.907
04158D 39 02 00    1102*        dl 0x000239 ; 00000E, 3.130
041590 62 02 00    1103*        dl 0x000262 ; 00000F, 3.353
041593 8B 02 00    1104*        dl 0x00028B ; 000010, 3.576
041596 B3 02 00    1105*        dl 0x0002B3 ; 000011, 3.799
041599 DC 02 00    1106*        dl 0x0002DC ; 000012, 4.022
04159C 04 03 00    1107*        dl 0x000304 ; 000013, 4.245
04159F 2D 03 00    1108*        dl 0x00032D ; 000014, 4.467
0415A2 55 03 00    1109*        dl 0x000355 ; 000015, 4.690
0415A5 7E 03 00    1110*        dl 0x00037E ; 000016, 4.912
0415A8 A6 03 00    1111*        dl 0x0003A6 ; 000017, 5.134
0415AB CE 03 00    1112*        dl 0x0003CE ; 000018, 5.356
0415AE F7 03 00    1113*        dl 0x0003F7 ; 000019, 5.578
0415B1 1F 04 00    1114*        dl 0x00041F ; 00001A, 5.799
0415B4 48 04 00    1115*        dl 0x000448 ; 00001B, 6.021
0415B7 70 04 00    1116*        dl 0x000470 ; 00001C, 6.242
0415BA 98 04 00    1117*        dl 0x000498 ; 00001D, 6.463
0415BD C0 04 00    1118*        dl 0x0004C0 ; 00001E, 6.684
0415C0 E8 04 00    1119*        dl 0x0004E8 ; 00001F, 6.905
0415C3 11 05 00    1120*        dl 0x000511 ; 000020, 7.125
0415C6 39 05 00    1121*        dl 0x000539 ; 000021, 7.345
0415C9 61 05 00    1122*        dl 0x000561 ; 000022, 7.565
0415CC 89 05 00    1123*        dl 0x000589 ; 000023, 7.785
0415CF B1 05 00    1124*        dl 0x0005B1 ; 000024, 8.005
0415D2 D9 05 00    1125*        dl 0x0005D9 ; 000025, 8.224
0415D5 01 06 00    1126*        dl 0x000601 ; 000026, 8.443
0415D8 28 06 00    1127*        dl 0x000628 ; 000027, 8.662
0415DB 50 06 00    1128*        dl 0x000650 ; 000028, 8.881
0415DE 78 06 00    1129*        dl 0x000678 ; 000029, 9.099
0415E1 A0 06 00    1130*        dl 0x0006A0 ; 00002A, 9.317
0415E4 C7 06 00    1131*        dl 0x0006C7 ; 00002B, 9.535
0415E7 EF 06 00    1132*        dl 0x0006EF ; 00002C, 9.752
0415EA 16 07 00    1133*        dl 0x000716 ; 00002D, 9.970
0415ED 3E 07 00    1134*        dl 0x00073E ; 00002E, 10.187
0415F0 65 07 00    1135*        dl 0x000765 ; 00002F, 10.403
0415F3 8D 07 00    1136*        dl 0x00078D ; 000030, 10.620
0415F6 B4 07 00    1137*        dl 0x0007B4 ; 000031, 10.836
0415F9 DB 07 00    1138*        dl 0x0007DB ; 000032, 11.051
0415FC 03 08 00    1139*        dl 0x000803 ; 000033, 11.267
0415FF 2A 08 00    1140*        dl 0x00082A ; 000034, 11.482
041602 51 08 00    1141*        dl 0x000851 ; 000035, 11.697
041605 78 08 00    1142*        dl 0x000878 ; 000036, 11.911
041608 9F 08 00    1143*        dl 0x00089F ; 000037, 12.125
04160B C6 08 00    1144*        dl 0x0008C6 ; 000038, 12.339
04160E ED 08 00    1145*        dl 0x0008ED ; 000039, 12.553
041611 13 09 00    1146*        dl 0x000913 ; 00003A, 12.766
041614 3A 09 00    1147*        dl 0x00093A ; 00003B, 12.978
041617 61 09 00    1148*        dl 0x000961 ; 00003C, 13.191
04161A 87 09 00    1149*        dl 0x000987 ; 00003D, 13.403
04161D AE 09 00    1150*        dl 0x0009AE ; 00003E, 13.614
041620 D4 09 00    1151*        dl 0x0009D4 ; 00003F, 13.825
041623 FB 09 00    1152*        dl 0x0009FB ; 000040, 14.036
041626 21 0A 00    1153*        dl 0x000A21 ; 000041, 14.247
041629 47 0A 00    1154*        dl 0x000A47 ; 000042, 14.457
04162C 6D 0A 00    1155*        dl 0x000A6D ; 000043, 14.666
04162F 94 0A 00    1156*        dl 0x000A94 ; 000044, 14.876
041632 BA 0A 00    1157*        dl 0x000ABA ; 000045, 15.085
041635 E0 0A 00    1158*        dl 0x000AE0 ; 000046, 15.293
041638 05 0B 00    1159*        dl 0x000B05 ; 000047, 15.501
04163B 2B 0B 00    1160*        dl 0x000B2B ; 000048, 15.709
04163E 51 0B 00    1161*        dl 0x000B51 ; 000049, 15.916
041641 77 0B 00    1162*        dl 0x000B77 ; 00004A, 16.123
041644 9C 0B 00    1163*        dl 0x000B9C ; 00004B, 16.329
041647 C2 0B 00    1164*        dl 0x000BC2 ; 00004C, 16.535
04164A E7 0B 00    1165*        dl 0x000BE7 ; 00004D, 16.740
04164D 0C 0C 00    1166*        dl 0x000C0C ; 00004E, 16.945
041650 32 0C 00    1167*        dl 0x000C32 ; 00004F, 17.150
041653 57 0C 00    1168*        dl 0x000C57 ; 000050, 17.354
041656 7C 0C 00    1169*        dl 0x000C7C ; 000051, 17.558
041659 A1 0C 00    1170*        dl 0x000CA1 ; 000052, 17.761
04165C C6 0C 00    1171*        dl 0x000CC6 ; 000053, 17.964
04165F EB 0C 00    1172*        dl 0x000CEB ; 000054, 18.166
041662 0F 0D 00    1173*        dl 0x000D0F ; 000055, 18.368
041665 34 0D 00    1174*        dl 0x000D34 ; 000056, 18.569
041668 58 0D 00    1175*        dl 0x000D58 ; 000057, 18.770
04166B 7D 0D 00    1176*        dl 0x000D7D ; 000058, 18.970
04166E A1 0D 00    1177*        dl 0x000DA1 ; 000059, 19.170
041671 C6 0D 00    1178*        dl 0x000DC6 ; 00005A, 19.370
041674 EA 0D 00    1179*        dl 0x000DEA ; 00005B, 19.569
041677 0E 0E 00    1180*        dl 0x000E0E ; 00005C, 19.767
04167A 32 0E 00    1181*        dl 0x000E32 ; 00005D, 19.965
04167D 56 0E 00    1182*        dl 0x000E56 ; 00005E, 20.163
041680 7A 0E 00    1183*        dl 0x000E7A ; 00005F, 20.360
041683 9E 0E 00    1184*        dl 0x000E9E ; 000060, 20.556
041686 C1 0E 00    1185*        dl 0x000EC1 ; 000061, 20.752
041689 E5 0E 00    1186*        dl 0x000EE5 ; 000062, 20.947
04168C 08 0F 00    1187*        dl 0x000F08 ; 000063, 21.142
04168F 2C 0F 00    1188*        dl 0x000F2C ; 000064, 21.337
041692 4F 0F 00    1189*        dl 0x000F4F ; 000065, 21.531
041695 72 0F 00    1190*        dl 0x000F72 ; 000066, 21.724
041698 95 0F 00    1191*        dl 0x000F95 ; 000067, 21.917
04169B B8 0F 00    1192*        dl 0x000FB8 ; 000068, 22.109
04169E DB 0F 00    1193*        dl 0x000FDB ; 000069, 22.301
0416A1 FE 0F 00    1194*        dl 0x000FFE ; 00006A, 22.493
0416A4 21 10 00    1195*        dl 0x001021 ; 00006B, 22.683
0416A7 44 10 00    1196*        dl 0x001044 ; 00006C, 22.874
0416AA 66 10 00    1197*        dl 0x001066 ; 00006D, 23.063
0416AD 89 10 00    1198*        dl 0x001089 ; 00006E, 23.253
0416B0 AB 10 00    1199*        dl 0x0010AB ; 00006F, 23.441
0416B3 CD 10 00    1200*        dl 0x0010CD ; 000070, 23.629
0416B6 EF 10 00    1201*        dl 0x0010EF ; 000071, 23.817
0416B9 11 11 00    1202*        dl 0x001111 ; 000072, 24.004
0416BC 33 11 00    1203*        dl 0x001133 ; 000073, 24.191
0416BF 55 11 00    1204*        dl 0x001155 ; 000074, 24.376
0416C2 77 11 00    1205*        dl 0x001177 ; 000075, 24.562
0416C5 99 11 00    1206*        dl 0x001199 ; 000076, 24.747
0416C8 BA 11 00    1207*        dl 0x0011BA ; 000077, 24.931
0416CB DC 11 00    1208*        dl 0x0011DC ; 000078, 25.115
0416CE FD 11 00    1209*        dl 0x0011FD ; 000079, 25.298
0416D1 1E 12 00    1210*        dl 0x00121E ; 00007A, 25.481
0416D4 3F 12 00    1211*        dl 0x00123F ; 00007B, 25.663
0416D7 60 12 00    1212*        dl 0x001260 ; 00007C, 25.844
0416DA 81 12 00    1213*        dl 0x001281 ; 00007D, 26.025
0416DD A2 12 00    1214*        dl 0x0012A2 ; 00007E, 26.206
0416E0 C3 12 00    1215*        dl 0x0012C3 ; 00007F, 26.386
0416E3 E4 12 00    1216*        dl 0x0012E4 ; 000080, 26.565
0416E6 04 13 00    1217*        dl 0x001304 ; 000081, 26.744
0416E9 25 13 00    1218*        dl 0x001325 ; 000082, 26.922
0416EC 45 13 00    1219*        dl 0x001345 ; 000083, 27.100
0416EF 65 13 00    1220*        dl 0x001365 ; 000084, 27.277
0416F2 85 13 00    1221*        dl 0x001385 ; 000085, 27.453
0416F5 A5 13 00    1222*        dl 0x0013A5 ; 000086, 27.629
0416F8 C5 13 00    1223*        dl 0x0013C5 ; 000087, 27.805
0416FB E5 13 00    1224*        dl 0x0013E5 ; 000088, 27.979
0416FE 05 14 00    1225*        dl 0x001405 ; 000089, 28.154
041701 24 14 00    1226*        dl 0x001424 ; 00008A, 28.327
041704 44 14 00    1227*        dl 0x001444 ; 00008B, 28.501
041707 63 14 00    1228*        dl 0x001463 ; 00008C, 28.673
04170A 83 14 00    1229*        dl 0x001483 ; 00008D, 28.845
04170D A2 14 00    1230*        dl 0x0014A2 ; 00008E, 29.017
041710 C1 14 00    1231*        dl 0x0014C1 ; 00008F, 29.187
041713 E0 14 00    1232*        dl 0x0014E0 ; 000090, 29.358
041716 FF 14 00    1233*        dl 0x0014FF ; 000091, 29.527
041719 1E 15 00    1234*        dl 0x00151E ; 000092, 29.697
04171C 3C 15 00    1235*        dl 0x00153C ; 000093, 29.865
04171F 5B 15 00    1236*        dl 0x00155B ; 000094, 30.033
041722 79 15 00    1237*        dl 0x001579 ; 000095, 30.201
041725 98 15 00    1238*        dl 0x001598 ; 000096, 30.368
041728 B6 15 00    1239*        dl 0x0015B6 ; 000097, 30.534
04172B D4 15 00    1240*        dl 0x0015D4 ; 000098, 30.700
04172E F2 15 00    1241*        dl 0x0015F2 ; 000099, 30.865
041731 10 16 00    1242*        dl 0x001610 ; 00009A, 31.030
041734 2E 16 00    1243*        dl 0x00162E ; 00009B, 31.194
041737 4C 16 00    1244*        dl 0x00164C ; 00009C, 31.357
04173A 6A 16 00    1245*        dl 0x00166A ; 00009D, 31.520
04173D 87 16 00    1246*        dl 0x001687 ; 00009E, 31.682
041740 A5 16 00    1247*        dl 0x0016A5 ; 00009F, 31.844
041743 C2 16 00    1248*        dl 0x0016C2 ; 0000A0, 32.005
041746 DF 16 00    1249*        dl 0x0016DF ; 0000A1, 32.166
041749 FC 16 00    1250*        dl 0x0016FC ; 0000A2, 32.326
04174C 19 17 00    1251*        dl 0x001719 ; 0000A3, 32.486
04174F 36 17 00    1252*        dl 0x001736 ; 0000A4, 32.645
041752 53 17 00    1253*        dl 0x001753 ; 0000A5, 32.803
041755 70 17 00    1254*        dl 0x001770 ; 0000A6, 32.961
041758 8C 17 00    1255*        dl 0x00178C ; 0000A7, 33.118
04175B A9 17 00    1256*        dl 0x0017A9 ; 0000A8, 33.275
04175E C5 17 00    1257*        dl 0x0017C5 ; 0000A9, 33.431
041761 E2 17 00    1258*        dl 0x0017E2 ; 0000AA, 33.587
041764 FE 17 00    1259*        dl 0x0017FE ; 0000AB, 33.742
041767 1A 18 00    1260*        dl 0x00181A ; 0000AC, 33.896
04176A 36 18 00    1261*        dl 0x001836 ; 0000AD, 34.050
04176D 52 18 00    1262*        dl 0x001852 ; 0000AE, 34.203
041770 6E 18 00    1263*        dl 0x00186E ; 0000AF, 34.356
041773 8A 18 00    1264*        dl 0x00188A ; 0000B0, 34.509
041776 A5 18 00    1265*        dl 0x0018A5 ; 0000B1, 34.660
041779 C1 18 00    1266*        dl 0x0018C1 ; 0000B2, 34.811
04177C DC 18 00    1267*        dl 0x0018DC ; 0000B3, 34.962
04177F F7 18 00    1268*        dl 0x0018F7 ; 0000B4, 35.112
041782 13 19 00    1269*        dl 0x001913 ; 0000B5, 35.262
041785 2E 19 00    1270*        dl 0x00192E ; 0000B6, 35.410
041788 49 19 00    1271*        dl 0x001949 ; 0000B7, 35.559
04178B 64 19 00    1272*        dl 0x001964 ; 0000B8, 35.707
04178E 7F 19 00    1273*        dl 0x00197F ; 0000B9, 35.854
041791 99 19 00    1274*        dl 0x001999 ; 0000BA, 36.001
041794 B4 19 00    1275*        dl 0x0019B4 ; 0000BB, 36.147
041797 CE 19 00    1276*        dl 0x0019CE ; 0000BC, 36.293
04179A E9 19 00    1277*        dl 0x0019E9 ; 0000BD, 36.438
04179D 03 1A 00    1278*        dl 0x001A03 ; 0000BE, 36.582
0417A0 1D 1A 00    1279*        dl 0x001A1D ; 0000BF, 36.726
0417A3 37 1A 00    1280*        dl 0x001A37 ; 0000C0, 36.870
0417A6 51 1A 00    1281*        dl 0x001A51 ; 0000C1, 37.013
0417A9 6B 1A 00    1282*        dl 0x001A6B ; 0000C2, 37.155
0417AC 85 1A 00    1283*        dl 0x001A85 ; 0000C3, 37.297
0417AF 9F 1A 00    1284*        dl 0x001A9F ; 0000C4, 37.439
0417B2 B9 1A 00    1285*        dl 0x001AB9 ; 0000C5, 37.579
0417B5 D2 1A 00    1286*        dl 0x001AD2 ; 0000C6, 37.720
0417B8 EC 1A 00    1287*        dl 0x001AEC ; 0000C7, 37.859
0417BB 05 1B 00    1288*        dl 0x001B05 ; 0000C8, 37.999
0417BE 1E 1B 00    1289*        dl 0x001B1E ; 0000C9, 38.137
0417C1 37 1B 00    1290*        dl 0x001B37 ; 0000CA, 38.276
0417C4 50 1B 00    1291*        dl 0x001B50 ; 0000CB, 38.413
0417C7 69 1B 00    1292*        dl 0x001B69 ; 0000CC, 38.550
0417CA 82 1B 00    1293*        dl 0x001B82 ; 0000CD, 38.687
0417CD 9B 1B 00    1294*        dl 0x001B9B ; 0000CE, 38.823
0417D0 B4 1B 00    1295*        dl 0x001BB4 ; 0000CF, 38.959
0417D3 CC 1B 00    1296*        dl 0x001BCC ; 0000D0, 39.094
0417D6 E5 1B 00    1297*        dl 0x001BE5 ; 0000D1, 39.228
0417D9 FD 1B 00    1298*        dl 0x001BFD ; 0000D2, 39.362
0417DC 16 1C 00    1299*        dl 0x001C16 ; 0000D3, 39.496
0417DF 2E 1C 00    1300*        dl 0x001C2E ; 0000D4, 39.629
0417E2 46 1C 00    1301*        dl 0x001C46 ; 0000D5, 39.762
0417E5 5E 1C 00    1302*        dl 0x001C5E ; 0000D6, 39.894
0417E8 76 1C 00    1303*        dl 0x001C76 ; 0000D7, 40.025
0417EB 8E 1C 00    1304*        dl 0x001C8E ; 0000D8, 40.156
0417EE A5 1C 00    1305*        dl 0x001CA5 ; 0000D9, 40.286
0417F1 BD 1C 00    1306*        dl 0x001CBD ; 0000DA, 40.416
0417F4 D5 1C 00    1307*        dl 0x001CD5 ; 0000DB, 40.546
0417F7 EC 1C 00    1308*        dl 0x001CEC ; 0000DC, 40.675
0417FA 04 1D 00    1309*        dl 0x001D04 ; 0000DD, 40.803
0417FD 1B 1D 00    1310*        dl 0x001D1B ; 0000DE, 40.931
041800 32 1D 00    1311*        dl 0x001D32 ; 0000DF, 41.059
041803 49 1D 00    1312*        dl 0x001D49 ; 0000E0, 41.186
041806 60 1D 00    1313*        dl 0x001D60 ; 0000E1, 41.312
041809 77 1D 00    1314*        dl 0x001D77 ; 0000E2, 41.438
04180C 8E 1D 00    1315*        dl 0x001D8E ; 0000E3, 41.564
04180F A5 1D 00    1316*        dl 0x001DA5 ; 0000E4, 41.689
041812 BB 1D 00    1317*        dl 0x001DBB ; 0000E5, 41.814
041815 D2 1D 00    1318*        dl 0x001DD2 ; 0000E6, 41.938
041818 E9 1D 00    1319*        dl 0x001DE9 ; 0000E7, 42.061
04181B FF 1D 00    1320*        dl 0x001DFF ; 0000E8, 42.184
04181E 15 1E 00    1321*        dl 0x001E15 ; 0000E9, 42.307
041821 2C 1E 00    1322*        dl 0x001E2C ; 0000EA, 42.429
041824 42 1E 00    1323*        dl 0x001E42 ; 0000EB, 42.551
041827 58 1E 00    1324*        dl 0x001E58 ; 0000EC, 42.672
04182A 6E 1E 00    1325*        dl 0x001E6E ; 0000ED, 42.793
04182D 84 1E 00    1326*        dl 0x001E84 ; 0000EE, 42.913
041830 99 1E 00    1327*        dl 0x001E99 ; 0000EF, 43.033
041833 AF 1E 00    1328*        dl 0x001EAF ; 0000F0, 43.152
041836 C5 1E 00    1329*        dl 0x001EC5 ; 0000F1, 43.271
041839 DA 1E 00    1330*        dl 0x001EDA ; 0000F2, 43.390
04183C F0 1E 00    1331*        dl 0x001EF0 ; 0000F3, 43.508
04183F 05 1F 00    1332*        dl 0x001F05 ; 0000F4, 43.625
041842 1B 1F 00    1333*        dl 0x001F1B ; 0000F5, 43.742
041845 30 1F 00    1334*        dl 0x001F30 ; 0000F6, 43.859
041848 45 1F 00    1335*        dl 0x001F45 ; 0000F7, 43.975
04184B 5A 1F 00    1336*        dl 0x001F5A ; 0000F8, 44.091
04184E 6F 1F 00    1337*        dl 0x001F6F ; 0000F9, 44.206
041851 84 1F 00    1338*        dl 0x001F84 ; 0000FA, 44.321
041854 99 1F 00    1339*        dl 0x001F99 ; 0000FB, 44.435
041857 AD 1F 00    1340*        dl 0x001FAD ; 0000FC, 44.549
04185A C2 1F 00    1341*        dl 0x001FC2 ; 0000FD, 44.662
04185D D7 1F 00    1342*        dl 0x001FD7 ; 0000FE, 44.775
041860 EB 1F 00    1343*        dl 0x001FEB ; 0000FF, 44.888
041863 00 20 00    1344*        dl 0x002000 ; 000100, 45.000 only needed for interpolation
041866             0037         include "time.inc"
041866             0001*    ; Convert seconds to HH:MM:SS format.
041866             0002*    ; inputs: hl = seconds
041866             0003*    ; outputs: hl = pointer to zero-terminated string representation of HH:MM:SS
041866             0004*    ; destroys: a,bc,de
041866             0005*    seconds_to_hhmmss:
041866             0006*    ; Divide the total seconds into hours, minutes, and seconds.
041866             0007*    ; Hours = Total seconds ÷ 3600.
041866 11 10 0E 00 0008*        ld de,3600
04186A CD B1 03 04 0009*        call udiv24 ; de = hours, hl = remaining seconds
04186E E5          0010*        push hl ; save remainder
04186F EB          0011*        ex de,hl ; hl = hours
041870 11 C9 18 04 0012*        ld de,@bin2asc
041874 CD 59 01 04 0013*        call u8_to_ascii ; answer in @bin2asc
041878 3A CB 18 04 0014*        ld a,(@bin2asc+2)
04187C 32 D3 18 04 0015*        ld (hhmmss+0),a
041880 3A CC 18 04 0016*        ld a,(@bin2asc+3)
041884 32 D4 18 04 0017*        ld (hhmmss+1),a
041888             0018*    ; Minutes = Remaining seconds ÷ 60.
041888 E1          0019*        pop hl ; restore remainder
041889 11 3C 00 00 0020*        ld de,60
04188D CD B1 03 04 0021*        call udiv24 ; de = minutes, hl = remaining seconds
041891 E5          0022*        push hl ; save remainder
041892 EB          0023*        ex de,hl ; hl = minutes
041893 11 C9 18 04 0024*        ld de,@bin2asc
041897 CD 59 01 04 0025*        call u8_to_ascii ; answer in @bin2asc
04189B 3A CB 18 04 0026*        ld a,(@bin2asc+2)
04189F 32 D6 18 04 0027*        ld (hhmmss+3),a
0418A3 3A CC 18 04 0028*        ld a,(@bin2asc+3)
0418A7 32 D7 18 04 0029*        ld (hhmmss+4),a
0418AB             0030*    ; Seconds = Remaining seconds.
0418AB E1          0031*        pop hl ; restore remainder
0418AC 11 C9 18 04 0032*        ld de,@bin2asc
0418B0 CD 59 01 04 0033*        call u8_to_ascii ; answer in @bin2asc
0418B4 3A CB 18 04 0034*        ld a,(@bin2asc+2)
0418B8 32 D9 18 04 0035*        ld (hhmmss+6),a
0418BC 3A CC 18 04 0036*        ld a,(@bin2asc+3)
0418C0 32 DA 18 04 0037*        ld (hhmmss+7),a
0418C4 21 D3 18 04 0038*        ld hl,hhmmss
0418C8 C9          0039*        ret
0418C9 00 00 00 00 0040*    @bin2asc: blkw 5,0 ; scratch space for binary to ascii decimal conversion
       00 00 00 00 
       00 00       
0418D3 30 30 3A 30 0041*    hhmmss: asciz "00:00:00" ; buffer for output string
       30 3A 30 30 
       00          
0418DC             0042*    ; end seconds_to_hhmmss
0418DC             0038         include "timer.inc"
0418DC             0001*    ; Table 32. Timer Control Registers
0418DC             0002*    TMR0_CTL: equ 80h
0418DC             0003*    TMR1_CTL: equ 83h
0418DC             0004*    TMR2_CTL: equ 86h
0418DC             0005*    TMR3_CTL: equ 89h
0418DC             0006*    TMR4_CTL: equ 8Ch
0418DC             0007*    TMR5_CTL: equ 8Fh
0418DC             0008*    
0418DC             0009*    ; each timer register takes three bytes:
0418DC             0010*    ;   0: control register
0418DC             0011*    ;   1: low byte of timer reset value
0418DC             0012*    ;   2: high byte of timer reset value
0418DC             0013*    ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
0418DC             0014*    ; which correctly force the high and upper bytes of the address bus to zero
0418DC             0015*    
0418DC             0016*    TMR_REG_CTL: equ 0
0418DC             0017*    TMR_RES_LOW: equ 1
0418DC             0018*    TMR_RES_HIGH: equ 2
0418DC             0019*    
0418DC             0020*    ; Timer Control Register Bit Definitions
0418DC             0021*    PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
0418DC             0022*                                ; This bit is reset to 0 every time the TMRx_CTL register is read.
0418DC             0023*    PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
0418DC             0024*                                ; an interrupt signal is sent to the CPU. This bit remains 1 until
0418DC             0025*                                ; the TMRx_CTL register is read.
0418DC             0026*    
0418DC             0027*    IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
0418DC             0028*    IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
0418DC             0029*    
0418DC             0030*    PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
0418DC             0031*                                ;  0,and counting stops when the end-of-count value is reached.
0418DC             0032*    PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
0418DC             0033*                                ; written to the counter when the end-of-count value is reached.
0418DC             0034*    
0418DC             0035*    ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
0418DC             0036*    CLK_DIV_256:  equ %00001100 ;
0418DC             0037*    CLK_DIV_64:   equ %00001000 ;
0418DC             0038*    CLK_DIV_16:   equ %00000100 ;
0418DC             0039*    CLK_DIV_4:    equ %00000000 ;
0418DC             0040*    
0418DC             0041*    RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
0418DC             0042*    RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
0418DC             0043*                                ; When a 1 is written to this bit,the values in the reload registers
0418DC             0044*                                ;  are loaded into the downcounter when the timer restarts. The
0418DC             0045*                                ; programmer must ensure that this bit is set to 1 each time
0418DC             0046*                                ; SINGLE-PASS mode is used.
0418DC             0047*    
0418DC             0048*    ; disable/enable the programmable reload timer
0418DC             0049*    PRT_EN_0:     equ %00000000 ;
0418DC             0050*    PRT_EN_1:     equ %00000001 ;
0418DC             0051*    
0418DC             0052*    ; Table 37. Timer Input Source Select Register
0418DC             0053*    ; Each of the 4 timers are allocated two bits of the 8-bit register
0418DC             0054*    ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
0418DC             0055*    ;   00: System clock / CLK_DIV
0418DC             0056*    ;   01: RTC / CLK_DIV
0418DC             0057*    ;   NOTE: these are the values given in the manual,but it may be a typo
0418DC             0058*    ;   10: GPIO port B pin 1.
0418DC             0059*    ;   11: GPIO port B pin 1.
0418DC             0060*    TMR_ISS:   equ 92h ; register address
0418DC             0061*    
0418DC             0062*    ; Table 51. Real-Time Clock Control Register
0418DC             0063*    RTC_CTRL: equ EDh ; register address
0418DC             0064*    
0418DC             0065*    ; alarm interrupt disable/enable
0418DC             0066*    RTC_ALARM_0:    equ %00000000
0418DC             0067*    RTC_ALARM_1:    equ %10000000
0418DC             0068*    
0418DC             0069*    ; interrupt on alarm disable/enable
0418DC             0070*    RTC_INT_ENT_0:  equ %00000000
0418DC             0071*    RTC_INT_ENT_1:  equ %01000000
0418DC             0072*    
0418DC             0073*    RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
0418DC             0074*    RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
0418DC             0075*    
0418DC             0076*    RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
0418DC             0077*                                    ; On-chip 32768 Hz oscillator is enabled.
0418DC             0078*    RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
0418DC             0079*                                    ; On-chip 32768 Hz oscillator is disabled.
0418DC             0080*    
0418DC             0081*    RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
0418DC             0082*    RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
0418DC             0083*    
0418DC             0084*    RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
0418DC             0085*    RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
0418DC             0086*    
0418DC             0087*    RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
0418DC             0088*                                    ; RTC counter is enabled.
0418DC             0089*    RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
0418DC             0090*                                    ; RTC counter is disabled.
0418DC             0091*    
0418DC             0092*    ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
0418DC             0093*    
0418DC             0094*    prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
0418DC             0095*    prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
0418DC 00 00 00    0096*    prt_reload: dl 0x000000
0418DF             0097*    
0418DF             0098*    ; returns: a = 0 if running on hardware,1 if running on emulator
0418DF             0099*    ;          de = number PRT interrupts during test interval
0418DF             0100*    prt_calibrate:
0418DF CD EE 1B 04 0101*        call vdu_vblank
0418E3             0102*    ; set a MOS timer
0418E3 21 78 00 00 0103*        ld hl,120*1 ; 1 second
0418E7 FD 21 67 1A 0104*        ld iy,tmr_test
       04          
0418EC CD 45 1A 04 0105*        call tmr_set
0418F0             0106*    ; set a PRT timer
0418F0             0107*        ; ld hl,prt_reload_hardware
0418F0             0108*        ; ld hl,prt_reload_emulator
0418F0 21 05 2D 00 0109*        ld hl,prt_reload_emulator + prt_reload_hardware / 2
0418F4 22 DC 18 04 0110*        ld (prt_reload),hl
0418F8 CD 80 19 04 0111*        call prt_set
0418FC             0112*    @loop:
0418FC             0113*    ; check time remaining on MOS timer
0418FC CD 53 1A 04 0114*        call tmr_get
041900 CA 0A 19 04 0115*        jp z,@done ; time expired,so quit
041904 FA 0A 19 04 0116*        jp m,@done ; time past expiration (negative),so quit
041908 18 F2       0117*        jr @loop
04190A             0118*    @done:
04190A ED 5B CE 19 0119*        ld de,(prt_irq_counter)
       04          
04190F 01 0C 2D 00 0120*        ld bc,prt_reload_hardware ; default value for running on hardware
041913 ED 43 DC 18 0121*        ld (prt_reload),bc
       04          
041918 21 64 00 00 0122*        ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
04191C AF          0123*        xor a ; clear carry,zero is default value for running on hardware
04191D 32 3F 19 04 0124*        ld (is_emulator),a
041921 ED 52       0125*        sbc hl,de
041923 21 40 19 04 0126*        ld hl,on_hardware ; default message for running on hardware
041927 CA DF 18 04 0127*        jp z,prt_calibrate ; zero result is indeterminate so we try again
04192B F8          0128*        ret m ; negative result means we're on hardware
04192C 3C          0129*        inc a ; we're on emulator
04192D 32 3F 19 04 0130*        ld (is_emulator),a
041931 01 FF 2C 00 0131*        ld bc,prt_reload_emulator
041935 ED 43 DC 18 0132*        ld (prt_reload),bc
       04          
04193A 21 56 19 04 0133*        ld hl,on_emulator
04193E C9          0134*        ret
04193F 00          0135*    is_emulator: db 0
041940 52 75 6E 6E 0136*    on_hardware: defb "Running on hardware\r\n",0
       69 6E 67 20 
       6F 6E 20 68 
       61 72 64 77 
       61 72 65 0D 
       0A 00       
041956 52 75 6E 6E 0137*    on_emulator: defb "Running on emulator\r\n",0
       69 6E 67 20 
       6F 6E 20 65 
       6D 75 6C 61 
       74 6F 72 0D 
       0A 00       
04196C             0138*    
04196C 43 61 6C 69 0139*    calibrating_timer: defb "Calibrating timer\r\n",0
       62 72 61 74 
       69 6E 67 20 
       74 69 6D 65 
       72 0D 0A 00 
041980             0140*    
041980             0141*    ; set PRT timer
041980             0142*    prt_set:
041980 21 00 00 00 0143*        ld hl,0
041984 22 CE 19 04 0144*        ld (prt_irq_counter),hl
041988 2A DC 18 04 0145*        ld hl,(prt_reload)
04198C ED 29 84    0146*        out0 (TMR1_CTL+TMR_RES_LOW),l
04198F ED 21 85    0147*    	out0 (TMR1_CTL+TMR_RES_HIGH),h
041992             0148*    ; disable timer
041992 3E 06       0149*        ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
041994 ED 39 83    0150*    	out0 (TMR1_CTL+TMR_REG_CTL),a
041997             0151*    ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
041997 3E 57       0152*        ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
041999 ED 39 83    0153*    	out0 (TMR1_CTL+TMR_REG_CTL),a
04199C C9          0154*        ret
04199D             0155*    
04199D             0156*    ; ===============================================
04199D             0157*    ; PRT Timer Interrupt Handling
04199D             0158*    ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
04199D             0159*    ; -----------------------------------------------
04199D             0160*    prt_irq_init:
04199D             0161*        ; set up interrupt vector table 2
04199D 21 00 00 00 0162*    	ld hl,0
0419A1 3A 0C 01 00 0163*    	ld a,($10c)
0419A5 6F          0164*    	ld l,a
0419A6 3A 0D 01 00 0165*    	ld a,($10d)
0419AA 67          0166*    	ld h,a
0419AB             0167*    
0419AB             0168*    	; skip over CALL ($c3)
0419AB 23          0169*    	inc hl
0419AC             0170*    	; load address of jump into vector table 2 (in ram)
0419AC ED 27       0171*    	ld hl,(hl)
0419AE             0172*    
0419AE             0173*    	; write CALL prt_irq_handler to vector table 2
0419AE 3E C3       0174*    	ld a,$c3
0419B0 77          0175*    	ld (hl),a
0419B1 23          0176*    	inc hl
0419B2 11 B9 19 04 0177*    	ld de,prt_irq_handler
0419B6 ED 1F       0178*    	ld (hl),de
0419B8             0179*    
0419B8 C9          0180*        ret
0419B9             0181*    
0419B9             0182*    prt_irq_handler:
0419B9 F3          0183*    	di
0419BA F5          0184*    	push af
0419BB E5          0185*        push hl
0419BC ED 38 83    0186*    	in0 a,(TMR1_CTL+TMR_REG_CTL)
0419BF 2A CE 19 04 0187*    	ld hl,(prt_irq_counter)
0419C3 23          0188*    	inc hl
0419C4 22 CE 19 04 0189*    	ld (prt_irq_counter),hl
0419C8 E1          0190*        pop hl
0419C9 F1          0191*    	pop af
0419CA FB          0192*    	ei
0419CB 5B ED 4D    0193*    	reti.l
0419CE             0194*    
0419CE             0195*    prt_irq_counter:
0419CE 00 00 00    0196*    	.dl 0
0419D1             0197*    prt_irq_counter_saved:
0419D1 00 00 00    0198*        .dl 0
0419D4             0199*    
0419D4             0200*    prt_loop_reset:
0419D4 E5          0201*        push hl
0419D5 21 00 00 00 0202*    	ld hl,0
0419D9 22 CE 19 04 0203*    	ld (prt_irq_counter),hl
0419DD 22 3F 1A 04 0204*        ld (prt_loop_counter),hl
0419E1 22 42 1A 04 0205*        ld (prt_loops),hl
0419E5 CD 80 19 04 0206*        call prt_set
0419E9 E1          0207*        pop hl
0419EA C9          0208*        ret
0419EB             0209*    
0419EB             0210*    prt_loop_start:
0419EB E5          0211*        push hl
0419EC 21 00 00 00 0212*    	ld hl,0
0419F0 22 CE 19 04 0213*    	ld (prt_irq_counter),hl
0419F4 E1          0214*        pop hl
0419F5 C9          0215*        ret
0419F6             0216*    
0419F6             0217*    prt_loop_stop:
0419F6 E5          0218*        push hl
0419F7 D5          0219*        push de
0419F8 2A CE 19 04 0220*        ld hl,(prt_irq_counter)
0419FC ED 5B 3F 1A 0221*        ld de,(prt_loop_counter)
       04          
041A01 19          0222*        add hl,de
041A02 22 3F 1A 04 0223*        ld (prt_loop_counter),hl
041A06 21 00 00 00 0224*        ld hl,0
041A0A 22 CE 19 04 0225*        ld (prt_irq_counter),hl
041A0E 2A 42 1A 04 0226*        ld hl,(prt_loops)
041A12 23          0227*        inc hl
041A13 22 42 1A 04 0228*        ld (prt_loops),hl
041A17 D1          0229*        pop de
041A18 E1          0230*        pop hl
041A19 C9          0231*        ret
041A1A             0232*    
041A1A             0233*    ; inputs: bc = y,x text coordinates to print
041A1A             0234*    prt_loop_print:
041A1A F5          0235*        push af
041A1B E5          0236*        push hl
041A1C C5          0237*        push bc
041A1D D5          0238*        push de
041A1E DD E5       0239*        push ix
041A20 FD E5       0240*        push iy
041A22 CD 52 1B 04 0241*        call vdu_move_cursor
041A26             0242*    
041A26 2A 3F 1A 04 0243*        ld hl,(prt_loop_counter)
041A2A CD CC 00 04 0244*        call printDec
041A2E             0245*    
041A2E 2A 42 1A 04 0246*        ld hl,(prt_loops)
041A32 CD CC 00 04 0247*        call printDec
041A36             0248*    
041A36 FD E1       0249*        pop iy
041A38 DD E1       0250*        pop ix
041A3A D1          0251*        pop de
041A3B C1          0252*        pop bc
041A3C E1          0253*        pop hl
041A3D F1          0254*        pop af
041A3E C9          0255*        ret
041A3F             0256*    
041A3F             0257*    prt_loop_counter:
041A3F 00 00 00    0258*        .dl 0
041A42             0259*    prt_loops:
041A42 00 00 00    0260*        .dl 0
041A45             0261*    
041A45             0262*    ; ===============================================
041A45             0263*    ; Timer functions
041A45             0264*    ; -----------------------------------------------
041A45             0265*    ; set a countdown timer
041A45             0266*    ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041A45             0267*    ; returns: hl = current time
041A45             0268*    tmr_set:
041A45 FD 2F 03    0269*        ld (iy+3),hl            ; set time remaining
041A48             0270*        MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041A48 3E 08       0001*M1  			LD	A, function
041A4A 5B CF       0002*M1  			RST.LIL	08h
041A4C DD 27 00    0271*        ld hl,(ix+sysvar_time)  ; get current time
041A4F FD 2F 00    0272*        ld (iy+0),hl            ; set start time
041A52 C9          0273*        ret
041A53             0274*    
041A53             0275*    ; gets time remaining on a countdown timer
041A53             0276*    ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041A53             0277*    ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041A53             0278*    ;          sign flags: pos = time not expired,zero or neg = time expired
041A53             0279*    tmr_get:
041A53             0280*        MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041A53 3E 08       0001*M1  			LD	A, function
041A55 5B CF       0002*M1  			RST.LIL	08h
041A57 DD 17 00    0281*        ld de,(ix+sysvar_time)  ; get current time
041A5A FD 27 00    0282*        ld hl,(iy+0)            ; get start time
041A5D AF          0283*        xor a                   ; clear carry
041A5E ED 52       0284*        sbc hl,de               ; hl = time elapsed (will always be zero or negative)
041A60 FD 17 03    0285*        ld de,(iy+3)            ; get timer set value
041A63 AF          0286*        xor a                   ; clear carry
041A64 ED 5A       0287*        adc hl,de               ; hl = time remaining
041A66             0288*                                ; (we do adc because add hl,rr doesn't set sign or zero flags)
041A66 C9          0289*        ret
041A67             0290*    
041A67             0291*    tmr_test: ds 6 ; example of a buffer to hold timer data
041A6D             0292*    
       FF FF FF FF 
       FF FF 
041A6D 00 00 00    0293*    timestamp_now: dl 0
041A70 00 00 00    0294*    timestamp_old: dl 0
041A73 00 00 00    0295*    timestamp_chg: dl 0
041A76             0296*    
041A76             0297*    ; update the global timestamp from the system clock
041A76             0298*    ; inputs: none
041A76             0299*    ; returns: hl = time elapsed in 1/120ths of a second
041A76             0300*    ;          de = current time
041A76             0301*    ;          ix = pointer to syvars table
041A76             0302*    ; destroys: af,hl,de,ix
041A76             0303*    timestamp_tick:
041A76 ED 5B 6D 1A 0304*        ld de,(timestamp_now)   ; get previous time
       04          
041A7B ED 53 70 1A 0305*        ld (timestamp_old),de   ; save previous time
       04          
041A80             0306*        MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041A80 3E 08       0001*M1  			LD	A, function
041A82 5B CF       0002*M1  			RST.LIL	08h
041A84 DD 27 00    0307*        ld hl,(ix+sysvar_time)  ; get current time
041A87 22 6D 1A 04 0308*        ld (timestamp_now),hl   ; save current time
041A8B AF          0309*        xor a                   ; clear carry
041A8C ED 52       0310*        sbc hl,de               ; hl = time elapsed
041A8E 22 73 1A 04 0311*        ld (timestamp_chg),hl   ; save elapsed time
041A92 C9          0312*        ret
041A93             0313*    
041A93             0314*    ; set a countdown timer
041A93             0315*    ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041A93             0316*    ; requires: timestamp_tick to be called at least once before this function
041A93             0317*    ; returns: hl = current time
041A93             0318*    ; destroys: hl
041A93             0319*    timestamp_tmr_set:
041A93 FD 2F 03    0320*        ld (iy+3),hl            ; set time remaining
041A96 2A 6D 1A 04 0321*        ld hl,(timestamp_now)   ; get current timestamp
041A9A FD 2F 00    0322*        ld (iy+0),hl            ; set start time
041A9D C9          0323*        ret
041A9E             0324*    
041A9E             0325*    ; gets time remaining on a countdown timer following the global timestamp
041A9E             0326*    ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041A9E             0327*    ; requires: timestamp_tick to be called at least once before this function
041A9E             0328*    ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041A9E             0329*    ;          sign flags: pos = time not expired,zero or neg = time expired
041A9E             0330*    ; destroys: af,hl,de
041A9E             0331*    timestamp_tmr_get:
041A9E ED 5B 6D 1A 0332*        ld de,(timestamp_now)   ; get current timestamp
       04          
041AA3 FD 27 00    0333*        ld hl,(iy+0)            ; get start time
041AA6 AF          0334*        xor a                   ; clear carry
041AA7 ED 52       0335*        sbc hl,de               ; hl = time elapsed (will always be zero or negative)
041AA9 FD 17 03    0336*        ld de,(iy+3)            ; get timer set value
041AAC AF          0337*        xor a                   ; clear carry
041AAD ED 5A       0338*        adc hl,de               ; hl = time remaining
041AAF             0339*                                ; (we do adc because add hl,rr doesn't set sign or zero flags)
041AAF C9          0340*        ret
041AB0             0341*    
041AB0             0342*    ; set a stopwatch
041AB0             0343*    ; returns: hl = start time
041AB0             0344*    ; destroys: hl,ix
041AB0             0345*    stopwatch_set:
041AB0             0346*        MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041AB0 3E 08       0001*M1  			LD	A, function
041AB2 5B CF       0002*M1  			RST.LIL	08h
041AB4 DD 27 00    0347*        ld hl,(ix+sysvar_time)  ; get current time
041AB7 22 CC 1A 04 0348*        ld (stopwatch_started),hl            ; set start time
041ABB C9          0349*        ret
041ABC             0350*    
041ABC             0351*    ; gets time elapsed on a stopwatch
041ABC             0352*    ; returns: hl = time elapsed in 1/120ths of a second
041ABC             0353*    ; destroys: af,hl,de,ix
041ABC             0354*    stopwatch_get:
041ABC             0355*        MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041ABC 3E 08       0001*M1  			LD	A, function
041ABE 5B CF       0002*M1  			RST.LIL	08h
041AC0 DD 27 00    0356*        ld hl,(ix+sysvar_time)  ; get current time
041AC3 ED 5B CC 1A 0357*        ld de,(stopwatch_started)            ; get start time
       04          
041AC8 AF          0358*        xor a                   ; clear carry
041AC9 ED 52       0359*        sbc hl,de               ; hl = time elapsed (will always be zero or positive)
041ACB C9          0360*        ret
041ACC             0361*    
041ACC             0362*    stopwatch_started: ds 3 ; buffer to hold stopwatch start time
041ACF             0363*    
041ACF             0364*    ; ------------------
041ACF             0365*    ; delay routine
041ACF             0366*    ; Author: Richard Turrnidge
041ACF             0367*    ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.asm
041ACF             0368*    ; routine waits a fixed time,then returns
041ACF             0369*    ; arrive with A =  the delay byte. One bit to be set only.
041ACF             0370*    ; eg. ld A,00000100b
041ACF             0371*    
041ACF             0372*    multiPurposeDelay:
       FF FF FF 
041ACF F5          0373*        push af
041AD0 C5          0374*        push bc
041AD1 DD E5       0375*        push ix
041AD3 47          0376*        ld b,a
041AD4 3E 08       0377*        ld a,$08
041AD6 5B CF       0378*        RST.LIL	08h                 ; get IX pointer to sysvars
041AD8             0379*    
041AD8             0380*    waitLoop:
041AD8             0381*    
041AD8 DD 7E 00    0382*        ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
041ADB             0383*    
041ADB             0384*                                    ;   we check if bit set is same as last time we checked.
041ADB             0385*                                    ;   bit 0 - don't use
041ADB             0386*                                    ;   bit 1 - changes 64 times per second
041ADB             0387*                                    ;   bit 2 - changes 32 times per second
041ADB             0388*                                    ;   bit 3 - changes 16 times per second
041ADB             0389*    
041ADB             0390*                                    ;   bit 4 - changes 8 times per second
041ADB             0391*                                    ;   bit 5 - changes 4 times per second
041ADB             0392*                                    ;   bit 6 - changes 2 times per second
041ADB             0393*                                    ;   bit 7 - changes 1 times per second
041ADB A0          0394*        and b
041ADC 4F          0395*        ld c,a
041ADD 3A EE 1A 04 0396*        ld a,(oldTimeStamp)
041AE1 B9          0397*        cp c                        ; is A same as last value?
041AE2 28 F4       0398*        jr z,waitLoop              ; loop here if it is
041AE4 79          0399*        ld a,c
041AE5 32 EE 1A 04 0400*        ld (oldTimeStamp),a        ; set new value
041AE9             0401*    
041AE9 DD E1       0402*        pop ix
041AEB C1          0403*        pop bc
041AEC F1          0404*        pop af
041AED C9          0405*        ret
041AEE             0406*    
041AEE 00          0407*    oldTimeStamp:   .db 00h
041AEF             0039         include "vdu.inc"
041AEF             0001*    ; VDU 30: Home cursor
041AEF             0002*    vdu_home_cursor:
041AEF 3E 1E       0003*        ld a,30
041AF1 5B D7       0004*    	rst.lil $10
041AF3 C9          0005*    	ret
041AF4             0006*    
041AF4             0007*    vdu_cursor_on:
041AF4 21 FF 1A 04 0008*    	ld hl,@cmd
041AF8 01 03 00 00 0009*    	ld bc,@end-@cmd
041AFC 5B DF       0010*    	rst.lil $18
041AFE C9          0011*    	ret
041AFF             0012*    @cmd:
041AFF 17 01 01    0013*    	db 23,1,1
041B02             0014*    @end:
041B02             0015*    
041B02             0016*    vdu_cursor_off:
041B02 21 0D 1B 04 0017*    	ld hl,@cmd
041B06 01 03 00 00 0018*    	ld bc,@end-@cmd
041B0A 5B DF       0019*    	rst.lil $18
041B0C C9          0020*    	ret
041B0D             0021*    @cmd:
041B0D 17 01 00    0022*    	db 23,1,0
041B10             0023*    @end:
041B10             0024*    
041B10             0025*    ; VDU 4: Write text at text cursor
041B10             0026*    ; This causes text to be written at th current text cursor position. This is the default mode for text display.
041B10             0027*    ; inputs: none
041B10             0028*    ; prerequisites: the text cursor at the intended position on screen
041B10             0029*    ; outputs: none
041B10             0030*    ; destroys: af
041B10             0031*    vdu_text_to_text_cursor:
041B10 3E 04       0032*        ld a,4
041B12 5B D7       0033*        rst.lil $10
041B14 C9          0034*        ret
041B15             0035*    ; end vdu_text_to_text_cursor
041B15             0036*    
041B15             0037*    ; set the text cursor to a specified location and print a string there
041B15             0038*    ; inputs: hl = address of string to print, c,b = x,y text coordinates
041B15             0039*    ; outputs: text
041B15             0040*    ; destroys: af, bc, hl
041B15             0041*    ; affects: moves text cursor to position after final char printed by default
041B15             0042*    ;          unless overridden by VDU 23, 16 cursor control command settings
041B15             0043*    ;          all subsequent print commands (rst.lil $10 or $18) will go to the text cursor
041B15             0044*    vdu_print_to_text_location:
041B15 E5          0045*        push hl ; preserve string pointer
041B16 3E 04       0046*        ld a,4 ; VDU 4 char to text cursor
041B18 5B D7       0047*        rst.lil $10
041B1A CD 52 1B 04 0048*        call vdu_move_cursor
041B1E E1          0049*        pop hl ; restore string pointer
041B1F CD 67 00 04 0050*        call printString
041B23 C9          0051*        ret
041B24             0052*    ; end vdu_print_at_text_location
041B24             0053*    
041B24             0054*    ; VDU 5: Write text at graphics cursor
041B24             0055*    ; inputs: none
041B24             0056*    ; prerequisites: the graphics cursor at the intended position on screen
041B24             0057*    ; outputs: none
041B24             0058*    ; destroys: af
041B24             0059*    vdu_text_to_gfx_cursor:
041B24 3E 05       0060*        ld a,5
041B26 5B D7       0061*    	rst.lil $10
041B28 C9          0062*    	ret
041B29             0063*    ; end vdu_char_to_gfx_cursor
041B29             0064*    
041B29             0065*    ; set the graphics cursor to a specified location and print a string there
041B29             0066*    ; inputs: hl = address of string to print, bc,de = x,y graphics coordinates
041B29             0067*    ; outputs: text
041B29             0068*    ; destroys: af, bc, de, hl
041B29             0069*    ; affects: moves graphics cursor to position after final char printed by default
041B29             0070*    ;          unless overridden by setting bit 6 of the cursor control register (VDU 23, 16)
041B29             0071*    ;          all subsequent print commands (rst.lil $10 or $18) will go to the graphics cursor
041B29             0072*    vdu_print_to_gfx_location:
041B29 E5          0073*        push hl ; preserve string pointer
041B2A 3E 44       0074*        ld a,plot_pt+mv_abs
041B2C CD 54 20 04 0075*        call vdu_plot ; moves the graphics cursor to the specified location
041B30 3E 05       0076*        ld a,5 ; VDU 5 char to gfx cursor
041B32 5B D7       0077*        rst.lil $10
041B34 E1          0078*        pop hl ; restore string pointer
041B35 01 00 00 00 0079*        ld bc,0
041B39 3E 00       0080*        ld a,0
041B3B 5B DF       0081*        rst.lil $18 ; print the string
041B3D C9          0082*        ret
041B3E             0083*    ; end vdu_print_at_gfx_location
041B3E             0084*    
041B3E             0085*    ; VDU 8: Move cursor back one character
041B3E             0086*    vdu_cursor_back:
041B3E 3E 08       0087*        ld a,8
041B40 5B D7       0088*        rst.lil $10
041B42 C9          0089*        ret
041B43             0090*    ; end vdu_cursor_back
041B43             0091*    
041B43             0092*    ; VDU 9: Move cursor forward one character
041B43             0093*    vdu_cursor_forward:
041B43 3E 09       0094*        ld a,9
041B45 5B D7       0095*    	rst.lil $10
041B47 C9          0096*    	ret
041B48             0097*    ; end vdu_cursor_forward
041B48             0098*    
041B48             0099*    ; VDU 10: Move cursor down one line
041B48             0100*    vdu_cursor_down:
041B48 3E 0A       0101*        ld a,10
041B4A 5B D7       0102*        rst.lil $10
041B4C C9          0103*        ret
041B4D             0104*    ; end vdu_cursor_down
041B4D             0105*    
041B4D             0106*    ; VDU 11: Move cursor up one line
041B4D             0107*    vdu_cursor_up:
041B4D 3E 0B       0108*        ld a,11
041B4F 5B D7       0109*        rst.lil $10
041B51 C9          0110*        ret
041B52             0111*    ; end vdu_cursor_up
041B52             0112*    
041B52             0113*    
041B52             0114*    ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041B52             0115*    ; inputs: c=x, b=y 8-bit unsigned integers
041B52             0116*    vdu_move_cursor:
041B52 ED 43 63 1B 0117*        ld (@x0),bc
       04          
041B57 21 62 1B 04 0118*    	ld hl,@cmd
041B5B 01 03 00 00 0119*    	ld bc,@end-@cmd
041B5F 5B DF       0120*    	rst.lil $18
041B61 C9          0121*    	ret
041B62 1F          0122*    @cmd: 	db 31
041B63 00          0123*    @x0:	db 0
041B64 00          0124*    @y0: 	db 0
041B65 00          0125*    @end: 	db 0 ; padding
041B66             0126*    
041B66             0127*    ; https://agonconsole8.github.io/agon-docs/vdp/VDU-Commands/#vdu-23-1-n-cursor-control
041B66             0128*    ; VDU 23, 16, setting, mask: Define cursor movement behaviour
041B66             0129*    ; inputs: l = setting, h = mask
041B66             0130*    ; new_setting = (current_setting AND mask) EOR setting
041B66             0131*    ; in English: mask controls which bit to turn on or off, setting is the value of the bits to set or reset
041B66             0132*    vdu_cursor_behaviour:
041B66 22 77 1B 04 0133*        ld (@setting),hl ; little-endian!
041B6A 21 75 1B 04 0134*        ld hl,@cmd
041B6E 01 04 00 00 0135*        ld bc,@end-@cmd
041B72 5B DF       0136*        rst.lil $18
041B74 C9          0137*        ret
041B75 17 10       0138*    @cmd: db 23,16
041B77 00          0139*    @setting: db 0
041B78 00          0140*    @mask: db 0
041B79 00          0141*    @end: db 0 ; padding
041B7A             0142*    
041B7A             0143*    ; VDU 12: Clear text area (CLS)
041B7A             0144*    vdu_cls:
041B7A 3E 0C       0145*        ld a,12
041B7C 5B D7       0146*    	rst.lil $10
041B7E C9          0147*    	ret
041B7F             0148*    
041B7F             0149*    vdu_flip:
041B7F 21 8A 1B 04 0150*    	ld hl,@cmd
041B83 01 03 00 00 0151*    	ld bc,@end-@cmd
041B87 5B DF       0152*    	rst.lil $18
041B89 C9          0153*    	ret
041B8A 17 00 C3    0154*    @cmd: db 23,0,0xC3
041B8D             0155*    @end:
041B8D             0156*    
041B8D             0157*    ; VDU 16: Clear graphics area (CLG)
041B8D             0158*    vdu_clg:
041B8D 3E 10       0159*        ld a,16
041B8F 5B D7       0160*    	rst.lil $10
041B91 C9          0161*    	ret
041B92             0162*    
041B92             0163*    ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
041B92             0164*    ; VDU 23, 7: Scrolling
041B92             0165*    ;     VDU 23, 7, extent, direction, speed: Scroll the screen
041B92             0166*    ; inputs: a, extent; l, direction; h; speed
041B92             0167*    vdu_scroll_down:
041B92 32 A7 1B 04 0168*    	ld (@extent),a
041B96 22 A8 1B 04 0169*    	ld (@dir),hl ; implicitly populates @speed
041B9A 21 A5 1B 04 0170*    	ld hl,@cmd
041B9E 01 05 00 00 0171*    	ld bc,@end-@cmd
041BA2 5B DF       0172*    	rst.lil $18     ;; Sending command to VDP
041BA4 C9          0173*    	ret
041BA5 17 07       0174*    @cmd:       db 23,7
041BA7 00          0175*    @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
041BA8 00          0176*    @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
041BA9 00          0177*    @speed:     db 0x00 ; pixels
041BAA 00          0178*    @end:		db 0x00 ; padding
041BAB             0179*    
041BAB             0180*    ; COLOUR MODES
041BAB             0181*    ; Mode	Effect
041BAB             0182*    ; 0	Set on-screen pixel to target colour value
041BAB             0183*    ; 1	OR value with the on-screen pixel
041BAB             0184*    ; 2	AND value with the on-screen pixel
041BAB             0185*    ; 3	XOR value with the on-screen pixel
041BAB             0186*    ; 4	Invert the on-screen pixel
041BAB             0187*    ; 5	No operation
041BAB             0188*    ; 6	AND the inverse of the specified colour with the on-screen pixel
041BAB             0189*    ; 7	OR the inverse of the specified colour with the on-screen pixel
041BAB             0190*    
041BAB             0191*    ; VDU 17, colour: Define text colour (COLOUR)
041BAB             0192*    vdu_colour_text:
041BAB 32 BB 1B 04 0193*    	ld (@arg),a
041BAF 21 BA 1B 04 0194*    	ld hl,@cmd
041BB3 01 02 00 00 0195*    	ld bc,@end-@cmd
041BB7 5B DF       0196*    	rst.lil $18
041BB9 C9          0197*    	ret
041BBA 11          0198*    @cmd: db 17
041BBB 00          0199*    @arg: db 0
041BBC             0200*    @end:
041BBC             0201*    
041BBC             0202*    ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
041BBC             0203*    ; inputs: a=mode, c=colour (add 128 to set background colour)
041BBC             0204*    vdu_gcol:
041BBC 32 D1 1B 04 0205*    	ld (@mode),a
041BC0 79          0206*        ld a,c
041BC1 32 D2 1B 04 0207*        ld (@col),a
041BC5 21 D0 1B 04 0208*    	ld hl,@cmd
041BC9 01 03 00 00 0209*    	ld bc,@end-@cmd
041BCD 5B DF       0210*    	rst.lil $18
041BCF C9          0211*    	ret
041BD0 12          0212*    @cmd:  db 18
041BD1 00          0213*    @mode: db 0
041BD2 00          0214*    @col:  db 0
041BD3             0215*    @end:
041BD3             0216*    
041BD3             0217*    
041BD3             0218*    ; VDU 28, left, bottom, right, top: Set text viewport **
041BD3             0219*    ; MIND THE LITTLE-ENDIANESS
041BD3             0220*    ; inputs: c=left,b=bottom,e=right,d=top
041BD3             0221*    ; outputs; nothing
041BD3             0222*    ; destroys: af, hl, bc, de
041BD3             0223*    vdu_set_txt_viewport:
041BD3 ED 43 E9 1B 0224*        ld (@lb),bc
       04          
041BD8 ED 53 EB 1B 0225*    	ld (@rt),de
       04          
041BDD 21 E8 1B 04 0226*    	ld hl,@cmd
041BE1 01 05 00 00 0227*    	ld bc,@end-@cmd
041BE5 5B DF       0228*    	rst.lil $18
041BE7 C9          0229*    	ret
041BE8 1C          0230*    @cmd:   db 28 ; set text viewport command
041BE9 00 00       0231*    @lb: 	dw 0x0000 ; set by bc
041BEB 00 00       0232*    @rt: 	dw 0x0000 ; set by de
041BED 00          0233*    @end:   db 0x00	  ; padding
041BEE             0234*    
041BEE             0235*    ; Wait for VBLANK interrupt
041BEE             0236*    vdu_vblank:
041BEE DD E5       0237*        PUSH 	IX
041BF0             0238*    	MOSCALL	mos_sysvars
                       M1 Args: function=mos_sysvars 
041BF0 3E 08       0001*M1  			LD	A, function
041BF2 5B CF       0002*M1  			RST.LIL	08h
041BF4 DD 7E 00    0239*    	LD	A, (IX + sysvar_time + 0)
041BF7             0240*    @wait:
041BF7 DD BE 00    0241*        CP 	A, (IX + sysvar_time + 0)
041BFA 28 FB       0242*        JR	Z, @wait
041BFC DD E1       0243*        POP	IX
041BFE C9          0244*        RET
041BFF             0245*    
041BFF             0246*    ; VDU 29, x; y;: Set graphics origin
041BFF             0247*    ; This command sets the graphics origin.
041BFF             0248*    ; The origin is the point on the screen where the coordinates (0,0) are located.
041BFF             0249*    ; inputs: bc=x0,de=y0
041BFF             0250*    ; outputs; nothing
041BFF             0251*    ; destroys: a might make it out alive
041BFF             0252*    vdu_set_gfx_origin:
041BFF ED 43 15 1C 0253*        ld (@x0),bc
       04          
041C04 ED 53 17 1C 0254*        ld (@y0),de
       04          
041C09 21 14 1C 04 0255*        ld hl,@cmd
041C0D 01 05 00 00 0256*        ld bc,@end-@cmd
041C11 5B DF       0257*        rst.lil $18
041C13 C9          0258*        ret
041C14 1D          0259*    @cmd:   db 29 ; set graphics origin command
041C15 00 00       0260*    @x0: 	dw 0x0000 ; set by bc
041C17 00 00       0261*    @y0: 	dw 0x0000 ; set by de
041C19 00          0262*    @end:   db 0x00	  ; padding
041C1A             0263*    
041C1A             0264*    ; VDU 24, left; bottom; right; top;: Set graphics viewport
041C1A             0265*    ; NOTE: the order of the y-coordinate parameters are inverted
041C1A             0266*    ; 	because we have turned off logical screen scaling
041C1A             0267*    ; NOTE: coordinates are relative to current gfx origin
041C1A             0268*    ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041C1A             0269*    ; outputs; nothing
041C1A             0270*    ; destroys: a might make it out alive
041C1A             0271*    vdu_set_gfx_viewport:
041C1A ED 43 3A 1C 0272*        ld (@x0),bc
       04          
041C1F FD 22 3C 1C 0273*        ld (@y1),iy
       04          
041C24 DD 22 3E 1C 0274*    	ld (@x1),ix
       04          
041C29 ED 53 40 1C 0275*    	ld (@y0),de
       04          
041C2E 21 39 1C 04 0276*    	ld hl,@cmd
041C32 01 09 00 00 0277*    	ld bc,@end-@cmd
041C36 5B DF       0278*    	rst.lil $18
041C38 C9          0279*    	ret
041C39 18          0280*    @cmd:   db 24 ; set graphics viewport command
041C3A 00 00       0281*    @x0: 	dw 0x0000 ; set by bc
041C3C 00 00       0282*    @y1: 	dw 0x0000 ; set by iy
041C3E 00 00       0283*    @x1: 	dw 0x0000 ; set by ix
041C40 00 00       0284*    @y0: 	dw 0x0000 ; set by de
041C42 00          0285*    @end:   db 0x00	  ; padding
041C43             0286*    
041C43             0287*    ; VDU 26: Reset graphics and text viewports
041C43             0288*    vdu_reset_viewports:
041C43 3E 1A       0289*        ld a,26
041C45 5B D7       0290*        rst.lil $10
041C47 C9          0291*        ret
041C48             0292*    
041C48             0293*    ; SCREEN MODES
041C48             0294*    ; ===============================
041C48             0295*    ; Mode  Horz  Vert  Cols  Refresh
041C48             0296*    ; ---   ----  ----  ----  -------
041C48             0297*    ; 11    320   240   2     60hz
041C48             0298*    ; 139   320   240   2     60hz
041C48             0299*    ; 23    512   384   2     60hz
041C48             0300*    ; 151   512   384   2     60hz
041C48             0301*    ; 6     640   240   2     60hz
041C48             0302*    ; 134   640   240   2     60hz
041C48             0303*    ; 2     640   480   2     60hz
041C48             0304*    ; 130   640   480   2     60hz
041C48             0305*    ; 17    800   600   2     60hz
041C48             0306*    ; 145   800   600   2     60hz
041C48             0307*    ; 18    1024  768   2     60hz
041C48             0308*    ; 146   1024  768   2     60hz
041C48             0309*    ; ---   ----  ----  ----  -------
041C48             0310*    ; 10    320   240   4     60hz
041C48             0311*    ; 138   320   240   4     60hz
041C48             0312*    ; 22    512   384   4     60hz
041C48             0313*    ; 150   512   384   4     60hz
041C48             0314*    ; 5     640   240   4     60hz
041C48             0315*    ; 133   640   240   4     60hz
041C48             0316*    ; 1     640   480   4     60hz
041C48             0317*    ; 129   640   480   4     60hz
041C48             0318*    ; 16    800   600   4     60hz
041C48             0319*    ; 19    1024  768   4     60hz
041C48             0320*    ; ---   ----  ----  ----  -------
041C48             0321*    ; 9     320   240   16    60hz
041C48             0322*    ; 137   320   240   16    60hz
041C48             0323*    ; 21    512   384   16    60hz
041C48             0324*    ; 149   512   384   16    60hz
041C48             0325*    ; 4     640   240   16    60hz
041C48             0326*    ; 132   640   240   16    60hz
041C48             0327*    ; 0     640   480   16    60hz
041C48             0328*    ; 7     n/a   n/a   16    60hz
041C48             0329*    ; ---   ----  ----  ----  -------
041C48             0330*    ; 8     320   240   64    60hz
041C48             0331*    ; 136   320   240   64    60hz
041C48             0332*    ; 20    512   384   64    60hz
041C48             0333*    ; 3     640   240   64    60hz
041C48             0334*    ; ---   ----  ----  ----  -------
041C48             0335*    vdu_set_screen_mode:
041C48 32 58 1C 04 0336*    	ld (@arg),a
041C4C 21 57 1C 04 0337*    	ld hl,@cmd
041C50 01 02 00 00 0338*    	ld bc,@end-@cmd
041C54 5B DF       0339*    	rst.lil $18
041C56 C9          0340*    	ret
041C57 16          0341*    @cmd: db 22 ; set screen mode
041C58 00          0342*    @arg: db 0  ; screen mode parameter
041C59             0343*    @end:
041C59             0344*    
041C59             0345*    ; get the current screen mode
041C59             0346*    ; inputs: none
041C59             0347*    ; outputs: a=screen mode
041C59             0348*    ; destroys: af, ix
041C59             0349*    vdu_get_screen_mode:
041C59             0350*        MOSCALL mos_sysvars
                       M1 Args: function=mos_sysvars 
041C59 3E 08       0001*M1  			LD	A, function
041C5B 5B CF       0002*M1  			RST.LIL	08h
041C5D DD 7E 27    0351*        ld a,(IX+sysvar_scrMode)
041C60 C9          0352*        ret
041C61             0353*    ; end vdu_get_screen_mode
041C61             0354*    
041C61             0355*    ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041C61             0356*    ; inputs: a is scaling mode, 1=on, 0=off
041C61             0357*    ; note: default setting on boot is scaling ON
041C61             0358*    vdu_set_scaling:
041C61 32 73 1C 04 0359*    	ld (@arg),a
041C65 21 70 1C 04 0360*    	ld hl,@cmd
041C69 01 04 00 00 0361*    	ld bc,@end-@cmd
041C6D 5B DF       0362*    	rst.lil $18
041C6F C9          0363*    	ret
041C70 17 00 C0    0364*    @cmd: db 23,0,0xC0
041C73 00          0365*    @arg: db 0  ; scaling on/off
041C74             0366*    @end:
041C74             0367*    
041C74             0368*    ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041C74             0369*    ; inputs: hl=bufferId
041C74             0370*    vdu_buff_select:
041C74 22 86 1C 04 0371*    	ld (@bufferId),hl
041C78 21 83 1C 04 0372*    	ld hl,@cmd
041C7C 01 05 00 00 0373*    	ld bc,@end-@cmd
041C80 5B DF       0374*    	rst.lil $18
041C82 C9          0375*    	ret
041C83 17 1B 20    0376*    @cmd: db 23,27,0x20
041C86 00 00       0377*    @bufferId: dw 0x0000
041C88 00          0378*    @end: db 0x00 ; padding
041C89             0379*    
041C89             0380*    ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
041C89             0381*    ; inputs: a=format; bc=width; de=height
041C89             0382*    ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
041C89             0383*    ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
041C89             0384*    ; 0 	RGBA8888 (4-bytes per pixel)
041C89             0385*    ; 1 	RGBA2222 (1-bytes per pixel)
041C89             0386*    ; 2 	Mono/Mask (1-bit per pixel)
041C89             0387*    ; 3 	Reserved for internal use by VDP (“native” format)
041C89             0388*    vdu_bmp_create:
041C89 ED 43 A5 1C 0389*        ld (@width),bc
       04          
041C8E ED 53 A7 1C 0390*        ld (@height),de
       04          
041C93 32 A9 1C 04 0391*        ld (@fmt),a
041C97 21 A2 1C 04 0392*    	ld hl,@cmd
041C9B 01 08 00 00 0393*    	ld bc,@end-@cmd
041C9F 5B DF       0394*    	rst.lil $18
041CA1 C9          0395*    	ret
041CA2 17 1B 21    0396*    @cmd:       db 23,27,0x21
041CA5 00 00       0397*    @width:     dw 0x0000
041CA7 00 00       0398*    @height:    dw 0x0000
041CA9 00          0399*    @fmt:       db 0x00
041CAA             0400*    @end:
041CAA             0401*    
041CAA             0402*    ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
041CAA             0403*    ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
041CAA             0404*    vdu_load_img_rgba2_to_8:
041CAA             0405*    ; backup the target buffer id and image dimensions
041CAA E5          0406*        push hl
041CAB D5          0407*        push de
041CAC C5          0408*        push bc
041CAD             0409*    ; load the rgba2 image to working buffer 65534
041CAD 21 FE FF 00 0410*        ld hl,65534 ; temporary working buffer id
041CB1 CD 88 1D 04 0411*    	call vdu_load_buffer_from_file
041CB5             0412*    ; restore the image dimensions and target buffer id
041CB5 C1          0413*        pop bc
041CB6 D1          0414*        pop de
041CB7 E1          0415*        pop hl
041CB8             0416*    ; fall through to vdu_rgba2_to_8
041CB8             0417*    
041CB8             0418*    ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
041CB8             0419*    ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
041CB8             0420*    ; the "expand bitmap" command is:
041CB8             0421*    ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041CB8             0422*    ; and then to reverse the byte order to fix endian-ness:
041CB8             0423*    ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041CB8             0424*    ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041CB8             0425*    ; VDU 23,27,&20,targetBufferID%;
041CB8             0426*    ; VDU 23,27,&21,width%;height%;0
041CB8             0427*    ; -------------------------------------------------------------------
041CB8             0428*    ; inputs: bc,de image width,height ; hl = targetBufferId
041CB8             0429*    ; prerequisites: rgba2 image data loaded into workingBufferId 65534
041CB8             0430*    vdu_rgba2_to_8:
041CB8             0431*    ; load the image dimensions and buffer id parameters
041CB8 ED 43 14 1D 0432*        ld (@width),bc
       04          
041CBD ED 53 16 1D 0433*        ld (@height),de
       04          
041CC2 22 F9 1C 04 0434*        ld (@bufferId0),hl
041CC6 22 06 1D 04 0435*        ld (@bufferId2),hl
041CCA 22 0F 1D 04 0436*        ld (@bufferId1),hl
041CCE             0437*    ; clean up bytes that got stomped on by the ID loads
041CCE 3E 48       0438*        ld a,0x48
041CD0 32 FB 1C 04 0439*        ld (@bufferId0+2),a
041CD4 3E 17       0440*        ld a,23
041CD6 32 11 1D 04 0441*        ld (@bufferId1+2),a
041CDA 3E 18       0442*        ld a,24
041CDC 32 08 1D 04 0443*        ld (@bufferId2+2),a
041CE0 AF          0444*        xor a
041CE1 32 18 1D 04 0445*        ld (@height+2),a
041CE5             0446*    ; send the vdu command strings
041CE5 21 F0 1C 04 0447*        ld hl,@beg
041CE9 01 29 00 00 0448*        ld bc,@end-@beg
041CED 5B DF       0449*        rst.lil $18
041CEF C9          0450*        ret
041CF0             0451*    @beg:
041CF0             0452*    ; Command 14: Consolidate blocks in a buffer
041CF0             0453*    ; VDU 23, 0, &A0, bufferId; 14
041CF0 17 00 A0    0454*        db 23,0,0xA0
041CF3 FE FF       0455*        dw 65534 ; workingBufferId
041CF5 0E          0456*        db 14 ; consolidate blocks
041CF6             0457*    ; the "expand bitmap" command is:
041CF6             0458*    ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041CF6 17 00 A0    0459*        db 23,0,0xA0
041CF9 00 00       0460*    @bufferId0: dw 0x0000 ; targetBufferId
041CFB 48          0461*        db 0x48 ; given as decimal command 72 in the docs
041CFC 02          0462*        db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
041CFD FE FF       0463*        dw 65534 ; sourceBufferId
041CFF 00 7F BF FF 0464*        db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041D03             0465*    ; reverse the byte order to fix endian-ness:
041D03             0466*    ; Command 24: Reverse the order of data of blocks within a buffer
041D03             0467*    ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041D03             0468*    ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041D03 17 00 A0    0469*        db 23,0,0xA0
041D06 00 00       0470*    @bufferId2:    dw 0x0000 ; targetBufferId
041D08 18          0471*        db 24 ; reverse byte order
041D09 04          0472*        db 4 ; option: Reverse data of the value size within chunk of data of the specified size
041D0A 04 00       0473*        dw 4 ; size (4 bytes)
041D0C             0474*    ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041D0C             0475*    ; VDU 23,27,&20,targetBufferID%;
041D0C 17 1B 20    0476*        db 23,27,0x20 ; select bitmap
041D0F 00 00       0477*    @bufferId1: dw 0x0000 ; targetBufferId
041D11             0478*    ; VDU 23,27,&21,width%;height%;0
041D11 17 1B 21    0479*        db 23,27,0x21 ; create bitmap from buffer
041D14 00 00       0480*    @width: dw 0x0000
041D16 00 00       0481*    @height: dw 0x0000
041D18 00          0482*        db 0x00 ; rgba8888 format
041D19             0483*    @end:
041D19             0484*    
041D19             0485*    ; scratch variables
041D19 00 00 00    0486*    bufferId0: dl 0x000000
041D1C 00 00 00    0487*    bufferId1: dl 0x000000
041D1F             0488*    
041D1F             0489*    ; load a vdu buffer from local memory
041D1F             0490*    ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041D1F             0491*    vdu_load_buffer:
041D1F ED 43 48 1D 0492*        ld (@length),bc
       04          
041D24 D5          0493*        push de ; save data pointer
041D25             0494*    ; send the vdu command string
041D25 7D          0495*        ld a,l
041D26 32 45 1D 04 0496*        ld (@bufferId),a
041D2A 7C          0497*        ld a,h
041D2B 32 46 1D 04 0498*        ld (@bufferId+1),a
041D2F 21 42 1D 04 0499*        ld hl,@cmd
041D33 01 08 00 00 0500*        ld bc,@end-@cmd
041D37 5B DF       0501*        rst.lil $18
041D39             0502*    ; send the buffer data
041D39 E1          0503*        pop hl ; pointer to data
041D3A ED 4B 48 1D 0504*        ld bc,(@length)
       04          
041D3F 5B DF       0505*        rst.lil $18 ; send it
041D41 C9          0506*        ret
041D42             0507*    ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041D42 17 00 A0    0508*    @cmd:       db 23,0,0xA0
041D45 00 00       0509*    @bufferId:	dw 0x0000
041D47 00          0510*    		    db 0 ; load buffer
041D48 00 00       0511*    @length:	dw 0x0000
041D4A 00          0512*    @end: db 0 ; padding
041D4B             0513*    
041D4B             0514*    ; Command 14: Consolidate blocks in a buffer
041D4B             0515*    vdu_consolidate_buffer:
041D4B             0516*    ; set parameters for vdu call
041D4B 7D          0517*        ld a,l
041D4C 32 63 1D 04 0518*        ld (@bufferId),a
041D50 7C          0519*        ld a,h
041D51 32 64 1D 04 0520*        ld (@bufferId+1),a
041D55 21 60 1D 04 0521*        ld hl,@beg
041D59 01 06 00 00 0522*        ld bc,@end-@beg
041D5D 5B DF       0523*        rst.lil $18
041D5F C9          0524*        ret
041D60             0525*    ; VDU 23, 0, &A0, bufferId; 14
041D60 17 00 A0    0526*    @beg: db 23,0,0xA0
041D63 00 00       0527*    @bufferId: dw 0x0000
041D65 0E          0528*               db 14
041D66             0529*    @end:
041D66             0530*    
041D66             0531*    ; load an image file to a buffer and make it a bitmap
041D66             0532*    ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
041D66             0533*    vdu_load_img:
041D66             0534*    ; back up image type and dimension parameters
041D66 22 19 1D 04 0535*        ld (bufferId0),hl
041D6A F5          0536*        push af
041D6B C5          0537*    	push bc
041D6C D5          0538*    	push de
041D6D             0539*    ; load the image
041D6D CD 88 1D 04 0540*    	call vdu_load_buffer_from_file
041D71             0541*    ; now make it a bitmap
041D71 2A 19 1D 04 0542*        ld hl,(bufferId0)
041D75 CD 4B 1D 04 0543*        call vdu_consolidate_buffer
041D79 2A 19 1D 04 0544*        ld hl,(bufferId0)
041D7D CD 74 1C 04 0545*        call vdu_buff_select
041D81 D1          0546*    	pop de ; image height
041D82 C1          0547*    	pop bc ; image width
041D83 F1          0548*    	pop af ; image type
041D84 C3 89 1C 04 0549*    	jp vdu_bmp_create ; will return to caller from there
041D88             0550*    
041D88             0551*    ; inputs: hl = bufferId; iy = pointer to filename
041D88             0552*    vdu_load_buffer_from_file:
041D88 22 19 1D 04 0553*        ld (bufferId0),hl
041D8C             0554*    
041D8C             0555*    ; clear target buffer
041D8C CD 34 1F 04 0556*        call vdu_clear_buffer
041D90             0557*    
041D90             0558*    ; open the file in read mode
041D90             0559*    ; Open a file
041D90             0560*    ; HLU: Filename
041D90             0561*    ;   C: Mode
041D90             0562*    ; Returns:
041D90             0563*    ;   A: Filehandle, or 0 if couldn't open
041D90 FD E5       0564*    	push iy ; pointer to filename
041D92 E1          0565*    	pop hl
041D93 0E 01       0566*    	ld c,fa_read
041D95             0567*        MOSCALL mos_fopen
                       M1 Args: function=mos_fopen 
041D95 3E 0A       0001*M1  			LD	A, function
041D97 5B CF       0002*M1  			RST.LIL	08h
041D99 32 D4 1D 04 0568*        ld (@filehandle),a
041D9D             0569*    
041D9D             0570*    @read_file:
041D9D             0571*    ; Read a block of data from a file
041D9D             0572*    ;   C: Filehandle
041D9D             0573*    ; HLU: Pointer to where to write the data to
041D9D             0574*    ; DEU: Number of bytes to read
041D9D             0575*    ; Returns:
041D9D             0576*    ; DEU: Number of bytes read
041D9D 3A D4 1D 04 0577*        ld a,(@filehandle)
041DA1 4F          0578*        ld c,a
041DA2 21 00 E0 B7 0579*        ld hl,filedata
041DA6 11 00 20 00 0580*        ld de,8192 ; max we can read into onboard sram at one time
041DAA             0581*        MOSCALL mos_fread
                       M1 Args: function=mos_fread 
041DAA 3E 1A       0001*M1  			LD	A, function
041DAC 5B CF       0002*M1  			RST.LIL	08h
041DAE             0582*    
041DAE             0583*    ; test de for zero bytes read
041DAE 21 00 00 00 0584*        ld hl,0
041DB2 AF          0585*        xor a ; clear carry
041DB3 ED 52       0586*        sbc hl,de
041DB5 CA CB 1D 04 0587*        jp z,@close_file
041DB9             0588*    
041DB9             0589*    ; load a vdu buffer from local memory
041DB9             0590*    ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041DB9 2A 19 1D 04 0591*        ld hl,(bufferId0)
041DBD D5          0592*        push de ; chunksize
041DBE C1          0593*        pop bc
041DBF 11 00 E0 B7 0594*        ld de,filedata
041DC3 CD 1F 1D 04 0595*        call vdu_load_buffer
041DC7             0596*    
041DC7             0597*    ; read the next block
041DC7 C3 9D 1D 04 0598*        jp @read_file
041DCB             0599*    
041DCB             0600*    ; close the file
041DCB             0601*    @close_file:
041DCB 3A D4 1D 04 0602*        ld a,(@filehandle)
041DCF             0603*        MOSCALL mos_fclose
                       M1 Args: function=mos_fclose 
041DCF 3E 0B       0001*M1  			LD	A, function
041DD1 5B CF       0002*M1  			RST.LIL	08h
041DD3 C9          0604*        ret ; vdu_load_buffer_from_file
041DD4             0605*    
041DD4 00          0606*    @filehandle: db 0 ; file handle
041DD5 00 00 00    0607*    @fil: dl 0 ; pointer to FIL struct
041DD8             0608*    
041DD8 00 00 00    0609*    @chunkpointer: dl 0 ; pointer to current chunk
041DDB             0610*    
041DDB             0611*    ; File information structure (FILINFO)
041DDB             0612*    @filinfo:
041DDB 00 00 00 00 0613*    @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
041DDF 00 00       0614*    @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
041DE1 00 00       0615*    @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041DE3 00          0616*    @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041DE4 00 00 00 00 0617*    @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
041DF1 00 00 00 00 0618*    @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041EF1             0040         include "vdu_buffered_api.inc"
041EF1             0001*    ; https://agonconsole8.github.io/agon-docs/vdp/Buffered-Commands-API/
041EF1             0002*    
041EF1             0003*    ; Command 0: Write block to a buffer
041EF1             0004*    ; VDU 23, 0, &A0, bufferId; 0, length; <buffer-data>
041EF1             0005*    ; inputs: hl = bufferId, bc = length of data, de = pointer to data
041EF1             0006*    vdu_write_block_to_buffer:
041EF1             0007*    ; back up input parameters
041EF1 D5          0008*        push de ; pointer to data
041EF2 C5          0009*        push bc ; length of data
041EF3             0010*    ; set up the vdu command string
041EF3 22 13 1F 04 0011*        ld (@bufferId),hl
041EF7 ED 43 16 1F 0012*        ld (@length),bc
       04          
041EFC AF          0013*        xor a ; load buffer
041EFD 32 15 1F 04 0014*        ld (@bufferId+2),a
041F01 21 10 1F 04 0015*        ld hl,@cmd0
041F05 01 08 00 00 0016*        ld bc,@end0-@cmd0
041F09 5B DF       0017*        rst.lil $18
041F0B             0018*    ; send the buffer data
041F0B C1          0019*        pop bc ; length of data
041F0C E1          0020*        pop hl ; pointer to data (was de)
041F0D 5B DF       0021*        rst.lil $18 ; send it
041F0F C9          0022*        ret
041F10             0023*    ; command string data
041F10 17 00 A0    0024*    @cmd0:      db 23,0,0xA0
041F13 00 00       0025*    @bufferId:	dw 0x0000
041F15 00          0026*                db 0 ; load buffer
041F16 00 00       0027*    @length:	dw 0x0000
041F18 00          0028*    @end0:      db 0x00 ; padding
041F19             0029*    ; end vdu_write_block_to_buffer
041F19             0030*    
041F19             0031*    ; Command 1: Call a buffer
041F19             0032*    ; VDU 23, 0, &A0, bufferId; 1
041F19             0033*    ; inputs: hl = bufferId
041F19             0034*    vdu_call_buffer:
041F19 22 31 1F 04 0035*        ld (@bufferId),hl
041F1D 3E 01       0036*        ld a,1 ; call buffer
041F1F 32 33 1F 04 0037*        ld (@bufferId+2),a
041F23 21 2E 1F 04 0038*        ld hl,@cmd
041F27 01 06 00 00 0039*        ld bc,@end-@cmd
041F2B 5B DF       0040*        rst.lil $18
041F2D C9          0041*        ret
041F2E 17 00 A0    0042*    @cmd:     db 23,0,0xA0
041F31 00 00       0043*    @bufferId: dw 0x0000
041F33 01          0044*               db 1 ; call buffer
041F34             0045*    @end:
041F34             0046*    ; end vdu_call_buffer
041F34             0047*    
041F34             0048*    ; Command 2: Clear a buffer
041F34             0049*    ; VDU 23, 0 &A0, bufferId; 2
041F34             0050*    ; inputs: hl = bufferId
041F34             0051*    vdu_clear_buffer:
041F34 22 4C 1F 04 0052*        ld (@bufferId),hl
041F38 3E 02       0053*        ld a,2 ; clear buffer
041F3A 32 4E 1F 04 0054*        ld (@bufferId+2),a
041F3E 21 49 1F 04 0055*        ld hl,@cmd
041F42 01 06 00 00 0056*        ld bc,@end-@cmd
041F46 5B DF       0057*        rst.lil $18
041F48 C9          0058*        ret
041F49 17 00 A0    0059*    @cmd:     db 23,0,0xA0
041F4C 00 00       0060*    @bufferId: dw 0x0000
041F4E 02          0061*               db 2 ; clear buffer
041F4F             0062*    @end:
041F4F             0063*    ; end vdu_clear_buffer
041F4F             0064*    
041F4F             0065*    ; Clear all buffers
041F4F             0066*    ; inputs: none
041F4F             0067*    vdu_clear_all_buffers:
041F4F             0068*    ; clear all buffers
041F4F 21 5A 1F 04 0069*        ld hl,@beg
041F53 01 06 00 00 0070*        ld bc,@end-@beg
041F57 5B DF       0071*        rst.lil $18
041F59 C9          0072*        ret
041F5A 17 00 A0    0073*    @beg: db 23,0,$A0
041F5D FF FF       0074*          dw -1 ; bufferId -1 (65535) means clear all buffers
041F5F 02          0075*          db 2  ; command 2: clear a buffer
041F60             0076*    @end:
041F60             0077*    ; end vdu_clear_all_buffers
041F60             0078*    
041F60             0079*    ; Command 3: Create a writeable buffer
041F60             0080*    ; VDU 23, 0 &A0, bufferId; 3, length;
041F60             0081*    ; inputs: hl = bufferId, bc = length
041F60             0082*    vdu_create_writeable_buffer:
041F60 22 7D 1F 04 0083*        ld (@bufferId),hl
041F64 ED 43 80 1F 0084*        ld (@length),bc
       04          
041F69 3E 03       0085*        ld a,3 ; create writeable buffer
041F6B 32 7F 1F 04 0086*        ld (@bufferId+2),a
041F6F 21 7A 1F 04 0087*        ld hl,@cmd
041F73 01 08 00 00 0088*        ld bc,@end-@cmd
041F77 5B DF       0089*        rst.lil $18
041F79 C9          0090*        ret
041F7A 17 00 A0    0091*    @cmd:     db 23,0,0xA0
041F7D 00 00       0092*    @bufferId: dw 0x0000
041F7F 03          0093*               db 3 ; create writeable buffer
041F80 00 00       0094*    @length: dw 0x0000
041F82 00          0095*    @end:     db 0x00 ; padding
041F83             0096*    ; end vdu_create_writeable_buffer
041F83             0097*    
041F83             0098*    ; Command 4: Set output stream to a buffer
041F83             0099*    ; VDU 23, 0 &A0, bufferId; 4
041F83             0100*    ; inputs: hl = bufferId
041F83             0101*    vdu_set_output_stream_buffer:
041F83 22 9B 1F 04 0102*        ld (@bufferId),hl
041F87 3E 04       0103*        ld a,4 ; set output stream to buffer
041F89 32 9D 1F 04 0104*        ld (@bufferId+2),a
041F8D 21 98 1F 04 0105*        ld hl,@cmd
041F91 01 06 00 00 0106*        ld bc,@end-@cmd
041F95 5B DF       0107*        rst.lil $18
041F97 C9          0108*        ret
041F98 17 00 A0    0109*    @cmd:     db 23,0,0xA0
041F9B 00 00       0110*    @bufferId: dw 0x0000
041F9D 04          0111*               db 4 ; set output stream to buffer
041F9E 00          0112*    @end:     db 0x00 ; padding
041F9F             0113*    ; end vdu_set_output_stream_buffer
041F9F             0114*    
041F9F             0115*    ; Command 5: Adjust buffer contents
041F9F             0116*    ; VDU 23, 0, &A0, bufferId; 5, operation, offset; [count;] <operand>, [arguments]
041F9F             0117*    vdu_adjust_buffer:
041F9F C9          0118*        ret ; TODO: implement
041FA0             0119*    ; end vdu_adjust_buffer
041FA0             0120*    
041FA0             0121*    ; Command 6: Conditionally call a buffer
041FA0             0122*    ; VDU 23, 0, &A0, bufferId; 6, operation, checkBufferId; checkOffset; [arguments]
041FA0             0123*    vdu_call_buffer_conditional:
041FA0 C9          0124*        ret ; TODO: implement
041FA1             0125*    ; end vdu_call_buffer_conditional
041FA1             0126*    
041FA1             0127*    ; Command 7: Jump to a buffer
041FA1             0128*    ; VDU 23, 0, &A0, bufferId; 7
041FA1             0129*    ; inputs: hl = bufferId
041FA1             0130*    vdu_jump_to_buffer:
041FA1 22 B9 1F 04 0131*        ld (@bufferId),hl
041FA5 3E 07       0132*        ld a,7 ; jump to buffer
041FA7 32 BB 1F 04 0133*        ld (@bufferId+2),a
041FAB 21 B6 1F 04 0134*        ld hl,@cmd
041FAF 01 06 00 00 0135*        ld bc,@end-@cmd
041FB3 5B DF       0136*        rst.lil $18
041FB5 C9          0137*        ret
041FB6 17 00 A0    0138*    @cmd:     db 23,0,0xA0
041FB9 00 00       0139*    @bufferId: dw 0x0000
041FBB 07          0140*               db 7 ; jump to buffer
041FBC 00          0141*    @end:     db 0x00 ; padding
041FBD             0142*    ; end vdu_jump_to_buffer
041FBD             0143*    
041FBD             0144*    ; Command 8: Conditional Jump to a buffer
041FBD             0145*    ; VDU 23, 0, &A0, bufferId; 8, operation, checkBufferId; checkOffset; [arguments]
041FBD             0146*    vdu_jump_to_buffer_conditional:
041FBD C9          0147*        ret ; TODO: implement
041FBE             0148*    ; end vdu_jump_to_buffer_conditional
041FBE             0149*    
041FBE             0150*    ; Command 9: Jump to an offset in a buffer
041FBE             0151*    ; VDU 23, 0, &A0, bufferId; 9, offset; offsetHighByte, [blockNumber;]
041FBE             0152*    vdu_jump_to_buffer_offset:
041FBE C9          0153*        ret ; TODO: implement
041FBF             0154*    ; end vdu_jump_to_buffer_offset
041FBF             0155*    
041FBF             0156*    ; Command 10: Conditional jump to an offset in a buffer
041FBF             0157*    ; VDU 23, 0, &A0, bufferId; 10, offset; offsetHighByte, [blockNumber;] [arguments]
041FBF             0158*    vdu_jump_to_buffer_offset_conditional:
041FBF C9          0159*        ret ; TODO: implement
041FC0             0160*    ; end vdu_jump_to_buffer_offset_conditional
041FC0             0161*    
041FC0             0162*    ; Command 11: Call buffer with an offset
041FC0             0163*    ; VDU 23, 0, &A0, bufferId; 11, offset; offsetHighByte, [blockNumber;]
041FC0             0164*    vdu_call_buffer_offset:
041FC0 C9          0165*        ret ; TODO: implement
041FC1             0166*    ; end vdu_call_buffer_offset
041FC1             0167*    
041FC1             0041         include "vdu_fonts.inc"
041FC1             0001*    ; select font
041FC1             0002*    ; inputs: hl = bufferId, a = font flags
041FC1             0003*    ; Flags:
041FC1             0004*    ; Bit	Description
041FC1             0005*    ; 0	Adjust cursor position to ensure text baseline is aligned
041FC1             0006*    ;   0: Do not adjust cursor position (best for changing font on a new line)
041FC1             0007*    ;   1: Adjust cursor position (best for changing font in the middle of a line)
041FC1             0008*    ; 1-7	Reserved for future use
041FC1             0009*    ; VDU 23, 0, &95, 0, bufferId; flags: Select font
041FC1             0010*    vdu_font_select:
041FC1 22 D8 1F 04 0011*        ld (@bufferId),hl
041FC5 32 DA 1F 04 0012*        ld (@flags),a
041FC9 21 D4 1F 04 0013*        ld hl,@cmd
041FCD 01 07 00 00 0014*        ld bc,@end-@cmd
041FD1 5B DF       0015*        rst.lil $18
041FD3 C9          0016*        ret
041FD4 17 00 95 00 0017*    @cmd: db 23, 0, 0x95, 0
041FD8 00 00       0018*    @bufferId: dw 0x0000
041FDA 00          0019*    @flags: db 0x00
041FDB             0020*    @end:
041FDB             0021*    
041FDB             0022*    ; create font from buffer
041FDB             0023*    ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
041FDB             0024*    ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
041FDB             0025*    vdu_font_create:
041FDB 22 00 20 04 0026*        ld (@bufferId),hl
041FDF ED 53 02 20 0027*        ld (@width),de ; also loads height
       04          
041FE4 32 05 20 04 0028*        ld (@flags),a
041FE8 7A          0029*        ld a,d ; height
041FE9 32 04 20 04 0030*        ld (@ascent),a ; ascent = height
041FED             0031*    ; consolidate buffer
041FED CD 4B 1D 04 0032*        call vdu_consolidate_buffer
041FF1             0033*    ; create font
041FF1 21 FC 1F 04 0034*        ld hl,@cmd
041FF5 01 0A 00 00 0035*        ld bc,@end-@cmd
041FF9 5B DF       0036*        rst.lil $18
041FFB C9          0037*        ret
041FFC 17 00 95 01 0038*    @cmd: db 23, 0, 0x95, 1
042000 00 00       0039*    @bufferId: dw 0x0000
042002 00          0040*    @width: db 0x00
042003 00          0041*    @height: db 0x00
042004 00          0042*    @ascent: db 0x00
042005 00          0043*    @flags: db 0x00
042006             0044*    @end:
042006             0045*    
042006             0046*    ; set or adjust font property
042006             0047*    ; inputs: hl = bufferId, a = field, de = value
042006             0048*    ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
042006             0049*    vdu_font_property:
042006 22 22 20 04 0050*        ld (@bufferId),hl
04200A 32 24 20 04 0051*        ld (@field),a
04200E ED 53 25 20 0052*        ld (@value),de
       04          
042013 21 1E 20 04 0053*        ld hl,@cmd
042017 01 09 00 00 0054*        ld bc,@end-@cmd
04201B 5B DF       0055*        rst.lil $18
04201D C9          0056*        ret
04201E 17 00 95 02 0057*    @cmd: db 23, 0, 0x95, 2
042022 00 00       0058*    @bufferId: dw 0x0000
042024 00          0059*    @field: db 0x00
042025 00 00       0060*    @value: dw 0x0000
042027 00          0061*    @end: db 0x00 ; padding
042028             0062*    
042028             0063*    ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
042028             0064*    
042028             0065*    ; Clear/Delete font
042028             0066*    ; inputs: hl = bufferId
042028             0067*    ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
042028             0068*    vdu_font_clear:
042028 22 3B 20 04 0069*        ld (@bufferId),hl
04202C 21 37 20 04 0070*        ld hl,@cmd
042030 01 06 00 00 0071*        ld bc,@end-@cmd
042034 5B DF       0072*        rst.lil $18
042036 C9          0073*        ret
042037 17 00 95 04 0074*    @cmd: db 23, 0, 0x95, 4
04203B 00 00       0075*    @bufferId: dw 0x0000
04203D 00          0076*    @end: db 0x00 ; padding
04203E             0077*    
04203E             0078*    ; Copy system font to buffer
04203E             0079*    ; inputs: hl = bufferId
04203E             0080*    ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
04203E             0081*    vdu_font_copy_system:
04203E 22 51 20 04 0082*        ld (@bufferId),hl
042042 21 4D 20 04 0083*        ld hl,@cmd
042046 01 06 00 00 0084*        ld bc,@end-@cmd
04204A 5B DF       0085*        rst.lil $18
04204C C9          0086*        ret
04204D 17 00 95 05 0087*    @cmd: db 23, 0, 0x95, 5
042051 00 00       0088*    @bufferId: dw 0x0000
042053 00          0089*    @end: db 0x00 ; padding
042054             0042         include "vdu_plot.inc"
042054             0001*    ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
042054             0002*    ; PLOT code 	(Decimal) 	Effect
042054             0003*    ; &00-&07 	0-7 	Solid line, includes both ends
042054             0004*    plot_sl_both: equ 0x00
042054             0005*    
042054             0006*    ; &08-&0F 	8-15 	Solid line, final point omitted
042054             0007*    plot_sl_first: equ 0x08
042054             0008*    
042054             0009*    ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
042054             0010*    ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
042054             0011*    
042054             0012*    ; &20-&27 	32-39 	Solid line, first point omitted
042054             0013*    plot_sl_last: equ 0x20
042054             0014*    
042054             0015*    ; &28-&2F 	40-47 	Solid line, both points omitted
042054             0016*    plot_sl_none: equ 0x28
042054             0017*    
042054             0018*    ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
042054             0019*    ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
042054             0020*    
042054             0021*    ; &40-&47 	64-71 	Point plot
042054             0022*    plot_pt: equ 0x40
042054             0023*    
042054             0024*    ; &48-&4F 	72-79 	Line fill left and right to non-background §§
042054             0025*    plot_lf_lr_non_bg: equ 0x48
042054             0026*    
042054             0027*    ; &50-&57 	80-87 	Triangle fill
042054             0028*    plot_tf: equ 0x50
042054             0029*    
042054             0030*    ; &58-&5F 	88-95 	Line fill right to background §§
042054             0031*    plot_lf_r_bg: equ 0x58
042054             0032*    
042054             0033*    ; &60-&67 	96-103 	Rectangle fill
042054             0034*    plot_rf: equ 0x60
042054             0035*    
042054             0036*    ; &68-&6F 	104-111 	Line fill left and right to foreground §§
042054             0037*    plot_lf_lr_fg: equ 0x60
042054             0038*    
042054             0039*    ; &70-&77 	112-119 	Parallelogram fill
042054             0040*    plot_pf: equ 0x70
042054             0041*    
042054             0042*    ; &78-&7F 	120-127 	Line fill right to non-foreground §§
042054             0043*    plot_lf_r_non_fg: equ 0x78
042054             0044*    
042054             0045*    ; &80-&87 	128-135 	Not supported (Flood until non-background)
042054             0046*    ; &88-&8F 	136-143 	Not supported (Flood until foreground)
042054             0047*    
042054             0048*    ; &90-&97 	144-151 	Circle outline
042054             0049*    plot_co: equ 0x90
042054             0050*    
042054             0051*    ; &98-&9F 	152-159 	Circle fill
042054             0052*    plot_cf: equ 0x98
042054             0053*    
042054             0054*    ; &A0-&A7 	160-167 	Not supported (Circular arc)
042054             0055*    ; &A8-&AF 	168-175 	Not supported (Circular segment)
042054             0056*    ; &B0-&B7 	176-183 	Not supported (Circular sector)
042054             0057*    
042054             0058*    ; &B8-&BF 	184-191 	Rectangle copy/move
042054             0059*    plot_rcm: equ 0xB8
042054             0060*    
042054             0061*    ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
042054             0062*    ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
042054             0063*    ; &D0-&D7 	208-215 	Not defined
042054             0064*    ; &D8-&DF 	216-223 	Not defined
042054             0065*    ; &E0-&E7 	224-231 	Not defined
042054             0066*    
042054             0067*    ; &E8-&EF 	232-239 	Bitmap plot §
042054             0068*    plot_bmp: equ 0xE8
042054             0069*    
042054             0070*    ; &F0-&F7 	240-247 	Not defined
042054             0071*    ; &F8-&FF 	248-255 	Not defined
042054             0072*    
042054             0073*    ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
042054             0074*    ; Agon Console8 VDP 2.2.0
042054             0075*    
042054             0076*    ; Within each group of eight plot codes, the effects are as follows:
042054             0077*    ; Plot code 	Effect
042054             0078*    ; 0 	Move relative
042054             0079*    mv_rel: equ 0
042054             0080*    
042054             0081*    ; 1 	Plot relative in current foreground colour
042054             0082*    dr_rel_fg: equ 1
042054             0083*    
042054             0084*    ; 2 	Not supported (Plot relative in logical inverse colour)
042054             0085*    ; 3 	Plot relative in current background colour
042054             0086*    dr_rel_bg: equ 3
042054             0087*    
042054             0088*    ; 4 	Move absolute
042054             0089*    mv_abs: equ 4
042054             0090*    
042054             0091*    ; 5 	Plot absolute in current foreground colour
042054             0092*    dr_abs_fg: equ 5
042054             0093*    
042054             0094*    ; 6 	Not supported (Plot absolute in logical inverse colour)
042054             0095*    ; 7 	Plot absolute in current background colour
042054             0096*    dr_abs_bg: equ 7
042054             0097*    
042054             0098*    ; Codes 0-3 use the position data provided as part of the command
042054             0099*    ; as a relative position, adding the position given to the current
042054             0100*    ; graphical cursor position. Codes 4-7 use the position data provided
042054             0101*    ; as part of the command as an absolute position, setting the current
042054             0102*    ; graphical cursor position to the position given.
042054             0103*    
042054             0104*    ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
042054             0105*    ; current pixel colour. These operations cannot currently be supported
042054             0106*    ; by the graphics system the Agon VDP uses, so these codes are not
042054             0107*    ; supported. Support for these codes may be added in a future version
042054             0108*    ; of the VDP firmware.
042054             0109*    
042054             0110*    ; 16 colour palette constants
042054             0111*    c_black: equ 0
042054             0112*    c_red_dk: equ 1
042054             0113*    c_green_dk: equ 2
042054             0114*    c_yellow_dk: equ 3
042054             0115*    c_blue_dk: equ 4
042054             0116*    c_magenta_dk: equ 5
042054             0117*    c_cyan_dk: equ 6
042054             0118*    c_grey: equ 7
042054             0119*    c_grey_dk: equ 8
042054             0120*    c_red: equ 9
042054             0121*    c_green: equ 10
042054             0122*    c_yellow: equ 11
042054             0123*    c_blue: equ 12
042054             0124*    c_magenta: equ 13
042054             0125*    c_cyan: equ 14
042054             0126*    c_white: equ 15
042054             0127*    
042054             0128*    ; VDU 25, mode, x; y;: PLOT command
042054             0129*    ; inputs: a=mode, bc=x0, de=y0
042054             0130*    vdu_plot:
042054 32 6E 20 04 0131*        ld (@mode),a
042058 ED 43 6F 20 0132*        ld (@x0),bc
       04          
04205D ED 53 71 20 0133*        ld (@y0),de
       04          
042062 21 6D 20 04 0134*    	ld hl,@cmd
042066 01 06 00 00 0135*    	ld bc,@end-@cmd
04206A 5B DF       0136*    	rst.lil $18
04206C C9          0137*    	ret
04206D 19          0138*    @cmd:   db 25
04206E 00          0139*    @mode:  db 0
04206F 00 00       0140*    @x0: 	dw 0
042071 00 00       0141*    @y0: 	dw 0
042073 00          0142*    @end:   db 0 ; extra byte to soak up deu
042074             0143*    
042074             0144*    ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
042074             0145*    ; &E8-&EF 	232-239 	Bitmap plot §
042074             0146*    ; VDU 25, mode, x; y;: PLOT command
042074             0147*    ; inputs: bc=x0, de=y0
042074             0148*    ; prerequisites: vdu_buff_select
042074             0149*    vdu_plot_bmp:
042074 ED 43 8B 20 0150*        ld (@x0),bc
       04          
042079 ED 53 8D 20 0151*        ld (@y0),de
       04          
04207E 21 89 20 04 0152*    	ld hl,@cmd
042082 01 06 00 00 0153*    	ld bc,@end-@cmd
042086 5B DF       0154*    	rst.lil $18
042088 C9          0155*    	ret
042089 19          0156*    @cmd:   db 25
04208A ED          0157*    @mode:  db plot_bmp+dr_abs_fg ; 0xED
04208B 00 00       0158*    @x0: 	dw 0x0000
04208D 00 00       0159*    @y0: 	dw 0x0000
04208F 00          0160*    @end:   db 0x00 ; padding
042090             0161*    
042090             0162*    ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
042090             0163*    ; &E8-&EF 	232-239 	Bitmap plot §
042090             0164*    ; VDU 25, mode, x; y;: PLOT command
042090             0165*    ; inputs: bc=x0, de=y0
042090             0166*    ; USING 16.8 FIXED POINT COORDINATES
042090             0167*    ; inputs: ub.c is x coordinate, ud.e is y coordinate
042090             0168*    ;   the fractional portiion of the inputs are truncated
042090             0169*    ;   leaving only the 16-bit integer portion
042090             0170*    ; prerequisites: vdu_buff_select
042090             0171*    vdu_plot_bmp168:
042090             0172*    ; populate in the reverse of normal to keep the
042090             0173*    ; inputs from stomping on each other
042090 ED 53 AE 20 0174*        ld (@y0-1),de
       04          
042095 ED 43 AC 20 0175*        ld (@x0-1),bc
       04          
04209A 3E ED       0176*        ld a,plot_bmp+dr_abs_fg ; 0xED
04209C 32 AC 20 04 0177*        ld (@mode),a ; restore the mode byte that got stomped on by bcu
0420A0 21 AB 20 04 0178*    	ld hl,@cmd
0420A4 01 06 00 00 0179*    	ld bc,@end-@cmd
0420A8 5B DF       0180*    	rst.lil $18
0420AA C9          0181*    	ret
0420AB 19          0182*    @cmd:   db 25
0420AC ED          0183*    @mode:  db plot_bmp+dr_abs_fg ; 0xED
0420AD 00 00       0184*    @x0: 	dw 0x0000
0420AF 00 00       0185*    @y0: 	dw 0x0000
0420B1             0186*    @end:  ; no padding required b/c we shifted de right
0420B1             0187*    
0420B1             0188*    ; draw a filled rectangle
0420B1             0189*    vdu_plot_rf:
0420B1 ED 43 D8 20 0190*        ld (@x0),bc
       04          
0420B6 ED 53 DA 20 0191*        ld (@y0),de
       04          
0420BB DD 22 DE 20 0192*        ld (@x1),ix
       04          
0420C0 FD 22 E0 20 0193*        ld (@y1),iy
       04          
0420C5 3E 19       0194*        ld a,25 ; we have to reload the 2nd plot command
0420C7 32 DC 20 04 0195*        ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0420CB 21 D6 20 04 0196*    	ld hl,@cmd0
0420CF 01 0C 00 00 0197*    	ld bc,@end-@cmd0
0420D3 5B DF       0198*    	rst.lil $18
0420D5 C9          0199*        ret
0420D6 19          0200*    @cmd0:  db 25 ; plot
0420D7 04          0201*    @arg0:  db plot_sl_both+mv_abs
0420D8 00 00       0202*    @x0:    dw 0x0000
0420DA 00 00       0203*    @y0:    dw 0x0000
0420DC 19          0204*    @cmd1:  db 25 ; plot
0420DD 65          0205*    @arg1:  db plot_rf+dr_abs_fg
0420DE 00 00       0206*    @x1:    dw 0x0000
0420E0 00 00       0207*    @y1:    dw 0x0000
0420E2 00          0208*    @end:   db 0x00 ; padding
0420E3             0209*    
0420E3             0210*    ; draw a filled circle
0420E3             0211*    vdu_plot_cf:
0420E3 ED 43 0A 21 0212*        ld (@x0),bc
       04          
0420E8 ED 53 0C 21 0213*        ld (@y0),de
       04          
0420ED DD 22 10 21 0214*        ld (@x1),ix
       04          
0420F2 FD 22 12 21 0215*        ld (@y1),iy
       04          
0420F7 3E 19       0216*        ld a,25 ; we have to reload the 2nd plot command
0420F9 32 0E 21 04 0217*        ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0420FD 21 08 21 04 0218*    	ld hl,@cmd0
042101 01 0C 00 00 0219*    	ld bc,@end-@cmd0
042105 5B DF       0220*    	rst.lil $18
042107 C9          0221*        ret
042108 19          0222*    @cmd0:  db 25 ; plot
042109 04          0223*    @arg0:  db plot_sl_both+mv_abs
04210A 00 00       0224*    @x0:    dw 0x0000
04210C 00 00       0225*    @y0:    dw 0x0000
04210E 19          0226*    @cmd1:  db 25 ; plot
04210F 9D          0227*    @arg1:  db plot_cf+dr_abs_fg
042110 00 00       0228*    @x1:    dw 0x0000
042112 00 00       0229*    @y1:    dw 0x0000
042114 00          0230*    @end:   db 0x00 ; padding
042115             0043         include "vdu_sound.inc"
042115             0001*    ; enable enough additional channels so that total enabled = max_channels
042115             0002*    ; inputs: max_channels set
042115             0003*    ; returns: nothing
042115             0004*    ; destroys: af, bc, hl
042115             0005*    vdu_enable_channels:
042115 3E 01       0006*        ld a,max_channels
042117 D6 03       0007*        sub 3 ; subtract number of default channels already enabled
042119 F2 20 21 04 0008*        jp p,@loop
04211D C9          0009*        ret
04211E 3E 03       0010*        ld a,3 ; first non-default channel
042120             0011*    @loop:
042120 32 3B 21 04 0012*        ld (@channel),a
042124 21 38 21 04 0013*        ld hl,@beg
042128 01 05 00 00 0014*        ld bc,@end-@beg
04212C F5          0015*        push af
04212D 5B DF       0016*        rst.lil $18
04212F F1          0017*        pop af
042130 3C          0018*        inc a
042131 FE 01       0019*        cp max_channels
042133 C2 20 21 04 0020*        jp nz,@loop
042137 C9          0021*        ret
042138             0022*    @beg:
042138 17 00 85    0023*                db 23, 0, $85
04213B 00          0024*    @channel:   db 0
04213C 08          0025*                db 8 ; command 8: enable channel
04213D             0026*    @end:
04213D             0027*    
04213D             0028*    ; disable all but the three default sound channels
04213D             0029*    ; inputs: max_channels set
04213D             0030*    ; outputs: none
04213D             0031*    ; destroys: ah,hl,bc
04213D             0032*    vdu_disable_channels:
04213D 3E 01       0033*        ld a,max_channels
04213F D6 03       0034*        sub 3 ; subtract number of default channels already enabled
042141 F2 48 21 04 0035*        jp p,@loop
042145 C9          0036*        ret
042146 3E 03       0037*        ld a,3 ; first non-default channel
042148             0038*    @loop:
042148 32 63 21 04 0039*        ld (@channel),a
04214C 21 60 21 04 0040*        ld hl,@beg
042150 01 05 00 00 0041*        ld bc,@end-@beg
042154 F5          0042*        push af
042155 5B DF       0043*        rst.lil $18
042157 F1          0044*        pop af
042158 3C          0045*        inc a
042159 FE 01       0046*        cp max_channels
04215B C2 48 21 04 0047*        jp nz,@loop
04215F C9          0048*        ret
042160             0049*    @beg:
042160 17 00 85    0050*        db 23, 0, $85
042163 00          0051*    @channel: db 0
042164 09          0052*        db 9 ; command 9: disable channel
042165             0053*    @end:
042165             0054*    
042165             0055*    
042165             0056*    ; ############################################################
042165             0057*    ; VDU SOUND API
042165             0058*    ; ############################################################
042165             0059*    ; Command 0: Play note
042165             0060*    ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
042165             0061*        MACRO PLAY_NOTE channel, volume, frequency, duration
042165             0062*        ld hl, @PLAY_NOTE_CMD        ; Start of command block
042165             0063*        ld bc, @PLAY_NOTE_END - @PLAY_NOTE_CMD  ; Command block size
042165             0064*        rst.lil $18
042165             0065*        jr @PLAY_NOTE_END
042165             0066*    @PLAY_NOTE_CMD:  db 23, 0, 0x85               ; Command header
042165             0067*                     db channel                  ; Channel, 0 (commented out)
042165             0068*                     db 0                        ; Play note command
042165             0069*                     db volume                   ; Volume
042165             0070*                     dw frequency                ; Frequency
042165             0071*                     dw duration                 ; Duration
042165             0072*    @PLAY_NOTE_END:
042165             0073*        ENDMACRO
042165             0074*    
042165             0075*        MACRO MUTE_CHANNEL channel
042165             0076*        ld hl, @MUTE_CHANNEL_CMD     ; Start of command block
042165             0077*        ld bc, @MUTE_CHANNEL_END - @MUTE_CHANNEL_CMD  ; Command block size
042165             0078*        rst.lil $18
042165             0079*        jr @MUTE_CHANNEL_END
042165             0080*    @MUTE_CHANNEL_CMD: db 23, 0, 0x85             ; Command header
042165             0081*                       db channel                ; Channel, 0 (commented out)
042165             0082*                       db 2                      ; Set volume command
042165             0083*                       db 0                      ; Volume (mute)
042165             0084*    @MUTE_CHANNEL_END:
042165             0085*        ENDMACRO
042165             0086*    
042165             0087*    ; inputs: c = channel, b = volume, hl = frequency; de = duration;
042165             0088*    vdu_play_note:
042165 79          0089*        ld a,c
042166 32 86 21 04 0090*        ld (@channel),a
04216A 78          0091*        ld a,b
04216B 32 88 21 04 0092*        ld (@volume),a
04216F 22 89 21 04 0093*        ld (@frequency),hl
042173 ED 53 8B 21 0094*        ld (@duration),de
       04          
042178 21 83 21 04 0095*        ld hl,@cmd
04217C 01 0A 00 00 0096*        ld bc,@end-@cmd
042180 5B DF       0097*        rst.lil $18
042182 C9          0098*        ret
042183 17 00 85    0099*    @cmd:       db 23, 0, 0x85
042186 00          0100*    @channel:   db 0x00
042187 00          0101*                db 0x00 ; play note command
042188 00          0102*    @volume:    db 0x00
042189 00 00       0103*    @frequency: dw 0x0000
04218B 00 00       0104*    @duration:  dw 0x0000
04218D 00          0105*    @end:       db 0x00 ; padding
04218E             0106*    
04218E             0107*    ; Command 1: Status
04218E             0108*    ; VDU 23, 0, &85, channel, 1
04218E             0109*    ; inputs: a = channel
04218E             0110*    ; Returns a bit mask indicating the status of the specified channel, or 255 if the channel is not valid, or has been disabled. The bit mask is as follows:
04218E             0111*    ; Bit 	Name 	Meaning
04218E             0112*    ; 0 	Active 	When set this indicates the channel is in use (has an active waveform)
04218E             0113*    ; 1 	Playing 	Indicates the channel is actively playing a note, and thus will reject calls to play a new note
04218E             0114*    ; 2 	Indefinite 	Set if the channel is playing an indefinite duration note
04218E             0115*    ; 3 	Has Volume Envelope 	Set if the channel has a volume envelope
04218E             0116*    ; 4 	Has Frequency Envelope 	Set if the channel has a frequency envelope
04218E             0117*    
04218E             0118*    ; Bits 5-7 are reserved for future use and, for enabled channels, will currently always be zero.
04218E             0119*    vdu_channel_status:
04218E 32 A0 21 04 0120*        ld (@channel),a
042192 21 9D 21 04 0121*        ld hl,@cmd
042196 01 05 00 00 0122*        ld bc,@end-@cmd
04219A 5B DF       0123*        rst.lil $18
04219C C9          0124*        ret
04219D 17 00 85    0125*    @cmd:       db 23, 0, 0x85
0421A0 00          0126*    @channel:   db 0x00
0421A1 01          0127*                db 0x01 ; get channel status command
0421A2             0128*    @end:
0421A2             0129*    
0421A2             0130*    ; VDU 23, 0, &85, channel, 2, volume
0421A2             0131*    ; inputs: c = channel, b = volume
0421A2             0132*    ; Sets the volume of the specified channel. The volume is a value from 0 to 127, where 0 is silent and 127 is full volume. Values over 127 will be treated as 127 (with one exception described later).
0421A2             0133*    
0421A2             0134*    ; Specifying a channel of -1 (or 255) will set the global sound system volume level. (Requires Console8 VDP 2.5.0 or later.)
0421A2             0135*    
0421A2             0136*    ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the volume of a channel that is already playing a note.
0421A2             0137*    vdu_channel_volume:
0421A2 79          0138*        ld a,c
0421A3 32 BA 21 04 0139*        ld (@channel),a
0421A7 78          0140*        ld a,b
0421A8 32 BC 21 04 0141*        ld (@volume),a
0421AC 21 B7 21 04 0142*        ld hl,@cmd
0421B0 01 06 00 00 0143*        ld bc,@end-@cmd
0421B4 5B DF       0144*        rst.lil $18
0421B6 C9          0145*        ret
0421B7 17 00 85    0146*    @cmd:       db 23, 0, 0x85
0421BA 00          0147*    @channel:   db 0x00
0421BB 02          0148*                db 0x02 ; set volume command
0421BC 00          0149*    @volume:    db 0x00
0421BD             0150*    @end:
0421BD             0151*    
0421BD             0152*    ; VDU 23, 0, &85, channel, 3, frequency;
0421BD             0153*    
0421BD             0154*    ; Sets the frequency of the specified channel. The frequency is a 16-bit value specifying in Hz the frequency of the note to be played.
0421BD             0155*    
0421BD             0156*    ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the frequency of a channel that is already playing a note.
0421BD             0157*    
0421BD             0158*    ; Returns 1 on success, 0 for failure.
0421BD             0159*    vdu_channel_frequency:
0421BD 79          0160*        ld a,c
0421BE 32 D5 21 04 0161*        ld (@channel),a
0421C2 ED 53 D7 21 0162*        ld (@frequency),de
       04          
0421C7 21 D2 21 04 0163*        ld hl,@cmd
0421CB 01 07 00 00 0164*        ld bc,@end-@cmd
0421CF 5B DF       0165*        rst.lil $18
0421D1 C9          0166*        ret
0421D2 17 00 85    0167*    @cmd:       db 23, 0, 0x85
0421D5 00          0168*    @channel:   db 0x00
0421D6 03          0169*                db 0x03 ; set frequency command
0421D7 00 00       0170*    @frequency: dw 0x0000
0421D9 00          0171*    @end:       db 0x00 ; padding
0421DA             0172*    
0421DA             0173*    
0421DA             0174*    ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
0421DA             0175*    ; inputs: c = channel, b = waveformOrSample, [hl = bufferId]
0421DA             0176*    ; Sets the waveform type for a channel to use. The waveformOrSample value is a single byte treated as a signed value.
0421DA             0177*    
0421DA             0178*    ; Using a negative value for the waveform indicates that a sample should be used instead. For more information see the documentation for the sample command.
0421DA             0179*    
0421DA             0180*    ; By default a channel is set to use waveform 0 (square wave).
0421DA             0181*    
0421DA             0182*    ; Valid waveform values are as follows:
0421DA             0183*    ; Value 	Waveform
0421DA             0184*    ; 0 	Square wave
0421DA             0185*    ; 1 	Triangle wave
0421DA             0186*    ; 2 	Sawtooth wave
0421DA             0187*    ; 3 	Sine wave
0421DA             0188*    ; 4 	Noise (simple white noise with no frequency support)
0421DA             0189*    ; 5 	VIC Noise (emulates a VIC6561; supports frequency)
0421DA             0190*    ; 8 	Sample (specifying a 16-bit buffer ID for sample data)
0421DA             0191*    
0421DA             0192*    vdu_channel_waveform:
0421DA 79          0193*        ld a,c
0421DB 32 00 22 04 0194*        ld (@channel),a
0421DF 78          0195*        ld a,b
0421E0 32 02 22 04 0196*        ld (@waveform),a
0421E4 FE 08       0197*        cp 8 ; check if the waveform is a sample
0421E6 28 06       0198*        jr z, @sample
0421E8 01 06 00 00 0199*        ld bc,@bufferId-@cmd
0421EC 18 08       0200*        jr @sendToVdu
0421EE             0201*    @sample:
0421EE 22 03 22 04 0202*        ld (@bufferId),hl
0421F2 01 08 00 00 0203*        ld bc,@end-@cmd
0421F6             0204*    @sendToVdu:
0421F6 21 FD 21 04 0205*        ld hl,@cmd
0421FA 5B DF       0206*        rst.lil $18
0421FC C9          0207*        ret
0421FD 17 00 85    0208*    @cmd:       db 23, 0, 0x85
042200 00          0209*    @channel:   db 0x00
042201 04          0210*                db 0x04 ; set waveform command
042202 00          0211*    @waveform:  db 0x00
042203 00 00       0212*    @bufferId:  dw 0x0000
042205 00          0213*    @end:       db 0x00 ; padding
042206             0214*    
042206             0215*    ; VDU 23, 0, &85, channel (ignored), 5, 2, bufferId; format, [sampleRate;]
042206             0216*    ; inputs: hl = bufferId; a = format, de = sample rate in Hz
042206             0217*    ; The format is a single byte giving the format of the sample data. The following formats are supported:
042206             0218*    ; Value	Description
042206             0219*    ; 0	8-bit signed
042206             0220*    ; 1	8-bit unsigned
042206             0221*    ; The format value can also have modifier bits set to modify the behaviour of the sample. The following modifier bits are supported:
042206             0222*    ; Value	Description
042206             0223*    ; 8	sample rate is sent in the next 16-bits
042206             0224*    ; 16	sample is tuneable
042206             0225*    ; The default sample rate for samples on the VDP is 16kHz (actually 16.384kHz to be precise).
042206             0226*    vdu_buffer_to_sound:
042206 22 26 22 04 0227*        ld (@bufferId),hl
04220A C6 08       0228*        add a,8 ; modify format byte to indicate sample rate argument is given
04220C 32 28 22 04 0229*        ld (@format),a
042210 ED 53 29 22 0230*        ld (@sampleRate),de
       04          
042215 21 20 22 04 0231*        ld hl,@cmd
042219 01 0B 00 00 0232*        ld bc,@end-@cmd
04221D 5B DF       0233*        rst.lil $18
04221F C9          0234*        ret
042220 17 00 85    0235*    @cmd:       db 23, 0, 0x85
042223 00          0236*    @channel:   db 0x00 ; ignored
042224 05          0237*                db 0x05 ; buffer to sound command
042225 02          0238*                db 0x02 ; command 2 create sample
042226 00 00       0239*    @bufferId:  dw 0x0000
042228 00          0240*    @format:    db 0x00
042229 00 00       0241*    @sampleRate: dw 0x0000
04222B 00          0242*    @end:       db 0x00 ; padding
04222C             0243*    
04222C             0244*    ; Command 13: Set sample rate
04222C             0245*    ; VDU 23, 0, &85, channel, 13, sampleRate;
04222C             0246*    ; inputs: c = channel, hl = sampleRate (Hz)
04222C             0247*    vdu_set_sample_rate:
04222C 79          0248*        ld a,c
04222D 32 43 22 04 0249*        ld (@channel),a
042231 22 45 22 04 0250*        ld (@sampleRate),hl
042235 21 40 22 04 0251*        ld hl,@cmd
042239 01 07 00 00 0252*        ld bc,@end-@cmd
04223D 5B DF       0253*        rst.lil $18
04223F C9          0254*        ret
042240 17 00 85    0255*    @cmd:       db 23, 0, 0x85
042243 00          0256*    @channel:   db 0x00
042244 0D          0257*                db 13 ; set sample rate command
042245 00 00       0258*    @sampleRate: dw 0x0000
042247 00          0259*    @end:       db 0x00 ; padding
042248             0260*    
042248             0261*    ; load a sound file to a buffer
042248             0262*    ; inputs: hl = bufferId ; de = sampleRate in Hz ; iy = pointer to filename
042248             0263*    vdu_load_sfx:
042248             0264*    ; back up input parameters
042248 E5          0265*        push hl ; bufferId
042249 D5          0266*        push de ; sample rate
04224A             0267*    ; load the sound
04224A CD 88 1D 04 0268*        call vdu_load_buffer_from_file
04224E             0269*    ; now make the buffer a sound sample
04224E D1          0270*        pop de ; sample rate
04224F E1          0271*        pop hl ; bufferId
042250 AF          0272*        xor a ; zero is the magic number for mono 8-bit signed PCM
042251 CD 06 22 04 0273*        call vdu_buffer_to_sound
042255 C9          0274*        ret
042256             0275*    
042256             0276*    
042256 00          0277*    last_channel: db 0
042257             0278*    max_channels: equ 1
042257             0279*    
042257             0280*    ; play a sound effect from an already loaded buffer
042257             0281*    ; inputs: hl = bufferId ; bc = duration in milliseconds
042257             0282*    vdu_play_sfx:
042257 22 8F 22 04 0283*        ld (@bufferId),hl
04225B ED 43 99 22 0284*        ld (@duration),bc
       04          
042260 3E 17       0285*        ld a,23
042262 32 91 22 04 0286*        ld (@bufferId+2),a
042266 3A 56 22 04 0287*        ld a,(last_channel)
04226A 3C          0288*        inc a
04226B             0289*        ; and 31 ; modulo 32
04226B FE 01       0290*        cp max_channels
04226D C2 72 22 04 0291*        jp nz,@load_channel
042271 AF          0292*        xor a
042272             0293*    @load_channel:
042272 32 56 22 04 0294*        ld (last_channel),a
042276 32 8C 22 04 0295*        ld (@channel0),a
04227A 32 94 22 04 0296*        ld (@channel1),a
04227E 21 89 22 04 0297*        ld hl, @sample
042282 01 12 00 00 0298*        ld bc, @sample_end - @sample
042286 5B DF       0299*        rst.lil $18
042288 C9          0300*        ret
042289             0301*    @sample:
042289             0302*    ; Command 4: Set waveform
042289             0303*    ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
042289 17 00 85    0304*        .db 23,0,$85                        ; do sound
04228C             0305*    @channel0:
04228C 00 04 08    0306*        .db 0,4,8 ; channel, command, waveform
04228F             0307*    @bufferId:
04228F 00 00       0308*        .dw 0x0000
042291             0309*    ; Command 0: Play note
042291             0310*    ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
042291 17 00 85    0311*        .db 23,0,$85                        ; do sound
042294             0312*    @channel1:
042294 00 00 7F    0313*        .db 0,0,127                ; channel, volume
042297 00 00       0314*        .dw 0
042299             0315*    @duration:                              ; freq (tuneable samples only)
042299 00 00       0316*        .dw 0x0000                        ; duration
04229B             0317*    @sample_end:
04229B 00          0318*        .db 0x00 ; padding
04229C             0319*    
04229C             0320*    ; inputs: c = channel, b = volume, de = sample rate; hl = bufferId;
04229C             0321*    vdu_play_sample:
04229C             0322*        ; populate input parameters
04229C 79          0323*        ld a,c
04229D 32 CF 22 04 0324*        ld (@channel0),a
0422A1 32 D7 22 04 0325*        ld (@channel1),a
0422A5 32 DE 22 04 0326*        ld (@channel2),a
0422A9 78          0327*        ld a,b
0422AA 32 E0 22 04 0328*        ld (@volume),a
0422AE ED 53 D9 22 0329*        ld (@sampleRate),de
       04          
0422B3 22 D2 22 04 0330*        ld (@bufferId),hl
0422B7 3E 17       0331*        ld a,23
0422B9 32 D4 22 04 0332*        ld (@cmd1),a
0422BD 32 DB 22 04 0333*        ld (@cmd2),a
0422C1             0334*        ; prep the vdu command string
0422C1 21 CC 22 04 0335*        ld hl, @cmd0
0422C5 01 19 00 00 0336*        ld bc, @end - @cmd0
0422C9 5B DF       0337*        rst.lil $18
0422CB C9          0338*        ret
0422CC             0339*    ; set waveform command
0422CC 17 00 85    0340*    @cmd0:       db 23, 0, 0x85
0422CF 00          0341*    @channel0:   db 0x00
0422D0 04          0342*                 db 0x04 ; set waveform command
0422D1 08          0343*    @waveform:   db 0x08 ; sample
0422D2 00 00       0344*    @bufferId:   dw 0x0000
0422D4             0345*    ; set sample rate command
0422D4 17 00 85    0346*    @cmd1:       db 23, 0, 0x85
0422D7 00          0347*    @channel1:   db 0x00
0422D8 0D          0348*                db 13 ; set sample rate command
0422D9 00 00       0349*    @sampleRate: dw 0x0000
0422DB             0350*    ; play note command
0422DB 17 00 85    0351*    @cmd2:       db 23, 0, 0x85
0422DE 00          0352*    @channel2:   db 0x00
0422DF 00          0353*                 db 0x00 ; play note command
0422E0 00          0354*    @volume:     db 0x00
0422E1 00 00       0355*    @frequency:  dw 0x00 ; no effect unless buffer has been set to tuneable sample
0422E3 00 00       0356*    @duration:   dw 0x0000 ; milliseconds: set to -1 to loop indefinitely, 0 to play full duration once
0422E5 00          0357*    @end:        db 0x00 ; padding
0422E6             0044     
0422E6             0045         include "fpp.inc"
0422E6             0001*    ;
0422E6             0002*    ; Title:	BBC Basic Interpreter - Z80 version
0422E6             0003*    ;		Z80 Floating Point Package
0422E6             0004*    ; Author:	(C) Copyright  R.T.Russell  1986
0422E6             0005*    ; Modified By:	Dean Belfield
0422E6             0006*    ; Created:	03/05/2022
0422E6             0007*    ; Last Updated:	07/06/2023
0422E6             0008*    ;
0422E6             0009*    ; Modinfo:
0422E6             0010*    ; 26/10/1986:	Version 0.0
0422E6             0011*    ; 14/12/1988:	Vesion 0.1 (Bug Fix)
0422E6             0012*    ; 12/05/2023:	Modified by Dean Belfield
0422E6             0013*    ; 07/06/2023:	Modified to run in ADL mode
0422E6             0014*    
0422E6             0015*    			; .ASSUME	ADL = 1
0422E6             0016*    
0422E6             0017*    			; SEGMENT CODE
0422E6             0018*    
0422E6             0019*    			; XDEF	FPP
0422E6             0020*    			; XDEF	DLOAD5
0422E6             0021*    			; XDEF	DLOAD5_SPL
0422E6             0022*    ;
0422E6             0023*    ;BINARY FLOATING POINT REPRESENTATION:
0422E6             0024*    ;   32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
0422E6             0025*    ;    8 BIT EXCESS-128 SIGNED EXPONENT
0422E6             0026*    ;   SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
0422E6             0027*    ;   MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
0422E6             0028*    ;
0422E6             0029*    ;BINARY INTEGER REPRESENTATION:
0422E6             0030*    ;   32 BIT 2'S-COMPLEMENT SIGNED INTEGER
0422E6             0031*    ;    "EXPONENT" BYTE = 0 (WHEN PRESENT)
0422E6             0032*    ;
0422E6             0033*    ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
0422E6             0034*    ;                            EXPONENT - C
0422E6             0035*    ;ALTERNATE REGISTER ALLOCATION: MANTISSA - DED'E'
0422E6             0036*    ;                               EXPONENT - B
0422E6             0037*    
0422E6             0038*    ;
0422E6             0039*    ;Error codes:
0422E6             0040*    ;
0422E6             0041*    
0422E6             0042*    BADOP:			EQU     1               ;Bad operation code
0422E6             0043*    DIVBY0:			EQU     18              ;Division by zero
0422E6             0044*    TOOBIG_FP:			EQU     20              ;Too big
0422E6             0045*    NGROOT:			EQU     21              ;Negative root
0422E6             0046*    LOGRNG:			EQU     22              ;Log range
0422E6             0047*    ACLOST:			EQU     23              ;Accuracy lost
0422E6             0048*    EXPRNG:			EQU     24              ;Exp range
0422E6             0049*    ;
0422E6             0050*    ;Call entry and despatch code:
0422E6             0051*    ;
0422E6 FD E5       0052*    FPP:			PUSH    IY              ;Save IY
0422E8 FD 21 00 00 0053*            		LD      IY,0
       00          
0422ED FD 39       0054*            		ADD     IY,SP           ;Save SP in IY
0422EF CD FF 22 04 0055*            		CALL    OP              ;Perform operation
0422F3 BF          0056*            		CP      A               ;Good return (Z, NC)
0422F4 FD E1       0057*    EXIT_FP_:			POP     IY              ;Restore IY
0422F6 C9          0058*            		RET                     ;Return to caller
0422F7             0059*    ;
0422F7             0060*    ;Error exit:
0422F7             0061*    ;
0422F7 3E 01       0062*    BAD_FP:			LD      A,BADOP         ;"Bad operation code"
0422F9 FD F9       0063*    ERROR_FP_:			LD      SP,IY           ;Restore SP from IY
0422FB B7          0064*            		OR      A               ;Set NZ
0422FC 37          0065*            		SCF                     ;Set C
0422FD 18 F5       0066*            		JR      EXIT_FP_
0422FF             0067*    ;
0422FF             0068*    ;Perform operation or function:
0422FF             0069*    ;
0422FF             0070*    ; OP:			CP      (RTABLE-DTABLE)/3
0422FF FE 2A       0071*    OP:				CP      RTABLE-DTABLE/3 ; ez80asm doesn't do nested expressions
042301             0072*    
042301 30 F4       0073*            		JR      NC,BAD_FP
042303             0074*            		; CP      (FTABLE-DTABLE)/3
042303 FE 10       0075*    				CP      FTABLE-DTABLE/3 ; ditto
042305 30 08       0076*            		JR      NC,DISPAT_FP
042307 08          0077*            		EX      AF,AF'
042308 78          0078*            		LD      A,B
042309 B1          0079*            		OR      C               ;Both integer?
04230A C4 12 2E 04 0080*            		CALL    NZ,FLOATA       ;No, so float both
04230E 08          0081*            		EX      AF,AF'
04230F E5          0082*    DISPAT_FP:			PUSH    HL
042310 21 22 23 04 0083*            		LD      HL,DTABLE
042314 C5          0084*            		PUSH    BC
042315 01 03 00 00 0085*    			LD	BC, 3		; C = 3
042319 47          0086*    			LD	B, A 		; B = op-code
04231A ED 4C       0087*    			MLT 	BC 		;BC = op-code * 3
04231C 09          0088*    			ADD	HL, BC 		;Add to table base
04231D ED 27       0089*    			LD	HL, (HL)	;Get the routine address (24-bit)
04231F             0090*    
04231F             0091*    ;        		ADD     A, A            ;A = op-code * 2
04231F             0092*    ;        		LD      C,A
04231F             0093*    ;        		LD      B,0             ;BC = op-code * 2
04231F             0094*    ;        		ADD     HL,BC
04231F             0095*    ;        		LD      A,(HL)          ;Get low byte
04231F             0096*    ;        		INC     HL
04231F             0097*    ;        		LD      H,(HL)          ;Get high byte
04231F             0098*    ;        		LD      L,A
04231F             0099*    
04231F C1          0100*            		POP     BC
042320 E3          0101*            		EX      (SP),HL
042321 C9          0102*            		RET                     ;Off to routine
042322             0103*    ;
042322             0104*    ;Despatch table:
042322             0105*    ;
042322 D4 23 04    0106*    DTABLE:			DW24  IAND            ;AND (INTEGER)
042325 42 24 04    0107*            		DW24  IBDIV           ;DIV
042328 E7 23 04    0108*            		DW24  IEOR            ;EOR
04232B 0D 24 04    0109*            		DW24  IMOD            ;MOD
04232E FA 23 04    0110*            		DW24  IOR             ;OR
042331 C8 26 04    0111*            		DW24  ILE             ;<=
042334 D7 26 04    0112*            		DW24  INE             ;<>
042337 BB 26 04    0113*            		DW24  IGE             ;>=
04233A A0 26 04    0114*            		DW24  ILT             ;<
04233D E4 26 04    0115*            		DW24  IEQ             ;=
042340 30 25 04    0116*            		DW24  IMUL            ;*
042343 6B 24 04    0117*            		DW24  IADD            ;+
042346 AD 26 04    0118*            		DW24  IGT             ;>
042349 52 24 04    0119*            		DW24  ISUB            ;-
04234C E7 25 04    0120*            		DW24  IPOW            ;^
04234F DD 24 04    0121*            		DW24  IDIV            ;/
042352             0122*    ;
042352             0123*    FTABLE:
042352 F6 26 04    0124*    				DW24  ABSV_FP            ;ABS
042355 DC 2A 04    0125*            		DW24  ACS_FP             ;ACS
042358 1A 2A 04    0126*            		DW24  ASN_FP             ;ASN
04235B 4A 2A 04    0127*            		DW24  ATN_FP             ;ATN
04235E 15 28 04    0128*            		DW24  COS_FP             ;COS
042361 24 27 04    0129*            		DW24  DEG_FP             ;DEG
042364 D1 28 04    0130*            		DW24  EXP_FP             ;EXP
042367 78 27 04    0131*            		DW24  INT_FP_            ;INT
04236A 6F 29 04    0132*            		DW24  LN_FP              ;LN
04236D 04 2A 04    0133*            		DW24  LOG_FP             ;LOG
042370 02 27 04    0134*            		DW24  NOTK_FP            ;NOT
042373 2E 27 04    0135*            		DW24  RAD_FP             ;RAD
042376 49 27 04    0136*            		DW24  SGN_FP             ;SGN
042379 22 28 04    0137*            		DW24  SIN_FP             ;SIN
04237C 91 27 04    0138*            		DW24  SQR_FP             ;SQR
04237F EF 27 04    0139*            		DW24  TAN_FP             ;TAN
042382             0140*    ;
042382 9F 2E 04    0141*    		        DW24  ZERO_FP            ;ZERO
042385 AA 28 04    0142*            		DW24  FONE_FP            ;FONE
042388 E9 26 04    0143*            		DW24  TRUE_FP            ;TRUE
04238B 16 27 04    0144*            		DW24  PI_FP              ;PI
04238E             0145*    ;
04238E 5D 27 04    0146*    		        DW24  VAL_FP             ;VAL
042391 E5 2A 04    0147*            		DW24  STR_FP             ;STR$
042394             0148*    ;
042394 46 2D 04    0149*            		DW24  SFIX_FP            ;FIX
042397 22 2E 04    0150*            		DW24  SFLOAT_FP          ;FLOAT
04239A             0151*    ;
04239A 70 2E 04    0152*    		        DW24  FTEST_FP           ;TEST
04239D 82 2E 04    0153*            		DW24  FCOMP_FP           ;COMPARE
0423A0             0154*    ;
0423A0 D0 23 04    0155*    RTABLE:			DW24  FAND            ;AND (FLOATING-POINT)
0423A3 3E 24 04    0156*            		DW24  FBDIV           ;DIV
0423A6 E3 23 04    0157*            		DW24  FEOR            ;EOR
0423A9 09 24 04    0158*            		DW24  FMOD            ;MOD
0423AC F6 23 04    0159*            		DW24  FFOR             ;OR
0423AF C2 26 04    0160*            		DW24  FLE             ;<=
0423B2 D1 26 04    0161*            		DW24  FNE             ;<>
0423B5 B5 26 04    0162*            		DW24  FGE             ;>=
0423B8 9A 26 04    0163*            		DW24  FLT             ;<
0423BB DE 26 04    0164*            		DW24  FEQ             ;=
0423BE 8A 25 04    0165*            		DW24  FMUL            ;*
0423C1 78 24 04    0166*            		DW24  FADD            ;+
0423C4 A7 26 04    0167*            		DW24  FGT             ;>
0423C7 5F 24 04    0168*            		DW24  FSUB            ;-
0423CA 67 26 04    0169*            		DW24  FPOW            ;^
0423CD E1 24 04    0170*            		DW24  FDIV            ;/
0423D0             0171*    ;
0423D0             0172*    ;       PAGE
0423D0             0173*    ;
0423D0             0174*    ;ARITHMETIC AND LOGICAL OPERATORS:
0423D0             0175*    ;All take two arguments, in HLH'L'C & DED'E'B.
0423D0             0176*    ;Output in HLH'L'C
0423D0             0177*    ;All registers except IX, IY destroyed.
0423D0             0178*    ; (N.B. FPOW destroys IX).
0423D0             0179*    ;
0423D0             0180*    ;FAND - Floating-point AND.
0423D0             0181*    ;IAND - Integer AND.
0423D0             0182*    ;
0423D0 CD 3A 2D 04 0183*    FAND:			CALL    FIX2
0423D4 7C          0184*    IAND:			LD      A,H
0423D5 A2          0185*            		AND     D
0423D6 67          0186*            		LD      H,A
0423D7 7D          0187*            		LD      A,L
0423D8 A3          0188*            		AND     E
0423D9 6F          0189*            		LD      L,A
0423DA D9          0190*            		EXX
0423DB 7C          0191*            		LD      A,H
0423DC A2          0192*            		AND     D
0423DD 67          0193*            		LD      H,A
0423DE 7D          0194*            		LD      A,L
0423DF A3          0195*            		AND     E
0423E0 6F          0196*            		LD      L,A
0423E1 D9          0197*            		EXX
0423E2 C9          0198*            		RET
0423E3             0199*    ;
0423E3             0200*    ;FEOR - Floating-point exclusive-OR.
0423E3             0201*    ;IEOR - Integer exclusive-OR.
0423E3             0202*    ;
0423E3 CD 3A 2D 04 0203*    FEOR:			CALL    FIX2
0423E7 7C          0204*    IEOR:			LD      A,H
0423E8 AA          0205*            		XOR     D
0423E9 67          0206*            		LD      H,A
0423EA 7D          0207*            		LD      A,L
0423EB AB          0208*            		XOR     E
0423EC 6F          0209*            		LD      L,A
0423ED D9          0210*            		EXX
0423EE 7C          0211*            		LD      A,H
0423EF AA          0212*            		XOR     D
0423F0 67          0213*            		LD      H,A
0423F1 7D          0214*            		LD      A,L
0423F2 AB          0215*            		XOR     E
0423F3 6F          0216*            		LD      L,A
0423F4 D9          0217*            		EXX
0423F5 C9          0218*            		RET
0423F6             0219*    ;
0423F6             0220*    ;FOR - Floating-point OR.
0423F6             0221*    ;IOR - Integer OR.
0423F6             0222*    ;
0423F6 CD 3A 2D 04 0223*    FFOR:			CALL    FIX2
0423FA 7C          0224*    IOR:			LD      A,H
0423FB B2          0225*            		OR      D
0423FC 67          0226*            		LD      H,A
0423FD 7D          0227*            		LD      A,L
0423FE B3          0228*            		OR      E
0423FF 6F          0229*            		LD      L,A
042400 D9          0230*            		EXX
042401 7C          0231*            		LD      A,H
042402 B2          0232*            		OR      D
042403 67          0233*            		LD      H,A
042404 7D          0234*            		LD      A,L
042405 B3          0235*            		OR      E
042406 6F          0236*            		LD      L,A
042407 D9          0237*            		EXX
042408 C9          0238*            		RET
042409             0239*    ;
042409             0240*    ;FMOD - Floating-point remainder.
042409             0241*    ;IMOD - Integer remainder.
042409             0242*    ;
042409 CD 3A 2D 04 0243*    FMOD:			CALL    FIX2
04240D 7C          0244*    IMOD:			LD      A,H
04240E AA          0245*            		XOR     D               ;DIV RESULT SIGN
04240F CB 7C       0246*            		BIT     7,H
042411 08          0247*            		EX      AF,AF'
042412 CB 7C       0248*            		BIT     7,H
042414 C4 56 2D 04 0249*            		CALL    NZ,NEGATE       ;MAKE ARGUMENTS +VE
042418 CD 53 2E 04 0250*            		CALL    SWAP_FP
04241C CB 7C       0251*            		BIT     7,H
04241E C4 56 2D 04 0252*            		CALL    NZ,NEGATE
042422 44          0253*            		LD      B,H
042423 4D          0254*            		LD      C,L
042424 21 00 00 00 0255*            		LD      HL,0
042428 D9          0256*            		EXX
042429 44          0257*            		LD      B,H
04242A 4D          0258*            		LD      C,L
04242B 21 00 00 00 0259*            		LD      HL,0
04242F 3E DF       0260*            		LD      A,-33
042431 CD E0 2F 04 0261*            		CALL    DIVA            ;DIVIDE
042435 D9          0262*            		EXX
042436 0E 00       0263*            		LD      C,0             ;INTEGER MARKER
042438 08          0264*            		EX      AF,AF'
042439 C8          0265*            		RET     Z
04243A C3 56 2D 04 0266*            		JP      NEGATE
04243E             0267*    ;
04243E             0268*    ;BDIV - Integer division.
04243E             0269*    ;
04243E CD 3A 2D 04 0270*    FBDIV:			CALL    FIX2
042442 CD 0D 24 04 0271*    IBDIV:			CALL    IMOD
042446 B7          0272*            		OR      A
042447 CD 53 2E 04 0273*            		CALL    SWAP_FP
04244B 0E 00       0274*            		LD      C,0
04244D F0          0275*            		RET     P
04244E C3 56 2D 04 0276*            		JP      NEGATE
042452             0277*    ;
042452             0278*    ;ISUB - Integer subtraction.
042452             0279*    ;FSUB - Floating point subtraction with rounding.
042452             0280*    ;
042452 CD EE 2E 04 0281*    ISUB:			CALL    SUB_
042456 E0          0282*            		RET     PO
042457 CD E6 2E 04 0283*            		CALL    ADD_
04245B CD 16 2E 04 0284*            		CALL    FLOAT2
04245F 7A          0285*    FSUB:			LD      A,D
042460 EE 80       0286*            		XOR     80H             ;CHANGE SIGN THEN ADD
042462 57          0287*            		LD      D,A
042463 18 13       0288*            		JR      FADD
042465             0289*    ;
042465             0290*    ;Reverse subtract.
042465             0291*    ;
042465 7C          0292*    RSUB:			LD      A,H
042466 EE 80       0293*            		XOR     80H
042468 67          0294*            		LD      H,A
042469 18 0D       0295*            		JR      FADD
04246B             0296*    ;
04246B             0297*    ;IADD - Integer addition.
04246B             0298*    ;FADD - Floating point addition with rounding.
04246B             0299*    ;
04246B CD E6 2E 04 0300*    IADD:			CALL    ADD_
04246F E0          0301*            		RET     PO
042470 CD EE 2E 04 0302*            		CALL    SUB_
042474 CD 16 2E 04 0303*            		CALL    FLOAT2
042478 05          0304*    FADD:			DEC     B
042479 04          0305*            		INC     B
04247A C8          0306*            		RET     Z               ;ARG 2 ZERO
04247B 0D          0307*            		DEC     C
04247C 0C          0308*            		INC     C
04247D CA 53 2E 04 0309*            		JP      Z,SWAP_FP          ;ARG 1 ZERO
042481 D9          0310*            		EXX
042482 01 00 00 00 0311*            		LD      BC,0            ;INITIALISE
042486 D9          0312*            		EXX
042487 7C          0313*            		LD      A,H
042488 AA          0314*            		XOR     D               ;XOR SIGNS
042489 F5          0315*            		PUSH    AF
04248A 78          0316*            		LD      A,B
04248B B9          0317*            		CP      C               ;COMPARE EXPONENTS
04248C DC 53 2E 04 0318*            		CALL    C,SWAP_FP          ;MAKE DED'E'B LARGEST
042490 78          0319*            		LD      A,B
042491 CB FC       0320*            		SET     7,H             ;IMPLIED 1
042493 C4 27 2D 04 0321*            		CALL    NZ,FIX          ;ALIGN
042497 F1          0322*            		POP     AF
042498 7A          0323*            		LD      A,D             ;SIGN OF LARGER
042499 CB FA       0324*            		SET     7,D             ;IMPLIED 1
04249B FA AB 24 04 0325*            		JP      M,FADD3         ;SIGNS DIFFERENT
04249F CD E6 2E 04 0326*            		CALL    ADD_             ;HLH'L'=HLH'L'+DED'E'
0424A3 DC 5B 2E 04 0327*            		CALL    C,DIV2          ;NORMALISE
0424A7 CB FC       0328*            		SET     7,H
0424A9 18 0D       0329*            		JR      FADD4
0424AB             0330*    ;
0424AB CD EE 2E 04 0331*    FADD3:			CALL    SUB_             ;HLH'L'=HLH'L'-DED'E'
0424AF DC 6E 2D 04 0332*            		CALL    C,NEG_           ;NEGATE HLH'L'B'C'
0424B3 CD ED 2D 04 0333*            		CALL    FLO48
0424B7 2F          0334*            		CPL                     ;CHANGE RESULT SIGN
0424B8 D9          0335*    FADD4:			EXX
0424B9 EB          0336*            		EX      DE,HL
0424BA 21 00 80 00 0337*            		LD      HL,8000H
0424BE B7          0338*            		OR      A               ;CLEAR CARRY
0424BF 52 ED 42    0339*            		SBC.S   HL,BC
0424C2 EB          0340*            		EX      DE,HL
0424C3 D9          0341*            		EXX
0424C4 CC 4D 2E 04 0342*            		CALL    Z,ODD           ;ROUND UNBIASSED
0424C8 DC 3B 2E 04 0343*            		CALL    C,ADD1_FP          ;ROUND UP
0424CC DC 68 2E 04 0344*            		CALL    C,INCC
0424D0 CB BC       0345*            		RES     7,H
0424D2 0D          0346*            		DEC     C
0424D3 0C          0347*            		INC     C
0424D4 CA 9F 2E 04 0348*            		JP      Z,ZERO_FP
0424D8 B7          0349*            		OR      A               ;RESULT SIGNQ
0424D9 F0          0350*            		RET     P               ;POSITIVE
0424DA CB FC       0351*            		SET     7,H             ;NEGATIVE
0424DC C9          0352*            		RET
0424DD             0353*    ;
0424DD             0354*    ;IDIV - Integer division.
0424DD             0355*    ;FDIV - Floating point division with rounding.
0424DD             0356*    ;
0424DD CD 16 2E 04 0357*    IDIV:			CALL    FLOAT2
0424E1 05          0358*    FDIV:			DEC     B               ;TEST FOR ZERO
0424E2 04          0359*            		INC     B
0424E3 3E 12       0360*            		LD      A,DIVBY0
0424E5 CA F9 22 04 0361*            		JP      Z,ERROR_FP_         ;"Division by zero"
0424E9 0D          0362*            		DEC     C               ;TEST FOR ZERO
0424EA 0C          0363*            		INC     C
0424EB C8          0364*            		RET     Z
0424EC 7C          0365*            		LD      A,H
0424ED AA          0366*            		XOR     D               ;CALC. RESULT SIGN
0424EE 08          0367*            		EX      AF,AF'          ;SAVE SIGN
0424EF CB FA       0368*            		SET     7,D             ;REPLACE IMPLIED 1's
0424F1 CB FC       0369*            		SET     7,H
0424F3 C5          0370*            		PUSH    BC              ;SAVE EXPONENTS
0424F4 42          0371*            		LD      B,D             ;LOAD REGISTERS
0424F5 4B          0372*            		LD      C,E
0424F6 11 00 00 00 0373*            		LD      DE,0
0424FA D9          0374*            		EXX
0424FB 42          0375*            		LD      B,D
0424FC 4B          0376*            		LD      C,E
0424FD 11 00 00 00 0377*            		LD      DE,0
042501 3E E0       0378*            		LD      A,-32           ;LOOP COUNTER
042503 CD E0 2F 04 0379*            		CALL    DIVA            ;DIVIDE
042507 D9          0380*            		EXX
042508 CB 7A       0381*            		BIT     7,D
04250A D9          0382*            		EXX
04250B CC FF 2F 04 0383*            		CALL    Z,DIVB          ;NORMALISE & INC A
04250F EB          0384*            		EX      DE,HL
042510 D9          0385*            		EXX
042511 CB 38       0386*            		SRL     B               ;DIVISOR/2
042513 CB 19       0387*            		RR      C
042515 B7          0388*            		OR      A               ;CLEAR CARRY
042516 52 ED 42    0389*            		SBC.S   HL,BC           ;REMAINDER-DIVISOR/2
042519 3F          0390*            		CCF
04251A EB          0391*            		EX      DE,HL           ;RESULT IN HLH'L'
04251B CC 4D 2E 04 0392*            		CALL    Z,ODD           ;ROUND UNBIASSED
04251F DC 3B 2E 04 0393*            		CALL    C,ADD1_FP          ;ROUND UP
042523 C1          0394*            		POP     BC              ;RESTORE EXPONENTS
042524 DC 68 2E 04 0395*            		CALL    C,INCC
042528 1F          0396*            		RRA                     ;LSB OF A TO CARRY
042529 79          0397*            		LD      A,C             ;COMPUTE NEW EXPONENT
04252A 98          0398*            		SBC     A,B
04252B 3F          0399*            		CCF
04252C C3 CD 25 04 0400*            		JP      CHKOVF
042530             0401*    ;
042530             0402*    ;IMUL - Integer multiplication.
042530             0403*    ;
042530 7C          0404*    IMUL:			LD      A,H
042531 AA          0405*            		XOR     D
042532 08          0406*            		EX      AF,AF'          ;SAVE RESULT SIGN
042533 CB 7C       0407*            		BIT     7,H
042535 C4 56 2D 04 0408*            		CALL    NZ,NEGATE
042539 CD 53 2E 04 0409*            		CALL    SWAP_FP
04253D CB 7C       0410*            		BIT     7,H
04253F C4 56 2D 04 0411*            		CALL    NZ,NEGATE
042543 44          0412*            		LD      B,H
042544 4D          0413*            		LD      C,L
042545 21 00 00 00 0414*            		LD      HL,0
042549 D9          0415*            		EXX
04254A 44          0416*            		LD      B,H
04254B 4D          0417*            		LD      C,L
04254C 21 00 00 00 0418*            		LD      HL,0
042550 3E DF       0419*            		LD      A,-33
042552 CD 17 30 04 0420*            		CALL    MULA            ;MULTIPLY
042556 D9          0421*            		EXX
042557 0E BF       0422*            		LD      C,191           ;PRESET EXPONENT
042559 CD 7B 2E 04 0423*            		CALL    TEST_FP            ;TEST RANGE
04255D 20 0F       0424*            		JR      NZ,IMUL1        ;TOO BIG
04255F CB 7A       0425*            		BIT     7,D
042561 20 0B       0426*            		JR      NZ,IMUL1
042563 CD 53 2E 04 0427*            		CALL    SWAP_FP
042567 4A          0428*            		LD      C,D             ;INTEGER MARKER
042568 08          0429*            		EX      AF,AF'
042569 F0          0430*            		RET     P
04256A C3 56 2D 04 0431*            		JP      NEGATE
04256E             0432*    ;
04256E 0D          0433*    IMUL1:			DEC     C
04256F D9          0434*            		EXX
042570 CB 23       0435*            		SLA     E
042572 CB 12       0436*            		RL      D
042574 D9          0437*            		EXX
042575 CB 13       0438*            		RL      E
042577 CB 12       0439*            		RL      D
042579 D9          0440*            		EXX
04257A 52 ED 6A    0441*            		ADC.S   HL,HL
04257D D9          0442*            		EXX
04257E 52 ED 6A    0443*            		ADC.S   HL,HL
042581 F2 6E 25 04 0444*            		JP      P,IMUL1         ;NORMALISE
042585 08          0445*            		EX      AF,AF'
042586 F8          0446*            		RET     M
042587 CB BC       0447*            		RES     7,H             ;POSITIVE
042589 C9          0448*            		RET
04258A             0449*    ;
04258A             0450*    ;FMUL - Floating point multiplication with rounding.
04258A             0451*    ;
04258A 05          0452*    FMUL:			DEC     B               ;TEST FOR ZERO
04258B 04          0453*            		INC     B
04258C CA 9F 2E 04 0454*            		JP      Z,ZERO_FP
042590 0D          0455*            		DEC     C               ;TEST FOR ZERO
042591 0C          0456*            		INC     C
042592 C8          0457*            		RET     Z
042593 7C          0458*            		LD      A,H
042594 AA          0459*            		XOR     D               ;CALC. RESULT SIGN
042595 08          0460*            		EX      AF,AF'
042596 CB FA       0461*            		SET     7,D             ;REPLACE IMPLIED 1's
042598 CB FC       0462*            		SET     7,H
04259A C5          0463*            		PUSH    BC              ;SAVE EXPONENTS
04259B 44          0464*            		LD      B,H             ;LOAD REGISTERS
04259C 4D          0465*            		LD      C,L
04259D 21 00 00 00 0466*            		LD      HL,0
0425A1 D9          0467*            		EXX
0425A2 44          0468*            		LD      B,H
0425A3 4D          0469*            		LD      C,L
0425A4 21 00 00 00 0470*            		LD      HL,0
0425A8 3E E0       0471*            		LD      A,-32           ;LOOP COUNTER
0425AA CD 17 30 04 0472*            		CALL    MULA            ;MULTIPLY
0425AE DC 2D 30 04 0473*            		CALL    C,MULB          ;NORMALISE & INC A
0425B2 D9          0474*            		EXX
0425B3 E5          0475*            		PUSH    HL
0425B4 21 00 80 00 0476*            		LD      HL,8000H
0425B8 B7          0477*            		OR      A               ;CLEAR CARRY
0425B9 52 ED 52    0478*            		SBC.S   HL,DE
0425BC E1          0479*            		POP     HL
0425BD CC 4D 2E 04 0480*            		CALL    Z,ODD           ;ROUND UNBIASSED
0425C1 DC 3B 2E 04 0481*            		CALL    C,ADD1_FP          ;ROUND UP
0425C5 C1          0482*            		POP     BC              ;RESTORE EXPONENTS
0425C6 DC 68 2E 04 0483*            		CALL    C,INCC
0425CA 1F          0484*            		RRA                     ;LSB OF A TO CARRY
0425CB 79          0485*            		LD      A,C             ;COMPUTE NEW EXPONENT
0425CC 88          0486*            		ADC     A,B
0425CD 38 06       0487*    CHKOVF:			JR      C,CHKO1
0425CF F2 9F 2E 04 0488*            		JP      P,ZERO_FP          ;UNDERFLOW
0425D3 18 04       0489*            		JR      CHKO2
0425D5 FA 6A 2E 04 0490*    CHKO1:			JP      M,OFLOW         ;OVERFLOW
0425D9 C6 80       0491*    CHKO2:			ADD     A,80H
0425DB 4F          0492*            		LD      C,A
0425DC CA 9F 2E 04 0493*            		JP      Z,ZERO_FP
0425E0 08          0494*            		EX      AF,AF'          ;RESTORE SIGN BIT
0425E1 CB BC       0495*            		RES     7,H
0425E3 F0          0496*            		RET     P
0425E4 CB FC       0497*            		SET     7,H
0425E6 C9          0498*            		RET
0425E7             0499*    ;
0425E7             0500*    ;IPOW - Integer involution.
0425E7             0501*    ;
0425E7 CD 53 2E 04 0502*    IPOW:			CALL    SWAP_FP
0425EB CB 7C       0503*            		BIT     7,H
0425ED F5          0504*            		PUSH    AF              ;SAVE SIGN
0425EE C4 56 2D 04 0505*            		CALL    NZ,NEGATE
0425F2 48          0506*    IPOW0:			LD      C,B
0425F3 06 20       0507*            		LD      B,32            ;LOOP COUNTER
0425F5 CD 0B 2F 04 0508*    IPOW1:			CALL    X2
0425F9 38 08       0509*            		JR      C,IPOW2
0425FB 10 F8       0510*            		DJNZ    IPOW1
0425FD F1          0511*            		POP     AF
0425FE D9          0512*            		EXX
0425FF 2C          0513*            		INC     L               ;RESULT=1
042600 D9          0514*            		EXX
042601 4C          0515*            		LD      C,H
042602 C9          0516*            		RET
042603             0517*    ;
042603 F1          0518*    IPOW2:			POP     AF
042604 C5          0519*            		PUSH    BC
042605 EB          0520*            		EX      DE,HL
042606 E5          0521*            		PUSH    HL
042607 D9          0522*            		EXX
042608 EB          0523*            		EX      DE,HL
042609 E5          0524*            		PUSH    HL
04260A D9          0525*            		EXX
04260B DD 21 00 00 0526*            		LD      IX,0
       00          
042610 DD 39       0527*            		ADD     IX,SP
042612 28 48       0528*            		JR      Z,IPOW4
042614 C5          0529*            		PUSH    BC
042615 D9          0530*            		EXX
042616 D5          0531*            		PUSH    DE
042617 D9          0532*            		EXX
042618 D5          0533*            		PUSH    DE
042619 CD 22 2E 04 0534*            		CALL    SFLOAT_FP
04261D CD 56 29 04 0535*            		CALL    RECIP
042621 DD 71 04    0536*            		LD      (IX+4),C
042624 D9          0537*            		EXX
042625 DD 75 00    0538*            		LD      (IX+0),L
042628 DD 74 01    0539*            		LD      (IX+1),H
04262B D9          0540*            		EXX
04262C DD 75 02    0541*            		LD      (IX+2),L
04262F DD 74 03    0542*            		LD      (IX+3),H
042632 18 21       0543*            		JR      IPOW5
042634             0544*    ;
042634 C5          0545*    IPOW3:			PUSH    BC
042635 D9          0546*            		EXX
042636 CB 23       0547*            		SLA     E
042638 CB 12       0548*            		RL      D
04263A D5          0549*            		PUSH    DE
04263B D9          0550*            		EXX
04263C CB 13       0551*            		RL      E
04263E CB 12       0552*            		RL      D
042640 D5          0553*            		PUSH    DE
042641 3E 0A       0554*            		LD      A,'*' & 0FH
042643 F5          0555*            		PUSH    AF
042644 CD 1F 2F 04 0556*            		CALL    COPY_
042648 CD FF 22 04 0557*            		CALL    OP              ;SQUARE
04264C F1          0558*            		POP     AF
04264D CD 4B 2C 04 0559*            		CALL    DLOAD5
042651 DC FF 22 04 0560*            		CALL    C,OP            ;MULTIPLY BY X
042655 D1          0561*    IPOW5:			POP     DE
042656 D9          0562*            		EXX
042657 D1          0563*            		POP     DE
042658 D9          0564*            		EXX
042659 79          0565*            		LD      A,C
04265A C1          0566*            		POP     BC
04265B 4F          0567*            		LD      C,A
04265C 10 D6       0568*    IPOW4:			DJNZ    IPOW3
04265E F1          0569*            		POP     AF
04265F F1          0570*            		POP     AF
042660 F1          0571*            		POP     AF
042661 C9          0572*            		RET
042662             0573*    ;
042662 F1          0574*    FPOW0:			POP     AF
042663 F1          0575*            		POP     AF
042664 F1          0576*            		POP     AF
042665 18 8B       0577*            		JR      IPOW0
042667             0578*    ;
042667             0579*    ;FPOW - Floating-point involution.
042667             0580*    ;
042667 CB 7A       0581*    FPOW:			BIT     7,D
042669 F5          0582*            		PUSH    AF
04266A CD 53 2E 04 0583*            		CALL    SWAP_FP
04266E CD 2F 2F 04 0584*            		CALL    PUSH5
042672 0D          0585*            		DEC     C
042673 0C          0586*            		INC     C
042674 28 EC       0587*            		JR      Z,FPOW0
042676 3E 9E       0588*            		LD      A,158
042678 B9          0589*            		CP      C
042679 38 0A       0590*            		JR      C,FPOW1
04267B 3C          0591*            		INC     A
04267C CD 27 2D 04 0592*            		CALL    FIX
042680 08          0593*            		EX      AF,AF'
042681 F2 62 26 04 0594*            		JP      P,FPOW0
042685 CD 53 2E 04 0595*    FPOW1:			CALL    SWAP_FP
042689 CD 73 29 04 0596*            		CALL    LN0
04268D CD 38 2F 04 0597*            		CALL    POP5
042691 F1          0598*            		POP     AF
042692 CD 8A 25 04 0599*            		CALL    FMUL
042696 C3 D5 28 04 0600*            		JP      EXP0
04269A             0601*    ;
04269A             0602*    ;Integer and floating-point compare.
04269A             0603*    ;Result is TRUE (-1) or FALSE (0).
04269A             0604*    ;
04269A CD A9 2E 04 0605*    FLT:			CALL    FCP
04269E 18 04       0606*            		JR      ILT1
0426A0 CD 9B 2E 04 0607*    ILT:			CALL    ICP
0426A4 D0          0608*    ILT1:			RET     NC
0426A5 18 42       0609*            		JR      TRUE_FP
0426A7             0610*    ;
0426A7 CD A9 2E 04 0611*    FGT:			CALL    FCP
0426AB 18 04       0612*            		JR      IGT1
0426AD CD 9B 2E 04 0613*    IGT:			CALL    ICP
0426B1 C8          0614*    IGT1:			RET     Z
0426B2 D8          0615*            		RET     C
0426B3 18 34       0616*            		JR      TRUE_FP
0426B5             0617*    ;
0426B5 CD A9 2E 04 0618*    FGE:			CALL    FCP
0426B9 18 04       0619*            		JR      IGE1
0426BB CD 9B 2E 04 0620*    IGE:			CALL    ICP
0426BF D8          0621*    IGE1:			RET     C
0426C0 18 27       0622*            		JR      TRUE_FP
0426C2             0623*    ;
0426C2 CD A9 2E 04 0624*    FLE:			CALL    FCP
0426C6 18 04       0625*            		JR      ILE1
0426C8 CD 9B 2E 04 0626*    ILE:			CALL    ICP
0426CC 28 1B       0627*    ILE1:			JR      Z,TRUE_FP
0426CE D0          0628*            		RET     NC
0426CF 18 18       0629*            		JR      TRUE_FP
0426D1             0630*    ;
0426D1 CD A9 2E 04 0631*    FNE:			CALL    FCP
0426D5 18 04       0632*            		JR      INE1
0426D7 CD 9B 2E 04 0633*    INE:			CALL    ICP
0426DB C8          0634*    INE1:			RET     Z
0426DC 18 0B       0635*            		JR      TRUE_FP
0426DE             0636*    ;
0426DE CD A9 2E 04 0637*    FEQ:			CALL    FCP
0426E2 18 04       0638*            		JR      IEQ1
0426E4 CD 9B 2E 04 0639*    IEQ:			CALL    ICP
0426E8 C0          0640*    IEQ1:			RET     NZ
0426E9 21 FF FF FF 0641*    TRUE_FP:			LD      HL,-1
0426ED D9          0642*            		EXX
0426EE 21 FF FF FF 0643*            		LD      HL,-1
0426F2 D9          0644*            		EXX
0426F3 AF          0645*            		XOR     A
0426F4 4F          0646*            		LD      C,A
0426F5 C9          0647*            		RET
0426F6             0648*    ;
0426F6             0649*    ;FUNCTIONS:
0426F6             0650*    ;
0426F6             0651*    ;Result returned in HLH'L'C (floating point)
0426F6             0652*    ;Result returned in HLH'L' (C=0) (integer)
0426F6             0653*    ;All registers except IY destroyed.
0426F6             0654*    ;
0426F6             0655*    ;ABS - Absolute value
0426F6             0656*    ;Result is numeric, variable type.
0426F6             0657*    ;
0426F6 CB 7C       0658*    ABSV_FP:			BIT     7,H
0426F8 C8          0659*            		RET     Z               ;POSITIVE/ZERO
0426F9 0D          0660*            		DEC     C
0426FA 0C          0661*            		INC     C
0426FB CA 56 2D 04 0662*            		JP      Z,NEGATE        ;INTEGER
0426FF CB BC       0663*            		RES     7,H
042701 C9          0664*            		RET
042702             0665*    ;
042702             0666*    ;NOT - Complement integer.
042702             0667*    ;Result is integer numeric.
042702             0668*    ;
042702 CD 46 2D 04 0669*    NOTK_FP:			CALL    SFIX_FP
042706 7C          0670*            		LD      A,H
042707 2F          0671*            		CPL
042708 67          0672*            		LD      H,A
042709 7D          0673*            		LD      A,L
04270A 2F          0674*            		CPL
04270B 6F          0675*            		LD      L,A
04270C D9          0676*            		EXX
04270D 7C          0677*            		LD      A,H
04270E 2F          0678*            		CPL
04270F 67          0679*            		LD      H,A
042710 7D          0680*            		LD      A,L
042711 2F          0681*            		CPL
042712 6F          0682*            		LD      L,A
042713 D9          0683*            		EXX
042714 AF          0684*            		XOR     A               ;NUMERIC MARKER
042715 C9          0685*            		RET
042716             0686*    ;
042716             0687*    ;PI - Return PI (3.141592654)
042716             0688*    ;Result is floating-point numeric.
042716             0689*    ;
042716 21 0F 49 00 0690*    PI_FP:			LD      HL,490FH
04271A D9          0691*            		EXX
04271B 21 A2 DA 00 0692*            		LD      HL,0DAA2H
04271F D9          0693*            		EXX
042720 0E 81       0694*            		LD      C,81H
042722 AF          0695*            		XOR     A               ;NUMERIC MARKER
042723 C9          0696*            		RET
042724             0697*    ;
042724             0698*    ;DEG - Convert radians to degrees
042724             0699*    ;Result is floating-point numeric.
042724             0700*    ;
042724 CD 38 27 04 0701*    DEG_FP:			CALL    FPI180
042728 CD 8A 25 04 0702*            		CALL    FMUL
04272C AF          0703*            		XOR     A
04272D C9          0704*            		RET
04272E             0705*    ;
04272E             0706*    ;RAD - Convert degrees to radians
04272E             0707*    ;Result is floating-point numeric.
04272E             0708*    ;
04272E CD 38 27 04 0709*    RAD_FP:			CALL    FPI180
042732 CD E1 24 04 0710*            		CALL    FDIV
042736 AF          0711*            		XOR     A
042737 C9          0712*            		RET
042738             0713*    ;
042738             0714*    ;180/PI
042738             0715*    ;
042738 CD 22 2E 04 0716*    FPI180:			CALL    SFLOAT_FP
04273C 11 2E 65 00 0717*            		LD      DE,652EH
042740 D9          0718*            		EXX
042741 11 D3 E0 00 0719*            		LD      DE,0E0D3H
042745 D9          0720*            		EXX
042746 06 85       0721*            		LD      B,85H
042748 C9          0722*            		RET
042749             0723*    ;
042749             0724*    ;SGN - Return -1, 0 or +1
042749             0725*    ;Result is integer numeric.
042749             0726*    ;
042749 CD 7B 2E 04 0727*    SGN_FP:			CALL    TEST_FP
04274D B1          0728*            		OR      C
04274E C8          0729*            		RET     Z               ;ZERO
04274F CB 7C       0730*            		BIT     7,H
042751 C2 E9 26 04 0731*            		JP      NZ,TRUE_FP         ;-1
042755 CD 9F 2E 04 0732*            		CALL    ZERO_FP
042759 C3 3B 2E 04 0733*            		JP      ADD1_FP            ;1
04275D             0734*    ;
04275D             0735*    ;VAL - Return numeric value of string.
04275D             0736*    ;Input: ASCII string at IX
04275D             0737*    ;Result is variable type numeric.
04275D             0738*    ;
04275D CD B9 30 04 0739*    VAL_FP:			CALL    SIGNQ
042761 F5          0740*            		PUSH    AF
042762 CD 69 2C 04 0741*            		CALL    CON_FP
042766 F1          0742*            		POP     AF
042767 FE 2D       0743*            		CP      '-'
042769 3E 00       0744*            		LD      A,0             ;NUMERIC MARKER
04276B C0          0745*            		RET     NZ
04276C 0D          0746*            		DEC     C
04276D 0C          0747*            		INC     C
04276E CA 56 2D 04 0748*            		JP      Z,NEGATE        ;ZERO/INTEGER
042772 7C          0749*            		LD      A,H
042773 EE 80       0750*            		XOR     80H             ;CHANGE SIGN (FP)
042775 67          0751*            		LD      H,A
042776 AF          0752*            		XOR     A
042777 C9          0753*            		RET
042778             0754*    ;
042778             0755*    ;INT - Floor function
042778             0756*    ;Result is integer numeric.
042778             0757*    ;
042778 0D          0758*    INT_FP_:			DEC     C
042779 0C          0759*            		INC     C
04277A C8          0760*            		RET     Z               ;ZERO/INTEGER
04277B 3E 9F       0761*            		LD      A,159
04277D 44          0762*            		LD      B,H             ;B7=SIGN BIT
04277E CD 27 2D 04 0763*            		CALL    FIX
042782 08          0764*            		EX      AF,AF'
042783 A0          0765*            		AND     B
042784 FC 3B 2E 04 0766*            		CALL    M,ADD1_FP          ;NEGATIVE NON-INTEGER
042788 78          0767*            		LD      A,B
042789 B7          0768*            		OR      A
04278A FC 56 2D 04 0769*            		CALL    M,NEGATE
04278E AF          0770*            		XOR     A
04278F 4F          0771*            		LD      C,A
042790 C9          0772*            		RET
042791             0773*    ;
042791             0774*    ;SQR - square root
042791             0775*    ;Result is floating-point numeric.
042791             0776*    ;
042791 CD 22 2E 04 0777*    SQR_FP:			CALL    SFLOAT_FP
042795 CB 7C       0778*    SQR0:			BIT     7,H
042797 3E 15       0779*            		LD      A,NGROOT
042799 C2 F9 22 04 0780*            		JP      NZ,ERROR_FP_        ;"-ve root"
04279D 0D          0781*            		DEC     C
04279E 0C          0782*            		INC     C
04279F C8          0783*            		RET     Z               ;ZERO
0427A0 CB FC       0784*            		SET     7,H             ;IMPLIED 1
0427A2 CB 41       0785*            		BIT     0,C
0427A4 CC 5B 2E 04 0786*            		CALL    Z,DIV2          ;MAKE EXPONENT ODD
0427A8 79          0787*            		LD      A,C
0427A9 D6 80       0788*            		SUB     80H
0427AB CB 2F       0789*            		SRA     A               ;HALVE EXPONENT
0427AD C6 80       0790*            		ADD     A,80H
0427AF 4F          0791*            		LD      C,A
0427B0 C5          0792*            		PUSH    BC              ;SAVE EXPONENT
0427B1 EB          0793*            		EX      DE,HL
0427B2 21 00 00 00 0794*            		LD      HL,0
0427B6 44          0795*            		LD      B,H
0427B7 4D          0796*            		LD      C,L
0427B8 D9          0797*            		EXX
0427B9 EB          0798*            		EX      DE,HL
0427BA 21 00 00 00 0799*            		LD      HL,0
0427BE 44          0800*            		LD      B,H
0427BF 4D          0801*            		LD      C,L
0427C0 3E E1       0802*            		LD      A,-31
0427C2 CD 51 30 04 0803*            		CALL    SQRA            ;ROOT
0427C6 D9          0804*            		EXX
0427C7 CB 78       0805*            		BIT     7,B
0427C9 D9          0806*            		EXX
0427CA CC 51 30 04 0807*            		CALL    Z,SQRA          ;NORMALISE & INC A
0427CE CD 92 30 04 0808*            		CALL    SQRB
0427D2 B7          0809*            		OR      A               ;CLEAR CARRY
0427D3 CD FF 2F 04 0810*            		CALL    DIVB
0427D7 CB 1B       0811*            		RR      E               ;LSB TO CARRY
0427D9 60          0812*            		LD      H,B
0427DA 69          0813*            		LD      L,C
0427DB D9          0814*            		EXX
0427DC 60          0815*            		LD      H,B
0427DD 69          0816*            		LD      L,C
0427DE DC 3B 2E 04 0817*            		CALL    C,ADD1_FP          ;ROUND UP
0427E2 C1          0818*            		POP     BC              ;RESTORE EXPONENT
0427E3 DC 68 2E 04 0819*            		CALL    C,INCC
0427E7 1F          0820*            		RRA
0427E8 9F          0821*            		SBC     A,A
0427E9 81          0822*            		ADD     A,C
0427EA 4F          0823*            		LD      C,A
0427EB CB BC       0824*            		RES     7,H             ;POSITIVE
0427ED AF          0825*            		XOR     A
0427EE C9          0826*            		RET
0427EF             0827*    ;
0427EF             0828*    ;TAN - Tangent function
0427EF             0829*    ;Result is floating-point numeric.
0427EF             0830*    ;
0427EF CD 22 2E 04 0831*    TAN_FP:			CALL    SFLOAT_FP
0427F3 CD 2F 2F 04 0832*            		CALL    PUSH5
0427F7 CD 19 28 04 0833*            		CALL    COS0
0427FB CD 38 2F 04 0834*            		CALL    POP5
0427FF CD 2F 2F 04 0835*            		CALL    PUSH5
042803 CD 53 2E 04 0836*            		CALL    SWAP_FP
042807 CD 26 28 04 0837*            		CALL    SIN0
04280B CD 38 2F 04 0838*            		CALL    POP5
04280F CD E1 24 04 0839*            		CALL    FDIV
042813 AF          0840*            		XOR     A               ;NUMERIC MARKER
042814 C9          0841*            		RET
042815             0842*    ;
042815             0843*    ;COS - Cosine function
042815             0844*    ;Result is floating-point numeric.
042815             0845*    ;
042815 CD 22 2E 04 0846*    COS_FP:			CALL    SFLOAT_FP
042819 CD 7E 2D 04 0847*    COS0:			CALL    SCALE
04281D 1C          0848*            		INC     E
04281E 1C          0849*            		INC     E
04281F 7B          0850*            		LD      A,E
042820 18 10       0851*            		JR      SIN1
042822             0852*    ;
042822             0853*    ;SIN - Sine function
042822             0854*    ;Result is floating-point numeric.
042822             0855*    ;
042822 CD 22 2E 04 0856*    SIN_FP:			CALL    SFLOAT_FP
042826 E5          0857*    SIN0:			PUSH    HL              ;H7=SIGN
042827 CD 7E 2D 04 0858*            		CALL    SCALE
04282B F1          0859*            		POP     AF
04282C 07          0860*            		RLCA
04282D 07          0861*            		RLCA
04282E 07          0862*            		RLCA
04282F E6 04       0863*            		AND     4
042831 AB          0864*            		XOR     E
042832 F5          0865*    SIN1:			PUSH    AF              ;OCTANT
042833 CB BC       0866*            		RES     7,H
042835 1F          0867*            		RRA
042836 CD C4 28 04 0868*            		CALL    PIBY4
04283A DC 65 24 04 0869*            		CALL    C,RSUB          ;X=(PI/4)-X
04283E F1          0870*            		POP     AF
04283F F5          0871*            		PUSH    AF
042840 E6 03       0872*            		AND     3
042842 E2 7B 28 04 0873*            		JP      PO,SIN2         ;USE COSINE APPROX.
042846 CD 2F 2F 04 0874*            		CALL    PUSH5           ;SAVE X
04284A CD 27 2F 04 0875*            		CALL    SQUARE          ;PUSH X*X
04284E CD 6C 2F 04 0876*            		CALL    POLY
042852 B7 A8       0877*            		DW	0A8B7H          ;a(8)
042854 11 36       0878*            		DW	3611H
042856 6D          0879*            		DB	6DH
042857 26 DE       0880*            		DW	0DE26H          ;a(6)
042859 05 D0       0881*            		DW	0D005H
04285B 73          0882*            		DB	73H
04285C C0 80       0883*            		DW	80C0H           ;a(4)
04285E 88 08       0884*            		DW	888H
042860 79          0885*            		DB	79H
042861 9D AA       0886*            		DW	0AA9DH          ;a(2)
042863 AA AA       0887*            		DW	0AAAAH
042865 7D          0888*            		DB	7DH
042866 00 00       0889*            		DW	0               ;a(0)
042868 00 00       0890*            		DW	0
04286A 80          0891*            		DB	80H
04286B CD 38 2F 04 0892*            		CALL    POP5
04286F CD 38 2F 04 0893*            		CALL    POP5
042873 CD 8A 25 04 0894*            		CALL    FMUL
042877 C3 A0 28 04 0895*            		JP      SIN3
04287B             0896*    ;
04287B CD 27 2F 04 0897*    SIN2:			CALL    SQUARE          ;PUSH X*X
04287F CD 6C 2F 04 0898*            		CALL    POLY
042883 71 D5       0899*            		DW	0D571H          ;b(8)
042885 78 4C       0900*            		DW	4C78H
042887 70          0901*            		DB	70H
042888 AF 94       0902*            		DW	94AFH           ;b(6)
04288A 03 B6       0903*            		DW	0B603H
04288C 76          0904*            		DB	76H
04288D C8 9C       0905*            		DW	9CC8H           ;b(4)
04288F AA 2A       0906*            		DW	2AAAH
042891 7B          0907*            		DB	7BH
042892 DD FF       0908*            		DW	0FFDDH          ;b(2)
042894 FF FF       0909*            		DW	0FFFFH
042896 7E          0910*            		DB	7EH
042897 00 00       0911*            		DW	0               ;b(0)
042899 00 00       0912*            		DW	0
04289B 80          0913*            		DB	80H
04289C CD 38 2F 04 0914*            		CALL    POP5
0428A0 F1          0915*    SIN3:			POP     AF
0428A1 E6 04       0916*            		AND     4
0428A3 C8          0917*            		RET     Z
0428A4 0D          0918*            		DEC     C
0428A5 0C          0919*            		INC     C
0428A6 C8          0920*            		RET     Z               ;ZERO
0428A7 CB FC       0921*            		SET     7,H             ;MAKE NEGATIVE
0428A9 C9          0922*            		RET
0428AA             0923*    ;
0428AA             0924*    ;Floating-point one:
0428AA             0925*    ;
0428AA 21 00 00 00 0926*    FONE_FP:			LD      HL,0
0428AE D9          0927*            		EXX
0428AF 21 00 00 00 0928*            		LD      HL,0
0428B3 D9          0929*            		EXX
0428B4 0E 80       0930*            		LD      C,80H
0428B6 C9          0931*            		RET
0428B7             0932*    ;
0428B7 11 00 00 00 0933*    DONE:			LD      DE,0
0428BB D9          0934*            		EXX
0428BC 11 00 00 00 0935*            		LD      DE,0
0428C0 D9          0936*            		EXX
0428C1 06 80       0937*            		LD      B,80H
0428C3 C9          0938*            		RET
0428C4             0939*    ;
0428C4 11 0F 49 00 0940*    PIBY4:			LD      DE,490FH
0428C8 D9          0941*            		EXX
0428C9 11 A2 DA 00 0942*            		LD      DE,0DAA2H
0428CD D9          0943*            		EXX
0428CE 06 7F       0944*            		LD      B,7FH
0428D0 C9          0945*            		RET
0428D1             0946*    ;
0428D1             0947*    ;EXP - Exponential function
0428D1             0948*    ;Result is floating-point numeric.
0428D1             0949*    ;
0428D1 CD 22 2E 04 0950*    EXP_FP:			CALL    SFLOAT_FP
0428D5 CD 62 29 04 0951*    EXP0:			CALL    LN2             ;LN(2)
0428D9 D9          0952*            		EXX
0428DA 1D          0953*    	        	DEC     E
0428DB 01 CF D1 00 0954*    		        LD      BC,0D1CFH       ;0.6931471805599453
0428DF D9          0955*            		EXX
0428E0 E5          0956*            		PUSH    HL              ;H7=SIGN
0428E1 CD 91 2D 04 0957*            		CALL    MOD48           ;"MODULUS"
0428E5 F1          0958*            		POP     AF
0428E6 CB 7B       0959*            		BIT     7,E
0428E8 28 0B       0960*            		JR      Z,EXP1
0428EA 17          0961*            		RLA
0428EB DA 9F 2E 04 0962*            		JP      C,ZERO_FP
0428EF 3E 18       0963*            		LD      A,EXPRNG
0428F1 C3 F9 22 04 0964*            		JP      ERROR_FP_           ;"Exp range"
0428F5             0965*    ;
0428F5 E6 80       0966*    EXP1:			AND     80H
0428F7 B3          0967*            		OR      E
0428F8 F5          0968*            		PUSH    AF              ;INTEGER PART
0428F9 CB BC       0969*            		RES     7,H
0428FB CD 2F 2F 04 0970*            		CALL    PUSH5           ;PUSH X*LN(2)
0428FF CD 6C 2F 04 0971*            		CALL    POLY
042903 72 40       0972*            		DW	4072H           ;a(7)
042905 2E 94       0973*            		DW	942EH
042907 73          0974*            		DB	73H
042908 65 6F       0975*            		DW	6F65H           ;a(6)
04290A 4F 2E       0976*            		DW	2E4FH
04290C 76          0977*            		DB	76H
04290D 37 6D       0978*            		DW	6D37H           ;a(5)
04290F 02 88       0979*            		DW	8802H
042911 79          0980*            		DB	79H
042912 12 E5       0981*            		DW	0E512H          ;a(4)
042914 A0 2A       0982*            		DW	2AA0H
042916 7B          0983*            		DB	7BH
042917 14 4F       0984*            		DW	4F14H           ;a(3)
042919 AA AA       0985*            		DW	0AAAAH
04291B 7D          0986*            		DB	7DH
04291C 56 FD       0987*            		DW	0FD56H          ;a(2)
04291E FF 7F       0988*            		DW	7FFFH
042920 7E          0989*            		DB	7EH
042921 FE FF       0990*            		DW	0FFFEH          ;a(1)
042923 FF FF       0991*            		DW	0FFFFH
042925 7F          0992*            		DB	7FH
042926 00 00       0993*            		DW	0               ;a(0)
042928 00 00       0994*            		DW	0
04292A 80          0995*            		DB	80H
04292B CD 38 2F 04 0996*            		CALL    POP5
04292F F1          0997*            		POP     AF
042930 F5          0998*            		PUSH    AF
042931 F4 56 29 04 0999*            		CALL    P,RECIP         ;X=1/X
042935 F1          1000*            		POP     AF
042936 F2 3E 29 04 1001*            		JP      P,EXP4
04293A E6 7F       1002*            		AND     7FH
04293C ED 44       1003*            		NEG
04293E C6 80       1004*    EXP4:			ADD     A,80H
042940 81          1005*            		ADD     A,C
042941 38 06       1006*            		JR      C,EXP2
042943 F2 9F 2E 04 1007*            		JP      P,ZERO_FP          ;UNDERFLOW
042947 18 04       1008*            		JR      EXP3
042949 FA 6A 2E 04 1009*    EXP2:			JP      M,OFLOW         ;OVERFLOW
04294D C6 80       1010*    EXP3:			ADD     A,80H
04294F CA 9F 2E 04 1011*            		JP      Z,ZERO_FP
042953 4F          1012*            		LD      C,A
042954 AF          1013*            		XOR     A               ;NUMERIC MARKER
042955 C9          1014*            		RET
042956             1015*    ;
042956 CD B7 28 04 1016*    RECIP:			CALL    DONE
04295A CD 53 2E 04 1017*    RDIV:			CALL    SWAP_FP
04295E C3 E1 24 04 1018*            		JP      FDIV            ;RECIPROCAL
042962             1019*    ;
042962 11 72 31 00 1020*    LN2:			LD      DE,3172H        ;LN(2)
042966 D9          1021*            		EXX
042967 11 F8 17 00 1022*            		LD      DE,17F8H
04296B D9          1023*            		EXX
04296C 06 7F       1024*            		LD      B,7FH
04296E C9          1025*            		RET
04296F             1026*    ;
04296F             1027*    ;LN - Natural log.
04296F             1028*    ;Result is floating-point numeric.
04296F             1029*    ;
04296F CD 22 2E 04 1030*    LN_FP:			CALL    SFLOAT_FP
042973 3E 16       1031*    LN0:			LD      A,LOGRNG
042975 CB 7C       1032*            		BIT     7,H
042977 C2 F9 22 04 1033*            		JP      NZ,ERROR_FP_        ;"Log range"
04297B 0C          1034*            		INC     C
04297C 0D          1035*            		DEC     C
04297D CA F9 22 04 1036*            		JP      Z,ERROR_FP_
042981 11 04 35 00 1037*            		LD      DE,3504H        ;SQR(2)
042985 D9          1038*            		EXX
042986 11 33 F3 00 1039*            		LD      DE,0F333H       ;1.41421356237
04298A D9          1040*            		EXX
04298B CD B2 2E 04 1041*            		CALL    ICP0            ;MANTISSA>SQR(2)?
04298F 79          1042*            		LD      A,C             ;EXPONENT
042990 0E 80       1043*            		LD      C,80H           ;1 <= X < 2
042992 38 02       1044*            		JR      C,LN4
042994 0D          1045*            		DEC     C
042995 3C          1046*            		INC     A
042996 F5          1047*    LN4:			PUSH    AF              ;SAVE EXPONENT
042997 CD 44 2F 04 1048*            		CALL    RATIO           ;X=(X-1)/(X+1)
04299B CD 2F 2F 04 1049*            		CALL    PUSH5
04299F CD 27 2F 04 1050*    		        CALL    SQUARE          ;PUSH X*X
0429A3 CD 6C 2F 04 1051*            		CALL    POLY
0429A7 48 CC       1052*            		DW	0CC48H          ;a(9)
0429A9 FB 74       1053*            		DW	74FBH
0429AB 7D          1054*            		DB	7DH
0429AC AF AE       1055*            		DW	0AEAFH          ;a(7)
0429AE FF 11       1056*            		DW	11FFH
0429B0 7E          1057*            		DB	7EH
0429B1 8C D9       1058*            		DW	0D98CH          ;a(5)
0429B3 CD 4C       1059*            		DW	4CCDH
0429B5 7E          1060*            		DB	7EH
0429B6 E3 A9       1061*            		DW	0A9E3H          ;a(3)
0429B8 AA 2A       1062*            		DW	2AAAH
0429BA 7F          1063*            		DB	7FH
0429BB 00 00       1064*            		DW	0               ;a(1)
0429BD 00 00       1065*            		DW	0
0429BF 81          1066*            		DB	81H
0429C0 CD 38 2F 04 1067*            		CALL    POP5
0429C4 CD 38 2F 04 1068*            		CALL    POP5
0429C8 CD 8A 25 04 1069*            		CALL    FMUL
0429CC F1          1070*            		POP     AF              ;EXPONENT
0429CD CD 2F 2F 04 1071*            		CALL    PUSH5
0429D1 08          1072*            		EX      AF,AF'
0429D2 CD 9F 2E 04 1073*            		CALL    ZERO_FP
0429D6 08          1074*            		EX      AF,AF'
0429D7 D6 80       1075*            		SUB     80H
0429D9 28 1F       1076*            		JR      Z,LN3
0429DB 30 02       1077*            		JR      NC,LN1
0429DD 2F          1078*            		CPL
0429DE 3C          1079*            		INC     A
0429DF 67          1080*    LN1:			LD      H,A
0429E0 0E 87       1081*            		LD      C,87H
0429E2 F5          1082*            		PUSH    AF
0429E3 CD 02 2E 04 1083*            		CALL    FLOAT_
0429E7 CB BC       1084*            		RES     7,H
0429E9 CD 62 29 04 1085*            		CALL    LN2
0429ED CD 8A 25 04 1086*            		CALL    FMUL
0429F1 F1          1087*            		POP     AF
0429F2 30 06       1088*            		JR      NC,LN3
0429F4 FA FA 29 04 1089*            		JP      M,LN3
0429F8 CB FC       1090*            		SET     7,H
0429FA CD 38 2F 04 1091*    LN3:			CALL    POP5
0429FE CD 78 24 04 1092*            		CALL    FADD
042A02 AF          1093*            		XOR     A
042A03 C9          1094*            		RET
042A04             1095*    ;
042A04             1096*    ;LOG - base-10 logarithm.
042A04             1097*    ;Result is floating-point numeric.
042A04             1098*    ;
042A04 CD 6F 29 04 1099*    LOG_FP:			CALL    LN_FP
042A08 11 5B 5E 00 1100*            		LD      DE,5E5BH        ;LOG(e)
042A0C D9          1101*            		EXX
042A0D 11 A9 D8 00 1102*            		LD      DE,0D8A9H
042A11 D9          1103*            		EXX
042A12 06 7E       1104*            		LD      B,7EH
042A14 CD 8A 25 04 1105*            		CALL    FMUL
042A18 AF          1106*            		XOR     A
042A19 C9          1107*            		RET
042A1A             1108*    ;
042A1A             1109*    ;ASN - Arc-sine
042A1A             1110*    ;Result is floating-point numeric.
042A1A             1111*    ;
042A1A CD 22 2E 04 1112*    ASN_FP:			CALL    SFLOAT_FP
042A1E CD 2F 2F 04 1113*            		CALL    PUSH5
042A22 CD 1F 2F 04 1114*            		CALL    COPY_
042A26 CD 8A 25 04 1115*            		CALL    FMUL
042A2A CD B7 28 04 1116*            		CALL    DONE
042A2E CD 65 24 04 1117*            		CALL    RSUB
042A32 CD 95 27 04 1118*            		CALL    SQR0
042A36 CD 38 2F 04 1119*            		CALL    POP5
042A3A 0C          1120*            		INC     C
042A3B 0D          1121*            		DEC     C
042A3C 3E 02       1122*            		LD      A,2
042A3E D5          1123*            		PUSH    DE
042A3F CA C4 2A 04 1124*            		JP      Z,ACS1
042A43 D1          1125*            		POP     DE
042A44 CD 5A 29 04 1126*            		CALL    RDIV
042A48 18 04       1127*            		JR      ATN0
042A4A             1128*    ;
042A4A             1129*    ;ATN - arc-tangent
042A4A             1130*    ;Result is floating-point numeric.
042A4A             1131*    ;
042A4A CD 22 2E 04 1132*    ATN_FP:			CALL    SFLOAT_FP
042A4E E5          1133*    ATN0:			PUSH    HL              ;SAVE SIGN
042A4F CB BC       1134*            		RES     7,H
042A51 11 13 54 00 1135*            		LD      DE,5413H        ;TAN(PI/8)=SQR(2)-1
042A55 D9          1136*            		EXX
042A56 11 D0 CC 00 1137*            		LD      DE,0CCD0H
042A5A D9          1138*            		EXX
042A5B 06 7E       1139*            		LD      B,7EH
042A5D CD AF 2E 04 1140*            		CALL    FCP0            ;COMPARE
042A61 06 00       1141*            		LD      B,0
042A63 38 22       1142*            		JR      C,ATN2
042A65 11 82 1A 00 1143*            		LD      DE,1A82H        ;TAN(3*PI/8)=SQR(2)+1
042A69 D9          1144*            		EXX
042A6A 11 9A 79 00 1145*            		LD      DE,799AH
042A6E D9          1146*            		EXX
042A6F 06 81       1147*            		LD      B,81H
042A71 CD AF 2E 04 1148*            		CALL    FCP0            ;COMPARE
042A75 38 0A       1149*            		JR      C,ATN1
042A77 CD 56 29 04 1150*            		CALL    RECIP           ;X=1/X
042A7B 06 02       1151*            		LD      B,2
042A7D C3 87 2A 04 1152*            		JP      ATN2
042A81 CD 44 2F 04 1153*    ATN1:			CALL    RATIO           ;X=(X-1)/(X+1)
042A85 06 01       1154*            		LD      B,1
042A87 C5          1155*    ATN2:			PUSH    BC              ;SAVE FLAG
042A88 CD 2F 2F 04 1156*            		CALL    PUSH5
042A8C CD 27 2F 04 1157*            		CALL    SQUARE          ;PUSH X*X
042A90 CD 6C 2F 04 1158*            		CALL    POLY
042A94 35 F3       1159*            		DW	0F335H          ;a(13)
042A96 D8 37       1160*            		DW	37D8H
042A98 7B          1161*            		DB	7BH
042A99 91 6B       1162*            		DW	6B91H           ;a(11)
042A9B B9 AA       1163*            		DW	0AAB9H
042A9D 7C          1164*            		DB	7CH
042A9E DE 41       1165*            		DW	41DEH           ;a(9)
042AA0 97 61       1166*            		DW	6197H
042AA2 7C          1167*            		DB	7CH
042AA3 7B 9D       1168*            		DW	9D7BH           ;a(7)
042AA5 37 92       1169*            		DW	9237H
042AA7 7D          1170*            		DB	7DH
042AA8 5A 2A       1171*            		DW	2A5AH           ;a(5)
042AAA CC 4C       1172*            		DW	4CCCH
042AAC 7D          1173*            		DB	7DH
042AAD 5C A9       1174*            		DW	0A95CH          ;a(3)
042AAF AA AA       1175*            		DW	0AAAAH
042AB1 7E          1176*            		DB	7EH
042AB2 00 00       1177*            		DW	0               ;a(1)
042AB4 00 00       1178*            		DW	0
042AB6 80          1179*            		DB	80H
042AB7 CD 38 2F 04 1180*            		CALL    POP5
042ABB CD 38 2F 04 1181*            		CALL    POP5
042ABF CD 8A 25 04 1182*            		CALL    FMUL
042AC3 F1          1183*            		POP     AF
042AC4 CD C4 28 04 1184*    ACS1:			CALL    PIBY4           ;PI/4
042AC8 1F          1185*            		RRA
042AC9 F5          1186*            		PUSH    AF
042ACA DC 78 24 04 1187*            		CALL    C,FADD
042ACE F1          1188*            		POP     AF
042ACF 04          1189*            		INC     B
042AD0 1F          1190*            		RRA
042AD1 DC 65 24 04 1191*            		CALL    C,RSUB
042AD5 F1          1192*            		POP     AF
042AD6 B7          1193*            		OR      A
042AD7 F0          1194*            		RET     P
042AD8 CB FC       1195*            		SET     7,H             ;MAKE NEGATIVE
042ADA AF          1196*            		XOR     A
042ADB C9          1197*            		RET
042ADC             1198*    ;
042ADC             1199*    ;ACS - Arc cosine=PI/2-ASN.
042ADC             1200*    ;Result is floating point numeric.
042ADC             1201*    ;
042ADC CD 1A 2A 04 1202*    ACS_FP:			CALL    ASN_FP
042AE0 3E 02       1203*            		LD      A,2
042AE2 F5          1204*            		PUSH    AF
042AE3 18 DF       1205*            		JR      ACS1
042AE5             1206*    ;
042AE5             1207*    ;Function STR - convert numeric value to ASCII string.
042AE5             1208*    ;   Inputs: HLH'L'C = integer or floating-point number
042AE5             1209*    ;           DE = address at which to store string
042AE5             1210*    ;           IX = address of @% format control
042AE5             1211*    ;  Outputs: String stored, with NUL terminator
042AE5             1212*    ;
042AE5             1213*    ;First normalise for decimal output:
042AE5             1214*    ;
042AE5 CD 22 2E 04 1215*    STR_FP:			CALL    SFLOAT_FP
042AE9 06 00       1216*            		LD      B,0             ;DEFAULT PT. POSITION
042AEB CB 7C       1217*            		BIT     7,H             ;NEGATIVE?
042AED 28 06       1218*            		JR      Z,STR10
042AEF CB BC       1219*            		RES     7,H
042AF1 3E 2D       1220*            		LD      A,'-'
042AF3 12          1221*            		LD      (DE),A          ;STORE SIGN
042AF4 13          1222*            		INC     DE
042AF5 AF          1223*    STR10:			XOR     A               ;CLEAR A
042AF6 B9          1224*            		CP      C
042AF7 28 4E       1225*            		JR      Z,STR02          ;ZERO
042AF9 D5          1226*            		PUSH    DE              ;SAVE TEXT POINTER
042AFA 78          1227*            		LD      A,B
042AFB F5          1228*    STR11:			PUSH    AF              ;SAVE DECIMAL COUNTER
042AFC 79          1229*            		LD      A,C             ;BINARY EXPONENT
042AFD FE A1       1230*            		CP      161
042AFF 30 1C       1231*            		JR      NC,STR14
042B01 FE 9B       1232*            		CP      155
042B03 30 29       1233*            		JR      NC,STR15
042B05 2F          1234*            		CPL
042B06 FE E1       1235*            		CP      225
042B08 38 02       1236*            		JR      C,STR13
042B0A 3E F8       1237*            		LD      A,-8
042B0C C6 1C       1238*    STR13:			ADD     A,28
042B0E CD 9B 2F 04 1239*            		CALL    POWR10
042B12 F5          1240*            		PUSH    AF
042B13 CD 8A 25 04 1241*            		CALL    FMUL
042B17 F1          1242*            		POP     AF
042B18 47          1243*            		LD      B,A
042B19 F1          1244*            		POP     AF
042B1A 90          1245*            		SUB     B
042B1B 18 DE       1246*            		JR      STR11
042B1D D6 20       1247*    STR14:			SUB     32
042B1F CD 9B 2F 04 1248*            		CALL    POWR10
042B23 F5          1249*            		PUSH    AF
042B24 CD E1 24 04 1250*            		CALL    FDIV
042B28 F1          1251*            		POP     AF
042B29 47          1252*            		LD      B,A
042B2A F1          1253*            		POP     AF
042B2B 80          1254*            		ADD     A,B
042B2C 18 CD       1255*            		JR      STR11
042B2E 3E 09       1256*    STR15:			LD      A,9
042B30 CD 9B 2F 04 1257*            		CALL    POWR10          ;10^9
042B34 CD AF 2E 04 1258*            		CALL    FCP0
042B38 79          1259*            		LD      A,C
042B39 C1          1260*            		POP     BC
042B3A 4F          1261*            		LD      C,A
042B3B CB FC       1262*            		SET     7,H             ;IMPLIED 1
042B3D DC D7 2E 04 1263*            		CALL    C,X10B          ;X10, DEC B
042B41 D1          1264*            		POP     DE              ;RESTORE TEXT POINTER
042B42 CB B9       1265*            		RES     7,C
042B44 3E 00       1266*            		LD      A,0
042B46 17          1267*            		RLA                     ;PUT CARRY IN LSB
042B47             1268*    ;
042B47             1269*    ;At this point decimal normalisation has been done,
042B47             1270*    ;now convert to decimal digits:
042B47             1271*    ;      AHLH'L' = number in normalised integer form
042B47             1272*    ;            B = decimal place adjustment
042B47             1273*    ;            C = binary place adjustment (29-33)
042B47             1274*    ;
042B47 0C          1275*    STR02:			INC     C
042B48 08          1276*            		EX      AF,AF'          ;SAVE A
042B49 78          1277*            		LD      A,B
042B4A DD CB 02 4E 1278*            		BIT     1,(IX+2)
042B4E 20 08       1279*            		JR      NZ,STR20
042B50 AF          1280*            		XOR     A
042B51 DD BE 01    1281*            		CP      (IX+1)
042B54 28 0B       1282*            		JR      Z,STR21
042B56 3E F6       1283*            		LD      A,-10
042B58 DD 86 01    1284*    STR20:			ADD     A,(IX+1)        ;SIG. FIG. COUNT
042B5B B7          1285*            		OR      A               ;CLEAR CARRY
042B5C FA 61 2B 04 1286*            		JP      M,STR21
042B60 AF          1287*            		XOR     A
042B61 F5          1288*    STR21:			PUSH    AF
042B62 08          1289*            		EX      AF,AF'          ;RESTORE A
042B63 CD 0B 2F 04 1290*    STR22:			CALL    X2              ;RL AHLH'L'
042B67 8F          1291*            		ADC     A,A
042B68 FE 0A       1292*            		CP      10
042B6A 38 05       1293*            		JR      C,STR23
042B6C D6 0A       1294*            		SUB     10
042B6E D9          1295*            		EXX
042B6F 2C          1296*            		INC     L               ;SET RESULT BIT
042B70 D9          1297*            		EXX
042B71 0D          1298*    STR23:			DEC     C
042B72 20 EF       1299*            		JR      NZ,STR22        ;32 TIMES
042B74 4F          1300*            		LD      C,A             ;REMAINDER
042B75 7C          1301*            		LD      A,H
042B76 E6 3F       1302*            		AND     3FH             ;CLEAR OUT JUNK
042B78 67          1303*            		LD      H,A
042B79 F1          1304*            		POP     AF
042B7A F2 88 2B 04 1305*            		JP      P,STR24
042B7E 3C          1306*            		INC     A
042B7F 20 1C       1307*            		JR      NZ,STR26
042B81 3E 04       1308*            		LD      A,4
042B83 B9          1309*            		CP      C               ;ROUND UP?
042B84 3E 00       1310*            		LD      A,0
042B86 18 15       1311*            		JR      STR26
042B88 F5          1312*    STR24:			PUSH    AF
042B89 79          1313*            		LD      A,C
042B8A CE 30       1314*            		ADC     A,'0'           ;ADD CARRY
042B8C FE 30       1315*            		CP      '0'
042B8E 28 05       1316*            		JR      Z,STR25         ;SUPPRESS ZERO
042B90 FE 3A       1317*            		CP      '9'+1
042B92 3F          1318*            		CCF
042B93 30 08       1319*            		JR      NC,STR26
042B95 E3          1320*    STR25:			EX      (SP),HL
042B96 CB 75       1321*            		BIT     6,L             ;ZERO FLAG
042B98 E3          1322*    		        EX      (SP),HL
042B99 20 05       1323*            		JR      NZ,STR27
042B9B 3E 30       1324*            		LD      A,'0'
042B9D 3C          1325*    STR26:			INC     A               ;SET +VE
042B9E 3D          1326*            		DEC     A
042B9F F5          1327*            		PUSH    AF              ;PUT ON STACK + CARRY
042BA0 04          1328*    STR27:			INC     B
042BA1 CD 7B 2E 04 1329*            		CALL    TEST_FP            ;IS HLH'L' ZERO?
042BA5 0E 20       1330*            		LD      C,32
042BA7 3E 00       1331*            		LD      A,0
042BA9 20 B8       1332*            		JR      NZ,STR22
042BAB F1          1333*            		POP     AF
042BAC F5          1334*            		PUSH    AF
042BAD 3E 00       1335*            		LD      A,0
042BAF 38 B2       1336*            		JR      C,STR22
042BB1             1337*    ;
042BB1             1338*    ;At this point, the decimal character string is stored
042BB1             1339*    ; on the stack. Trailing zeroes are suppressed and may
042BB1             1340*    ; need to be replaced.
042BB1             1341*    ;B register holds decimal point position.
042BB1             1342*    ;Now format number and store as ASCII string:
042BB1             1343*    ;
042BB1 EB          1344*    STR3:			EX      DE,HL           ;STRING POINTER
042BB2 0E FF       1345*            		LD      C,-1            ;FLAG "E"
042BB4 16 01       1346*            		LD      D,1
042BB6 DD 5E 01    1347*            		LD      E,(IX+1)        ;f2
042BB9 DD CB 02 46 1348*            		BIT     0,(IX+2)
042BBD 20 35       1349*            		JR      NZ,STR34        ;E MODE
042BBF DD CB 02 4E 1350*            		BIT     1,(IX+2)
042BC3 28 12       1351*            		JR      Z,STR31
042BC5 78          1352*            		LD      A,B             ;F MODE
042BC6 B7          1353*            		OR      A
042BC7 28 05       1354*            		JR      Z,STR30
042BC9 FA CE 2B 04 1355*            		JP      M,STR30
042BCD 50          1356*            		LD      D,B
042BCE 7A          1357*    STR30:			LD      A,D
042BCF DD 86 01    1358*            		ADD     A,(IX+1)
042BD2 5F          1359*            		LD      E,A
042BD3 FE 0B       1360*            		CP      11
042BD5 38 19       1361*            		JR      C,STR32
042BD7 78          1362*    STR31:			LD      A,B             ;G MODE
042BD8 11 01 01 00 1363*            		LD      DE,101H
042BDC B7          1364*            		OR      A
042BDD FA F4 2B 04 1365*            		JP      M,STR34
042BE1 28 0D       1366*            		JR      Z,STR32
042BE3 DD 7E 01    1367*            		LD      A,(IX+1)
042BE6 B7          1368*            		OR      A
042BE7 20 02       1369*            		JR      NZ,STR3A
042BE9 3E 0A       1370*            		LD      A,10
042BEB B8          1371*    STR3A:			CP      B
042BEC 38 06       1372*            		JR      C,STR34
042BEE 50          1373*            		LD      D,B
042BEF 58          1374*            		LD      E,B
042BF0 78          1375*    STR32:			LD      A,B
042BF1 C6 81       1376*            		ADD     A,129
042BF3 4F          1377*            		LD      C,A
042BF4 CB FA       1378*    STR34:			SET     7,D
042BF6 1D          1379*            		DEC     E
042BF7 7A          1380*    STR35:			LD      A,D
042BF8 B9          1381*            		CP      C
042BF9 30 0E       1382*            		JR      NC,STR33
042BFB F1          1383*    STR36:			POP     AF
042BFC 28 04       1384*            		JR      Z,STR37
042BFE F2 0B 2C 04 1385*            		JP      P,STR38
042C02 F5          1386*    STR37:			PUSH    AF
042C03 1C          1387*            		INC     E
042C04 1D          1388*            		DEC     E
042C05 FA 1C 2C 04 1389*            		JP      M,STR4
042C09 3E 30       1390*    STR33:			LD      A,'0'
042C0B 15          1391*    STR38:			DEC     D
042C0C E2 13 2C 04 1392*            		JP      PO,STR39
042C10 36 2E       1393*            		LD      (HL),'.'
042C12 23          1394*            		INC     HL
042C13 77          1395*    STR39:			LD      (HL),A
042C14 23          1396*            		INC     HL
042C15 1D          1397*            		DEC     E
042C16 F2 F7 2B 04 1398*            		JP      P,STR35
042C1A 18 DF       1399*            		JR      STR36
042C1C             1400*    ;
042C1C F1          1401*    STR4:			POP     AF
042C1D 0C          1402*    STR40:			INC     C
042C1E 4D          1403*            		LD      C,L
042C1F 20 28       1404*            		JR      NZ,STR44
042C21 36 45       1405*            		LD      (HL),'E'        ;EXPONENT
042C23 23          1406*            		INC     HL
042C24 78          1407*            		LD      A,B
042C25 3D          1408*            		DEC     A
042C26 F2 2F 2C 04 1409*            		JP      P,STR41
042C2A 36 2D       1410*            		LD      (HL),'-'
042C2C 23          1411*            		INC     HL
042C2D ED 44       1412*            		NEG
042C2F 36 30       1413*    STR41:			LD      (HL),'0'
042C31 28 15       1414*            		JR      Z,STR47
042C33 FE 0A       1415*            		CP      10
042C35 47          1416*            		LD      B,A
042C36 3E 3A       1417*            		LD      A,':'
042C38 38 03       1418*            		JR      C,STR42
042C3A 23          1419*            		INC     HL
042C3B 36 30       1420*            		LD      (HL),'0'
042C3D 34          1421*    STR42:			INC     (HL)
042C3E BE          1422*            		CP      (HL)
042C3F 20 05       1423*            		JR      NZ,STR43
042C41 36 30       1424*            		LD      (HL),'0'
042C43 2B          1425*            		DEC     HL
042C44 34          1426*            		INC     (HL)
042C45 23          1427*            		INC     HL
042C46 10 F5       1428*    STR43:			DJNZ    STR42
042C48 23          1429*    STR47:			INC     HL
042C49 EB          1430*    STR44:			EX      DE,HL
042C4A C9          1431*          			RET
042C4B             1432*    ;
042C4B             1433*    ;Support subroutines:
042C4B             1434*    ;
042C4B DD 46 04    1435*    DLOAD5:			LD      B,(IX+4)
042C4E D9          1436*            		EXX
042C4F DD 5E 00    1437*            		LD      E,(IX+0)
042C52 DD 56 01    1438*            		LD      D,(IX+1)
042C55 D9          1439*            		EXX
042C56 DD 5E 02    1440*            		LD      E,(IX+2)
042C59 DD 56 03    1441*            		LD      D,(IX+3)
042C5C C9          1442*            		RET
042C5D             1443*    ;
042C5D DD 46 06    1444*    DLOAD5_SPL:		LD      B,(IX+6)
042C60 D9          1445*    			EXX
042C61 DD 17 00    1446*    			LD	DE, (IX+0)
042C64 D9          1447*    			EXX
042C65 DD 17 03    1448*    			LD	DE, (IX+3)
042C68 C9          1449*    			RET
042C69             1450*    ;
042C69             1451*    ;CON_FP - Get unsigned numeric constant from ASCII string.
042C69             1452*    ;   Inputs: ASCII string at (IX).
042C69             1453*    ;  Outputs: Variable-type result in HLH'L'C
042C69             1454*    ;           IX updated (points to delimiter)
042C69             1455*    ;           A7 = 0 (numeric marker)
042C69             1456*    ;
042C69 CD 9F 2E 04 1457*    CON_FP:			CALL    ZERO_FP            ;INITIALISE TO ZERO
042C6D 0E 00       1458*            		LD      C,0             ;TRUNCATION COUNTER
042C6F CD FD 2C 04 1459*            		CALL    UINT          ;GET INTEGER PART
042C73 FE 2E       1460*            		CP      '.'
042C75 06 00       1461*            		LD      B,0             ;DECL. PLACE COUNTER
042C77 CC FB 2C 04 1462*            		CALL    Z,NUMBIX        ;GET FRACTION PART
042C7B FE 45       1463*            		CP      'E'
042C7D 3E 00       1464*            		LD      A,0             ;INITIALISE EXPONENT
042C7F CC C9 2C 04 1465*            		CALL    Z,GETEXP        ;GET EXPONENT
042C83 CB 7C       1466*            		BIT     7,H
042C85 20 08       1467*            		JR      NZ,CON0         ;INTEGER OVERFLOW
042C87 B7          1468*            		OR      A
042C88 20 05       1469*            		JR      NZ,CON0         ;EXPONENT NON-ZERO
042C8A B8          1470*            		CP      B
042C8B 20 02       1471*            		JR      NZ,CON0         ;DECIMAL POINT
042C8D B9          1472*            		CP      C
042C8E C8          1473*            		RET     Z               ;INTEGER
042C8F 90          1474*    CON0:			SUB     B
042C90 81          1475*            		ADD     A,C
042C91 0E 9F       1476*            		LD      C,159
042C93 CD 02 2E 04 1477*            		CALL    FLOAT_
042C97 CB BC       1478*            		RES     7,H             ;DITCH IMPLIED 1
042C99 B7          1479*            		OR      A
042C9A C8          1480*            		RET     Z               ;DONE
042C9B FA A9 2C 04 1481*            		JP      M,CON2          ;NEGATIVE EXPONENT
042C9F CD 9B 2F 04 1482*            		CALL    POWR10
042CA3 CD 8A 25 04 1483*            		CALL    FMUL            ;SCALE
042CA7 AF          1484*            		XOR     A
042CA8 C9          1485*            		RET
042CA9 FE DA       1486*    CON2:			CP      -38
042CAB 38 0C       1487*            		JR      C,CON3          ;CAN'T SCALE IN ONE GO
042CAD ED 44       1488*            		NEG
042CAF CD 9B 2F 04 1489*            		CALL    POWR10
042CB3 CD E1 24 04 1490*            		CALL    FDIV            ;SCALE
042CB7 AF          1491*            		XOR     A
042CB8 C9          1492*            		RET
042CB9 F5          1493*    CON3:			PUSH    AF
042CBA 3E 26       1494*            		LD      A,38
042CBC CD 9B 2F 04 1495*            		CALL    POWR10
042CC0 CD E1 24 04 1496*            		CALL    FDIV
042CC4 F1          1497*            		POP     AF
042CC5 C6 26       1498*            		ADD     A,38
042CC7 18 E0       1499*            		JR      CON2
042CC9             1500*    ;
042CC9             1501*    ;GETEXP - Get decimal exponent from string
042CC9             1502*    ;     Inputs: ASCII string at (IX)
042CC9             1503*    ;             (IX points at 'E')
042CC9             1504*    ;             A = initial value
042CC9             1505*    ;    Outputs: A = new exponent
042CC9             1506*    ;             IX updated.
042CC9             1507*    ;   Destroys: A,A',IX,F,F'
042CC9             1508*    ;
042CC9 C5          1509*    GETEXP:			PUSH    BC              ;SAVE REGISTERS
042CCA 47          1510*            		LD      B,A             ;INITIAL VALUE
042CCB 0E 02       1511*            		LD      C,2             ;2 DIGITS MAX
042CCD DD 23       1512*            		INC     IX              ;BUMP PAST 'E'
042CCF CD B9 30 04 1513*            		CALL    SIGNQ
042CD3 08          1514*            		EX      AF,AF'          ;SAVE EXPONENT SIGN
042CD4 CD AF 30 04 1515*    GETEX1:			CALL    DIGITQ
042CD8 38 18       1516*            		JR      C,GETEX2
042CDA 78          1517*            		LD      A,B             ;B=B*10
042CDB 87          1518*            		ADD     A,A
042CDC 87          1519*            		ADD     A,A
042CDD 80          1520*            		ADD     A,B
042CDE 87          1521*            		ADD     A,A
042CDF 47          1522*            		LD      B,A
042CE0 DD 7E 00    1523*            		LD      A,(IX)          ;GET BACK DIGIT
042CE3 DD 23       1524*            		INC     IX
042CE5 E6 0F       1525*            		AND     0FH             ;MASK UNWANTED BITS
042CE7 80          1526*            		ADD     A,B             ;ADD IN DIGIT
042CE8 47          1527*            		LD      B,A
042CE9 0D          1528*            		DEC     C
042CEA F2 D4 2C 04 1529*            		JP      P,GETEX1
042CEE 06 64       1530*            		LD      B,100           ;FORCE OVERFLOW
042CF0 18 E2       1531*            		JR      GETEX1
042CF2 08          1532*    GETEX2:			EX      AF,AF'          ;RESTORE SIGN
042CF3 FE 2D       1533*            		CP      '-'
042CF5 78          1534*            		LD      A,B
042CF6 C1          1535*            		POP     BC              ;RESTORE
042CF7 C0          1536*            		RET     NZ
042CF8 ED 44       1537*            		NEG                     ;NEGATE EXPONENT
042CFA C9          1538*            		RET
042CFB             1539*    ;
042CFB             1540*    ;UINT: Get unsigned integer from string.
042CFB             1541*    ;    Inputs: string at (IX)
042CFB             1542*    ;            C = truncated digit count
042CFB             1543*    ;                (initially zero)
042CFB             1544*    ;            B = total digit count
042CFB             1545*    ;            HLH'L' = initial value
042CFB             1546*    ;   Outputs: HLH'L' = number (binary integer)
042CFB             1547*    ;            A = delimiter.
042CFB             1548*    ;            B, C & IX updated
042CFB             1549*    ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
042CFB             1550*    ;
042CFB DD 23       1551*    NUMBIX:			INC     IX
042CFD CD AF 30 04 1552*    UINT:			CALL    DIGITQ
042D01 D8          1553*            		RET     C
042D02 04          1554*            		INC     B               ;INCREMENT DIGIT COUNT
042D03 DD 23       1555*            		INC     IX
042D05 CD F8 2E 04 1556*            		CALL    X10             ;*10 & COPY OLD VALUE
042D09 38 15       1557*            		JR      C,NUMB1         ;OVERFLOW
042D0B 0D          1558*            		DEC     C               ;SEE IF TRUNCATED
042D0C 0C          1559*            		INC     C
042D0D 20 11       1560*            		JR      NZ,NUMB1        ;IMPORTANT!
042D0F E6 0F       1561*            		AND     0FH
042D11 D9          1562*            		EXX
042D12 06 00       1563*            		LD      B,0
042D14 4F          1564*            		LD      C,A
042D15 52 09       1565*            		ADD.S   HL,BC           ;ADD IN DIGIT
042D17 D9          1566*            		EXX
042D18 30 E3       1567*            		JR      NC,UINT
042D1A 52 23       1568*            		INC.S   HL              ;CARRY
042D1C 7C          1569*            		LD      A,H
042D1D B5          1570*            		OR      L
042D1E 20 DD       1571*            		JR      NZ,UINT
042D20 0C          1572*    NUMB1:			INC     C               ;TRUNCATION COUNTER
042D21 CD 56 2E 04 1573*            		CALL    SWAP1           ;RESTORE PREVIOUS VALUE
042D25 18 D6       1574*            		JR      UINT
042D27             1575*    ;
042D27             1576*    ;FIX - Fix number to specified exponent value.
042D27             1577*    ;    Inputs: HLH'L'C = +ve non-zero number (floated)
042D27             1578*    ;            A = desired exponent (A>C)
042D27             1579*    ;   Outputs: HLH'L'C = fixed number (unsigned)
042D27             1580*    ;            fraction shifted into B'C'
042D27             1581*    ;            A'F' positive if integer input
042D27             1582*    ;  Destroys: C,H,L,A',B',C',H',L',F,F'
042D27             1583*    ;
042D27 08          1584*    FIX:			EX      AF,AF'
042D28 AF          1585*            		XOR     A
042D29 08          1586*            		EX      AF,AF'
042D2A CB FC       1587*            		SET     7,H             ;IMPLIED 1
042D2C CD 5B 2E 04 1588*    FIX1:			CALL    DIV2
042D30 B9          1589*            		CP      C
042D31 C8          1590*            		RET     Z
042D32 D2 2C 2D 04 1591*            		JP      NC,FIX1
042D36 C3 6A 2E 04 1592*            		JP      OFLOW
042D3A             1593*    ;
042D3A             1594*    ;SFIX - Convert to integer if necessary.
042D3A             1595*    ;    Input: Variable-type number in HLH'L'C
042D3A             1596*    ;   Output: Integer in HLH'L', C=0
042D3A             1597*    ; Destroys: A,C,H,L,A',B',C',H',L',F,F'
042D3A             1598*    ;
042D3A             1599*    ;NEGATE - Negate HLH'L'
042D3A             1600*    ;    Destroys: H,L,H',L',F
042D3A             1601*    ;
042D3A CD 53 2E 04 1602*    FIX2:			CALL    SWAP_FP
042D3E CD 46 2D 04 1603*            		CALL    SFIX_FP
042D42 CD 53 2E 04 1604*            		CALL    SWAP_FP
042D46 0D          1605*    SFIX_FP:			DEC     C
042D47 0C          1606*            		INC     C
042D48 C8          1607*            		RET     Z               ;INTEGER/ZERO
042D49 CB 7C       1608*            		BIT     7,H             ;SIGN
042D4B F5          1609*            		PUSH    AF
042D4C 3E 9F       1610*            		LD      A,159
042D4E CD 27 2D 04 1611*            		CALL    FIX
042D52 F1          1612*            		POP     AF
042D53 0E 00       1613*            		LD      C,0
042D55 C8          1614*            		RET     Z
042D56 B7          1615*    NEGATE:			OR      A               ;CLEAR CARRY
042D57 D9          1616*            		EXX
042D58 D5          1617*    NEG0:			PUSH    DE
042D59 EB          1618*            		EX      DE,HL
042D5A 21 00 00 00 1619*            		LD      HL,0
042D5E 52 ED 52    1620*            		SBC.S   HL,DE
042D61 D1          1621*            		POP     DE
042D62 D9          1622*            		EXX
042D63 D5          1623*            		PUSH    DE
042D64 EB          1624*            		EX      DE,HL
042D65 21 00 00 00 1625*            		LD      HL,0
042D69 52 ED 52    1626*            		SBC.S   HL,DE
042D6C D1          1627*            		POP     DE
042D6D C9          1628*            		RET
042D6E             1629*    ;
042D6E             1630*    ;NEG - Negate HLH'L'B'C'
042D6E             1631*    ;    Also complements A (used in FADD)
042D6E             1632*    ;    Destroys: A,H,L,B',C',H',L',F
042D6E             1633*    ;
042D6E D9          1634*    NEG_:			EXX
042D6F 2F          1635*            		CPL
042D70 E5          1636*            		PUSH    HL
042D71 B7          1637*            		OR      A               ;CLEAR CARRY
042D72 21 00 00 00 1638*            		LD      HL,0
042D76 52 ED 42    1639*            		SBC.S   HL,BC
042D79 44          1640*            		LD      B,H
042D7A 4D          1641*            		LD      C,L
042D7B E1          1642*            		POP     HL
042D7C 18 DA       1643*            		JR      NEG0
042D7E             1644*    ;
042D7E             1645*    ;SCALE - Trig scaling.
042D7E             1646*    ;MOD48 - 48-bit floating-point "modulus" (remainder).
042D7E             1647*    ;   Inputs: HLH'L'C unsigned floating-point dividend
042D7E             1648*    ;           DED'E'B'C'B unsigned 48-bit FP divisor
042D7E             1649*    ;  Outputs: HLH'L'C floating point remainder (H7=1)
042D7E             1650*    ;           E = quotient (bit 7 is sticky)
042D7E             1651*    ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
042D7E             1652*    ;FLO48 - Float unsigned number (48 bits)
042D7E             1653*    ;    Input/output in HLH'L'B'C'C
042D7E             1654*    ;   Destroys: C,H,L,B',C',H',L',F
042D7E             1655*    ;
042D7E 3E 96       1656*    SCALE:			LD      A,150
042D80 B9          1657*            		CP      C
042D81 3E 17       1658*            		LD      A,ACLOST
042D83 DA F9 22 04 1659*            		JP      C,ERROR_FP_         ;"Accuracy lost"
042D87 CD C4 28 04 1660*            		CALL    PIBY4
042D8B D9          1661*            		EXX
042D8C 01 69 21 00 1662*            		LD      BC,2169H        ;3.141592653589793238
042D90 D9          1663*            		EXX
042D91 CB FA       1664*    MOD48:			SET     7,D             ;IMPLIED 1
042D93 CB FC       1665*            		SET     7,H
042D95 79          1666*            		LD      A,C
042D96 0E 00       1667*            		LD      C,0             ;INIT QUOTIENT
042D98 DD 21 00 00 1668*            		LD      IX,0
       00          
042D9D DD E5       1669*            		PUSH    IX              ;PUT ZERO ON STACK
042D9F B8          1670*            		CP      B
042DA0 38 46       1671*            		JR      C,MOD485        ;DIVIDEND<DIVISOR
042DA2 D9          1672*    MOD481:			EXX                     ;CARRY=0 HERE
042DA3 E3          1673*            		EX      (SP),HL
042DA4 52 ED 42    1674*            		SBC.S   HL,BC
042DA7 E3          1675*            		EX      (SP),HL
042DA8 52 ED 52    1676*            		SBC.S   HL,DE
042DAB D9          1677*            		EXX
042DAC 52 ED 52    1678*            		SBC.S   HL,DE
042DAF 30 0C       1679*            		JR      NC,MOD482       ;DIVIDEND>=DIVISOR
042DB1 D9          1680*            		EXX
042DB2 E3          1681*            		EX      (SP),HL
042DB3 52 09       1682*            		ADD.S   HL,BC
042DB5 E3          1683*            		EX      (SP),HL
042DB6 52 ED 5A    1684*            		ADC.S   HL,DE
042DB9 D9          1685*            		EXX
042DBA 52 ED 5A    1686*            		ADC.S   HL,DE
042DBD 3F          1687*    MOD482:			CCF
042DBE CB 11       1688*            		RL      C               ;QUOTIENT
042DC0 30 02       1689*            		JR      NC,MOD483
042DC2 CB F9       1690*            		SET     7,C             ;STICKY BIT
042DC4 3D          1691*    MOD483:			DEC     A
042DC5 B8          1692*            		CP      B
042DC6 38 1F       1693*            		JR      C,MOD484        ;DIVIDEND<DIVISOR
042DC8 E3          1694*            		EX      (SP),HL
042DC9 52 29       1695*            		ADD.S   HL,HL           ;DIVIDEND * 2
042DCB E3          1696*            		EX      (SP),HL
042DCC D9          1697*            		EXX
042DCD 52 ED 6A    1698*            		ADC.S   HL,HL
042DD0 D9          1699*            		EXX
042DD1 52 ED 6A    1700*            		ADC.S   HL,HL
042DD4 30 CC       1701*            		JR      NC,MOD481       ;AGAIN
042DD6 B7          1702*            		OR      A
042DD7 D9          1703*            		EXX
042DD8 E3          1704*            		EX      (SP),HL
042DD9 52 ED 42    1705*            		SBC.S   HL,BC           ;OVERFLOW, SO SUBTRACT
042DDC E3          1706*            		EX      (SP),HL
042DDD 52 ED 52    1707*            		SBC.S   HL,DE
042DE0 D9          1708*            		EXX
042DE1 52 ED 52    1709*            		SBC.S   HL,DE
042DE4 B7          1710*            		OR      A
042DE5 18 D6       1711*            		JR      MOD482
042DE7             1712*    ;
042DE7 3C          1713*    MOD484:			INC     A
042DE8 59          1714*    MOD485:			LD      E,C             ;QUOTIENT
042DE9 4F          1715*            		LD      C,A             ;REMAINDER EXPONENT
042DEA D9          1716*            		EXX
042DEB C1          1717*            		POP     BC
042DEC D9          1718*            		EXX
042DED CB 7C       1719*    FLO48:			BIT     7,H
042DEF C0          1720*            		RET     NZ
042DF0 D9          1721*            		EXX
042DF1 CB 21       1722*            		SLA     C
042DF3 CB 10       1723*            		RL      B
042DF5 52 ED 6A    1724*            		ADC.S   HL,HL
042DF8 D9          1725*            		EXX
042DF9 52 ED 6A    1726*            		ADC.S   HL,HL
042DFC 0D          1727*            		DEC     C
042DFD C2 ED 2D 04 1728*            		JP      NZ,FLO48
042E01 C9          1729*            		RET
042E02             1730*    ;
042E02             1731*    ;Float unsigned number
042E02             1732*    ;    Input/output in HLH'L'C
042E02             1733*    ;   Destroys: C,H,L,H',L',F
042E02             1734*    ;
042E02 CB 7C       1735*    FLOAT_:			BIT     7,H
042E04 C0          1736*            		RET     NZ
042E05 D9          1737*            		EXX                     ;SAME AS "X2"
042E06 52 29       1738*            		ADD.S   HL,HL           ;TIME-CRITICAL
042E08 D9          1739*            		EXX                     ;REGION
042E09 52 ED 6A    1740*            		ADC.S   HL,HL           ;(BENCHMARKS)
042E0C 0D          1741*            		DEC     C
042E0D C2 02 2E 04 1742*            		JP      NZ,FLOAT_
042E11 C9          1743*            		RET
042E12             1744*    ;
042E12             1745*    ;SFLOAT - Convert to floating-point if necessary.
042E12             1746*    ;    Input: Variable-type number in HLH'L'C
042E12             1747*    ;    Output: Floating-point in HLH'L'C
042E12             1748*    ;    Destroys: A,C,H,L,H',L',F
042E12             1749*    ;
042E12 08          1750*    FLOATA:			EX      AF,AF'
042E13             1751*            		; ADD     A,(RTABLE-DTABLE)/3
042E13 C6 2A       1752*            		ADD     A,RTABLE-DTABLE/3 ; ez80asm doesn't do nested expressions
042E15 08          1753*            		EX      AF,AF'
042E16 CD 53 2E 04 1754*    FLOAT2:			CALL    SWAP_FP
042E1A CD 22 2E 04 1755*            		CALL    SFLOAT_FP
042E1E CD 53 2E 04 1756*            		CALL    SWAP_FP
042E22 0D          1757*    SFLOAT_FP:			DEC     C
042E23 0C          1758*            		INC     C
042E24 C0          1759*            		RET     NZ              ;ALREADY FLOATING-POINT
042E25 CD 7B 2E 04 1760*            		CALL    TEST_FP
042E29 C8          1761*            		RET     Z               ;ZERO
042E2A 7C          1762*            		LD      A,H
042E2B B7          1763*            		OR      A
042E2C FC 56 2D 04 1764*            		CALL    M,NEGATE
042E30 0E 9F       1765*            		LD      C,159
042E32 CD 02 2E 04 1766*            		CALL    FLOAT_
042E36 B7          1767*            		OR      A
042E37 F8          1768*            		RET     M               ;NEGATIVE
042E38 CB BC       1769*            		RES     7,H
042E3A C9          1770*            		RET
042E3B             1771*    ;
042E3B             1772*    ;ROUND UP
042E3B             1773*    ;Return with carry set if 32-bit overflow
042E3B             1774*    ;   Destroys: H,L,B',C',H',L',F
042E3B             1775*    ;
042E3B D9          1776*    ADD1_FP:			EXX
042E3C 01 01 00 00 1777*            		LD      BC,1
042E40 52 09       1778*            		ADD.S   HL,BC
042E42 D9          1779*            		EXX
042E43 D0          1780*            		RET     NC
042E44 C5          1781*            		PUSH    BC
042E45 01 01 00 00 1782*            		LD      BC,1
042E49 52 09       1783*            		ADD.S   HL,BC
042E4B C1          1784*            		POP     BC
042E4C C9          1785*            		RET
042E4D             1786*    ;
042E4D             1787*    ;ODD - Add one if even, leave alone if odd.
042E4D             1788*    ; (Used to perform unbiassed rounding, i.e.
042E4D             1789*    ;  number is rounded up half the time)
042E4D             1790*    ;    Destroys: L',F (carry cleared)
042E4D             1791*    ;
042E4D B7          1792*    ODD:			OR      A               ;CLEAR CARRY
042E4E D9          1793*            		EXX
042E4F CB C5       1794*            		SET     0,L             ;MAKE ODD
042E51 D9          1795*            		EXX
042E52 C9          1796*            		RET
042E53             1797*    ;
042E53             1798*    ;SWAP_FP - Swap arguments.
042E53             1799*    ;    Exchanges DE,HL D'E',H'L' and B,C
042E53             1800*    ;    Destroys: A,B,C,D,E,H,L,D',E',H',L'
042E53             1801*    ;SWAP1 - Swap DEHL with D'E'H'L'
042E53             1802*    ;    Destroys: D,E,H,L,D',E',H',L'
042E53             1803*    ;
042E53 79          1804*    SWAP_FP:			LD      A,C
042E54 48          1805*            		LD      C,B
042E55 47          1806*            		LD      B,A
042E56 EB          1807*    SWAP1:			EX      DE,HL
042E57 D9          1808*            		EXX
042E58 EB          1809*            		EX      DE,HL
042E59 D9          1810*            		EXX
042E5A C9          1811*            		RET
042E5B             1812*    ;
042E5B             1813*    ; DIV2 - destroys C,H,L,A',B',C',H',L',F,F'
042E5B             1814*    ; INCC - destroys C,F
042E5B             1815*    ; OFLOW
042E5B             1816*    ;
042E5B CD 14 2F 04 1817*    DIV2:			CALL    D2
042E5F D9          1818*            		EXX
042E60 CB 18       1819*            		RR      B
042E62 CB 19       1820*            		RR      C
042E64 08          1821*            		EX      AF,AF'
042E65 B0          1822*            		OR      B
042E66 08          1823*            		EX      AF,AF'
042E67 D9          1824*            		EXX
042E68 0C          1825*    INCC:			INC     C
042E69 C0          1826*            		RET     NZ
042E6A 3E 14       1827*    OFLOW:			LD      A,TOOBIG_FP
042E6C C3 F9 22 04 1828*            		JP      ERROR_FP_           ;"Too big"
042E70             1829*    ;
042E70             1830*    ; FTEST - Test for zero & sign
042E70             1831*    ;     Output: A=0 if zero, A=&40 if +ve, A=&C0 if -ve
042E70             1832*    ;
042E70 CD 7B 2E 04 1833*    FTEST_FP:			CALL    TEST_FP
042E74 C8          1834*            		RET     Z
042E75 7C          1835*            		LD      A,H
042E76 E6 80       1836*            		AND     10000000B
042E78 F6 40       1837*            		OR      01000000B
042E7A C9          1838*            		RET
042E7B             1839*    ;
042E7B             1840*    ; TEST_FP - Test HLH'L' for zero.
042E7B             1841*    ;     Output: Z-flag set & A=0 if HLH'L'=0
042E7B             1842*    ;     Destroys: A,F
042E7B             1843*    ;
042E7B 7C          1844*    TEST_FP:			LD      A,H
042E7C B5          1845*            		OR      L
042E7D D9          1846*            		EXX
042E7E B4          1847*            		OR      H
042E7F B5          1848*            		OR      L
042E80 D9          1849*            		EXX
042E81 C9          1850*            		RET
042E82             1851*    ;
042E82             1852*    ; FCOMP - Compare two numbers
042E82             1853*    ;     Output: A=0 if equal, A=&40 if L>R, A=&C0 if L<R
042E82             1854*    ;
042E82 78          1855*    FCOMP_FP:			LD      A,B
042E83 B1          1856*            		OR      C               ;Both integer?
042E84 20 0B       1857*            		JR      NZ,FCOMP1
042E86 CD 9B 2E 04 1858*            		CALL    ICP
042E8A 3E 00       1859*    FCOMP0:			LD      A,0
042E8C C8          1860*            		RET     Z               ;Equal
042E8D 3E 80       1861*            		LD      A,80H
042E8F 1F          1862*            		RRA
042E90 C9          1863*            		RET
042E91             1864*    ;
042E91 CD 16 2E 04 1865*    FCOMP1:			CALL    FLOAT2          ;Float both
042E95 CD A9 2E 04 1866*            		CALL    FCP
042E99 18 EF       1867*            		JR      FCOMP0
042E9B             1868*    ;
042E9B             1869*    ; Integer and floating point compare.
042E9B             1870*    ; Sets carry & zero flags according to HLH'L'C-DED'E'B
042E9B             1871*    ; Result pre-set to FALSE
042E9B             1872*    ; ICP1, FCP1 destroy A,F
042E9B             1873*    ;
042E9B             1874*    ; ZERO - Return zero.
042E9B             1875*    ;  Destroys: A,C,H,L,H',L'
042E9B             1876*    ;
042E9B CD CE 2E 04 1877*    ICP:			CALL    ICP1
042E9F 3E 00       1878*    ZERO_FP:			LD      A,0
042EA1 D9          1879*            		EXX
042EA2 67          1880*            		LD      H,A
042EA3 6F          1881*    	       		LD      L,A
042EA4 D9          1882*            		EXX
042EA5 67          1883*          			LD      H,A
042EA6 6F          1884*         			LD      L,A
042EA7 4F          1885*    	    		LD      C,A
042EA8 C9          1886*            		RET
042EA9             1887*    ;
042EA9 CD C0 2E 04 1888*    FCP:			CALL    FCP1
042EAD 18 F0       1889*            		JR      ZERO_FP            ;PRESET FALSE
042EAF             1890*    ;
042EAF 79          1891*    FCP0:			LD      A,C
042EB0 B8          1892*            		CP      B               ;COMPARE EXPONENTS
042EB1 C0          1893*            		RET     NZ
042EB2             1894*    ICP0:
042EB2 52 ED 52    1895*    			SBC.S   HL,DE           ;COMP MANTISSA MSB
042EB5 52 19       1896*            		ADD.S   HL,DE
042EB7 C0          1897*            		RET     NZ
042EB8 D9          1898*            		EXX
042EB9 52 ED 52    1899*            		SBC.S   HL,DE           ;COMP MANTISSA LSB
042EBC 52 19       1900*            		ADD.S   HL,DE
042EBE D9          1901*            		EXX
042EBF C9          1902*            		RET
042EC0             1903*    ;
042EC0 7C          1904*    FCP1:			LD      A,H
042EC1 AA          1905*            		XOR     D
042EC2 7C          1906*            		LD      A,H
042EC3 17          1907*            		RLA
042EC4 F8          1908*            		RET     M
042EC5 30 E8       1909*            		JR      NC,FCP0
042EC7 CD AF 2E 04 1910*            		CALL    FCP0
042ECB C8          1911*            		RET     Z               ;** V0.1 BUG FIX
042ECC 3F          1912*            		CCF
042ECD C9          1913*            		RET
042ECE             1914*    ;
042ECE 7C          1915*    ICP1:			LD      A,H
042ECF AA          1916*            		XOR     D
042ED0 F2 B2 2E 04 1917*            		JP      P,ICP0
042ED4 7C          1918*            		LD      A,H
042ED5 17          1919*            		RLA
042ED6 C9          1920*            		RET
042ED7             1921*    ;
042ED7             1922*    ; ADD - Integer add.
042ED7             1923*    ; Carry, sign & zero flags valid on exit
042ED7             1924*    ;     Destroys: H,L,H',L',F
042ED7             1925*    ;
042ED7 05          1926*    X10B:			DEC     B
042ED8 0C          1927*            		INC     C
042ED9 CD 20 2F 04 1928*    X5:			CALL    COPY0
042EDD CD 13 2F 04 1929*            		CALL    D2C
042EE1 CD 13 2F 04 1930*            		CALL    D2C
042EE5 08          1931*            		EX      AF,AF'          ;SAVE CARRY
042EE6 D9          1932*    ADD_:			EXX
042EE7 52 19       1933*            		ADD.S   HL,DE
042EE9 D9          1934*            		EXX
042EEA 52 ED 5A    1935*            		ADC.S   HL,DE
042EED C9          1936*            		RET
042EEE             1937*    ;
042EEE             1938*    ; SUB - Integer subtract.
042EEE             1939*    ; Carry, sign & zero flags valid on exit
042EEE             1940*    ;     Destroys: H,L,H',L',F
042EEE             1941*    ;
042EEE D9          1942*    SUB_:			EXX
042EEF B7          1943*            		OR      A
042EF0 52 ED 52    1944*            		SBC.S   HL,DE
042EF3 D9          1945*            		EXX
042EF4 52 ED 52    1946*            		SBC.S   HL,DE
042EF7 C9          1947*            		RET
042EF8             1948*    ;
042EF8             1949*    ; X10 - unsigned integer * 10
042EF8             1950*    ;    Inputs: HLH'L' initial value
042EF8             1951*    ;   Outputs: DED'E' = initial HLH'L'
042EF8             1952*    ;            Carry bit set if overflow
042EF8             1953*    ;            If carry not set HLH'L'=result
042EF8             1954*    ;  Destroys: D,E,H,L,D',E',H',L',F
042EF8             1955*    ; X2 - Multiply HLH'L' by 2 as 32-bit integer.
042EF8             1956*    ;     Carry set if MSB=1 before shift.
042EF8             1957*    ;     Sign set if MSB=1 after shift.
042EF8             1958*    ;     Destroys: H,L,H',L',F
042EF8             1959*    ;
042EF8 CD 20 2F 04 1960*    X10:			CALL    COPY0           ;DED'E'=HLH'L'
042EFC CD 0B 2F 04 1961*            		CALL    X2
042F00 D8          1962*            		RET     C               ;TOO BIG
042F01 CD 0B 2F 04 1963*            		CALL    X2
042F05 D8          1964*            		RET     C
042F06 CD E6 2E 04 1965*            		CALL    ADD_
042F0A D8          1966*            		RET     C
042F0B D9          1967*    X2:			EXX
042F0C 52 29       1968*            		ADD.S   HL,HL
042F0E D9          1969*            		EXX
042F0F 52 ED 6A    1970*            		ADC.S   HL,HL
042F12 C9          1971*            		RET
042F13             1972*    ;
042F13             1973*    ; D2 - Divide HLH'L' by 2 as 32-bit integer.
042F13             1974*    ;     Carry set if LSB=1 before shift.
042F13             1975*    ;     Destroys: H,L,H',L',F
042F13             1976*    ;
042F13 0C          1977*    D2C:			INC     C
042F14 CB 3C       1978*    D2:			SRL     H
042F16 CB 1D       1979*            		RR      L
042F18 D9          1980*            		EXX
042F19 CB 1C       1981*            		RR      H
042F1B CB 1D       1982*            		RR      L
042F1D D9          1983*            		EXX
042F1E C9          1984*            		RET
042F1F             1985*    ;
042F1F             1986*    ; COPY - COPY HLH'L'C INTO DED'E'B
042F1F             1987*    ;   Destroys: B,C,D,E,H,L,D',E',H',L'
042F1F             1988*    ;
042F1F 41          1989*    COPY_:			LD      B,C
042F20 54          1990*    COPY0:			LD      D,H
042F21 5D          1991*            		LD      E,L
042F22 D9          1992*            		EXX
042F23 54          1993*            		LD      D,H
042F24 5D          1994*            		LD      E,L
042F25 D9          1995*            		EXX
042F26 C9          1996*            		RET
042F27             1997*    ;
042F27             1998*    ; SQUARE - PUSH X*X
042F27             1999*    ; PUSH5 - PUSH HLH'L'C ONTO STACK.
042F27             2000*    ;   Destroys: SP,IX
042F27             2001*    ;
042F27 CD 1F 2F 04 2002*    SQUARE:			CALL    COPY_
042F2B CD 8A 25 04 2003*            		CALL    FMUL
042F2F DD E1       2004*    PUSH5:			POP     IX              ;RETURN ADDRESS
042F31 C5          2005*            		PUSH    BC
042F32 E5          2006*            		PUSH    HL
042F33 D9          2007*            		EXX
042F34 E5          2008*            		PUSH    HL
042F35 D9          2009*            		EXX
042F36 DD E9       2010*            		JP      (IX)            ;"RETURN"
042F38             2011*    ;
042F38             2012*    ; POP5 - POP DED'E'B OFF STACK.
042F38             2013*    ;   Destroys: A,B,D,E,D',E',SP,IX
042F38             2014*    ;
042F38 DD E1       2015*    POP5:			POP     IX              ;RETURN ADDRESS
042F3A D9          2016*            		EXX
042F3B D1          2017*            		POP     DE
042F3C D9          2018*            		EXX
042F3D D1          2019*            		POP     DE
042F3E 79          2020*            		LD      A,C
042F3F C1          2021*            		POP     BC
042F40 41          2022*            		LD      B,C
042F41 4F          2023*            		LD      C,A
042F42 DD E9       2024*            		JP      (IX)            ;"RETURN"
042F44             2025*    ;
042F44             2026*    ; RATIO - Calculate (X-1)/(X+1)
042F44             2027*    ;     Inputs: X in HLH'L'C
042F44             2028*    ;    Outputs: (X-1)/(X+1) in HLH'L'C
042F44             2029*    ;   Destroys: Everything except IY,SP,I
042F44             2030*    ;
042F44 CD 2F 2F 04 2031*    RATIO:			CALL    PUSH5           ;SAVE X
042F48 CD B7 28 04 2032*            		CALL    DONE
042F4C CD 78 24 04 2033*            		CALL    FADD
042F50 CD 38 2F 04 2034*            		CALL    POP5            ;RESTORE X
042F54 CD 2F 2F 04 2035*            		CALL    PUSH5           ;SAVE X+1
042F58 CD 53 2E 04 2036*            		CALL    SWAP_FP
042F5C CD B7 28 04 2037*            		CALL    DONE
042F60 CD 5F 24 04 2038*            		CALL    FSUB
042F64 CD 38 2F 04 2039*            		CALL    POP5            ;RESTORE X+1
042F68 C3 E1 24 04 2040*            		JP      FDIV
042F6C             2041*    ;
042F6C             2042*    ; POLY - Evaluate a polynomial.
042F6C             2043*    ;     Inputs: X in HLH'L'C and also stored at (SP+2)
042F6C             2044*    ;             Polynomial coefficients follow call.
042F6C             2045*    ;    Outputs: Result in HLH'L'C
042F6C             2046*    ;   Destroys: Everything except IY,SP,I
042F6C             2047*    ; Routine terminates on finding a coefficient >=1.
042F6C             2048*    ; Note: The last coefficient is EXECUTED on return
042F6C             2049*    ;       so must contain only innocuous bytes!
042F6C             2050*    ;
042F6C DD 21 03 00 2051*    POLY:			LD      IX, 3				; Advance the SP to the return address
       00          
042F71 DD 39       2052*            		ADD     IX, SP
042F73 DD E3       2053*            		EX      (SP), IX			; IX: Points to the inline list of coefficients
042F75             2054*    ;
042F75 CD 4B 2C 04 2055*            		CALL    DLOAD5          		; Load the first coefficient from (IX)
042F79 CD 8A 25 04 2056*    POLY1:			CALL    FMUL
042F7D 11 05 00 00 2057*            		LD      DE, 5				; Skip to the next coefficient
042F81 DD 19       2058*            		ADD     IX, DE
042F83 CD 4B 2C 04 2059*            		CALL    DLOAD5          		; Load the second coefficient from (IX)
042F87 DD E3       2060*            		EX      (SP), IX			; Restore the SP just in case we need to return
042F89 04          2061*            		INC     B
042F8A 05          2062*            		DEC     B               		; Test B for end byte (80h)
042F8B FA 78 24 04 2063*            		JP      M,FADD				; Yes, so add and return
042F8F CD 78 24 04 2064*            		CALL    FADD				; No, so add
042F93 CD 5D 2C 04 2065*            		CALL    DLOAD5_SPL			; Load X from SP
042F97 DD E3       2066*            		EX      (SP), IX			; IX: Points to the inline list of coefficients
042F99 18 DE       2067*            		JR      POLY1				; And loop
042F9B             2068*    ;
042F9B             2069*    ; POWR10 - Calculate power of ten.
042F9B             2070*    ;     Inputs: A=power of 10 required (A<128)
042F9B             2071*    ;             A=binary exponent to be exceeded (A>=128)
042F9B             2072*    ;    Outputs: DED'E'B = result
042F9B             2073*    ;             A = actual power of ten returned
042F9B             2074*    ;   Destroys: A,B,D,E,A',D',E',F,F'
042F9B             2075*    ;
042F9B 3C          2076*    POWR10:			INC     A
042F9C 08          2077*            		EX      AF,AF'
042F9D E5          2078*            		PUSH    HL
042F9E D9          2079*            		EXX
042F9F E5          2080*            		PUSH    HL
042FA0 D9          2081*            		EXX
042FA1 CD B7 28 04 2082*            		CALL    DONE
042FA5 CD 53 2E 04 2083*            		CALL    SWAP_FP
042FA9 AF          2084*            		XOR     A
042FAA 08          2085*    POWR11:			EX      AF,AF'
042FAB 3D          2086*            		DEC     A
042FAC 28 26       2087*            		JR      Z,POWR14        ;EXIT TYPE 1
042FAE F2 B6 2F 04 2088*            		JP      P,POWR13
042FB2 B9          2089*            		CP      C
042FB3 38 1F       2090*            		JR      C,POWR14        ;EXIT TYPE 2
042FB5 3C          2091*            		INC     A
042FB6 08          2092*    POWR13:			EX      AF,AF'
042FB7 3C          2093*            		INC     A
042FB8 CB FC       2094*            		SET     7,H
042FBA CD D9 2E 04 2095*            		CALL    X5
042FBE 30 06       2096*            		JR      NC,POWR12
042FC0 08          2097*            		EX      AF,AF'
042FC1 CD 13 2F 04 2098*            		CALL    D2C
042FC5 08          2099*            		EX      AF,AF'
042FC6 08          2100*    POWR12:			EX      AF,AF'
042FC7 DC 3B 2E 04 2101*            		CALL    C,ADD1_FP          ;ROUND UP
042FCB 0C          2102*            		INC     C
042FCC FA AA 2F 04 2103*            		JP      M,POWR11
042FD0 C3 6A 2E 04 2104*            		JP      OFLOW
042FD4 CD 53 2E 04 2105*    POWR14:			CALL    SWAP_FP
042FD8 CB BA       2106*            		RES     7,D
042FDA D9          2107*            		EXX
042FDB E1          2108*            		POP     HL
042FDC D9          2109*            		EXX
042FDD E1          2110*            		POP     HL
042FDE 08          2111*            		EX      AF,AF'
042FDF C9          2112*            		RET
042FE0             2113*    ;
042FE0             2114*    ; DIVA, DIVB - DIVISION PRIMITIVE.
042FE0             2115*    ;     Function: D'E'DE = H'L'HLD'E'DE / B'C'BC
042FE0             2116*    ;               Remainder in H'L'HL
042FE0             2117*    ;     Inputs: A = loop counter (normally -32)
042FE0             2118*    ;     Destroys: A,D,E,H,L,D',E',H',L',F
042FE0             2119*    ;
042FE0 B7          2120*    DIVA:			OR      A               ;CLEAR CARRY
042FE1             2121*    DIV0:
042FE1 52 ED 42    2122*    			SBC.S   HL,BC           ;DIVIDEND-DIVISOR
042FE4 D9          2123*            		EXX
042FE5 52 ED 42    2124*            		SBC.S   HL,BC
042FE8 D9          2125*            		EXX
042FE9 30 07       2126*            		JR      NC,DIV1
042FEB 52 09       2127*            		ADD.S   HL,BC           ;DIVIDEND+DIVISOR
042FED D9          2128*            		EXX
042FEE 52 ED 4A    2129*            		ADC.S   HL,BC
042FF1 D9          2130*            		EXX
042FF2 3F          2131*    DIV1:			CCF
042FF3 CB 13       2132*    DIVC:			RL      E               ;SHIFT RESULT INTO DE
042FF5 CB 12       2133*            		RL      D
042FF7 D9          2134*            		EXX
042FF8 CB 13       2135*            		RL      E
042FFA CB 12       2136*            		RL      D
042FFC D9          2137*            		EXX
042FFD 3C          2138*            		INC     A
042FFE F0          2139*            		RET     P
042FFF             2140*    DIVB:
042FFF 52 ED 6A    2141*    			ADC.S   HL,HL           ;DIVIDEND*2
043002 D9          2142*            		EXX
043003 52 ED 6A    2143*            		ADC.S   HL,HL
043006 D9          2144*            		EXX
043007 30 D8       2145*            		JR      NC,DIV0
043009 B7          2146*            		OR      A
04300A 52 ED 42    2147*            		SBC.S   HL,BC           ;DIVIDEND-DIVISOR
04300D D9          2148*            		EXX
04300E 52 ED 42    2149*            		SBC.S   HL,BC
043011 D9          2150*            		EXX
043012 37          2151*            		SCF
043013 C3 F3 2F 04 2152*            		JP      DIVC
043017             2153*    ;
043017             2154*    ;MULA, MULB - MULTIPLICATION PRIMITIVE.
043017             2155*    ;    Function: H'L'HLD'E'DE = B'C'BC * D'E'DE
043017             2156*    ;    Inputs: A = loop counter (usually -32)
043017             2157*    ;            H'L'HL = 0
043017             2158*    ;    Destroys: D,E,H,L,D',E',H',L',A,F
043017             2159*    ;
043017 B7          2160*    MULA:			OR      A               ;CLEAR CARRY
043018 D9          2161*    MUL0:			EXX
043019 CB 1A       2162*            		RR      D               ;MULTIPLIER/2
04301B CB 1B       2163*            		RR      E
04301D D9          2164*            		EXX
04301E CB 1A       2165*            		RR      D
043020 CB 1B       2166*            		RR      E
043022 30 07       2167*            		JR      NC,MUL1
043024 52 09       2168*            		ADD.S   HL,BC           ;ADD IN MULTIPLICAND
043026 D9          2169*            		EXX
043027 52 ED 4A    2170*            		ADC.S   HL,BC
04302A D9          2171*            		EXX
04302B 3C          2172*    MUL1:			INC     A
04302C F0          2173*            		RET     P
04302D D9          2174*    MULB:			EXX
04302E CB 1C       2175*            		RR      H               ;PRODUCT/2
043030 CB 1D       2176*            		RR      L
043032 D9          2177*            		EXX
043033 CB 1C       2178*            		RR      H
043035 CB 1D       2179*            		RR      L
043037 C3 18 30 04 2180*            		JP      MUL0
04303B             2181*    ;
04303B             2182*    ; SQRA, SQRB - SQUARE ROOT PRIMITIVES
04303B             2183*    ;     Function: B'C'BC = SQR (D'E'DE)
04303B             2184*    ;     Inputs: A = loop counter (normally -31)
04303B             2185*    ;             B'C'BCH'L'HL initialised to 0
04303B             2186*    ;   Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',F
04303B             2187*    ;
04303B             2188*    SQR1:
04303B 52 ED 42    2189*    			SBC.S   HL,BC
04303E D9          2190*            		EXX
04303F 52 ED 42    2191*            		SBC.S   HL,BC
043042 D9          2192*            		EXX
043043 0C          2193*            		INC     C
043044 30 09       2194*            		JR      NC,SQR2
043046 0D          2195*            		DEC     C
043047 52 09       2196*            		ADD.S   HL,BC
043049 D9          2197*            		EXX
04304A 52 ED 4A    2198*            		ADC.S   HL,BC
04304D D9          2199*            		EXX
04304E 0D          2200*            		DEC     C
04304F 3C          2201*    SQR2:			INC     A
043050 F0          2202*            		RET     P
043051 CB 21       2203*    SQRA:			SLA     C
043053 CB 10       2204*            		RL      B
043055 D9          2205*            		EXX
043056 CB 11       2206*            		RL      C
043058 CB 10       2207*            		RL      B
04305A D9          2208*            		EXX
04305B 0C          2209*            		INC     C
04305C CB 23       2210*            		SLA     E
04305E CB 12       2211*            		RL      D
043060 D9          2212*            		EXX
043061 CB 13       2213*            		RL      E
043063 CB 12       2214*            		RL      D
043065 D9          2215*            		EXX
043066 52 ED 6A    2216*            		ADC.S   HL,HL
043069 D9          2217*            		EXX
04306A 52 ED 6A    2218*            		ADC.S   HL,HL
04306D D9          2219*            		EXX
04306E CB 23       2220*            		SLA     E
043070 CB 12       2221*            		RL      D
043072 D9          2222*            		EXX
043073 CB 13       2223*            		RL      E
043075 CB 12       2224*            		RL      D
043077 D9          2225*            		EXX
043078 52 ED 6A    2226*            		ADC.S   HL,HL
04307B D9          2227*            		EXX
04307C 52 ED 6A    2228*            		ADC.S   HL,HL
04307F D9          2229*            		EXX
043080 D2 3B 30 04 2230*            		JP      NC,SQR1
043084 B7          2231*    SQR3:			OR      A
043085 52 ED 42    2232*            		SBC.S   HL,BC
043088 D9          2233*            		EXX
043089 52 ED 42    2234*            		SBC.S   HL,BC
04308C D9          2235*            		EXX
04308D 0C          2236*            		INC     C
04308E C3 4F 30 04 2237*            		JP      SQR2
043092             2238*    ;
043092             2239*    SQRB:
043092 52 29       2240*    			ADD.S   HL,HL
043094 D9          2241*            		EXX
043095 52 ED 6A    2242*            		ADC.S   HL,HL
043098 D9          2243*            		EXX
043099 38 E9       2244*            		JR      C,SQR3
04309B 3C          2245*            		INC     A
04309C 0C          2246*            		INC     C
04309D 52 ED 42    2247*            		SBC.S   HL,BC
0430A0 D9          2248*            		EXX
0430A1 52 ED 42    2249*            		SBC.S   HL,BC
0430A4 D9          2250*            		EXX
0430A5 D0          2251*            		RET     NC
0430A6 52 09       2252*            		ADD.S   HL,BC
0430A8 D9          2253*            		EXX
0430A9 52 ED 4A    2254*            		ADC.S   HL,BC
0430AC D9          2255*            		EXX
0430AD 0D          2256*            		DEC     C
0430AE C9          2257*            		RET
0430AF             2258*    ;
0430AF DD 7E 00    2259*    DIGITQ:			LD      A,(IX)
0430B2 FE 3A       2260*            		CP      '9'+1
0430B4 3F          2261*            		CCF
0430B5 D8          2262*            		RET     C
0430B6 FE 30       2263*            		CP      '0'
0430B8 C9          2264*            		RET
0430B9             2265*    ;
0430B9 DD 7E 00    2266*    SIGNQ:			LD      A,(IX)
0430BC DD 23       2267*            		INC     IX
0430BE FE 20       2268*            		CP      ' '
0430C0 28 F7       2269*            		JR      Z,SIGNQ
0430C2 FE 2B       2270*            		CP      '+'
0430C4 C8          2271*            		RET     Z
0430C5 FE 2D       2272*            		CP      '-'
0430C7 C8          2273*            		RET     Z
0430C8 DD 2B       2274*            		DEC     IX
0430CA C9          2275*            		RET
0430CB             0046         include "fpp_ext.inc"
0430CB             0001*    ; integer operations
0430CB             0002*    iand:	EQU 58	; AND (INTEGER)
0430CB             0003*    ibdiv:	EQU 59	; DIV
0430CB             0004*    ieor:	EQU 60	; EOR
0430CB             0005*    imod:	EQU 61	; MOD
0430CB             0006*    ior:	EQU 62	; OR
0430CB             0007*    ile:	EQU 63	; <=
0430CB             0008*    ine:	EQU 64	; <>
0430CB             0009*    ige:	EQU 65	; >=
0430CB             0010*    ilt:	EQU 66	; <
0430CB             0011*    ieq:	EQU 67	; =
0430CB             0012*    imul:	EQU 68	; *
0430CB             0013*    iadd:	EQU 69	; +
0430CB             0014*    igt:	EQU 70	; >
0430CB             0015*    isub:	EQU 71	; -
0430CB             0016*    ipow:	EQU 72	; ^
0430CB             0017*    idiv:	EQU 73	; /
0430CB             0018*    ;
0430CB             0019*    ; floating point functions
0430CB             0020*    absv:	EQU 16	; ABS
0430CB             0021*    acs:	EQU 17	; ACS
0430CB             0022*    asn:	EQU 18	; ASN
0430CB             0023*    atn:	EQU 19	; ATN
0430CB             0024*    cos:	EQU 20	; COS
0430CB             0025*    deg:	EQU 21	; DEG
0430CB             0026*    exp:	EQU 22	; EXP
0430CB             0027*    int_:	EQU 23	; INT
0430CB             0028*    ln:	    EQU 24	; LN
0430CB             0029*    log:	EQU 25	; LOG
0430CB             0030*    notk:	EQU 26	; NOT
0430CB             0031*    rad:	EQU 27	; RAD
0430CB             0032*    sgn:	EQU 28	; SGN
0430CB             0033*    sin:	EQU 29	; SIN
0430CB             0034*    sqr:	EQU 30	; SQR
0430CB             0035*    tan:	EQU 31	; TAN
0430CB             0036*    zero:	EQU 32	; ZERO
0430CB             0037*    fone:	EQU 33	; FONE
0430CB             0038*    true:	EQU 34	; TRUE
0430CB             0039*    pi:	    EQU 35	; PI
0430CB             0040*    val:	EQU 36	; VAL
0430CB             0041*    str:	EQU 37	; STR$
0430CB             0042*    sfix:	EQU 38	; FIX
0430CB             0043*    sfloat:	EQU 39	; FLOAT
0430CB             0044*    ftest:	EQU 40	; TEST
0430CB             0045*    fcomp:	EQU 41	; COMPARE
0430CB             0046*    ;
0430CB             0047*    ; floating point operations
0430CB             0048*    fand:	EQU  0	; AND (FLOATING-POINT)
0430CB             0049*    fbdiv:	EQU  1	; DIV
0430CB             0050*    feor:	EQU  2	; EOR
0430CB             0051*    fmod:	EQU  3	; MOD
0430CB             0052*    ffor:	EQU  4	; OR
0430CB             0053*    fle:	EQU  5	; <=
0430CB             0054*    fne:	EQU  6	; <>
0430CB             0055*    fge:	EQU  7	; >=
0430CB             0056*    flt:	EQU  8	; <
0430CB             0057*    feq:	EQU  9	; =
0430CB             0058*    fmul:	EQU 10	; *
0430CB             0059*    fadd:	EQU 11	; +
0430CB             0060*    fgt:	EQU 12	; >
0430CB             0061*    fsub:	EQU 13	; -
0430CB             0062*    fpow:	EQU 14	; ^
0430CB             0063*    fdiv:	EQU 15	; /
0430CB             0064*    
0430CB             0065*        MACRO LOAD_FLOAT ARG
0430CB             0066*        ld ix,$+11
0430CB             0067*        call val_fp ; convert the string to a float
0430CB             0068*        jp (ix)
0430CB             0069*        asciz ARG
0430CB             0070*        ENDMACRO
0430CB             0071*    
0430CB             0072*    ; --- originally in eval.asm ---
0430CB             0073*    ;SWAP - Swap arguments
0430CB             0074*    ;Exchanges DE,HL D'E',H'L' and B,C
0430CB             0075*    ;Destroys: A,B,C,D,E,H,L,D',E',H',L'
0430CB             0076*    ;
0430CB 79          0077*    SWAP:			LD      A,C
0430CC 48          0078*    			LD      C,B
0430CD 47          0079*    			LD      B,A
0430CE EB          0080*    			EX      DE,HL
0430CF D9          0081*    			EXX
0430D0 EB          0082*    			EX      DE,HL
0430D1 D9          0083*    			EXX
0430D2 C9          0084*    			RET
0430D3             0085*    
0430D3             0086*    ; same as VAL_FP in fpp.asm, but preserves any float stored in DED'E'B
0430D3             0087*    val_fp:
0430D3 FD E5       0088*        push iy ; preserve
0430D5 FD 21 F0 30 0089*        ld iy,@val
       04          
0430DA CD 84 31 04 0090*        call store_float_iy_alt
0430DE 3E 24       0091*        ld a,val
0430E0 CD E6 22 04 0092*        call FPP ; string converted to float in HLH'L'C
0430E4 FD 21 F0 30 0093*        ld iy,@val
       04          
0430E9 CD 96 31 04 0094*        call fetch_float_iy_alt
0430ED FD E1       0095*        pop iy ; restore
0430EF C9          0096*        ret
0430F0             0097*    @val: ds 5
0430F5             0098*    
0430F5             0099*    ; same as INT_FP_ in fpp.asm but preserves B, which keeps any float stored in DED'E'B intact
0430F5             0100*    ; af will also return differently from the original
0430F5             0101*    ;INT - Floor function
0430F5             0102*    ;Result is integer numeric.
0430F5             0103*    ;
0430F5             0104*    int_fp_:
       FF FF FF FF 
       FF 
0430F5 C5          0105*        push bc ; preserve b
0430F6 3E 17       0106*        ld a,int_
0430F8 CD E6 22 04 0107*        call FPP
0430FC F1          0108*        pop af ; restore b to a
0430FD 47          0109*        ld b,a ; restore b
0430FE C9          0110*        RET
0430FF             0111*    
0430FF             0112*    ; convert floating point number to integer and store it in HLU
0430FF             0113*    ; inputs: HLH'L'C = floating point number
0430FF             0114*    ; outputs: HLU = integer part of the number
0430FF             0115*    ; destroys: all except DEU and U'D'E'B, index registers
0430FF             0116*    int2hlu:
0430FF CD F5 30 04 0117*        call int_fp_
043103 7D          0118*        ld a,l
043104 F5          0119*        push af
043105 D9          0120*        exx
043106 E5          0121*        push hl
043107 D9          0122*        exx
043108 E1          0123*        pop hl
043109 F1          0124*        pop af
04310A             0125*        A_TO_HLU
                       M1 Args: none
04310A AF          0001*M1      xor a ; 1 cycle
04310B 22 14 31 04 0002*M1      ld ($+8+1),hl ; 7 cycles
04310F 32 16 31 04 0003*M1      ld ($+4+3),a ; 5 cycles
043113 21 00 00 00 0004*M1      ld hl,0x000000 ; 4 cycles
043117             0005*M1      ; 17 cycles total
043117 C9          0126*        ret
043118             0127*    
043118             0128*    ; store HLH'L'C floating point number in a 40-bit buffer
043118             0129*    ; inputs: HLH'L'C = floating point number
043118             0130*    ;         ix = buffer address
043118             0131*    ; outputs: buffer filled with floating point number
043118             0132*    ; destroys: nothing
043118             0133*    store_float_nor:
043118 DD 71 00    0134*        ld (ix+0),c
04311B D9          0135*        exx
04311C DD 75 03    0136*        ld (ix+3),l
04311F DD 74 04    0137*        ld (ix+4),h
043122 D9          0138*        exx
043123 DD 75 01    0139*        ld (ix+1),l
043126 DD 74 02    0140*        ld (ix+2),h
043129 C9          0141*        ret
04312A             0142*    
04312A             0143*    ; fetch HLH'L'C floating point number from a 40-bit buffer
04312A             0144*    ; inputs: ix = buffer address
04312A             0145*    ; outputs: HLH'L'C = floating point number
04312A             0146*    ; destroys: HLH'L'C
04312A             0147*    fetch_float_nor:
04312A DD 4E 00    0148*        ld c,(ix+0)
04312D D9          0149*        exx
04312E DD 6E 03    0150*        ld l,(ix+3)
043131 DD 66 04    0151*        ld h,(ix+4)
043134 D9          0152*        exx
043135 DD 6E 01    0153*        ld l,(ix+1)
043138 DD 66 02    0154*        ld h,(ix+2)
04313B C9          0155*        ret
04313C             0156*    
04313C             0157*    ; store DED'E'B floating point number in a 40-bit buffer
04313C             0158*    ; inputs: DED'E'B = floating point number
04313C             0159*    ;         ix = buffer address
04313C             0160*    ; outputs: buffer filled with floating point number
04313C             0161*    ; destroys: nothing
04313C             0162*    store_float_alt:
04313C DD 70 00    0163*        ld (ix+0),b
04313F D9          0164*        exx
043140 DD 73 03    0165*        ld (ix+3),e
043143 DD 72 04    0166*        ld (ix+4),d
043146 D9          0167*        exx
043147 DD 73 01    0168*        ld (ix+1),e
04314A DD 72 02    0169*        ld (ix+2),d
04314D C9          0170*        ret
04314E             0171*    
04314E             0172*    ; fetch DED'E'B floating point number from a 40-bit buffer
04314E             0173*    ; inputs: ix = buffer address
04314E             0174*    ; outputs: DED'E'B = floating point number
04314E             0175*    ; destroys: DED'E'B
04314E             0176*    fetch_float_alt:
04314E DD 46 00    0177*        ld b,(ix+0)
043151 D9          0178*        exx
043152 DD 5E 03    0179*        ld e,(ix+3)
043155 DD 56 04    0180*        ld d,(ix+4)
043158 D9          0181*        exx
043159 DD 5E 01    0182*        ld e,(ix+1)
04315C DD 56 02    0183*        ld d,(ix+2)
04315F C9          0184*        ret
043160             0185*    
043160             0186*    
043160             0187*    ; store HLH'L'C floating point number in a 40-bit buffer
043160             0188*    ; inputs: HLH'L'C = floating point number
043160             0189*    ;         iy = buffer address
043160             0190*    ; outputs: buffer filled with floating point number
043160             0191*    ; destroys: nothing
043160             0192*    store_float_iy_nor:
043160 FD 71 00    0193*        ld (iy+0),c
043163 D9          0194*        exx
043164 FD 75 03    0195*        ld (iy+3),l
043167 FD 74 04    0196*        ld (iy+4),h
04316A D9          0197*        exx
04316B FD 75 01    0198*        ld (iy+1),l
04316E FD 74 02    0199*        ld (iy+2),h
043171 C9          0200*        ret
043172             0201*    
043172             0202*    ; fetch HLH'L'C floating point number from a 40-bit buffer
043172             0203*    ; inputs: iy = buffer address
043172             0204*    ; outputs: HLH'L'C = floating point number
043172             0205*    ; destroys: HLH'L'C
043172             0206*    fetch_float_iy_nor:
043172 FD 4E 00    0207*        ld c,(iy+0)
043175 D9          0208*        exx
043176 FD 6E 03    0209*        ld l,(iy+3)
043179 FD 66 04    0210*        ld h,(iy+4)
04317C D9          0211*        exx
04317D FD 6E 01    0212*        ld l,(iy+1)
043180 FD 66 02    0213*        ld h,(iy+2)
043183 C9          0214*        ret
043184             0215*    
043184             0216*    ; store DED'E'B floating point number in a 40-bit buffer
043184             0217*    ; inputs: DED'E'B = floating point number
043184             0218*    ;         iy = buffer address
043184             0219*    ; outputs: buffer filled with floating point number
043184             0220*    ; destroys: nothing
043184             0221*    store_float_iy_alt:
043184 FD 70 00    0222*        ld (iy+0),b
043187 D9          0223*        exx
043188 FD 73 03    0224*        ld (iy+3),e
04318B FD 72 04    0225*        ld (iy+4),d
04318E D9          0226*        exx
04318F FD 73 01    0227*        ld (iy+1),e
043192 FD 72 02    0228*        ld (iy+2),d
043195 C9          0229*        ret
043196             0230*    
043196             0231*    ; fetch DED'E'B floating point number from a 40-bit buffer
043196             0232*    ; inputs: iy = buffer address
043196             0233*    ; outputs: DED'E'B = floating point number
043196             0234*    ; destroys: DED'E'B
043196             0235*    fetch_float_iy_alt:
043196 FD 46 00    0236*        ld b,(iy+0)
043199 D9          0237*        exx
04319A FD 5E 03    0238*        ld e,(iy+3)
04319D FD 56 04    0239*        ld d,(iy+4)
0431A0 D9          0240*        exx
0431A1 FD 5E 01    0241*        ld e,(iy+1)
0431A4 FD 56 02    0242*        ld d,(iy+2)
0431A7 C9          0243*        ret
0431A8             0244*    
0431A8             0245*    ; store HLH'L'C integer number in a 32-bit buffer
0431A8             0246*    ; inputs: HLH'L'C = integer number
0431A8             0247*    ;         ix = buffer address
0431A8             0248*    ; outputs: buffer filled with integer number
0431A8             0249*    ; destroys: nothing
0431A8             0250*    store_int_nor:
0431A8 D9          0251*        exx
0431A9 DD 75 00    0252*        ld (ix+0),l
0431AC DD 74 01    0253*        ld (ix+1),h
0431AF D9          0254*        exx
0431B0 DD 75 02    0255*        ld (ix+2),l
0431B3 DD 74 03    0256*        ld (ix+3),h
0431B6 C9          0257*        ret
0431B7             0258*    
0431B7             0259*    ; fetch HLH'L'C integer number from a 32-bit buffer
0431B7             0260*    ; inputs: ix = buffer address
0431B7             0261*    ; outputs: HLH'L'C = integer number
0431B7             0262*    ; destroys: HLH'L'C
0431B7             0263*    fetch_int_nor:
0431B7 D9          0264*        exx
0431B8 DD 6E 00    0265*        ld l,(ix+0)
0431BB DD 66 01    0266*        ld h,(ix+1)
0431BE D9          0267*        exx
0431BF DD 6E 02    0268*        ld l,(ix+2)
0431C2 DD 66 03    0269*        ld h,(ix+3)
0431C5 0E 00       0270*        ld c,0 ; set exponent to 0
0431C7 C9          0271*        ret
0431C8             0272*    
0431C8             0273*    ; store DED'E'B integer number in a 32-bit buffer
0431C8             0274*    ; inputs: DED'E'B = integer number
0431C8             0275*    ;         ix = buffer address
0431C8             0276*    ; outputs: buffer filled with integer number
0431C8             0277*    ; destroys: nothing
0431C8             0278*    store_int_alt:
0431C8             0279*    
0431C8 DD 73 00    0280*        ld (ix+0),e
0431CB DD 72 01    0281*        ld (ix+1),d
0431CE D9          0282*        exx
0431CF DD 73 02    0283*        ld (ix+2),e
0431D2 DD 72 03    0284*        ld (ix+3),d
0431D5 C9          0285*        ret
0431D6             0286*    
0431D6             0287*    ; fetch DED'E'B integer number from a 32-bit buffer
0431D6             0288*    ; inputs: ix = buffer address
0431D6             0289*    ; outputs: DED'E'B = integer number
0431D6             0290*    ; destroys: DED'E'B
0431D6             0291*    fetch_int_alt:
0431D6 D9          0292*        exx
0431D7 DD 5E 00    0293*        ld e,(ix+0)
0431DA DD 56 01    0294*        ld d,(ix+1)
0431DD D9          0295*        exx
0431DE DD 5E 02    0296*        ld e,(ix+2)
0431E1 DD 56 03    0297*        ld d,(ix+3)
0431E4 06 00       0298*        ld b,0 ; set exponent to 0
0431E6 C9          0299*        ret
0431E7             0300*    
0431E7             0301*    ; store HLH'L'C integer number in a 32-bit buffer
0431E7             0302*    ; inputs: HLH'L'C = integer number
0431E7             0303*    ;         iy = buffer address
0431E7             0304*    ; outputs: buffer filled with integer number
0431E7             0305*    ; destroys: nothing
0431E7             0306*    store_int_iy_nor:
0431E7 D9          0307*        exx
0431E8 FD 75 00    0308*        ld (iy+0),l
0431EB FD 74 01    0309*        ld (iy+1),h
0431EE D9          0310*        exx
0431EF FD 75 02    0311*        ld (iy+2),l
0431F2 FD 74 03    0312*        ld (iy+3),h
0431F5 C9          0313*        ret
0431F6             0314*    
0431F6             0315*    ; fetch HLH'L'C integer number from a 32-bit buffer
0431F6             0316*    ; inputs: iy = buffer address
0431F6             0317*    ; outputs: HLH'L'C = integer number
0431F6             0318*    ; destroys: HLH'L'C
0431F6             0319*    fetch_int_iy_nor:
0431F6             0320*    
0431F6 FD 6E 00    0321*        ld l,(iy+0)
0431F9 FD 66 01    0322*        ld h,(iy+1)
0431FC D9          0323*        exx
0431FD FD 6E 02    0324*        ld l,(iy+2)
043200 FD 66 03    0325*        ld h,(iy+3)
043203 0E 00       0326*        ld c,0 ; set exponent to 0
043205 C9          0327*        ret
043206             0328*    
043206             0329*    ; store DED'E'B integer number in a 32-bit buffer
043206             0330*    ; inputs: DED'E'B = integer number
043206             0331*    ;         iy = buffer address
043206             0332*    ; outputs: buffer filled with integer number
043206             0333*    ; destroys: nothing
043206             0334*    store_int_iy_alt:
043206 D9          0335*        exx
043207 FD 73 00    0336*        ld (iy+0),e
04320A FD 72 01    0337*        ld (iy+1),d
04320D D9          0338*        exx
04320E FD 73 02    0339*        ld (iy+2),e
043211 FD 72 03    0340*        ld (iy+3),d
043214 C9          0341*        ret
043215             0342*    
043215             0343*    ; fetch DED'E'B integer number from a 32-bit buffer
043215             0344*    ; inputs: iy = buffer address
043215             0345*    ; outputs: DED'E'B = integer number
043215             0346*    ; destroys: DED'E'B
043215             0347*    fetch_int_iy_alt:
043215 D9          0348*        exx
043216 FD 5E 00    0349*        ld e,(iy+0)
043219 FD 56 01    0350*        ld d,(iy+1)
04321C D9          0351*        exx
04321D FD 5E 02    0352*        ld e,(iy+2)
043220 FD 56 03    0353*        ld d,(iy+3)
043223 06 00       0354*        ld b,0 ; set exponent to 0
043225 C9          0355*        ret
043226             0356*    
043226             0357*    ; print HLH'L'C floating point number in hex format
043226             0358*    ; inputs: HLH'L'C = floating point number
043226             0359*    print_float_hex_nor:
043226             0360*        PUSH_ALL
                       M1 Args: none
043226 08          0001*M1      ex af,af'
043227 D9          0002*M1      exx
043228 F5          0003*M1      push af
043229 E5          0004*M1      push hl
04322A C5          0005*M1      push bc
04322B D5          0006*M1      push de
04322C             0007*M1  
04322C 08          0008*M1      ex af,af'
04322D D9          0009*M1      exx
04322E F5          0010*M1      push af
04322F E5          0011*M1      push hl
043230 C5          0012*M1      push bc
043231 D5          0013*M1      push de
043232 DD E5       0014*M1      push ix
043234 FD E5       0015*M1      push iy
043236 C5          0361*        push bc ; preserve c
043237 CD A8 00 04 0362*        call printHex16
04323B 3E 2E       0363*        ld a,'.'
04323D 5B D7       0364*        rst.lil 10h
04323F D9          0365*        exx
043240 CD A8 00 04 0366*        call printHex16
043244 D9          0367*        exx
043245 3E 5E       0368*        ld a,'^'
043247 5B D7       0369*        rst.lil 10h
043249 C1          0370*        pop bc ; restore c
04324A 79          0371*        ld a,c
04324B CD AE 00 04 0372*        call printHex8
04324F             0373*        POP_ALL
                       M1 Args: none
04324F FD E1       0001*M1      pop iy
043251 DD E1       0002*M1      pop ix
043253 D1          0003*M1      pop de
043254 C1          0004*M1      pop bc
043255 E1          0005*M1      pop hl
043256 F1          0006*M1      pop af
043257 08          0007*M1      ex af,af'
043258 D9          0008*M1      exx
043259             0009*M1  
043259 D1          0010*M1      pop de
04325A C1          0011*M1      pop bc
04325B E1          0012*M1      pop hl
04325C F1          0013*M1      pop af
04325D 08          0014*M1      ex af,af'
04325E D9          0015*M1      exx
04325F C9          0374*        ret
043260             0375*    
043260             0376*    ; print DED'E'B floating point number in hex format
043260             0377*    ; inputs: DED'E'B = floating point number
043260             0378*    print_float_hex_alt:
043260             0379*        PUSH_ALL
                       M1 Args: none
043260 08          0001*M1      ex af,af'
043261 D9          0002*M1      exx
043262 F5          0003*M1      push af
043263 E5          0004*M1      push hl
043264 C5          0005*M1      push bc
043265 D5          0006*M1      push de
043266             0007*M1  
043266 08          0008*M1      ex af,af'
043267 D9          0009*M1      exx
043268 F5          0010*M1      push af
043269 E5          0011*M1      push hl
04326A C5          0012*M1      push bc
04326B D5          0013*M1      push de
04326C DD E5       0014*M1      push ix
04326E FD E5       0015*M1      push iy
043270 C5          0380*        push bc ; preserve b
043271 EB          0381*        ex de,hl
043272 CD A8 00 04 0382*        call printHex16
043276 EB          0383*        ex de,hl
043277 3E 2E       0384*        ld a,'.'
043279 5B D7       0385*        rst.lil 10h
04327B D9          0386*        exx
04327C EB          0387*        ex de,hl
04327D CD A8 00 04 0388*        call printHex16
043281 EB          0389*        ex de,hl
043282 D9          0390*        exx
043283 3E 5E       0391*        ld a,'^'
043285 5B D7       0392*        rst.lil 10h
043287 F1          0393*        pop af ; restore b to a
043288 CD AE 00 04 0394*        call printHex8
04328C             0395*        POP_ALL
                       M1 Args: none
04328C FD E1       0001*M1      pop iy
04328E DD E1       0002*M1      pop ix
043290 D1          0003*M1      pop de
043291 C1          0004*M1      pop bc
043292 E1          0005*M1      pop hl
043293 F1          0006*M1      pop af
043294 08          0007*M1      ex af,af'
043295 D9          0008*M1      exx
043296             0009*M1  
043296 D1          0010*M1      pop de
043297 C1          0011*M1      pop bc
043298 E1          0012*M1      pop hl
043299 F1          0013*M1      pop af
04329A 08          0014*M1      ex af,af'
04329B D9          0015*M1      exx
04329C C9          0396*        ret
04329D             0397*    
04329D             0398*    print_floats_hex:
04329D CD 26 32 04 0399*        call print_float_hex_nor
0432A1 3E 20       0400*        ld a,' '
0432A3 5B D7       0401*        rst.lil 10h
0432A5 CD 60 32 04 0402*        call print_float_hex_alt
0432A9 C9          0403*        ret
0432AA             0404*    
0432AA             0405*    ; print a floating point number in decimal format
0432AA             0406*    ; inputs: HL'H'L'C is the number to print
0432AA             0407*    ; outputs: number printed to screen
0432AA             0408*    ;          ACCS null-terminated string representation of the number
0432AA             0409*    ; destroys: everything except ix
0432AA             0410*    print_float_dec:
0432AA             0411*    print_float_dec_nor:
0432AA DD E5       0412*        push ix             ; preserve
0432AC             0413*    
0432AC             0414*    ; back up floats in normal and alternate registers
0432AC DD 21 ED 32 0415*        ld ix,@float_nor
       04          
0432B1 CD 18 31 04 0416*        call store_float_nor
0432B5 DD 21 F2 32 0417*        ld ix,@float_alt
       04          
0432BA CD 3C 31 04 0418*        call store_float_alt
0432BE             0419*    
0432BE             0420*    ; convert the number to a string
0432BE 11 00 34 04 0421*        ld de,ACCS          ; point to the string accumulator
0432C2 DD 21 EA 32 0422*        ld ix,@G9-1         ; get the format code for the number
       04          
0432C7 CD E5 2A 04 0423*        call STR_FP         ; convert the number to a string
0432CB EB          0424*        ex de,hl            ; point to end of the string
0432CC 36 00       0425*        ld (hl),0           ; null-terminate the string
0432CE 21 00 34 04 0426*        ld hl,ACCS          ; point to the string accumulator
0432D2 CD 67 00 04 0427*        call printString
0432D6             0428*    
0432D6             0429*    ; restore floats in normal and alternate registers
0432D6 DD 21 ED 32 0430*        ld ix,@float_nor
       04          
0432DB CD 2A 31 04 0431*        call fetch_float_nor
0432DF DD 21 F2 32 0432*        ld ix,@float_alt
       04          
0432E4 CD 4E 31 04 0433*        call fetch_float_alt
0432E8             0434*    
0432E8             0435*    ; cleanup and go home
0432E8 DD E1       0436*        pop ix              ; restore
0432EA C9          0437*        ret
0432EB 09 00       0438*    @G9:			DW    9
0432ED             0439*    @float_nor: ds 5
0432F2             0440*    @float_alt: ds 5
0432F7             0441*    
0432F7             0442*    print_float_dec_alt:
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
0432F7 CD CB 30 04 0443*        CALL SWAP
0432FB CD AA 32 04 0444*        CALL print_float_dec_nor
0432FF CD CB 30 04 0445*        CALL SWAP
043303 C9          0446*        ret
043304             0447*    
043304             0448*    ;PI - Return PI (3.14159265)
043304             0449*    ;Result is floating-point numeric.
043304             0450*    ;
043304 11 0F 49 00 0451*    pi_alt:			LD      DE,0x490F
043308 D9          0452*            		EXX
043309 11 A2 DA 00 0453*            		LD      DE,0xDAA2
04330D D9          0454*            		EXX
04330E 06 81       0455*            		LD      B,0x81
043310 AF          0456*            		XOR     A               ;NUMERIC MARKER
043311 C9          0457*            		RET
043312             0458*    
043312             0459*    ;PI - Return PI * 2 (6.28318531)
043312             0460*    ;Result is floating-point numeric.
043312             0461*    ;
043312 11 0F 49 00 0462*    pi2_alt:		LD      DE,0x490F
043316 D9          0463*            		EXX
043317 11 A3 DA 00 0464*            		LD      DE,0xDAA3
04331B D9          0465*            		EXX
04331C 06 82       0466*            		LD      B,0x82
04331E AF          0467*            		XOR     A               ;NUMERIC MARKER
04331F C9          0468*            		RET
043320             0469*    
043320             0470*    			ALIGN 		256		; ACCS, BUFFER & STAVAR must be on page boundaries
043400             0471*    RAM_START:
043400             0472*    ;
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
043400 00 00 00 00 0473*    ACCS:           BLKB    256,0             ; String Accumulator
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043500             0047     
043500             0048     ; APPLICATION INCLUDES
043500             0049         include "layout.inc"
043500             0001*    text_top: equ 0
043500             0002*    text_left: equ 0
043500             0003*    text_bottom: equ 47      ; 48 rows, zero-based
043500             0004*    text_right: equ 63       ; 64 columns, zero-based
043500             0005*    
043500 00          0006*    original_screen_mode: db 0 ; screen mode when app started so we can return to it on exit
043501             0007*    
043501 2D 2D 2D 2D 0008*    str_dashes_thin: asciz  "----------------------------------------------------------------"
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       00          
043542 3D 3D 3D 3D 0009*    str_dashes_thick: asciz "================================================================"
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       00          
043583             0010*    
043583             0011*    ; set text viewport for current playing song
043583             0012*    vp_now_playing_top: equ 34
043583             0013*    vp_now_playing:
043583 0E 00       0014*        ld c, text_left
043585 16 22       0015*        ld d, vp_now_playing_top
043587 1E 3F       0016*        ld e, text_right
043589 06 22       0017*        ld b, vp_now_playing_top
04358B CD D3 1B 04 0018*        call vdu_set_txt_viewport
04358F C9          0019*        ret
043590             0020*    ; end vp_now_playing
043590             0021*    
043590             0022*    ; set text viewport for elapsed time
043590             0023*    vp_elapsed_top: equ vp_now_playing_top+1
043590             0024*    vp_elapsed_right: equ text_left+7 ; 8 chars for HH:MM:SS
043590             0025*    vp_elapsed:
043590 0E 00       0026*        ld c, text_left
043592 16 23       0027*        ld d, vp_elapsed_top
043594 1E 07       0028*        ld e, vp_elapsed_right
043596 06 23       0029*        ld b, vp_elapsed_top
043598 CD D3 1B 04 0030*        call vdu_set_txt_viewport
04359C C9          0031*        ret
04359D             0032*    ; end vp_elapsed
04359D             0033*    
04359D             0034*    ; set text viewport for song duration
04359D             0035*    vp_duration_left: equ text_right-7 ; 8 chars for HH:MM:SS
04359D             0036*    vp_duration_top: equ vp_now_playing_top+1
04359D             0037*    vp_duration:
04359D 0E 38       0038*        ld c, vp_duration_left
04359F 16 23       0039*        ld d, vp_duration_top
0435A1 1E 3F       0040*        ld e, text_right
0435A3 06 23       0041*        ld b, vp_duration_top
0435A5 CD D3 1B 04 0042*        call vdu_set_txt_viewport
0435A9 C9          0043*        ret
0435AA             0044*    ; end vp_duration
0435AA             0045*    
0435AA             0046*    ; set text viewport for playing breadcrumbs
0435AA             0047*    vp_playbar_left: equ 10
0435AA             0048*    vp_playbar_top: equ vp_now_playing_top+1
0435AA             0049*    vp_playbar_right: equ 53
0435AA             0050*    vp_playbar:
0435AA 0E 0A       0051*        ld c, vp_playbar_left
0435AC 16 23       0052*        ld d, vp_playbar_top
0435AE 1E 35       0053*        ld e, vp_playbar_right
0435B0 06 23       0054*        ld b, vp_playbar_top
0435B2 CD D3 1B 04 0055*        call vdu_set_txt_viewport
0435B6 C9          0056*        ret
0435B7             0057*    ; end vp_playbar
0435B7             0058*    
0435B7             0059*    vp_dir_hdr_top: equ 20
0435B7             0060*    vp_dir_hdr:
0435B7 0E 00       0061*        ld c,text_left
0435B9 16 14       0062*        ld d,vp_dir_hdr_top
0435BB 1E 3F       0063*        ld e,text_right
0435BD 06 14       0064*        ld b,vp_dir_hdr_top
0435BF CD D3 1B 04 0065*        call vdu_set_txt_viewport
0435C3 C9          0066*        ret
0435C4             0067*    
0435C4             0068*    vp_dir_name_top: equ vp_dir_hdr_top+1
0435C4             0069*    vp_dir_name:
0435C4 0E 00       0070*        ld c,text_left
0435C6 16 15       0071*        ld d,vp_dir_name_top
0435C8 1E 3F       0072*        ld e,text_right
0435CA 06 15       0073*        ld b,vp_dir_name_top
0435CC CD D3 1B 04 0074*        call vdu_set_txt_viewport
0435D0 C9          0075*        ret
0435D1             0076*    
0435D1             0077*    ; set text viewport for directory listing
0435D1             0078*    vp_dir_top: equ vp_dir_hdr_top+3
0435D1             0079*    vp_dir_bottom: equ vp_dir_top+9
0435D1             0080*    vp_dir:
0435D1 0E 00       0081*        ld c,text_left
0435D3 16 17       0082*        ld d,vp_dir_top
0435D5 1E 3F       0083*        ld e,text_right
0435D7 06 20       0084*        ld b,vp_dir_bottom
0435D9 CD D3 1B 04 0085*        call vdu_set_txt_viewport
0435DD C9          0086*        ret
0435DE             0087*    
0435DE             0088*    vp_legend_top: equ vp_playbar_top+2
0435DE             0089*    vp_legend:
0435DE 0E 00       0090*        ld c,text_left
0435E0 16 25       0091*        ld d,vp_legend_top
0435E2 1E 3F       0092*        ld e,text_right
0435E4 06 27       0093*        ld b,vp_legend_top+2
0435E6 CD D3 1B 04 0094*        call vdu_set_txt_viewport
0435EA C9          0095*        ret
0435EB             0096*    
0435EB             0097*    vp_legend_page_num_top: equ vp_legend_top
0435EB             0098*    vp_legend_page_num_left: equ text_left+29
0435EB             0099*    vp_legend_page_num:
0435EB 0E 1D       0100*        ld c,vp_legend_page_num_left
0435ED 16 25       0101*        ld d,vp_legend_page_num_top
0435EF 1E 1E       0102*        ld e,vp_legend_page_num_left+1
0435F1 06 25       0103*        ld b,vp_legend_page_num_top
0435F3 CD D3 1B 04 0104*        call vdu_set_txt_viewport
0435F7 C9          0105*        ret
0435F8             0106*    
0435F8             0107*    vp_legend_num_pages_top: equ vp_legend_top
0435F8             0108*    vp_legend_num_pages_left: equ text_left+36
0435F8             0109*    vp_legend_num_pages:
0435F8 0E 24       0110*        ld c,vp_legend_num_pages_left
0435FA 16 25       0111*        ld d,vp_legend_num_pages_top
0435FC 1E 25       0112*        ld e,vp_legend_num_pages_left+1
0435FE 06 25       0113*        ld b,vp_legend_num_pages_top
043600 CD D3 1B 04 0114*        call vdu_set_txt_viewport
043604 C9          0115*        ret
043605             0116*    
043605             0117*    vp_legend_shuffle_top: equ vp_legend_top+1
043605             0118*    vp_legend_shuffle_left: equ text_left+34
043605             0119*    vp_legend_shuffle:
043605 0E 22       0120*        ld c,vp_legend_shuffle_left
043607 16 26       0121*        ld d,vp_legend_shuffle_top
043609 1E 24       0122*        ld e,vp_legend_shuffle_left+2
04360B 06 26       0123*        ld b,vp_legend_shuffle_top
04360D CD D3 1B 04 0124*        call vdu_set_txt_viewport
043611 C9          0125*        ret
043612             0126*    
043612             0127*    vp_legend_loop_top: equ vp_legend_top+1
043612             0128*    vp_legend_loop_left: equ text_left+51
043612             0129*    vp_legend_loop:
043612 0E 33       0130*        ld c,vp_legend_loop_left
043614 16 26       0131*        ld d,vp_legend_loop_top
043616 1E 35       0132*        ld e,vp_legend_loop_left+2
043618 06 26       0133*        ld b,vp_legend_loop_top
04361A CD D3 1B 04 0134*        call vdu_set_txt_viewport
04361E C9          0135*        ret
04361F             0136*    
04361F             0137*    vp_seek_rate_top: equ vp_legend_top+2
04361F             0138*    vp_seek_rate_left: equ text_left+29
04361F             0139*    vp_seek_rate:
04361F 0E 1D       0140*        ld c,vp_seek_rate_left
043621 16 27       0141*        ld d,vp_seek_rate_top
043623 1E 20       0142*        ld e,vp_seek_rate_left+3
043625 06 27       0143*        ld b,vp_seek_rate_top
043627 CD D3 1B 04 0144*        call vdu_set_txt_viewport
04362B C9          0145*        ret
04362C             0146*    
04362C             0147*    vp_messages_top: equ vp_playbar_top+6
04362C             0148*    vp_messages_bottom: equ text_bottom
04362C             0149*    ; set text viewport for messages
04362C             0150*    vp_messages:
04362C 0E 00       0151*        ld c,text_left
04362E 16 29       0152*        ld d,vp_messages_top
043630 1E 3F       0153*        ld e,text_right
043632 06 2F       0154*        ld b,vp_messages_bottom
043634 CD D3 1B 04 0155*        call vdu_set_txt_viewport
043638 C9          0156*        ret
043639             0157*    
043639             0158*    set_text_colours_normal:
043639             0159*    ; set text background color
043639 3E 84       0160*        ld a,c_blue_dk+128
04363B CD AB 1B 04 0161*        call vdu_colour_text
04363F             0162*    ; set text foreground color
04363F 3E 0F       0163*        ld a,c_white
043641 CD AB 1B 04 0164*        call vdu_colour_text
043645 C9          0165*        ret
043646             0166*    ; end set_text_colours_normal
043646             0167*    
043646             0168*    set_text_colours_inverse:
043646             0169*    ; set text background color
043646 3E 8F       0170*        ld a,c_white+128
043648 CD AB 1B 04 0171*        call vdu_colour_text
04364C             0172*    ; set text foreground color
04364C 3E 04       0173*        ld a,c_blue_dk
04364E CD AB 1B 04 0174*        call vdu_colour_text
043652 C9          0175*        ret
043653             0176*    ; end set_text_colours_inverse
043653             0177*    
043653             0178*    ui_init:
043653             0179*    ; get current screen mode and save it so we can return to it on exit
043653 CD 59 1C 04 0180*        call vdu_get_screen_mode
043657 32 00 35 04 0181*        ld (original_screen_mode),a
04365B             0182*    ; set up display
04365B 3E 14       0183*        ld a,20 ; 512x384x64 single-buffered
04365D CD 48 1C 04 0184*        call vdu_set_screen_mode
043661 AF          0185*        xor a
043662 CD 61 1C 04 0186*        call vdu_set_scaling
043666             0187*    ; load fonts and select one
043666 CD 4F 1F 04 0188*        call vdu_clear_all_buffers
04366A CD F6 0D 04 0189*    	call font_load
04366E 21 10 FA 00 0190*        ld hl,Lat2_VGA8_8x8
043672 3E 01       0191*        ld a,1
043674 CD C1 1F 04 0192*        call vdu_font_select
043678             0193*    ; set text fg and bg colours to normal
043678 CD 39 36 04 0194*        call set_text_colours_normal
04367C             0195*    ; set cursor behaviuor
04367C CD 02 1B 04 0196*        call vdu_cursor_off
043680 26 10       0197*        ld h,%00010000 ; bit 4 controls cursor scroll at bottom of screen
043682 2E 10       0198*        ld l,%00010000 ; bit 4 set means cursor wraps to top of screen
043684 CD 66 1B 04 0199*        call vdu_cursor_behaviour
043688             0200*    ; reset text viewports and clear the screen
043688 CD 43 1C 04 0201*        call vdu_reset_viewports
04368C CD 7A 1B 04 0202*        call vdu_cls
043690             0203*    
043690             0204*    ; tippy top border
043690 0E 00       0205*        ld c,text_left ; x
043692 06 00       0206*        ld b,text_top ; y
043694 CD 52 1B 04 0207*        call vdu_move_cursor
043698 21 42 35 04 0208*        ld hl,str_dashes_thick
04369C CD 67 00 04 0209*        call printString
0436A0             0210*    
0436A0             0211*    ; print ascii art splash screen
0436A0 0E 00       0212*        ld c,text_left ; x
0436A2 06 01       0213*        ld b,text_top+1 ; y
0436A4 CD 52 1B 04 0214*        call vdu_move_cursor
0436A8 21 92 38 04 0215*        ld hl,agon_jukebox_ascii
0436AC CD 67 00 04 0216*        call printString
0436B0             0217*    
0436B0             0218*    ; below logo border
0436B0 0E 00       0219*        ld c,text_left ; x
0436B2 06 13       0220*        ld b,vp_dir_hdr_top-1 ; y
0436B4 CD 52 1B 04 0221*        call vdu_move_cursor
0436B8 21 42 35 04 0222*        ld hl,str_dashes_thick
0436BC CD 67 00 04 0223*        call printString
0436C0             0224*    
0436C0             0225*    ; print the directory header
0436C0 0E 00       0226*        ld c,text_left ; x
0436C2 06 14       0227*        ld b,vp_dir_hdr_top ; y
0436C4 CD 52 1B 04 0228*        call vdu_move_cursor
0436C8 CD 60 00 04 0229*        call printInline
0436CC 4F 75 72 20 0230*        asciz "Our current directory is:"
       63 75 72 72 
       65 6E 74 20 
       64 69 72 65 
       63 74 6F 72 
       79 20 69 73 
       3A 00       
0436E6             0231*    
0436E6             0232*    ; file list top border
0436E6 0E 00       0233*        ld c,text_left ; x
0436E8 06 16       0234*        ld b,vp_dir_top-1 ; y
0436EA CD 52 1B 04 0235*        call vdu_move_cursor
0436EE 21 01 35 04 0236*        ld hl,str_dashes_thin
0436F2 CD 67 00 04 0237*        call printString
0436F6             0238*    
0436F6             0239*    ; file list bottom border
0436F6 0E 00       0240*        ld c,text_left ; x
0436F8 06 21       0241*        ld b,vp_dir_bottom+1 ; y
0436FA CD 52 1B 04 0242*        call vdu_move_cursor
0436FE 21 01 35 04 0243*        ld hl,str_dashes_thin
043702 CD 67 00 04 0244*        call printString
043706             0245*    
043706             0246*    ; below the breadcrumbs border
043706 0E 00       0247*        ld c,text_left ; x
043708 06 24       0248*        ld b,vp_playbar_top+1 ; y
04370A CD 52 1B 04 0249*        call vdu_move_cursor
04370E 21 42 35 04 0250*        ld hl,str_dashes_thick
043712 CD 67 00 04 0251*        call printString
043716             0252*    
043716             0253*    ; print the playbar
043716 0E 00       0254*        ld c,text_left ; x
043718 06 22       0255*        ld b,vp_playbar_top-1 ; y
04371A CD 52 1B 04 0256*        call vdu_move_cursor
04371E CD 60 00 04 0257*        call printInline
043722 53 65 6C 65 0258*        db "Select a song with \e",24," \e",25," \e",237,", 0-9, or [R]andom song\r\n"
       63 74 20 61 
       20 73 6F 6E 
       67 20 77 69 
       74 68 20 1B 
       18 20 1B 19 
       20 1B ED 2C 
       20 30 2D 39 
       2C 20 6F 72 
       20 5B 52 5D 
       61 6E 64 6F 
       6D 20 73 6F 
       6E 67 0D 0A 
043756 30 30 3A 30 0259*        db "00:00:00 [............................................] 00:00:00"
       30 3A 30 30 
       20 5B 2E 2E 
       2E 2E 2E 2E 
       2E 2E 2E 2E 
       2E 2E 2E 2E 
       2E 2E 2E 2E 
       2E 2E 2E 2E 
       2E 2E 2E 2E 
       2E 2E 2E 2E 
       2E 2E 2E 2E 
       2E 2E 2E 2E 
       2E 2E 2E 2E 
       2E 2E 5D 20 
       30 30 3A 30 
       30 3A 30 30 
043796 00          0260*        db 0 ; null terminator
043797             0261*    
043797             0262*    ; print the navigation and song control instructions
043797 0E 00       0263*        ld c,text_left ; x
043799 06 25       0264*        ld b,vp_playbar_top+2 ; y
04379B CD 52 1B 04 0265*        call vdu_move_cursor
04379F CD 60 00 04 0266*        call printInline
0437A3 20 53 6F 6E 0267*        db " Song \e",24," \e",25," \e",237," or 0-9   | Page \e",27,"00\e",26," of 00   | [U]p directory\r\n"
       67 20 1B 18 
       20 1B 19 20 
       1B ED 20 6F 
       72 20 30 2D 
       39 20 20 20 
       7C 20 50 61 
       67 65 20 1B 
       1B 30 30 1B 
       1A 20 6F 66 
       20 30 30 20 
       20 20 7C 20 
       5B 55 5D 70 
       20 64 69 72 
       65 63 74 6F 
       72 79 0D 0A 
0437E3 20 5B 52 5D 0268*        db " [R]andom song       | [S]huffle: OFF    | [L]oop: OFF\r\n"
       61 6E 64 6F 
       6D 20 73 6F 
       6E 67 20 20 
       20 20 20 20 
       20 7C 20 5B 
       53 5D 68 75 
       66 66 6C 65 
       3A 20 4F 46 
       46 20 20 20 
       20 7C 20 5B 
       4C 5D 6F 6F 
       70 3A 20 4F 
       46 46 0D 0A 
04381B 20 5B 45 53 0269*        db " [ESC] or [Q]uit     | Seek -   1 + sec. | v0.9.3 beta\r\n"
       43 5D 20 6F 
       72 20 5B 51 
       5D 75 69 74 
       20 20 20 20 
       20 7C 20 53 
       65 65 6B 20 
       2D 20 20 20 
       31 20 2B 20 
       73 65 63 2E 
       20 7C 20 76 
       30 2E 39 2E 
       33 20 62 65 
       74 61 0D 0A 
043853 00          0270*        db 0 ; null terminator
043854             0271*    
043854             0272*    ; below the detailed instructions / status border
043854 0E 00       0273*        ld c,text_left ; x
043856 06 28       0274*        ld b,vp_playbar_top+5 ; y
043858 CD 52 1B 04 0275*        call vdu_move_cursor
04385C 21 42 35 04 0276*        ld hl,str_dashes_thick
043860 CD 67 00 04 0277*        call printString
043864             0278*    
043864             0279*    ; print the current directory path and first page of files
043864 CD 7E 3D 04 0280*        call bf_print_dir_name
043868 21 00 00 00 0281*        ld hl,0
04386C 22 0A 00 07 0282*        ld (bf_page_cur),hl
043870 AF          0283*        xor a
043871 32 00 00 07 0284*        ld (bf_file_idx),a ; reset the file index
043875 CD 2A 3D 04 0285*        call bf_highlight_file ; highlight the first file
043879             0286*    
043879             0287*    ; load logo and plot it
043879 CD 72 40 04 0288*        call load_ui_images
04387D 21 00 20 00 0289*        ld hl,BUF_UI_LOGO
043881 CD 74 1C 04 0290*        call vdu_buff_select
043885 01 80 01 00 0291*        ld bc,384 ; x
043889 11 14 00 00 0292*        ld de,20 ; y
04388D CD 74 20 04 0293*        call vdu_plot_bmp
043891             0294*    
043891 C9          0295*        ret
043892             0296*    ; end ui_init
043892             0297*    
043892             0298*    agon_jukebox_ascii:
043892 20 20 20 5F 0299*        db 32,32,32,95,95,95,95,95,32,32,32,32,95,95,95,95,95,95,95,95,32,95,95,95,95,95,95,95,95,32,32,32,32,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       20 20 20 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 20 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       0D 0A       
0438BC 20 20 2F 20 0300*        db 32,32,47,32,32,95,32,32,92,32,32,47,32,32,95,95,95,95,95,47,32,92,95,95,95,95,95,32,32,92,32,32,32,92,32,32,32,32,32,32,92,13,10
       20 5F 20 20 
       5C 20 20 2F 
       20 20 5F 5F 
       5F 5F 5F 2F 
       20 5C 5F 5F 
       5F 5F 5F 20 
       20 5C 20 20 
       20 5C 20 20 
       20 20 20 20 
       5C 0D 0A    
0438E7 20 2F 20 20 0301*        db 32,47,32,32,47,95,92,32,32,92,47,32,32,32,92,32,32,95,95,95,32,32,47,32,32,32,124,32,32,32,92,32,32,47,32,32,32,124,32,32,32,92,13,10
       2F 5F 5C 20 
       20 5C 2F 20 
       20 20 5C 20 
       20 5F 5F 5F 
       20 20 2F 20 
       20 20 7C 20 
       20 20 5C 20 
       20 2F 20 20 
       20 7C 20 20 
       20 5C 0D 0A 
043913 2F 20 20 20 0302*        db 47,32,32,32,32,124,32,32,32,32,92,32,32,32,32,92,95,92,32,32,92,47,32,32,32,32,124,32,32,32,32,92,47,32,32,32,32,124,32,32,32,32,92,13,10
       20 7C 20 20 
       20 20 5C 20 
       20 20 20 5C 
       5F 5C 20 20 
       5C 2F 20 20 
       20 20 7C 20 
       20 20 20 5C 
       2F 20 20 20 
       20 7C 20 20 
       20 20 5C 0D 
       0A          
043940 5C 5F 5F 5F 0303*        db 92,95,95,95,95,124,95,95,32,32,47,92,95,95,95,95,95,95,32,32,47,92,95,95,95,95,95,95,95,32,32,47,92,95,95,95,95,124,95,95,32,32,47,13,10
       5F 7C 5F 5F 
       20 20 2F 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       2F 5C 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       5C 5F 5F 5F 
       5F 7C 5F 5F 
       20 20 2F 0D 
       0A          
04396D 20 20 20 20 0304*        db 32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,92,47,13,10
       20 20 20 20 
       5C 2F 20 20 
       20 20 20 20 
       20 20 5C 2F 
       20 20 20 20 
       20 20 20 20 
       20 5C 2F 20 
       20 20 20 20 
       20 20 20 20 
       5C 2F 0D 0A 
043999 20 20 20 20 0305*        db 32,32,32,32,32,95,95,95,95,32,95,95,95,95,32,95,95,95,32,95,95,95,95,32,32,95,95,32,95,95,95,95,95,95,95,95,95,95,95,13,10
       20 5F 5F 5F 
       5F 20 5F 5F 
       5F 5F 20 5F 
       5F 5F 20 5F 
       5F 5F 5F 20 
       20 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 0D 
       0A          
0439C2 20 20 20 20 0306*        db 32,32,32,32,124,32,32,32,32,124,32,32,32,32,124,32,32,32,92,32,32,32,32,124,47,32,95,124,92,95,32,32,32,95,95,95,95,95,47,13,10
       7C 20 20 20 
       20 7C 20 20 
       20 20 7C 20 
       20 20 5C 20 
       20 20 20 7C 
       2F 20 5F 7C 
       5C 5F 20 20 
       20 5F 5F 5F 
       5F 5F 2F 0D 
       0A          
0439EB 20 20 20 20 0307*        db 32,32,32,32,124,32,32,32,32,124,32,32,32,32,124,32,32,32,47,32,32,32,32,32,32,60,32,32,32,124,32,32,32,32,95,95,41,95,13,10
       7C 20 20 20 
       20 7C 20 20 
       20 20 7C 20 
       20 20 2F 20 
       20 20 20 20 
       20 3C 20 20 
       20 7C 20 20 
       20 20 5F 5F 
       29 5F 0D 0A 
043A13 2F 5C 5F 5F 0308*        db 47,92,95,95,124,32,32,32,32,124,32,32,32,32,124,32,32,47,124,32,32,32,32,124,32,32,92,32,32,124,32,32,32,32,32,32,32,32,92,13,10
       7C 20 20 20 
       20 7C 20 20 
       20 20 7C 20 
       20 2F 7C 20 
       20 20 20 7C 
       20 20 5C 20 
       20 7C 20 20 
       20 20 20 20 
       20 20 5C 0D 
       0A          
043A3C 5C 5F 5F 5F 0309*        db 92,95,95,95,95,95,95,95,95,124,95,95,95,95,95,95,47,32,124,95,95,95,95,124,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 5F 5F 5F 
       5F 7C 5F 5F 
       5F 5F 5F 5F 
       2F 20 7C 5F 
       5F 5F 5F 7C 
       5F 5F 20 5C 
       2F 5F 5F 5F 
       5F 5F 5F 5F 
       20 20 2F 0D 
       0A          
043A65 20 20 20 20 0310*        db 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,13,10
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 5C 2F 
       20 20 20 20 
       20 20 20 20 
       5C 2F 0D 0A 
043A8D 20 20 20 20 0311*        db 32,32,32,32,95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,95,95,95,95,32,32,95,95,95,95,32,32,95,95,95,13,10
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 20 5F 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       20 5F 5F 5F 
       5F 20 20 5F 
       5F 5F 0D 0A 
043AB1 20 20 20 20 0312*        db 32,32,32,32,92,95,95,95,95,95,95,32,32,32,92,92,95,95,95,95,95,32,32,92,32,92,32,32,32,92,47,32,32,47,13,10
       5C 5F 5F 5F 
       5F 5F 5F 20 
       20 20 5C 5C 
       5F 5F 5F 5F 
       5F 20 20 5C 
       20 5C 20 20 
       20 5C 2F 20 
       20 2F 0D 0A 
043AD5 20 20 20 20 0313*        db 32,32,32,32,32,124,32,32,32,32,124,32,32,95,47,32,47,32,32,32,124,32,32,32,92,32,92,32,32,32,32,32,47,13,10
       20 7C 20 20 
       20 20 7C 20 
       20 5F 2F 20 
       2F 20 20 20 
       7C 20 20 20 
       5C 20 5C 20 
       20 20 20 20 
       2F 0D 0A    
043AF8 20 20 20 20 0314*        db 32,32,32,32,32,124,32,32,32,32,124,32,32,32,92,47,32,32,32,32,124,32,32,32,32,92,47,32,32,32,32,32,92,13,10
       20 7C 20 20 
       20 20 7C 20 
       20 20 5C 2F 
       20 20 20 20 
       7C 20 20 20 
       20 5C 2F 20 
       20 20 20 20 
       5C 0D 0A    
043B1B 20 20 20 20 0315*        db 32,32,32,32,32,124,95,95,95,95,95,95,32,32,47,92,95,95,95,95,95,95,95,32,32,47,95,95,95,47,92,32,32,92,13,10
       20 7C 5F 5F 
       5F 5F 5F 5F 
       20 20 2F 5C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       20 2F 5F 5F 
       5F 2F 5C 20 
       20 5C 0D 0A 
043B3F 20 20 20 20 0316*        db 32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,92,95,47,13,10
       20 20 20 20 
       20 20 20 20 
       5C 2F 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 5C 
       5F 2F 0D 0A 
043B63 00          0317*        db 0 ; list terminator
043B64             0050         include "browse.inc"
043B64             0001*    bf_files_per_pg: equ 10 ; number of directories / files to display per page
043B64             0002*    
043B64             0003*    bf_get_dir:
043B64             0004*    ; initialize counters
043B64 21 00 00 00 0005*        ld hl,0
043B68 22 01 00 07 0006*        ld (bf_dir_num_files),hl
043B6C             0007*    
043B6C             0008*    ; initialize pointers to store directory info and print directory name
043B6C 21 10 00 07 0009*        ld hl,bf_dir_path  ; where to store result
043B70 01 FF 00 00 0010*        ld bc,255          ; max length (final byte is zero terminator) [has no effect]
043B74             0011*        FFSCALL ffs_getcwd ; MOS api get current working directory
                       M1 Args: function=ffs_getcwd 
043B74 FD E5       0001*M1  			PUSH IY
043B76 3E 9E       0002*M1  			LD	A, function
043B78 5B CF       0003*M1  			RST.LIL	08h
043B7A FD E1       0004*M1  			POP IY
043B7C             0012*    
043B7C             0013*    ; get dir info
043B7C 21 00 02 07 0014*        ld hl,bf_dir_struct ; define where to store directory info
043B80 11 10 00 07 0015*        ld de,bf_dir_path   ; this is pointer to the path to the directory
043B84 AF          0016*        xor a               ; tell MOS to expect zero-terminated string
043B85             0017*        FFSCALL ffs_dopen   ; open dir
                       M1 Args: function=ffs_dopen 
043B85 FD E5       0001*M1  			PUSH IY
043B87 3E 91       0002*M1  			LD	A, function
043B89 5B CF       0003*M1  			RST.LIL	08h
043B8B FD E1       0004*M1  			POP IY
043B8D             0018*    
043B8D             0019*    ; set up pointers
043B8D DD 21 00 06 0020*        ld ix,bf_dir_fil_list ; this is the pointer to the filinfo structs
       07          
043B92 FD 21 00 03 0021*        ld iy,bf_filinfo_ptrs ; where to store pointers to filinfo structs
       07          
043B97             0022*    
043B97             0023*    @readFileInfo:               ; we will loop here until all files have been processed
043B97 21 00 02 07 0024*        ld hl,bf_dir_struct      ; HL is where to get directory info
043B9B ED 12 00    0025*        lea de,ix                ; DE is where to store filinfo struct
043B9E             0026*        FFSCALL ffs_dread        ; read next item from dir into filinfo struct
                       M1 Args: function=ffs_dread 
043B9E FD E5       0001*M1  			PUSH IY
043BA0 3E 93       0002*M1  			LD	A, function
043BA2 5B CF       0003*M1  			RST.LIL	08h
043BA4 FD E1       0004*M1  			POP IY
043BA6             0027*    
043BA6 DD 7E 16    0028*        ld a,(ix+filinfo_fname)  ; get first char of file name
043BA9 B7          0029*        or a                     ; if zero then we are at the end of the listing
043BAA CA 05 3C 04 0030*        jp z,@allDone
043BAE             0031*    
043BAE DD 7E 08    0032*        ld a,(ix+filinfo_fattrib) ; get the file attribute
043BB1 CB AF       0033*        res AM_ARC,a ; clear bit 5 (archive) see: https://discord.com/channels/1158535358624039014/1158536667670511726/1328466726098309173
043BB3 B7          0034*        or a ; if zero this is a file
043BB4 C2 BD 3B 04 0035*        jp nz,@F ; not zero so this is some other file type
043BB8 CB EF       0036*        set AM_ARC,a ; set bit 5 (archive) so will be consistent btw emulator and hardware
043BBA DD 77 08    0037*        ld (ix+filinfo_fattrib),a ; update so we don't have to do this every time downstream
043BBD             0038*    
043BBD             0039*    @@: ; skip over writing hidden and system files
043BBD CB 4F       0040*        bit AM_HID,a ; hidden file
043BBF C2 97 3B 04 0041*        jp nz,@readFileInfo
043BC3 CB 57       0042*        bit AM_SYS,a ; system file
043BC5 C2 97 3B 04 0043*        jp nz,@readFileInfo
043BC9             0044*    
043BC9             0045*    ; check for valid directory
043BC9 CB 67       0046*        bit AM_DIR,a ; directory
043BCB C2 E7 3B 04 0047*        jp nz,@isDir ; is directory so skip .wav file check
043BCF             0048*    
043BCF             0049*    ; is file so check for valid .wav format
043BCF 21 00 FF 06 0050*        ld hl,bf_fil_struct ; hl = pointer to fil struct
043BD3 ED 12 16    0051*        lea de,ix+filinfo_fname ; de = pointer to filename
043BD6 CD CE 69 04 0052*        call verify_wav
043BDA C2 97 3B 04 0053*        jp nz,@readFileInfo ; not a .wav file, so skip it
043BDE             0054*    ; set the last byte of filinfo_faltname to 1 to indicate this is a file for filename sorting
043BDE 3E 31       0055*        ld a,'1'
043BE0 DD 77 15    0056*        ld (ix+filinfo_fname-1),a
043BE3 C3 EC 3B 04 0057*        jp @goodPath
043BE7             0058*    @isDir:
043BE7             0059*    ; set the last byte of filinfo_faltname to 0 to indicate this is a directory for filename sorting
043BE7 3E 30       0060*        ld a,'0'
043BE9 DD 77 15    0061*        ld (ix+filinfo_fname-1),a
043BEC             0062*        ; fall through to @goodPath
043BEC             0063*    @goodPath:
043BEC             0064*    ; valid file or directory
043BEC FD 3E 00    0065*        ld (iy),ix ; store pointer to filinfo struct
043BEF 2A 01 00 07 0066*        ld hl,(bf_dir_num_files) ; get the current file counter
043BF3 23          0067*        inc hl                  ; increment the counter
043BF4 22 01 00 07 0068*        ld (bf_dir_num_files),hl
043BF8             0069*    ; bump pointers
043BF8 ED 33 03    0070*        lea iy,iy+3
043BFB 11 16 01 00 0071*        ld de,filinfo_struct_size ; length of filinfo record
043BFF DD 19       0072*        add ix,de
043C01 C3 97 3B 04 0073*        jp @readFileInfo         ; loop around to check next entry
043C05             0074*    @allDone:
043C05             0075*    ; compute page statistics
043C05 11 0A 00 00 0076*        ld de,bf_files_per_pg    ; number of files per page
043C09 2A 01 00 07 0077*        ld hl,(bf_dir_num_files) ; get the number of files
043C0D             0078*        SIGN_HLU ; check for zero
                       M1 Args: none
043C0D 19          0001*M1      add hl,de ; 1 cycle
043C0E B7          0002*M1      or a ; clear flags ; 1 cycle
043C0F ED 52       0003*M1      sbc hl,de ; 2 cycles
043C11             0004*M1      ; 4 cycles total
043C11 C2 21 3C 04 0079*        jp nz,@not_zero
043C15 11 00 00 00 0080*        ld de,0 ; number of pages, will increment by 1 later
043C19 21 00 00 00 0081*        ld hl,0 ; number of files on last page
043C1D C3 32 3C 04 0082*        jp @write_stats
043C21             0083*    @not_zero:
043C21 CD B1 03 04 0084*        call udiv24 ; de = hl/bf_files_per_pg, hl = mod(hl,bf_files_per_pg)
043C25             0085*        SIGN_HLU ; check remainder for zero
                       M1 Args: none
043C25 19          0001*M1      add hl,de ; 1 cycle
043C26 B7          0002*M1      or a ; clear flags ; 1 cycle
043C27 ED 52       0003*M1      sbc hl,de ; 2 cycles
043C29             0004*M1      ; 4 cycles total
043C29 C2 32 3C 04 0086*        jp nz,@write_stats
043C2D 21 0A 00 00 0087*        ld hl,bf_files_per_pg ; if zero then we have exactly bf_files_per_pg files on the last page ...
043C31 1B          0088*        dec de ; ... and we don't need an additional page for the remainder
043C32             0089*    @write_stats:
043C32 22 07 00 07 0090*        ld (bf_files_last_pg),hl ; save the number of files on the last page
043C36 13          0091*        inc de ; bump the page count
043C37 ED 53 0D 00 0092*        ld (bf_dir_num_pages),de ; save the number of pages
       07          
043C3C 21 00 00 00 0093*        ld hl,0 ; reset the page number
043C40 22 0A 00 07 0094*        ld (bf_page_cur),hl
043C44             0095*    ; sort the filenames
043C44 FD 21 00 03 0096*        ld iy,bf_filinfo_ptrs ; get the pointer to the fileinfo pointer table
       07          
043C49 3A 01 00 07 0097*        ld a,(bf_dir_num_files) ; get the number of files
043C4D 47          0098*        ld b,a ; loop counter
043C4E CD 25 69 04 0099*        call selection_sort_asc_filinfo ; sort the filenames
043C52             0100*    ; close the directory
043C52 21 00 02 07 0101*        ld hl,bf_dir_struct      ; load H: with address of the DIR struct
043C56             0102*        FFSCALL ffs_dclose       ; close dir
                       M1 Args: function=ffs_dclose 
043C56 FD E5       0001*M1  			PUSH IY
043C58 3E 92       0002*M1  			LD	A, function
043C5A 5B CF       0003*M1  			RST.LIL	08h
043C5C FD E1       0004*M1  			POP IY
043C5E             0103*    ; fall through to bf_get_page_num_files
043C5E             0104*    
043C5E             0105*    bf_get_page_num_files:
043C5E             0106*    ; check whether we're at last page
043C5E 2A 0A 00 07 0107*        ld hl,(bf_page_cur)
043C62 ED 5B 0D 00 0108*        ld de,(bf_dir_num_pages)
       07          
043C67 1B          0109*        dec de ; zero-based
043C68 B7          0110*        or a ; clear carry
043C69 ED 52       0111*        sbc hl,de
043C6B 3E 0A       0112*        ld a,bf_files_per_pg ; a = default number of files per page
043C6D C2 75 3C 04 0113*        jp nz,@F ; not the last page
043C71 3A 07 00 07 0114*        ld a,(bf_files_last_pg) ; get the number of files on the last page
043C75             0115*    @@:
043C75 32 04 00 07 0116*        ld (bf_files_cur_pg),a ; save the number of files on the page
043C79 C9          0117*        ret
043C7A             0118*    ; end bf_get_page_num_files
043C7A             0119*    ; end bf_get_dir
043C7A             0120*    
043C7A             0121*    ; print the directory listing for the current directory page
043C7A             0122*    ; inputs: none
043C7A             0123*    ; prerequisites: bf_get_dir must have been called to populate bf_dir_fil_list
043C7A             0124*    ; destroys: everything
043C7A             0125*    bf_print_dir_page:
043C7A             0126*    ; set text viewport for directory listing
043C7A CD D1 35 04 0127*        call vp_dir
043C7E CD 7A 1B 04 0128*        call vdu_cls
043C82             0129*    ; check for zero files in directory
043C82 2A 01 00 07 0130*        ld hl,(bf_dir_num_files)
043C86             0131*        SIGN_HLU
                       M1 Args: none
043C86 19          0001*M1      add hl,de ; 1 cycle
043C87 B7          0002*M1      or a ; clear flags ; 1 cycle
043C88 ED 52       0003*M1      sbc hl,de ; 2 cycles
043C8A             0004*M1      ; 4 cycles total
043C8A CA C8 3C 04 0132*        jp z,@no_files ; no files to display so update ui with page stats and return
043C8E             0133*    ; set pointer to the correct index in the fileinfo pointer table
043C8E 2A 0A 00 07 0134*        ld hl,(bf_page_cur) ; get the current page
043C92 11 1E 00 00 0135*        ld de,bf_files_per_pg*3 ; number of files per page * 3 bytes per pointer
043C96 CD 98 03 04 0136*        call umul24 ; hl = page * num_files_per_page
043C9A EB          0137*        ex de,hl ; can't add ix,hl ...
043C9B DD 21 00 03 0138*        ld ix,bf_filinfo_ptrs ; get the pointer to the fileinfo pointer table
       07          
043CA0 DD 19       0139*        add ix,de ; ix points to the correct index in the fileinfo pointer table
043CA2             0140*    ; loop through the fileinfo pointer table and print out the filenames
043CA2 3A 04 00 07 0141*        ld a,(bf_files_cur_pg)
043CA6 47          0142*        ld b,a ; loop counter
043CA7 AF          0143*        xor a ; song index
043CA8             0144*    @loop:
043CA8 C5          0145*        push bc ; save loop counter
043CA9 F5          0146*        push af ; save song index
043CAA CD C6 6A 04 0147*        call printHexA ; print the song index
043CAE DD 31 00    0148*        ld iy,(ix) ; iy points to filinfo struct
043CB1 CD 63 3D 04 0149*        call bf_print_dir_or_file
043CB5             0150*    @bump_counters:
043CB5 ED 32 03    0151*        lea ix,ix+3 ; bump the filename pointer
043CB8 F1          0152*        pop af ; restore song index
043CB9 3C          0153*        inc a ; increment the song index
043CBA C1          0154*        pop bc ; restore loop counter
043CBB 05          0155*        dec b
043CBC CA DB 3C 04 0156*        jp z,@done ; if zero, we're done
043CC0 CD 7C 00 04 0157*        call printNewLine
043CC4 C3 A8 3C 04 0158*        jp @loop
043CC8             0159*    @no_files:
043CC8 AF          0160*        xor a ; reset the page number to zero
043CC9 32 0A 00 07 0161*        ld (bf_page_cur),a
043CCD 21 01 00 00 0162*        ld hl,1 ; an empty page is still a page
043CD1 22 0D 00 07 0163*        ld (bf_dir_num_pages),hl
043CD5 CD 10 3D 04 0164*        call bf_update_pages_ui
043CD9 AF          0165*        xor a ; set zero flag indicating there were no files to display
043CDA C9          0166*        ret
043CDB             0167*    @done:
043CDB             0168*    ; update ui and return to caller
043CDB CD 10 3D 04 0169*        call bf_update_pages_ui
043CDF F6 01       0170*        or a,1 ; reset zero flag indicating there were files to display
043CE1 C9          0171*        ret
043CE2             0172*    ; end bf_print_dir_page
043CE2             0173*    
043CE2             0174*    ; print the entire directory (for debugging, not in-app use)
043CE2             0175*    ; inputs: none
043CE2             0176*    ; prerequisites: bf_get_dir must have been called to populate bf_dir_fil_list
043CE2             0177*    ; destroys: everything
043CE2             0178*    bf_print_dir:
043CE2             0179*    ; set pointer to the correct index in the fileinfo pointer table
043CE2 DD 21 00 03 0180*        ld ix,bf_filinfo_ptrs ; get the pointer to the fileinfo pointer table
       07          
043CE7             0181*    ; loop through the fileinfo pointer table and print out the filenames
043CE7 3A 01 00 07 0182*        ld a,(bf_dir_num_files)
043CEB 47          0183*        ld b,a ; loop counter
043CEC A7          0184*        and a ; check for zero files in the directory
043CED C8          0185*        ret z ; nothing to see here, move along
043CEE AF          0186*        xor a ; song index
043CEF             0187*    @loop:
043CEF C5          0188*        push bc ; save loop counter
043CF0 F5          0189*        push af ; save song index
043CF1 CD C6 6A 04 0190*        call printHexA ; print the song index
043CF5 DD 31 00    0191*        ld iy,(ix) ; iy points to filinfo struct
043CF8 CD 63 3D 04 0192*        call bf_print_dir_or_file
043CFC             0193*    @bump_counters:
043CFC ED 32 03    0194*        lea ix,ix+3 ; bump the filename pointer
043CFF F1          0195*        pop af ; restore song index
043D00 3C          0196*        inc a ; increment the song index
043D01 C1          0197*        pop bc ; restore loop counter
043D02 05          0198*        dec b
043D03 CA 0F 3D 04 0199*        jp z,@done ; if zero, we're done
043D07 CD 7C 00 04 0200*        call printNewLine
043D0B C3 EF 3C 04 0201*        jp @loop
043D0F             0202*    @done:
043D0F C9          0203*        ret
043D10             0204*    ; end bf_print_dir
043D10             0205*    
043D10             0206*    bf_update_pages_ui:
043D10             0207*    ; update the directory page ui widgets
043D10 CD EB 35 04 0208*        call vp_legend_page_num
043D14 3A 0A 00 07 0209*        ld a,(bf_page_cur)
043D18 3C          0210*        inc a ; pages are zero-based, users are not
043D19 CD AE 00 04 0211*        call printHex8
043D1D CD F8 35 04 0212*        call vp_legend_num_pages
043D21 3A 0D 00 07 0213*        ld a,(bf_dir_num_pages)
043D25 CD AE 00 04 0214*        call printHex8
043D29 C9          0215*        ret
043D2A             0216*    ; end bf_update_pages_ui
043D2A             0217*    
043D2A             0218*    bf_highlight_file:
043D2A             0219*    ; refresh the directory listing
043D2A CD 7A 3C 04 0220*        call bf_print_dir_page
043D2E C8          0221*        ret z ; no files to display so we're done
043D2F             0222*    ; highlight the song being played in the directory listing
043D2F 3A 00 00 07 0223*        ld a,(bf_file_idx)
043D33 16 17       0224*        ld d,vp_dir_top
043D35 82          0225*        add a,d
043D36 0E 00       0226*        ld c,text_left
043D38 57          0227*        ld d,a
043D39 1E 3F       0228*        ld e,text_right
043D3B 47          0229*        ld b,a
043D3C CD D3 1B 04 0230*        call vdu_set_txt_viewport
043D40 CD 7A 1B 04 0231*        call vdu_cls
043D44             0232*    ; set text colours to inverse
043D44 CD 46 36 04 0233*        call set_text_colours_inverse
043D48             0234*    ; print the index and song filename
043D48 3A 00 00 07 0235*        ld a,(bf_file_idx)
043D4C CD C6 6A 04 0236*        call printHexA
043D50 CD 06 3F 04 0237*        call bf_get_filinfo_from_pg_idx ; iy = pointer to the filinfo struct
043D54 CD 63 3D 04 0238*        call bf_print_dir_or_file
043D58             0239*    ; set text colours to normal
043D58 CD 39 36 04 0240*        call set_text_colours_normal
043D5C C9          0241*        ret
043D5D             0242*    ; end bf_highlight_file
043D5D             0243*    
043D5D             0244*    bf_check_dir_or_file:
043D5D FD 7E 08    0245*        ld a,(iy+filinfo_fattrib)
043D60 CB 67       0246*        bit AM_DIR,a ; if not zero, is directory
043D62 C9          0247*        ret
043D63             0248*    ; end bf_check_dir_or_file
043D63             0249*    
043D63             0250*    bf_print_dir_or_file:
043D63 CD 5D 3D 04 0251*        call bf_check_dir_or_file
043D67 CA 76 3D 04 0252*        jp z,@print_file ; not directory so just write filename
043D6B CD 60 00 04 0253*        call printInline
043D6F 3C 44 49 52 0254*        asciz "<DIR> "
       3E 20 00    
043D76             0255*    @print_file:
043D76 ED 23 16    0256*        lea hl,iy+filinfo_fname
043D79 CD 67 00 04 0257*        call printString ; print the filename
043D7D C9          0258*        ret
043D7E             0259*    ; end bf_print_dir_or_file
043D7E             0260*    
043D7E             0261*    bf_print_dir_name:
043D7E CD C4 35 04 0262*        call vp_dir_name
043D82 CD 7A 1B 04 0263*        call vdu_cls
043D86 21 10 00 07 0264*        ld hl,bf_dir_path
043D8A CD 67 00 04 0265*        call printString
043D8E C9          0266*        ret
043D8F             0267*    ; end bf_print_dir_name
043D8F             0051         include "input.inc"
043D8F             0001*    get_input:
043D8F             0002*    ; wait for the user to push a button
043D8F FB          0003*        ei ; enable interrupts
043D90 CD EE 1B 04 0004*        call vdu_vblank ;
043D94             0005*        MOSCALL mos_getkey ; a = ascii code of key pressed
                       M1 Args: function=mos_getkey 
043D94 3E 00       0001*M1  			LD	A, function
043D96 5B CF       0002*M1  			RST.LIL	08h
043D98 F3          0006*        di ; disable interrupts
043D99             0007*    
043D99             0008*    ; RETURN TO MAIN, which re-enables interrupts and exits app
043D99 FE 1B       0009*        cp '\e' ; escape
043D9B C8          0010*        ret z
043D9C FE 71       0011*        cp 'q' ; quit
043D9E C8          0012*        ret z
043D9F             0013*    
043D9F             0014*    ; FILE BROWSER COMMANDS
043D9F FE 0B       0015*        cp 0x0B ; up arrow
043DA1 CA 40 3E 04 0016*        jp z,bf_prev_file
043DA5 FE 0A       0017*        cp 0x0A ; down arrow
043DA7 CA 61 3E 04 0018*        jp z,bf_next_file
043DAB FE 15       0019*        cp 0x15 ; right arrow
043DAD CA 6D 3E 04 0020*        jp z,bf_next_page
043DB1 FE 08       0021*        cp 0x08 ; left arrow
043DB3 CA 99 3E 04 0022*        jp z,bf_prev_page
043DB7 FE 75       0023*        cp 'u' ; go up one directory
043DB9 CA C3 3E 04 0024*        jp z,bf_up_dir
043DBD             0025*    
043DBD             0026*    ; SONG PLAYING COMMANDS
043DBD             0027*    ; set seek speed commands
043DBD FE 2D       0028*        cp '-' ; slow down
043DBF CA DE 3F 04 0029*        jp z,ps_seek_slow
043DC3 FE 3D       0030*        cp '=' ; speed up (means +)
043DC5 CA E7 3F 04 0031*        jp z,ps_seek_fast
043DC9             0032*    ; seek back / forward
043DC9 FE 5B       0033*        cp '['
043DCB CA 15 40 04 0034*        jp z,ps_seek_back
043DCF FE 5D       0035*        cp ']'
043DD1 CA 25 40 04 0036*        jp z,ps_seek_fwd
043DD5             0037*    ; toggle play / pause
043DD5 FE 70       0038*        cp 'p'
043DD7 CA 28 3F 04 0039*        jp z,ps_toggle_pause
043DDB             0040*    ; toggle loop
043DDB FE 6C       0041*        cp 'l'
043DDD CA A5 3F 04 0042*        jp z,ps_toggle_loop
043DE1             0043*    ; toggle shuffle
043DE1 FE 73       0044*        cp 's'
043DE3 CA 6C 3F 04 0045*        jp z,ps_toggle_shuffle
043DE7             0046*    ; play random song
043DE7 FE 72       0047*        cp 'r'
043DE9 CA 20 68 04 0048*        jp z,ps_play_random
043DED             0049*    ; select song or directory
043DED FE 0D       0050*        cp '\r' ; ENTER key
043DEF CA E8 3E 04 0051*        jp z,bf_select_file
043DF3             0052*    ; number key selections
043DF3 FE 30       0053*        cp '0'
043DF5 DA 09 3E 04 0054*        jp c,@no_cmd ; not a song command
043DF9 FE 3A       0055*        cp '9'+1
043DFB D2 09 3E 04 0056*        jp nc,@no_cmd ; not a song command
043DFF             0057*    ; select song or directory
043DFF D6 30       0058*        sub '0' ; a = file index
043E01 32 00 00 07 0059*        ld (bf_file_idx),a
043E05 C3 E8 3E 04 0060*        jp bf_select_file
043E09             0061*    @no_cmd: ; no valid commands so loop
043E09 C3 8F 3D 04 0062*        jp get_input
043E0D             0063*    @play_song:
043E0D CD 2A 3D 04 0064*        call bf_highlight_file ; highlight the selected file
043E11 C3 41 66 04 0065*        jp play_song ; play the song
043E15             0066*    ; end get_input
043E15             0067*    
043E15             0068*    get_rand_file_idx:
043E15 3A 04 00 07 0069*        ld a,(bf_files_cur_pg)
043E19 B7          0070*        or a
043E1A C8          0071*        ret z ; no files on page
043E1B 6F          0072*        ld l,a
043E1C CD 69 05 04 0073*        call rand_8 ; a = 0-255
043E20 67          0074*        ld h,a
043E21 CD A5 05 04 0075*        call udiv8 ; a = mod(a,bf_files_per_pg)
043E25 32 00 00 07 0076*        ld (bf_file_idx),a
043E29 C9          0077*        ret
043E2A             0078*    
043E2A             0079*    get_prev_file_idx:
043E2A             0080*    ; get number of files on current page
043E2A 3A 04 00 07 0081*        ld a,(bf_files_cur_pg)
043E2E 47          0082*        ld b,a
043E2F             0083*    ; decrement the file index
043E2F 3A 00 00 07 0084*        ld a,(bf_file_idx)
043E33 3D          0085*        dec a
043E34 B8          0086*        cp b
043E35 DA 3B 3E 04 0087*        jp c,@F ; check for wraparound
043E39 78          0088*        ld a,b ; get the number of files this page
043E3A 3D          0089*        dec a ; zero-based
043E3B             0090*    @@:
043E3B 32 00 00 07 0091*        ld (bf_file_idx),a
043E3F C9          0092*        ret
043E40             0093*    ; end get_prev_file_idx
043E40             0094*    
043E40             0095*    bf_prev_file:
043E40 CD 2A 3E 04 0096*        call get_prev_file_idx
043E44 CD 2A 3D 04 0097*        call bf_highlight_file ; highlight the file
043E48 C3 8F 3D 04 0098*        jp get_input
043E4C             0099*    ; end bf_prev_file
043E4C             0100*    
043E4C             0101*    get_next_file_idx:
043E4C             0102*    ; get number of files on current page
043E4C 3A 04 00 07 0103*        ld a,(bf_files_cur_pg)
043E50 47          0104*        ld b,a
043E51             0105*    ; increment the file index
043E51 3A 00 00 07 0106*        ld a,(bf_file_idx)
043E55 3C          0107*        inc a
043E56 B8          0108*        cp b
043E57 DA 5C 3E 04 0109*        jp c,@F ; check for wraparound
043E5B AF          0110*        xor a ; wrap around to the first file
043E5C             0111*    @@:
043E5C 32 00 00 07 0112*        ld (bf_file_idx),a
043E60 C9          0113*        ret
043E61             0114*    ; end get_next_file_idx
043E61             0115*    
043E61             0116*    bf_next_file:
043E61 CD 4C 3E 04 0117*        call get_next_file_idx
043E65 CD 2A 3D 04 0118*        call bf_highlight_file ; highlight the file
043E69 C3 8F 3D 04 0119*        jp get_input
043E6D             0120*    ; end bf_next_file
043E6D             0121*    
043E6D             0122*    bf_next_page:
043E6D             0123*    ; advance the page number
043E6D ED 5B 0A 00 0124*        ld de,(bf_page_cur) ; get the current page number
       07          
043E72 13          0125*        inc de ; increment the page number
043E73 2A 0D 00 07 0126*        ld hl,(bf_dir_num_pages) ; get the number of pages
043E77 2B          0127*        dec hl ; zero-based
043E78 B7          0128*        or a ; clear carry
043E79 ED 52       0129*        sbc hl,de
043E7B F2 83 3E 04 0130*        jp p,@F ; not the last page
043E7F 11 00 00 00 0131*        ld de,0 ; wrap around to the first page
043E83             0132*    @@:
043E83             0133*    ; print the new page
043E83 ED 53 0A 00 0134*        ld (bf_page_cur),de
       07          
043E88 AF          0135*        xor a
043E89 32 00 00 07 0136*        ld (bf_file_idx),a ; reset the file index
043E8D CD 5E 3C 04 0137*        call bf_get_page_num_files ; get the number of files on the new page and store it
043E91 CD 2A 3D 04 0138*        call bf_highlight_file ; highlight the first file
043E95 C3 8F 3D 04 0139*        jp get_input
043E99             0140*    ; end bf_next_page
043E99             0141*    
043E99             0142*    bf_prev_page:
043E99             0143*    ; decrement the page number
043E99 2A 0A 00 07 0144*        ld hl,(bf_page_cur) ; get the current page number
043E9D 2B          0145*        dec hl ; decrement the page number
043E9E             0146*        SIGN_HLU
                       M1 Args: none
043E9E 19          0001*M1      add hl,de ; 1 cycle
043E9F B7          0002*M1      or a ; clear flags ; 1 cycle
043EA0 ED 52       0003*M1      sbc hl,de ; 2 cycles
043EA2             0004*M1      ; 4 cycles total
043EA2 F2 AB 3E 04 0147*        jp p,@F ; not time to wrap around
043EA6 2A 0D 00 07 0148*        ld hl,(bf_dir_num_pages) ; get the number of pages
043EAA 2B          0149*        dec hl ; zero-based
043EAB             0150*    @@:
043EAB             0151*    ; print the new page
043EAB 22 0A 00 07 0152*        ld (bf_page_cur),hl
043EAF AF          0153*        xor a
043EB0 32 00 00 07 0154*        ld (bf_file_idx),a ; reset the file index
043EB4 CD 5E 3C 04 0155*        call bf_get_page_num_files ; get the number of files on the new page and store it
043EB8 CD 2A 3D 04 0156*        call bf_highlight_file ; highlight the first file
043EBC C3 8F 3D 04 0157*        jp get_input
043EC0             0158*    ; end bf_prev_page
043EC0             0159*    
043EC0 2E 2E 00    0160*    str_up_dir: asciz ".."
043EC3             0161*    ; change directory one level up
043EC3             0162*    ; inputs: none
043EC3             0163*    bf_up_dir:
043EC3 21 C0 3E 04 0164*        ld hl,str_up_dir
043EC7             0165*    ; change directory
043EC7             0166*    ; inputs: hl = pointer to directory name
043EC7             0167*    bf_change_dir:
043EC7             0168*        MOSCALL mos_cd ; change to the directory
                       M1 Args: function=mos_cd 
043EC7 3E 03       0001*M1  			LD	A, function
043EC9 5B CF       0002*M1  			RST.LIL	08h
043ECB CD 64 3B 04 0169*        call bf_get_dir ; get directory listing
043ECF 21 00 00 00 0170*        ld hl,0
043ED3 22 0A 00 07 0171*        ld (bf_page_cur),hl ; reset the page number
043ED7 AF          0172*        xor a
043ED8 32 00 00 07 0173*        ld (bf_file_idx),a ; reset the file index
043EDC CD 2A 3D 04 0174*        call bf_highlight_file ; highlight the first file
043EE0 CD 7E 3D 04 0175*        call bf_print_dir_name ; print the directory name
043EE4 C3 8F 3D 04 0176*        jp get_input ; back to main loop
043EE8             0177*    ; end bf_change_dir
043EE8             0178*    ; end bf_up_dir
043EE8             0179*    
043EE8             0180*    bf_select_file:
043EE8             0181*    ; set up pointers to the fileinfo struct and filename
043EE8 CD 06 3F 04 0182*        call bf_get_filinfo_from_pg_idx ; iy = pointer to filinfo struct
043EEC 21 00 FF 06 0183*        ld hl,bf_fil_struct ; hl = pointer to fil struct
043EF0 ED 13 16    0184*        lea de,iy+filinfo_fname ; de = pointer to filename
043EF3 CD CE 69 04 0185*        call verify_wav
043EF7 ED 23 16    0186*        lea hl,iy+filinfo_fname ; hl = pointer to filename
043EFA C2 C7 3E 04 0187*        jp nz,bf_change_dir ; not a .wav file, so must be a directory
043EFE             0188*    ; play the .wav file
043EFE CD 2A 3D 04 0189*        call bf_highlight_file ; highlight the selected file
043F02 C3 41 66 04 0190*        jp play_song
043F06             0191*    ; end bf_select_file
043F06             0192*    
043F06             0193*    ; get a pointer to a filinfo struct from a directory page index
043F06             0194*    ; inputs: none
043F06             0195*    ; outputs: iy = pointer to the filinfo struct
043F06             0196*    bf_get_filinfo_from_pg_idx:
043F06             0197*    ; get the fileinfo pointer from the fileinfo pointer table
043F06 2A 0A 00 07 0198*        ld hl,(bf_page_cur) ; get the current page number
043F0A 11 1E 00 00 0199*        ld de,bf_files_per_pg*3 ; number of files per page * 3 bytes per pointer
043F0E CD 98 03 04 0200*        call umul24 ; hl = page * num_files_per_page
043F12 3A 00 00 07 0201*        ld a,(bf_file_idx) ; get the file index
043F16 5F          0202*        ld e,a ; file index
043F17 16 03       0203*        ld d,3 ; 3 bytes per pointer
043F19 ED 5C       0204*        mlt de ; de = file index * 3
043F1B 19          0205*        add hl,de
043F1C EB          0206*        ex de,hl ; can't add iy,hl ...
043F1D FD 21 00 03 0207*        ld iy,bf_filinfo_ptrs ; get the pointer to the fileinfo pointer table
       07          
043F22 FD 19       0208*        add iy,de ; iy points to the first fileinfo pointer in the current page
043F24 FD 37 00    0209*        ld iy,(iy) ; iy points to the filinfo record
043F27 C9          0210*        ret
043F28             0211*    ; end bf_get_filinfo_from_pg_idx
043F28             0212*    
043F28             0213*    ps_toggle_pause:
043F28 CD 83 35 04 0214*        call vp_now_playing
043F2C CD 7A 1B 04 0215*        call vdu_cls
043F30 21 20 66 04 0216*        ld hl,ps_mode
043F34 CB 46       0217*        bit ps_mode_playing,(hl)
043F36 C2 4F 3F 04 0218*        jp nz,@playing
043F3A CB C6       0219*        set ps_mode_playing,(hl)
043F3C CD 60 00 04 0220*        call printInline
043F40 28 50 29 6C 0221*        asciz "(P)laying "
       61 79 69 6E 
       67 20 00    
043F4B C3 60 3F 04 0222*        jp @print
043F4F             0223*    @playing:
043F4F CB 86       0224*        res ps_mode_playing,(hl)
043F51 CD 60 00 04 0225*        call printInline
043F55 28 50 29 61 0226*        asciz "(P)aused  "
       75 73 65 64 
       20 20 00    
043F60             0227*    @print:
043F60 21 16 01 09 0228*        ld hl,ps_filinfo_fname
043F64 CD 67 00 04 0229*        call printString ; print the song filename
043F68 C3 8F 3D 04 0230*        jp get_input
043F6C             0231*    ; end ps_toggle_pause
043F6C             0232*    
043F6C             0233*    ps_toggle_shuffle:
043F6C CD 05 36 04 0234*        call vp_legend_shuffle
043F70 CD 7A 1B 04 0235*        call vdu_cls
043F74 21 20 66 04 0236*        ld hl,ps_mode
043F78 CB 56       0237*        bit ps_mode_shuffle,(hl)
043F7A C2 97 3F 04 0238*        jp nz,@shuffling
043F7E CD 46 36 04 0239*        call set_text_colours_inverse
043F82 21 20 66 04 0240*        ld hl,ps_mode
043F86 CB D6       0241*        set ps_mode_shuffle,(hl)
043F88 CD 60 00 04 0242*        call printInline
043F8C 4F 4E 00    0243*        asciz "ON"
043F8F CD 39 36 04 0244*        call set_text_colours_normal
043F93 C3 8F 3D 04 0245*        jp get_input
043F97             0246*    @shuffling:
043F97 CB 96       0247*        res ps_mode_shuffle,(hl)
043F99 CD 60 00 04 0248*        call printInline
043F9D 4F 46 46 00 0249*        asciz "OFF"
043FA1 C3 8F 3D 04 0250*        jp get_input
043FA5             0251*    ; end ps_toggle_shuffle
043FA5             0252*    
043FA5             0253*    ps_toggle_loop:
043FA5 CD 12 36 04 0254*        call vp_legend_loop
043FA9 CD 7A 1B 04 0255*        call vdu_cls
043FAD 21 20 66 04 0256*        ld hl,ps_mode
043FB1 CB 4E       0257*        bit ps_mode_loop,(hl)
043FB3 C2 D0 3F 04 0258*        jp nz,@looping
043FB7 CD 46 36 04 0259*        call set_text_colours_inverse
043FBB 21 20 66 04 0260*        ld hl,ps_mode
043FBF CB CE       0261*        set ps_mode_loop,(hl)
043FC1 CD 60 00 04 0262*        call printInline
043FC5 4F 4E 00    0263*        asciz "ON"
043FC8 CD 39 36 04 0264*        call set_text_colours_normal
043FCC C3 8F 3D 04 0265*        jp get_input
043FD0             0266*    @looping:
043FD0 CB 8E       0267*        res ps_mode_loop,(hl)
043FD2 CD 60 00 04 0268*        call printInline
043FD6 4F 46 46 00 0269*        asciz "OFF"
043FDA C3 8F 3D 04 0270*        jp get_input
043FDE             0271*    ; end ps_toggle_loop
043FDE             0272*    
043FDE             0273*    ps_seek_slow:
043FDE 3A 38 66 04 0274*        ld a,(ps_seek_rate_idx)
043FE2 3D          0275*        dec a
043FE3 C3 EC 3F 04 0276*        jp ps_set_seek_rate
043FE7             0277*    ; end ps_seek_slow
043FE7             0278*    
043FE7             0279*    ps_seek_fast:
043FE7 3A 38 66 04 0280*        ld a,(ps_seek_rate_idx)
043FEB 3C          0281*        inc a
043FEC             0282*    ; fall through to ps_seek_rate
043FEC             0283*    ; end ps_seek_fast
043FEC             0284*    
043FEC             0285*    ps_set_seek_rate:
043FEC E6 07       0286*        and 7 ; mod 8
043FEE 32 38 66 04 0287*        ld (ps_seek_rate_idx),a
043FF2 21 39 66 04 0288*        ld hl,ps_seek_rate_idx+1
043FF6 11 00 00 00 0289*        ld de,0
043FFA 5F          0290*        ld e,a
043FFB 19          0291*        add hl,de
043FFC 7E          0292*        ld a,(hl)
043FFD 32 34 66 04 0293*        ld (ps_seek_rate),a
044001 CD 1F 36 04 0294*        call vp_seek_rate
044005 CD 7A 1B 04 0295*        call vdu_cls
044009 3A 34 66 04 0296*        ld a,(ps_seek_rate)
04400D CD 08 01 04 0297*        call printDec8
044011 C3 8F 3D 04 0298*        jp get_input
044015             0299*    ; end ps_set_seek_rate
044015             0300*    
044015             0301*    ps_seek_back:
044015             0302*    ; negate seek rate
044015 ED 5B 34 66 0303*        ld de,(ps_seek_rate)
       04          
04401A 21 00 00 00 0304*        ld hl,0
04401E B7          0305*        or a ; clear carry
04401F ED 52       0306*        sbc hl,de ; hl -seek_rate
044021 C3 29 40 04 0307*        jp ps_seek
044025             0308*    ; end ps_seek_back
044025             0309*    
044025             0310*    ps_seek_fwd:
044025             0311*    ; seek forward
044025 2A 34 66 04 0312*        ld hl,(ps_seek_rate)
044029             0313*    ; fall through to ps_seek
044029             0314*    ; end ps_seek_fwd
044029             0315*    
044029             0316*    ps_seek:
044029             0317*    ; compute new playhead position
044029 ED 5B 2B 66 0318*        ld de,(ps_playhead)
       04          
04402E 19          0319*        add hl,de ; hl = playhead + seek_rate
04402F             0320*    
04402F             0321*        ; ld de,(ps_song_duration)
04402F             0322*        ; call udiv24 ; hl = mod(playhead, song_duration)
04402F             0323*    
04402F 22 2B 66 04 0324*        ld (ps_playhead),hl ; save new playhead position
044033             0325*    ; multiply new playhead position by sample rate
044033 DD 21 18 03 0326*        ld ix,ps_wav_header+wav_sample_rate
       09          
044038 CD B7 31 04 0327*        call fetch_int_nor
04403C DD 21 2B 66 0328*        ld ix,ps_playhead
       04          
044041 CD D6 31 04 0329*        call fetch_int_alt
044045 3E 0A       0330*        ld a,fmul
044047 CD E6 22 04 0331*        call FPP ; HLH'L' = seek position from start of file in bytes
04404B DD 21 6E 40 0332*        ld ix,@seek_pos
       04          
044050 CD A8 31 04 0333*        call store_int_nor
044054             0334*    
044054             0335*    ; seek to new position
044054             0336*        ; 0x84: ffs_flseek
044054             0337*        ; Move the read/write pointer in a file (Requires MOS 1.03 or above)
044054             0338*        ; Parameters:
044054             0339*        ; HL(U): Pointer to a FIL structure
044054             0340*        ; DE(U): Least significant 3 bytes of the offset from the start of the file
044054             0341*        ; C: Most significant byte of the offset (set to 0 for files < 16MB)
044054             0342*        ; Preserves: HL(U), DE(U), BC(U)
044054 21 00 00 09 0343*        ld hl,ps_fil_struct
044058 ED 5B 6E 40 0344*        ld de,(@seek_pos) ; low 3 bytes of seek position
       04          
04405D 3A 70 40 04 0345*        ld a,(@seek_pos+2) ; high byte of seek position
044061 4F          0346*        ld c,a
044062             0347*        FFSCALL ffs_flseek
                       M1 Args: function=ffs_flseek 
044062 FD E5       0001*M1  			PUSH IY
044064 3E 84       0002*M1  			LD	A, function
044066 5B CF       0003*M1  			RST.LIL	08h
044068 FD E1       0004*M1  			POP IY
04406A C3 8F 3D 04 0348*        jp get_input
04406E 00 00 00 00 0349*    @seek_pos: dw32 0 ; temp buffer for seek position
044072             0350*    ; end ps_seek
044072             0052         include "logo.inc"
044072             0001*    ; Bitmap indices:
044072             0002*    BUF_UI_LOGO: equ 0x2000
044072             0003*    
044072             0004*    ; Import .rgba2 bitmap files and load them into VDP buffers
044072             0005*    load_ui_images:
044072             0006*    ; load a vdu buffer from local memory
044072 21 00 20 00 0007*        ld hl,BUF_UI_LOGO
044076 11 A0 40 04 0008*        ld de,F_UI_logo
04407A 01 80 25 00 0009*        ld bc,F_UI_logo_end-F_UI_logo
04407E CD 1F 1D 04 0010*        call vdu_load_buffer
044082             0011*    ; now make it a bitmap
044082 21 00 20 00 0012*    	ld hl,BUF_UI_LOGO
044086 CD 4B 1D 04 0013*        call vdu_consolidate_buffer
04408A 21 00 20 00 0014*    	ld hl,BUF_UI_LOGO
04408E CD 74 1C 04 0015*        call vdu_buff_select
044092 01 50 00 00 0016*    	ld bc,80
044096 11 78 00 00 0017*    	ld de,120
04409A 3E 01       0018*    	ld a,1 ; image type 1 = rgba2222
04409C C3 89 1C 04 0019*    	jp vdu_bmp_create
0440A0             0020*    
0440A0             0021*    F_UI_logo:
0440A0 E0 E0 E0 E0 0022*        incbin "../images/logo.rgba2"
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FF EA E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 EA 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       FA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 EA 
       E5 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 E5 FA 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       EA FF FF FF 
       EA E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 FF FF 
       FF EA E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 EA FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E0 E0 E0 E0 
       E0 FA FF FF 
       FF FF FF EA 
       FA E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E0 
       E0 FF FF FF 
       FF FF FF FF 
       FF FF EA E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       FF FF FF FF 
       FF FF E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E0 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E0 
       E0 FA FF FF 
       E5 E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 FF FF 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 E5 E0 
       E0 E0 E0 E0 
       E0 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 E0 E0 E0 
       E0 E0 E0 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E0 E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E0 
       E0 E0 E0 E0 
       E0 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       FA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       FA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E0 
       E0 E0 E0 E0 
       FA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E0 E0 
       E0 E0 E0 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       FA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 EA 
       FF FF FF FF 
       FF FF FF FF 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 EA 
       FF FF FF FF 
       FF FF FF FA 
       E0 E0 E0 E0 
       E0 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E0 E0 E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 FF 
       FF FF FF FF 
       FF FF FF E0 
       E0 E0 E0 E0 
       FA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E0 E0 E0 E0 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 E0 E0 E0 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF E0 E0 
       E0 E0 E0 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E0 E0 
       E0 E0 E0 E0 
       FA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E0 E0 
       E0 E0 E0 E0 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 E0 E0 
       E0 FF FF FF 
       FF E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 FF FF 
       EA E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 EA 
       FA E0 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 E5 E5 
       FA FA FA FA 
       E5 E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 EA 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 FF 
       EA E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FA FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FA 
       FF FA E0 E0 
       E0 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF E5 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E0 E0 E0 E0 
       FA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E5 FA E5 
       E5 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA FA 
       EA EA E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E0 E0 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 FA FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF E0 E0 
       E0 E0 E0 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E0 
       E0 E0 E0 E0 
       E0 FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF E5 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FA E5 E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 EA FF 
       FF FF FA E0 
       E0 E0 E0 E0 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E0 E0 
       E0 E0 E0 E0 
       FF FF FA E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 FF FF 
       FF FF EA E0 
       E0 E0 E0 E0 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 E0 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 EA FF 
       FF FF EA E0 
       E0 E0 E0 E0 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       EA FF FA E0 
       E0 E0 E0 E0 
       FA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       FF FF FF FF 
       FF FF EA FA 
       FA FA FA FA 
       FA E5 E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       E5 FA FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 EA FA 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       FA EA FF FF 
       FF FF EA E5 
       E0 E0 E0 E0 
046620             0023*    F_UI_logo_end:
046620             0053         include "play.inc"
046620             0001*    ; stream a song from the SD card
046620             0002*    ; inputs: hl = pointer to filename
046620             0003*    ; requirements: the file must be 8-bit signed PCM mono
046620             0004*    ; uses: sound channels 0 and 1, buffers 0x3000 and 0x3001
046620             0005*    ; play_song constants
046620             0006*    ch0_buffer: equ 0x3000
046620             0007*    ch1_buffer: equ 0x3001
046620             0008*    cmd0_buffer: equ 0x3002
046620             0009*    cmd1_buffer: equ 0x3003
046620             0010*    
046620             0011*    ; ps_mode bits
046620             0012*    ps_mode_playing: equ 0 ; 0 = paused 1 = playing, p key toggles
046620             0013*    ps_mode_loop:    equ 1 ; 0 = no loop 1 = loop (overrides ps_mode_shuffle if on), l key toggles
046620             0014*    ps_mode_shuffle: equ 2 ; 0 = shuffle off 1 = on, s key toggles
046620             0015*    
046620             0016*    ; play_song state variables
046620             0017*    ; current active channel and bufferId's
046620 00          0018*    ps_mode: db 0 ; playback mode bitmask
046621 00          0019*    ps_channel: db 0 ; channel number
046622 00 00 00    0020*    ps_cmdId: dl 0 ; command bufferId
046625 00 00 00    0021*    ps_sampleId: dl 0 ; sample bufferId
046628 00 00 00    0022*    ps_chunkpointer: dl 0 ; pointer to current chunk
04662B 00 00 00 00 0023*    ps_playhead: dw32 0 ; current playhead position in seconds from the start (32-bit integer)
04662F 00 00 00 00 0024*    ps_song_duration: blkb 5,0 ; duration of the current song in seconds (32-bit integer plus a padding byte)
       00          
046634 01 00 00 00 0025*    ps_seek_rate: dw32 1 ; seek rate in seconds per keypress (32-bit integer)
046638 00          0026*    ps_seek_rate_idx: db 0 ; seek rate index
046639 01 05 0A 0F 0027*        db 1,5,10,15,30,60,120,240 ; seek rates in seconds per keypress
       1E 3C 78 F0 
046641             0028*    
046641             0029*    play_song:
046641             0030*    ; stop the PRT timer and close any currently playing file
046641 CD 9F 67 04 0031*        call ps_close_file ; also stops prt timer
046645             0032*    
046645             0033*    ; clear now playing viewport
046645 CD 83 35 04 0034*        call vp_now_playing
046649 CD 7A 1B 04 0035*        call vdu_cls
04664D             0036*    
04664D             0037*    ; open the file and verify it's a playable .wav file
04664D CD 48 6A 04 0038*        call open_wav
046651 CA 84 66 04 0039*        jp z,@F ; valid .wav file so continue
046655 CD 60 00 04 0040*        call printInline
046659 49 6E 76 61 0041*        asciz "Invalid .wav file selected, try again."
       6C 69 64 20 
       2E 77 61 76 
       20 66 69 6C 
       65 20 73 65 
       6C 65 63 74 
       65 64 2C 20 
       74 72 79 20 
       61 67 61 69 
       6E 2E 00    
046680 C3 8F 3D 04 0042*        jp get_input ; return to user input loop
046684             0043*    
046684             0044*    @@: ; copy the directory filinfo struct to ps_filinfo_struct
046684 ED 23 00    0045*        lea hl,iy ; open_wav set iy to the directory's filinfo struct
046687 11 00 01 09 0046*        ld de,ps_filinfo_struct ; destination address
04668B 01 16 01 00 0047*        ld bc,filinfo_struct_size
04668F ED B0       0048*        ldir
046691             0049*    
046691             0050*    ; tell the user what they've won
046691 CD 60 00 04 0051*        call printInline
046695 28 50 29 6C 0052*        asciz "(P)laying "
       61 79 69 6E 
       67 20 00    
0466A0 21 16 01 09 0053*        ld hl,ps_filinfo_fname
0466A4 CD 67 00 04 0054*        call printString ; print the song filename
0466A8             0055*    
0466A8             0056*    ; compute the song duration from the file size and sample rate and print it
0466A8             0057*    ; technically we should account for the .wav header, but at 76 bytes it's negligible
0466A8 CD 9D 35 04 0058*        call vp_duration ; set viewport to duration window
0466AC 3A 07 03 09 0059*        ld a,(ps_wav_header+wav_file_size+3) ; upper byte
0466B0 DD 2A 04 03 0060*        ld ix,(ps_wav_header+wav_file_size+0) ; lower word
       09          
0466B5 ED 5B 18 03 0061*        ld de,(ps_wav_header+wav_sample_rate)
       09          
0466BA CD D6 05 04 0062*        call udiv3223 ; auix = duration in seconds
0466BE DD 22 2F 66 0063*        ld (ps_song_duration),ix ; duration low word
       04          
0466C3 32 32 66 04 0064*        ld (ps_song_duration+3),a ; duration high byte
0466C7 2A 2F 66 04 0065*        ld hl,(ps_song_duration) ; ls 24 bits of duration is sufficient and all we're prepared for
0466CB CD 66 18 04 0066*        call seconds_to_hhmmss ; hl pointer to string representation of HH:MM:SS
0466CF CD 67 00 04 0067*        call printString ; print the duration
0466D3             0068*    ; reset the playbar counter to zero
0466D3 21 00 00 00 0069*        ld hl,0
0466D7 22 2B 66 04 0070*        ld (ps_playhead),hl
0466DB             0071*    ; load the command buffers and read the first block of data
0466DB CD 62 68 04 0072*        call ps_load_command_buffers
0466DF CD F1 66 04 0073*        call ps_read_sample
0466E3             0074*    ; set ps_mode_playing
0466E3 21 20 66 04 0075*        ld hl,ps_mode
0466E7 CB C6       0076*        set ps_mode_playing,(hl)
0466E9             0077*    ; enable interrupts and start the PRT timer
0466E9 CD 61 69 04 0078*        call ps_prt_start
0466ED             0079*    ; jump to user input loop (enables interrupts)
0466ED             0080*    ; the play sample interrupt will return to there
0466ED             0081*    ; and exit app will return to main from there as well
0466ED C3 8F 3D 04 0082*        jp get_input
0466F1             0083*    ; end play_song
0466F1             0084*    
0466F1             0085*    ; read the next 1-second's worth of sound data from the file
0466F1             0086*    ; and upload it to the sample buffer
0466F1             0087*    ps_read_sample:
0466F1             0088*    ; disable interrupts so load is guaranteed to complete
0466F1 F3          0089*        di
0466F2             0090*    
0466F2             0091*    ; 0x82: ffs_fread
0466F2             0092*    ; Read from a file (Requires MOS 1.03 or above)
0466F2             0093*    ; Parameters:
0466F2             0094*    ; HL(U): Pointer to a FIL structure
0466F2             0095*    ; DE(U): Pointer to a buffer to store the data in
0466F2             0096*    ; BC(U): Number of bytes to read (typically the size of the buffer)
0466F2             0097*    ; Preserves: HL(U), DE(U)
0466F2             0098*    ; Returns:
0466F2             0099*    ; BC(U): Number of bytes read
0466F2             0100*    ; A: FRESULT
0466F2 21 00 00 09 0101*        ld hl,ps_fil_struct
0466F6 11 00 04 09 0102*        ld de,ps_wav_data
0466FA ED 4B 18 03 0103*        ld bc,(ps_wav_header+wav_sample_rate)
       09          
0466FF             0104*        FFSCALL ffs_fread
                       M1 Args: function=ffs_fread 
0466FF FD E5       0001*M1  			PUSH IY
046701 3E 82       0002*M1  			LD	A, function
046703 5B CF       0003*M1  			RST.LIL	08h
046705 FD E1       0004*M1  			POP IY
046707             0105*    
046707             0106*    ; test bc for zero bytes read
046707 21 00 00 00 0107*        ld hl,0
04670B AF          0108*        xor a ; clear carry
04670C ED 42       0109*        sbc hl,bc ; hl = 0-chunksize
04670E C2 1A 67 04 0110*        jp nz,@load ; we read some data
046712             0111*    
046712             0112*    ; no data read so close file and play next song
046712 CD 9F 67 04 0113*        call ps_close_file
046716 C3 B0 67 04 0114*        jp ps_song_over
04671A             0115*    
04671A             0116*    ; load a vdu buffer from local memory
04671A             0117*    ; inputs: hl = bufferId ; bc = length ; de = pointer to data
04671A             0118*    @load:
04671A C5          0119*        push bc ; save how much data to load
04671B 3A 21 66 04 0120*        ld a,(ps_channel)
04671F 3C          0121*        inc a
046720 E6 01       0122*        and 1
046722 32 21 66 04 0123*        ld (ps_channel),a
046726 21 00 30 00 0124*        ld hl,ch0_buffer
04672A 6F          0125*        ld l,a
04672B 22 25 66 04 0126*        ld (ps_sampleId),hl
04672F CD 34 1F 04 0127*        call vdu_clear_buffer
046733 2A 25 66 04 0128*        ld hl,(ps_sampleId)
046737 C1          0129*        pop bc ; restore how much data to load
046738 11 00 04 09 0130*        ld de,ps_wav_data ; pointer to data
04673C CD 1F 1D 04 0131*        call vdu_load_buffer
046740             0132*    ; update the playbar counter and display the time elapsed
046740 CD 45 67 04 0133*        call ps_update_playbar
046744             0134*    
046744             0135*    ; ; DEBUG
046744             0136*    ;     call vp_messages
046744             0137*    ;     call vdu_cls
046744             0138*    ;     ld ix,ps_fil_fptr
046744             0139*    ;     call fetch_int_nor
046744             0140*    ;     call print_float_dec
046744             0141*    ; ; END DEBUG
046744             0142*    
046744 C9          0143*        ret
046745             0144*    ; end ps_read_sample
046745             0145*    ps_update_playbar:
046745             0146*    ; set viewport to playbar
046745 CD 90 35 04 0147*        call vp_elapsed
046749             0148*    ; increment the playbar counter
046749 2A 2B 66 04 0149*        ld hl,(ps_playhead)
04674D 23          0150*        inc hl
04674E 22 2B 66 04 0151*        ld (ps_playhead),hl
046752             0152*    ; convert the playbar counter to HH:MM:SS and print it
046752 CD 66 18 04 0153*        call seconds_to_hhmmss ; hl pointer to string representation of HH:MM:SS
046756 CD 67 00 04 0154*        call printString ; print the playhead position
04675A             0155*    
04675A             0156*    ; print a playing breadcrumb
04675A CD AA 35 04 0157*        call vp_playbar
04675E CD 7A 1B 04 0158*        call vdu_cls
046762             0159*    
046762 21 00 2B 00 0160*        ld hl,[vp_playbar_right-vp_playbar_left]*256 ; leave room for cursor
046766 ED 5B 2F 66 0161*        ld de,(ps_song_duration) ; ls 24-bits is sufficient and all we're prepared for
       04          
04676B CD F9 0E 04 0162*        call udiv168 ; de = breadcrumbs / second in 8.16 fixed point
04676F             0163*    
04676F 2A 2B 66 04 0164*        ld hl,(ps_playhead)
046773 CD 98 03 04 0165*        call umul24 ; uhl is the breadcrumb position
046777             0166*        HLU_TO_A ; a = breadcrumb position
                       M1 Args: none
046777 3B          0001*M1      dec sp ; 1 cycle
046778 E5          0002*M1      push hl ; 4 cycles
046779 33          0003*M1      inc sp ; 1 cycle
04677A F1          0004*M1      pop af ; 4 cycles
04677B             0005*M1      ; 10 cycles total
04677B A7          0167*        and a
04677C CA 87 67 04 0168*        jp z,@done ; if zero, we're done
046780 47          0169*        ld b,a
046781             0170*    @loop:
046781 3E 2E       0171*        ld a,'.'
046783 5B D7       0172*        rst.lil 10h
046785 10 FA       0173*        djnz @loop
046787             0174*    @done:
046787 3E DB       0175*        ld a,219 ; cursor
046789 5B D7       0176*        rst.lil 10h
04678B C9          0177*        ret
04678C             0178*    ; end ps_update_playbar
04678C             0179*    
04678C             0180*    ; this is called by the PRT timer interrupt
04678C             0181*    ps_play_sample:
04678C             0182*    ; call the command buffer to play the sound
04678C 2A 25 66 04 0183*        ld hl,(ps_sampleId)
046790 2C          0184*        inc l
046791 2C          0185*        inc l
046792 22 22 66 04 0186*        ld (ps_cmdId),hl ; TODO: perhaps not needed
046796 CD 19 1F 04 0187*        call vdu_call_buffer
04679A             0188*    ; load the next chunk of data
04679A CD F1 66 04 0189*        call ps_read_sample
04679E             0190*    ; return to the interrupt handler
04679E C9          0191*        ret
04679F             0192*    ; end ps_play_sample
04679F             0193*    
04679F             0194*    ; close the file
04679F             0195*    ps_close_file:
04679F CD 7E 69 04 0196*        call ps_prt_stop ; stop the PRT timer
0467A3             0197*    ; 0x81: ffs_fclose
0467A3             0198*    ; Close a file (Requires MOS 1.03 or above)
0467A3             0199*    ; Parameters:
0467A3             0200*    ; HL(U): Pointer to a FIL structure
0467A3             0201*    ; Preserves: HL(U)
0467A3             0202*    ; Returns:
0467A3             0203*    ; A: FRESULT
0467A3 21 00 00 09 0204*        ld hl,ps_fil_struct
0467A7             0205*        FFSCALL ffs_fclose
                       M1 Args: function=ffs_fclose 
0467A7 FD E5       0001*M1  			PUSH IY
0467A9 3E 81       0002*M1  			LD	A, function
0467AB 5B CF       0003*M1  			RST.LIL	08h
0467AD FD E1       0004*M1  			POP IY
0467AF C9          0206*        ret
0467B0             0207*    ; end ps_close_file
0467B0             0208*    
0467B0             0209*    ps_song_over:
0467B0             0210*    ; get playback mode
0467B0 21 20 66 04 0211*        ld hl,ps_mode
0467B4             0212*    
0467B4             0213*    ; are we in loop mode?
0467B4 CB 4E       0214*        bit ps_mode_loop,(hl)
0467B6 CA C2 67 04 0215*        jp z,@F ; no so check next mode
0467BA 21 16 01 09 0216*        ld hl,ps_filinfo_fname ; get current song filename
0467BE C3 41 66 04 0217*        jp play_song ; and play it again, Sam
0467C2             0218*    
0467C2             0219*    @@: ; are we in shuffle mode?
0467C2 CB 56       0220*        bit ps_mode_shuffle,(hl)
0467C4 C2 20 68 04 0221*        jp nz,ps_play_random ; yes so play a random song
0467C8             0222*    
0467C8             0223*    ; loop and shuffle are off so play next song
0467C8 C3 CC 67 04 0224*        jp ps_play_next_song
0467CC             0225*    ; end ps_song_over
0467CC             0226*    
0467CC             0227*    ps_play_next_song:
0467CC 3A 04 00 07 0228*        ld a,(bf_files_cur_pg)
0467D0 B7          0229*        or a ; check for zero files
0467D1 CA 8F 3D 04 0230*        jp z,get_input ; no files to play so return to user input loop
0467D5 47          0231*        ld b,a ; loop counter
0467D6             0232*    @next_file:
0467D6 C5          0233*        push bc ; save loop counter
0467D7 CD 4C 3E 04 0234*        call get_next_file_idx ; (bf_file_idx)++ with wraparound
0467DB CD 06 3F 04 0235*        call bf_get_filinfo_from_pg_idx ; iy points to filinfo struct
0467DF CD 5D 3D 04 0236*        call bf_check_dir_or_file ; if zero then it's a song
0467E3 C1          0237*        pop bc ; restore loop counter
0467E4 CA EE 67 04 0238*        jp z,@play_song ; is a file so play song
0467E8 10 EC       0239*        djnz @next_file ; try the next file
0467EA C3 8F 3D 04 0240*        jp get_input ; no files in this directory so return to user input loop
0467EE             0241*    @play_song:
0467EE CD 2A 3D 04 0242*        call bf_highlight_file ; highlight the selected file
0467F2 C3 41 66 04 0243*        jp play_song
0467F6             0244*    ; end ps_play_next_song
0467F6             0245*    
0467F6             0246*    ps_play_prev_song:
0467F6 3A 04 00 07 0247*        ld a,(bf_files_cur_pg)
0467FA B7          0248*        or a ; check for zero files
0467FB CA 8F 3D 04 0249*        jp z,get_input ; no files to play so return to user input loop
0467FF 47          0250*        ld b,a ; loop counter
046800             0251*    @next_file:
046800 C5          0252*        push bc ; save loop counter
046801 CD 4C 3E 04 0253*        call get_next_file_idx ; (bf_file_idx)++ with wraparound
046805 CD 06 3F 04 0254*        call bf_get_filinfo_from_pg_idx ; iy points to filinfo struct
046809 CD 5D 3D 04 0255*        call bf_check_dir_or_file ; if zero then it's a song
04680D C1          0256*        pop bc ; restore loop counter
04680E CA 18 68 04 0257*        jp z,@play_song ; is a file so play song
046812 10 EC       0258*        djnz @next_file ; try the next file
046814 C3 8F 3D 04 0259*        jp get_input ; no files in this directory so return to user input loop
046818             0260*    @play_song:
046818 CD 2A 3D 04 0261*        call bf_highlight_file ; highlight the selected file
04681C C3 41 66 04 0262*        jp play_song
046820             0263*    ; end ps_play_prev_song
046820             0264*    
046820             0265*    ; queue a random song on the current page to play next
046820             0266*    ps_play_random:
046820 3A 04 00 07 0267*        ld a,(bf_files_cur_pg)
046824 B7          0268*        or a ; check for zero files
046825 CA 8F 3D 04 0269*        jp z,get_input ; no files to play so return to user input loop
046829 47          0270*        ld b,a ; loop counter
04682A 3A 00 00 07 0271*        ld a,(bf_file_idx) ; save current song index
04682E 32 61 68 04 0272*        ld (@file_idx),a
046832             0273*    @next_file:
046832 C5          0274*        push bc ; save loop counter
046833 CD 15 3E 04 0275*        call get_rand_file_idx ; a->(bf_file_idx)
046837 21 61 68 04 0276*        ld hl,@file_idx
04683B BE          0277*        cp (hl) ; check for same song
04683C CA 53 68 04 0278*        jp z,@same ; same song so try again
046840 CD 06 3F 04 0279*        call bf_get_filinfo_from_pg_idx ; iy points to filinfo struct
046844 CD 5D 3D 04 0280*        call bf_check_dir_or_file ; if zero then it's a song
046848             0281*    @bump_counter:
046848 C1          0282*        pop bc ; restore loop counter
046849 CA 59 68 04 0283*        jp z,@play_song ; is a file so play song
04684D 10 E3       0284*        djnz @next_file ; try the next file
04684F C3 8F 3D 04 0285*        jp get_input ; no files in this directory so return to user input loop
046853             0286*    @same:
046853 F6 01       0287*        or a,1 ; reset zero flag
046855 C3 48 68 04 0288*        jp @bump_counter
046859             0289*    @play_song:
046859 CD 2A 3D 04 0290*        call bf_highlight_file ; highlight the selected file
04685D C3 41 66 04 0291*        jp play_song
046861 00          0292*    @file_idx: db 0
046862             0293*    ; end ps_play_random
046862             0294*    
046862             0295*    ps_load_command_buffers:
046862 21 02 30 00 0296*        ld hl,cmd0_buffer
046866 CD 34 1F 04 0297*        call vdu_clear_buffer
04686A 2A 18 03 09 0298*        ld hl,(ps_wav_header+wav_sample_rate)
04686E 22 B8 68 04 0299*        ld (ps_sr0),hl
046872 3E 17       0300*        ld a,23
046874 32 BA 68 04 0301*        ld (ps_sr0+2),a
046878 21 02 30 00 0302*        ld hl,cmd0_buffer
04687C 01 1D 00 00 0303*        ld bc,ps_cmd0_end-ps_cmd0
046880 11 AF 68 04 0304*        ld de,ps_cmd0
046884 CD F1 1E 04 0305*        call vdu_write_block_to_buffer
046888             0306*    
046888 21 03 30 00 0307*        ld hl,cmd1_buffer
04688C CD 34 1F 04 0308*        call vdu_clear_buffer
046890 2A 18 03 09 0309*        ld hl,(ps_wav_header+wav_sample_rate)
046894 22 D5 68 04 0310*        ld (ps_sr1),hl
046898 3E 17       0311*        ld a,23
04689A 32 D7 68 04 0312*        ld (ps_sr1+2),a
04689E 21 03 30 00 0313*        ld hl,cmd1_buffer
0468A2 01 1D 00 00 0314*        ld bc,ps_cmd1_end-ps_cmd1
0468A6 11 CC 68 04 0315*        ld de,ps_cmd1
0468AA CD F1 1E 04 0316*        call vdu_write_block_to_buffer
0468AE C9          0317*        ret
0468AF             0318*    ps_cmd0:
0468AF             0319*    ; vdu_buffer_to_sound command string
0468AF             0320*    ; Command 5: Buffer to sound
0468AF             0321*    ; VDU 23, 0, &85, channel (ignored), 5, 2, bufferId; format, [sampleRate;]
0468AF 17 00 85    0322*        db 23,0,0x85 ; vdu sound command header
0468B2 00          0323*        db 0x00 ; channel (ignored)
0468B3 05          0324*        db 0x05 ; buffer to sound command
0468B4 02          0325*        db 0x02 ; command 2 create sample
0468B5 00 30       0326*        dw ch0_buffer
0468B7 09          0327*        db 1+8 ; 8-bit unsigned PCM mono, 8 = sample rate argument follows
0468B8             0328*    ps_sr0:
0468B8 00 00       0329*        dw 0x0000 ; sample rate Hz
0468BA             0330*    ; vdu_play_sfx command string
0468BA             0331*    ; Command 4: Set waveform
0468BA             0332*    ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
0468BA 17 00 85    0333*        db 23,0,$85 ; vdu sound command header
0468BD 00          0334*        db 0 ; channel
0468BE 04          0335*        db 4 ; set waveform command
0468BF 08          0336*        db 8 ; waveform 8 = sample
0468C0 00 30       0337*        dw ch0_buffer ; sample bufferId
0468C2             0338*    ; Command 0: Play note
0468C2             0339*    ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
0468C2 17 00 85    0340*        db 23,0,$85 ; vdu sound command header
0468C5 00          0341*        db 0 ; channel
0468C6 00          0342*        db 0 ; play note command
0468C7 7F          0343*        db 127  ; volume 127 = max
0468C8 00 00       0344*        dw 0 ; frequency (relevant only for tuneable samples)
0468CA 00 00       0345*        dw 0 ; duration (ms), zero means play one time in full
0468CC             0346*    ps_cmd0_end:
0468CC             0347*    
0468CC             0348*    ps_cmd1:
0468CC             0349*    ; vdu_buffer_to_sound command string
0468CC             0350*    ; Command 5: Buffer to sound
0468CC             0351*    ; VDU 23, 0, &85, channel (ignored), 5, 2, bufferId; format, [sampleRate;]
0468CC 17 00 85    0352*        db 23,0,0x85 ; vdu sound command header
0468CF 00          0353*        db 0x00 ; channel (ignored)
0468D0 05          0354*        db 0x05 ; buffer to sound command
0468D1 02          0355*        db 0x02 ; command 2 create sample
0468D2 01 30       0356*        dw ch1_buffer
0468D4 09          0357*        db 1+8 ; 8-bit unsigned PCM mono, 8 = sample rate argument follows
0468D5             0358*    ps_sr1:
0468D5 00 00       0359*        dw 0x0000 ; sample rate Hz
0468D7             0360*    ; vdu_play_sfx command string
0468D7             0361*    ; Command 4: Set waveform
0468D7             0362*    ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
0468D7 17 00 85    0363*        db 23,0,$85 ; vdu sound command header
0468DA 01          0364*        db 1 ; channel
0468DB 04          0365*        db 4 ; set waveform command
0468DC 08          0366*        db 8 ; waveform 8 = sample
0468DD 01 30       0367*        dw ch1_buffer ; sample bufferId
0468DF             0368*    ; Command 0: Play note
0468DF             0369*    ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
0468DF 17 00 85    0370*        db 23,0,$85 ; vdu sound command header
0468E2 01          0371*        db 1 ; channel
0468E3 00          0372*        db 0 ; play note command
0468E4 7F          0373*        db 127  ; volume 127 = max
0468E5 00 00       0374*        dw 0 ; frequency (relevant only for tuneable samples)
0468E7 00 00       0375*        dw 0 ; duration (ms), zero means play one time in full
0468E9             0376*    ps_cmd1_end:
0468E9             0377*    ; end ps_load_command_buffers
0468E9             0054         include "sort.inc"
0468E9             0001*    ; Determines the ascending lexical order of two zero-terminated strings
0468E9             0002*    ; Inputs: HL, DE = pointers to strings
0468E9             0003*    ; Returns:
0468E9             0004*    ;   - HL points to the lexically smaller string, DE to the larger (swapped if HL > DE).
0468E9             0005*    ; Flags:
0468E9             0006*    ;   - Z set,   C reset: Strings are equal.
0468E9             0007*    ;   - Z reset, C reset: DE is lexically larger than HL.
0468E9             0008*    ;   - Z reset, C set: DE is lexically smaller than HL.
0468E9             0009*    ; Destroys: A
0468E9             0010*    ; Notes:
0468E9             0011*    ;   - Comparisons are based on ASCII values: punctuation/numbers < uppercase < lowercase.
0468E9             0012*    alpha_asc:
0468E9 E5          0013*        push hl
0468EA D5          0014*        push de
0468EB             0015*    @loop:
0468EB 1A          0016*        ld a,(de)
0468EC BE          0017*        cp a,(hl)
0468ED 20 05       0018*        jr nz,@done
0468EF 13          0019*        inc de
0468F0 23          0020*        inc hl
0468F1 B7          0021*        or a,a
0468F2 20 F7       0022*        jr nz,@loop
0468F4             0023*    @done:
0468F4 D1          0024*        pop de
0468F5 E1          0025*        pop hl
0468F6 D0          0026*        ret nc
0468F7 EB          0027*        ex de,hl
0468F8 C9          0028*        ret
0468F9             0029*    ; end alpha_asc
0468F9             0030*    
0468F9             0031*    ; Sorts a list of pointers to zero-terminated strings in ascending lexical order
0468F9             0032*    ; using the selection sort algorithm, which is in-place and stable.
0468F9             0033*    ; Inputs:
0468F9             0034*    ;   - IY: Pointer to the list of string pointers.
0468F9             0035*    ;   - B: Number of items in the list (max 255).
0468F9             0036*    ; Outputs:
0468F9             0037*    ;   - Sorted list of pointers in ascending lexical order.
0468F9             0038*    ; Destroys:
0468F9             0039*    ;   - A, BC, DE, HL, IX.
0468F9             0040*    ; Notes:
0468F9             0041*    ;   - Strings are compared using an unsigned comparison (ASCII-based).
0468F9             0042*    ;   - The algorithm assumes all strings are properly null-terminated.
0468F9             0043*    ;   - The sorting is performed in-place by swapping pointers in the list.
0468F9             0044*    selection_sort_asc:
0468F9 A0          0045*        and a,b                  ; Check if B is zero
0468FA C8          0046*        ret z                    ; No need to sort an empty list
0468FB 05          0047*        dec b                    ; We only need to do n-1 loops
0468FC C8          0048*        ret z                    ; No need to sort a single item
0468FD FD E5       0049*        push iy                  ; Save pointer to the list of pointers
0468FF             0050*    @outer_loop:
0468FF ED 54 03    0051*        lea ix,iy+3              ; IX = pointer to the next string in the list
046902 C5          0052*        push bc                  ; Save the outer loop counter
046903             0053*    @inner_loop:
046903 C5          0054*        push bc                  ; Save the inner loop counter
046904 FD 27 00    0055*        ld hl,(iy)               ; HL = address of the current string
046907 DD 17 00    0056*        ld de,(ix)               ; DE = address of the next string to compare
04690A CD E9 68 04 0057*        call alpha_asc           ; Compare (HL) and (DE)
04690E 30 06       0058*        jr nc,@skip_swap         ; If (HL) <= (DE), skip swapping the strings
046910 FD 2F 00    0059*        ld (iy),hl               ; alpha_asc already did the swap ...
046913 DD 1F 00    0060*        ld (ix),de               ; ... so we just load as is
046916             0061*    @skip_swap:
046916 ED 32 03    0062*        lea ix,ix+3              ; Move to the next pointer
046919 C1          0063*        pop bc                   ; Restore the inner loop counter
04691A 10 E7       0064*        djnz @inner_loop         ; Continue the inner loop
04691C ED 33 03    0065*        lea iy,iy+3              ; Move to the next pointer in the list
04691F C1          0066*        pop bc                   ; Restore the outer loop counter
046920 10 DD       0067*        djnz @outer_loop         ; Continue the outer loop
046922 FD E1       0068*        pop iy                   ; Restore pointer to the list of pointers
046924 C9          0069*        ret
046925             0070*    ; end selection_sort_asc
046925             0071*    
046925             0072*    ; same as selection_sort_asc, but for sorting fileinfo structs by filename
046925             0073*    selection_sort_asc_filinfo:
046925 A0          0074*        and a,b                  ; Check if B is zero
046926 C8          0075*        ret z                    ; No need to sort an empty list
046927 05          0076*        dec b                    ; We only need to do n-1 loops
046928 C8          0077*        ret z                    ; No need to sort a single item
046929 FD E5       0078*        push iy                  ; Save pointer to the list of pointers
04692B             0079*    @outer_loop:
04692B ED 54 03    0080*        lea ix,iy+3              ; IX = pointer to the next string in the list
04692E C5          0081*        push bc                  ; Save the outer loop counter
04692F             0082*    @inner_loop:
04692F C5          0083*        push bc                  ; Save the inner loop counter
046930 FD 27 00    0084*        ld hl,(iy)               ; HL = address of the current string
046933 11 15 00 00 0085*        ld de,filinfo_fname-1      ; offset to the filename in the FILINFO struct
046937 19          0086*        add hl,de                ; HL = address of the filename
046938 E5          0087*        push hl                  ; Save the address of the filename
046939 DD 27 00    0088*        ld hl,(ix)               ; HL = address of the next string to compare
04693C 19          0089*        add hl,de                ; HL = address of the filename (DE already has the offset)
04693D EB          0090*        ex de,hl                 ; DE = address of the filename
04693E E1          0091*        pop hl                   ; HL = address of the current filename
04693F CD E9 68 04 0092*        call alpha_asc           ; Compare (HL) and (DE)
046943 30 0D       0093*        jr nc,@skip_swap         ; If (HL) <= (DE), skip swapping the strings
046945 01 EB FF FF 0094*        ld bc,-filinfo_fname+1     ; -offset to the filename in the FILINFO struct
046949 09          0095*        add hl,bc                ; HL = address of the FILINFO struct
04694A FD 2F 00    0096*        ld (iy),hl
04694D EB          0097*        ex de,hl                 ; HL = address of the filename
04694E 09          0098*        add hl,bc                ; HL = address of the FILINFO struct
04694F DD 2F 00    0099*        ld (ix),hl
046952             0100*    @skip_swap:
046952 ED 32 03    0101*        lea ix,ix+3              ; Move to the next pointer
046955 C1          0102*        pop bc                   ; Restore the inner loop counter
046956 10 D7       0103*        djnz @inner_loop         ; Continue the inner loop
046958 ED 33 03    0104*        lea iy,iy+3              ; Move to the next pointer in the list
04695B C1          0105*        pop bc                   ; Restore the outer loop counter
04695C 10 CD       0106*        djnz @outer_loop         ; Continue the outer loop
04695E FD E1       0107*        pop iy                   ; Restore pointer to the list of pointers
046960 C9          0108*        ret
046961             0109*    ; end selection_sort_asc_filinfo
046961             0055         include "timer_jukebox.inc"
046961             0001*    ps_prt_reload: equ [72000/2] ; 36000 = 2 ticks per second at 18.432 MHz with a 256 clock divider
046961             0002*    
046961             0003*    ; start PRT timer
046961             0004*    ps_prt_start:
046961 21 00 00 00 0005*        ld hl,0
046965 22 A0 69 04 0006*        ld (ps_prt_irq_counter),hl
046969 21 A0 8C 00 0007*        ld hl,ps_prt_reload
04696D ED 29 84    0008*        out0 (TMR1_CTL+TMR_RES_LOW),l
046970 ED 21 85    0009*    	out0 (TMR1_CTL+TMR_RES_HIGH),h
046973             0010*    ; disable timer (in effect, reset it)
046973 3E 0E       0011*        ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_256 | RST_EN_1 | PRT_EN_0
046975 ED 39 83    0012*    	out0 (TMR1_CTL+TMR_REG_CTL),a
046978             0013*    ; enable timer,with interrupt and CONTINUOUS mode,clock divider 256
046978 3E 5F       0014*        ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_256 | RST_EN_1 | PRT_EN_1
04697A ED 39 83    0015*    	out0 (TMR1_CTL+TMR_REG_CTL),a
04697D C9          0016*        ret
04697E             0017*    
04697E             0018*    ; stop PRT timer
04697E             0019*    ps_prt_stop:
04697E 3E 0E       0020*        ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_256 | RST_EN_1 | PRT_EN_0
046980 ED 39 83    0021*    	out0 (TMR1_CTL+TMR_REG_CTL),a
046983 C9          0022*        ret
046984             0023*    
046984             0024*    ; ===============================================
046984             0025*    ; PRT Timer Interrupt Handling
046984             0026*    ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
046984             0027*    ; -----------------------------------------------
046984             0028*    ps_prt_irq_init:
046984             0029*        ; set up interrupt vector table 2
046984 21 00 00 00 0030*    	ld hl,0
046988 3A 0C 01 00 0031*    	ld a,($10c)
04698C 6F          0032*    	ld l,a
04698D 3A 0D 01 00 0033*    	ld a,($10d)
046991 67          0034*    	ld h,a
046992             0035*    
046992             0036*    	; skip over CALL ($c3)
046992 23          0037*    	inc hl
046993             0038*    	; load address of jump into vector table 2 (in ram)
046993 ED 27       0039*    	ld hl,(hl)
046995             0040*    
046995             0041*    	; write CALL ps_prt_irq_handler to vector table 2
046995 3E C3       0042*    	ld a,$c3
046997 77          0043*    	ld (hl),a
046998 23          0044*    	inc hl
046999 11 A1 69 04 0045*    	ld de,ps_prt_irq_handler
04699D ED 1F       0046*    	ld (hl),de
04699F             0047*    
04699F C9          0048*        ret
0469A0             0049*    ; end ps_prt_irq_init
0469A0             0050*    
0469A0             0051*    ; interrupt routine for playing the next sample
0469A0             0052*    ps_prt_irq_counter:
0469A0 00          0053*    	db 0
0469A1             0054*    ps_prt_irq_handler:
0469A1 F3          0055*        di
0469A2 08          0056*        ex af,af'
0469A3 D9          0057*        exx
0469A4             0058*    ; clear sysvar_keyascii
0469A4             0059*    	MOSCALL mos_sysvars
                       M1 Args: function=mos_sysvars 
0469A4 3E 08       0001*M1  			LD	A, function
0469A6 5B CF       0002*M1  			RST.LIL	08h
0469A8 AF          0060*    	xor a
0469A9 DD 77 05    0061*    	ld (IX+sysvar_keyascii),a
0469AC             0062*    ; read the timer interrupt and bump the counter
0469AC ED 38 83    0063*        in0 a,(TMR1_CTL+TMR_REG_CTL)
0469AF 3A A0 69 04 0064*        ld a,(ps_prt_irq_counter)
0469B3 3C          0065*        inc a
0469B4 E6 01       0066*        and 1 ; modulo 2
0469B6 32 A0 69 04 0067*        ld (ps_prt_irq_counter),a
0469BA             0068*    ; if counter zero, play the next sample
0469BA C2 C8 69 04 0069*        jp nz,@F
0469BE 21 20 66 04 0070*        ld hl,ps_mode
0469C2 CB 46       0071*        bit ps_mode_playing,(hl)
0469C4 C4 8C 67 04 0072*        call nz,ps_play_sample
0469C8             0073*    @@:
0469C8 D9          0074*        exx
0469C9 08          0075*        ex af,af'
0469CA FB          0076*        ei
0469CB 5B ED 4D    0077*        reti.l
0469CE             0078*    ; end ps_prt_irq_handler
0469CE             0056         include "wav.inc"
0469CE             0001*    ; WAV File Structure Offsets and Descriptions
0469CE             0002*    wav_riff:          EQU 0    ; 4 bytes: "RIFF" identifier
0469CE             0003*    wav_file_size:     EQU 4    ; 4 bytes: Total file size minus 8 bytes for RIFF header
0469CE             0004*    wav_wave:          EQU 8    ; 4 bytes: "WAVE" identifier
0469CE             0005*    wav_fmt_marker:    EQU 12   ; 4 bytes: "fmt " subchunk marker
0469CE             0006*    wav_fmt_size:      EQU 16   ; 4 bytes: Format chunk size (16 for PCM)
0469CE             0007*    wav_audio_format:  EQU 20   ; 2 bytes: Audio format (1 = PCM)
0469CE             0008*    wav_num_channels:  EQU 22   ; 2 bytes: Number of channels (1 = mono, 2 = stereo)
0469CE             0009*    wav_sample_rate:   EQU 24   ; 4 bytes: Sample rate in Hz (e.g., 32768)
0469CE             0010*    wav_byte_rate:     EQU 28   ; 4 bytes: Bytes per second (SampleRate * NumChannels * BitsPerSample / 8)
0469CE             0011*    wav_block_align:   EQU 32   ; 2 bytes: Bytes per sample block (NumChannels * BitsPerSample / 8)
0469CE             0012*    wav_bits_per_sample: EQU 34 ; 2 bytes: Bits per sample (e.g., 8 or 16)
0469CE             0013*    
0469CE             0014*    ; LIST Chunk (Extra Metadata)
0469CE             0015*    wav_list_marker:   EQU 36   ; 4 bytes: "LIST" marker
0469CE             0016*    wav_list_size:     EQU 40   ; 4 bytes: Size of the LIST chunk (e.g., 26)
0469CE             0017*    wav_info_marker:   EQU 44   ; 4 bytes: "INFO" marker
0469CE             0018*    wav_isft_marker:   EQU 48   ; 4 bytes: "ISFT" marker (software identifier)
0469CE             0019*    wav_isft_data:     EQU 52   ; 14 bytes: Software info string (e.g., "Lavf59.27.100")
0469CE             0020*    wav_isft_padding:  EQU 66   ; 2 bytes: Padding/NULL terminator for alignment
0469CE             0021*    
0469CE             0022*    ; Data Chunk
0469CE             0023*    wav_data_marker:   EQU 68   ; 4 bytes: "data" subchunk marker
0469CE             0024*    wav_data_size:     EQU 72   ; 4 bytes: Size of the audio data in bytes
0469CE             0025*    wav_data_start:    EQU 76   ; Start of audio data
0469CE             0026*    wav_header_size:   EQU wav_data_start ; Total Header Size: 76 bytes
0469CE             0027*    
0469CE             0028*    ; verify that a file is a .wav file
0469CE             0029*    ; inputs: hl = pointer to fil struct, de = pointer to filename
0469CE             0030*    ; returns: zero flag set if a .wav file we can read
0469CE             0031*    ; destroys: af
0469CE             0032*    verify_wav:
0469CE             0033*    ; back up registers
0469CE E5          0034*        push hl
0469CF C5          0035*        push bc
0469D0 D5          0036*        push de
0469D1 DD E5       0037*        push ix
0469D3 FD E5       0038*        push iy
0469D5             0039*    
0469D5             0040*    ; clear the .wav header buffer
0469D5 E5          0041*        push hl
0469D6 D5          0042*        push de
0469D7 01 4C 00 00 0043*        ld bc,wav_header_size
0469DB 21 00 1C 08 0044*        ld hl,bf_wav_header
0469DF CD 90 03 04 0045*        call clear_mem
0469E3 D1          0046*        pop de
0469E4 E1          0047*        pop hl
0469E5             0048*    
0469E5             0049*    ; open the file
0469E5 0E 01       0050*        ld c,fa_read
0469E7             0051*        FFSCALL ffs_fopen
                       M1 Args: function=ffs_fopen 
0469E7 FD E5       0001*M1  			PUSH IY
0469E9 3E 80       0002*M1  			LD	A, function
0469EB 5B CF       0003*M1  			RST.LIL	08h
0469ED FD E1       0004*M1  			POP IY
0469EF             0052*    
0469EF             0053*    ; read the header
0469EF 01 4C 00 00 0054*        ld bc,wav_header_size
0469F3 11 00 1C 08 0055*        ld de,bf_wav_header
0469F7             0056*        FFSCALL ffs_fread
                       M1 Args: function=ffs_fread 
0469F7 FD E5       0001*M1  			PUSH IY
0469F9 3E 82       0002*M1  			LD	A, function
0469FB 5B CF       0003*M1  			RST.LIL	08h
0469FD FD E1       0004*M1  			POP IY
0469FF             0057*    
0469FF             0058*    ; close the file
0469FF             0059*        FFSCALL ffs_fclose
                       M1 Args: function=ffs_fclose 
0469FF FD E5       0001*M1  			PUSH IY
046A01 3E 81       0002*M1  			LD	A, function
046A03 5B CF       0003*M1  			RST.LIL	08h
046A05 FD E1       0004*M1  			POP IY
046A07             0060*    
046A07             0061*    ; verify the .wav header
046A07 DD 21 00 1C 0062*        ld ix,bf_wav_header
       08          
046A0C DD 27 00    0063*        ld hl,(ix+wav_riff)
046A0F             0064*    
046A0F 11 52 49 46 0065*        ld de, 0x464952  ; ascii for "RIF" in little-endian order
046A13 B7          0066*        or a ; clear carry
046A14 ED 52       0067*        sbc hl,de
046A16 C2 40 6A 04 0068*        jp nz,@done ; not a .wav file
046A1A             0069*    
046A1A DD 27 08    0070*        ld hl,(ix+wav_wave)
046A1D 11 57 41 56 0071*        ld de, 0x564157  ; ascii for "WAV" in little-endian order
046A21 B7          0072*        or a ; clear carry
046A22 ED 52       0073*        sbc hl,de
046A24 C2 40 6A 04 0074*        jp nz,@done ; not a .wav file
046A28             0075*    
046A28 DD 27 0C    0076*        ld hl,(ix+wav_fmt_marker)
046A2B 11 66 6D 74 0077*        ld de, 0x746D66  ; ascii for "fmt" in little-endian order
046A2F B7          0078*        or a ; clear carry
046A30 ED 52       0079*        sbc hl,de
046A32 C2 40 6A 04 0080*        jp nz,@done ; not a .wav file
046A36             0081*    
046A36 DD 27 14    0082*        ld hl,(ix+wav_audio_format)
046A39 11 01 00 01 0083*        ld de, 0x010001  ; PCM format, 1-channel
046A3D B7          0084*        or a ; clear carry
046A3E ED 52       0085*        sbc hl,de ; if not zero, not a .wav file we can read
046A40             0086*    
046A40             0087*    @done:
046A40             0088*    ; restore registers and return
046A40 FD E1       0089*        pop iy
046A42 DD E1       0090*        pop ix
046A44 D1          0091*        pop de
046A45 C1          0092*        pop bc
046A46 E1          0093*        pop hl
046A47 C9          0094*        ret
046A48             0095*    ; end verify_wav
046A48             0096*    
046A48             0097*    ; open a .wav file and make it ready to play
046A48             0098*    ; inputs: none
046A48             0099*    ; returns: zero flag set if a .wav file we can read
046A48             0100*    ; destroys: af
046A48             0101*    open_wav:
046A48             0102*    ; clear the .wav header buffer
046A48 E5          0103*        push hl
046A49 D5          0104*        push de
046A4A 01 4C 00 00 0105*        ld bc,wav_header_size
046A4E 21 00 03 09 0106*        ld hl,ps_wav_header
046A52 CD 90 03 04 0107*        call clear_mem
046A56 D1          0108*        pop de
046A57 E1          0109*        pop hl
046A58             0110*    
046A58             0111*    ; get filinfo and fil struct pointers to currently selected file
046A58 CD 06 3F 04 0112*        call bf_get_filinfo_from_pg_idx ; iy = pointer to filinfo struct
046A5C ED 13 16    0113*        lea de,iy+filinfo_fname ; de = pointer to filename
046A5F 21 00 00 09 0114*        ld hl,ps_fil_struct
046A63             0115*    
046A63             0116*    ; open the file
046A63 0E 01       0117*        ld c,fa_read
046A65             0118*        FFSCALL ffs_fopen
                       M1 Args: function=ffs_fopen 
046A65 FD E5       0001*M1  			PUSH IY
046A67 3E 80       0002*M1  			LD	A, function
046A69 5B CF       0003*M1  			RST.LIL	08h
046A6B FD E1       0004*M1  			POP IY
046A6D             0119*    
046A6D             0120*    ; read the header
046A6D 01 4C 00 00 0121*        ld bc,wav_header_size
046A71 11 00 03 09 0122*        ld de,ps_wav_header
046A75             0123*        FFSCALL ffs_fread
                       M1 Args: function=ffs_fread 
046A75 FD E5       0001*M1  			PUSH IY
046A77 3E 82       0002*M1  			LD	A, function
046A79 5B CF       0003*M1  			RST.LIL	08h
046A7B FD E1       0004*M1  			POP IY
046A7D             0124*    
046A7D             0125*    ; verify the .wav header
046A7D DD 21 00 03 0126*        ld ix,ps_wav_header
       09          
046A82 DD 27 00    0127*        ld hl,(ix+wav_riff)
046A85             0128*    
046A85 11 52 49 46 0129*        ld de, 0x464952  ; ascii for "RIF" in little-endian order
046A89 B7          0130*        or a ; clear carry
046A8A ED 52       0131*        sbc hl,de
046A8C C2 BB 6A 04 0132*        jp nz,@not_wav ; not a .wav file
046A90             0133*    
046A90 DD 27 08    0134*        ld hl,(ix+wav_wave)
046A93 11 57 41 56 0135*        ld de, 0x564157  ; ascii for "WAV" in little-endian order
046A97 B7          0136*        or a ; clear carry
046A98 ED 52       0137*        sbc hl,de
046A9A C2 BB 6A 04 0138*        jp nz,@not_wav ; not a .wav file
046A9E             0139*    
046A9E DD 27 0C    0140*        ld hl,(ix+wav_fmt_marker)
046AA1 11 66 6D 74 0141*        ld de, 0x746D66  ; ascii for "fmt" in little-endian order
046AA5 B7          0142*        or a ; clear carry
046AA6 ED 52       0143*        sbc hl,de
046AA8 C2 BB 6A 04 0144*        jp nz,@not_wav ; not a .wav file
046AAC             0145*    
046AAC DD 27 14    0146*        ld hl,(ix+wav_audio_format)
046AAF 11 01 00 01 0147*        ld de, 0x010001  ; PCM format, 1-channel
046AB3 B7          0148*        or a ; clear carry
046AB4 ED 52       0149*        sbc hl,de ; if not zero, not a .wav file we can read
046AB6 C2 BB 6A 04 0150*        jp nz,@not_wav ; not a .wav file
046ABA             0151*    ; valid .wav file so return with zero flag set and file still open
046ABA C9          0152*        ret
046ABB             0153*    @not_wav:
046ABB             0154*    ; close the file and return to caller
046ABB             0155*        FFSCALL ffs_fclose
                       M1 Args: function=ffs_fclose 
046ABB FD E5       0001*M1  			PUSH IY
046ABD 3E 81       0002*M1  			LD	A, function
046ABF 5B CF       0003*M1  			RST.LIL	08h
046AC1 FD E1       0004*M1  			POP IY
046AC3 F6 01       0156*        or a,1 ; reset zero flag indicating invalid .wav file
046AC5 C9          0157*        ret
046AC6             0158*    ; end open_wav
046AC6             0057         include "debug.inc"
046AC6             0001*    printHexA:
046AC6 F5          0002*        push af
046AC7 C5          0003*        push bc
046AC8 CD AE 00 04 0004*        call printHex8
046ACC 3E 20       0005*        ld a,' '
046ACE 5B D7       0006*        rst.lil 10h
046AD0 C1          0007*        pop bc
046AD1 F1          0008*        pop af
046AD2 C9          0009*        ret
046AD3             0010*    
046AD3             0011*    printHexHL:
046AD3 F5          0012*        push af
046AD4 C5          0013*        push bc
046AD5 CD A8 00 04 0014*        call printHex16
046AD9 3E 20       0015*        ld a,' '
046ADB 5B D7       0016*        rst.lil 10h
046ADD C1          0017*        pop bc
046ADE F1          0018*        pop af
046ADF C9          0019*        ret
046AE0             0020*    
046AE0             0021*    printHexUHL:
046AE0 F5          0022*        push af
046AE1 C5          0023*        push bc
046AE2 CD A0 00 04 0024*        call printHex24
046AE6 3E 20       0025*        ld a,' '
046AE8 5B D7       0026*        rst.lil 10h
046AEA C1          0027*        pop bc
046AEB F1          0028*        pop af
046AEC C9          0029*        ret
046AED             0030*    
046AED             0031*    printHexAUHL:
046AED F5          0032*        push af
046AEE C5          0033*        push bc
046AEF CD AE 00 04 0034*        call printHex8
046AF3 3E 2E       0035*        ld a,'.'
046AF5 5B D7       0036*        rst.lil 10h
046AF7 CD A0 00 04 0037*        call printHex24
046AFB 3E 20       0038*        ld a,' '
046AFD 5B D7       0039*        rst.lil 10h
046AFF C1          0040*        pop bc
046B00 F1          0041*        pop af
046B01 C9          0042*        ret
046B02             0043*    
046B02             0044*    printHexABHL:
046B02             0045*    ; preserve registers
046B02 C5          0046*        push bc ; b will be ok c will not
046B03 F5          0047*        push af ; will get totally destroyed
046B04             0048*    ; print a
046B04 CD AE 00 04 0049*        call printHex8
046B08             0050*    ; print b
046B08 78          0051*        ld a,b
046B09 CD AE 00 04 0052*        call printHex8
046B0D             0053*    ; print hl
046B0D CD A8 00 04 0054*        call printHex16
046B11             0055*    ; restore registers
046B11 F1          0056*        pop af
046B12 C1          0057*        pop bc
046B13 C9          0058*        ret
046B14             0059*    
046B14             0060*    printHexBHL:
046B14             0061*    ; preserve registers
046B14 C5          0062*        push bc ; b will be ok c will not
046B15 F5          0063*        push af ; will get totally destroyed
046B16             0064*    ; print b
046B16 78          0065*        ld a,b
046B17 CD AE 00 04 0066*        call printHex8
046B1B             0067*    ; print hl
046B1B CD A8 00 04 0068*        call printHex16
046B1F             0069*    ; restore registers
046B1F F1          0070*        pop af
046B20 C1          0071*        pop bc
046B21 C9          0072*        ret
046B22             0073*    
046B22             0074*    printHexCDE:
046B22             0075*    ; preserve registers
046B22 C5          0076*        push bc ; b will be ok c will not
046B23 F5          0077*        push af ; will get totally destroyed
046B24             0078*    ; print c
046B24 79          0079*        ld a,c
046B25 CD AE 00 04 0080*        call printHex8
046B29             0081*    ; print de
046B29 EB          0082*        ex de,hl
046B2A CD A8 00 04 0083*        call printHex16
046B2E EB          0084*        ex de,hl
046B2F             0085*    ; restore registers
046B2F F1          0086*        pop af
046B30 C1          0087*        pop bc
046B31 C9          0088*        ret
046B32             0089*    
046B32             0090*    printHexUIX:
046B32             0091*    ; store everything in scratch
046B32 22 66 03 04 0092*        ld (uhl),hl
046B36 ED 43 69 03 0093*        ld (ubc),bc
       04          
046B3B ED 53 6C 03 0094*        ld (ude),de
       04          
046B40 DD 22 6F 03 0095*        ld (uix),ix
       04          
046B45 FD 22 72 03 0096*        ld (uiy),iy
       04          
046B4A F5          0097*        push af ; fml
046B4B             0098*    
046B4B 21 FD 02 04 0099*        ld hl,str_ixu
046B4F CD 67 00 04 0100*        call printString
046B53 2A 6F 03 04 0101*        ld hl,(uix)
046B57 CD A0 00 04 0102*        call printHex24
046B5B CD 7C 00 04 0103*        call printNewLine
046B5F             0104*    
046B5F             0105*    ; restore everything
046B5F 2A 66 03 04 0106*        ld hl, (uhl)
046B63 ED 4B 69 03 0107*        ld bc, (ubc)
       04          
046B68 ED 5B 6C 03 0108*        ld de, (ude)
       04          
046B6D DD 2A 6F 03 0109*        ld ix, (uix)
       04          
046B72 FD 2A 72 03 0110*        ld iy, (uiy)
       04          
046B77 F1          0111*        pop af
046B78             0112*    ; all done
046B78 C9          0113*        ret
046B79             0114*    
046B79             0115*    
046B79             0116*    ; print registers to screen in hexidecimal format
046B79             0117*    ; inputs: none
046B79             0118*    ; outputs: values of every register printed to screen
046B79             0119*    ;    values of each register in global scratch memory
046B79             0120*    ; destroys: nothing
046B79             0121*    stepRegistersHex:
046B79             0122*    ; store everything in scratch
046B79 22 66 03 04 0123*        ld (uhl),hl
046B7D ED 43 69 03 0124*        ld (ubc),bc
       04          
046B82 ED 53 6C 03 0125*        ld (ude),de
       04          
046B87 DD 22 6F 03 0126*        ld (uix),ix
       04          
046B8C FD 22 72 03 0127*        ld (uiy),iy
       04          
046B91 F5          0128*        push af ; fml
046B92 E1          0129*        pop hl ; thanks, zilog
046B93 22 63 03 04 0130*        ld (uaf),hl
046B97 F5          0131*        push af ; dammit
046B98             0132*    
046B98             0133*    ; home the cursor
046B98             0134*        ; call vdu_home_cursor
046B98             0135*    
046B98             0136*    ; print each register
046B98 21 E9 02 04 0137*        ld hl,str_afu
046B9C CD 67 00 04 0138*        call printString
046BA0 2A 63 03 04 0139*        ld hl,(uaf)
046BA4 CD A0 00 04 0140*        call printHex24
046BA8 CD 7C 00 04 0141*        call printNewLine
046BAC             0142*    
046BAC 21 EE 02 04 0143*        ld hl,str_hlu
046BB0 CD 67 00 04 0144*        call printString
046BB4 2A 66 03 04 0145*        ld hl,(uhl)
046BB8 CD A0 00 04 0146*        call printHex24
046BBC CD 7C 00 04 0147*        call printNewLine
046BC0             0148*    
046BC0 21 F3 02 04 0149*        ld hl,str_bcu
046BC4 CD 67 00 04 0150*        call printString
046BC8 2A 69 03 04 0151*        ld hl,(ubc)
046BCC CD A0 00 04 0152*        call printHex24
046BD0 CD 7C 00 04 0153*        call printNewLine
046BD4             0154*    
046BD4 21 F8 02 04 0155*        ld hl,str_deu
046BD8 CD 67 00 04 0156*        call printString
046BDC 2A 6C 03 04 0157*        ld hl,(ude)
046BE0 CD A0 00 04 0158*        call printHex24
046BE4 CD 7C 00 04 0159*        call printNewLine
046BE8             0160*    
046BE8 21 FD 02 04 0161*        ld hl,str_ixu
046BEC CD 67 00 04 0162*        call printString
046BF0 2A 6F 03 04 0163*        ld hl,(uix)
046BF4 CD A0 00 04 0164*        call printHex24
046BF8 CD 7C 00 04 0165*        call printNewLine
046BFC             0166*    
046BFC 21 02 03 04 0167*        ld hl,str_iyu
046C00 CD 67 00 04 0168*        call printString
046C04 2A 72 03 04 0169*        ld hl,(uiy)
046C08 CD A0 00 04 0170*        call printHex24
046C0C CD 7C 00 04 0171*        call printNewLine
046C10             0172*    
046C10             0173*        ; call vsync
046C10             0174*    
046C10 CD 7C 00 04 0175*        call printNewLine
046C14             0176*    
046C14             0177*    ; check for right shift key and quit if pressed
046C14             0178*        MOSCALL mos_getkbmap
                       M1 Args: function=mos_getkbmap 
046C14 3E 1E       0001*M1  			LD	A, function
046C16 5B CF       0002*M1  			RST.LIL	08h
046C18             0179*    @stayhere:
046C18             0180*    ; 7 RightShift
046C18 DD CB 00 76 0181*        bit 6,(ix+0)
046C1C 20 02       0182*        jr nz,@RightShift
046C1E 18 F8       0183*        jr @stayhere
046C20             0184*    @RightShift:
046C20 DD CB 0E 86 0185*        res 0,(ix+14) ; debounce the key (hopefully)
046C24 3E 80       0186*        ld a,%10000000
046C26             0187*        ; call multiPurposeDelay
046C26             0188*    
046C26             0189*    ; restore everything
046C26 2A 66 03 04 0190*        ld hl, (uhl)
046C2A ED 4B 69 03 0191*        ld bc, (ubc)
       04          
046C2F ED 5B 6C 03 0192*        ld de, (ude)
       04          
046C34 DD 2A 6F 03 0193*        ld ix, (uix)
       04          
046C39 FD 2A 72 03 0194*        ld iy, (uiy)
       04          
046C3E F1          0195*        pop af
046C3F             0196*    ; all done
046C3F C9          0197*        ret
046C40             0198*    
046C40             0199*    ; print registers to screen in hexidecimal format
046C40             0200*    ; inputs: none
046C40             0201*    ; outputs: values of every register printed to screen
046C40             0202*    ;    values of each register in global scratch memory
046C40             0203*    ; destroys: nothing
046C40             0204*    dumpRegistersHex:
046C40             0205*    ; store everything in scratch
046C40 22 66 03 04 0206*        ld (uhl),hl
046C44 ED 43 69 03 0207*        ld (ubc),bc
       04          
046C49 ED 53 6C 03 0208*        ld (ude),de
       04          
046C4E DD 22 6F 03 0209*        ld (uix),ix
       04          
046C53 FD 22 72 03 0210*        ld (uiy),iy
       04          
046C58 F5          0211*        push af ; fml
046C59 E1          0212*        pop hl ; thanks, zilog
046C5A 22 63 03 04 0213*        ld (uaf),hl
046C5E F5          0214*        push af ; dammit
046C5F             0215*    
046C5F             0216*    ; home the cursor
046C5F             0217*        ; call vdu_home_cursor
046C5F             0218*        ; call printNewLine
046C5F             0219*    
046C5F             0220*    ; print each register
046C5F 21 E9 02 04 0221*        ld hl,str_afu
046C63 CD 67 00 04 0222*        call printString
046C67 2A 63 03 04 0223*        ld hl,(uaf)
046C6B CD A0 00 04 0224*        call printHex24
046C6F             0225*        ; call printNewLine
046C6F             0226*    
046C6F 21 EE 02 04 0227*        ld hl,str_hlu
046C73 CD 67 00 04 0228*        call printString
046C77 2A 66 03 04 0229*        ld hl,(uhl)
046C7B CD A0 00 04 0230*        call printHex24
046C7F             0231*        ; call printNewLine
046C7F             0232*    
046C7F 21 F3 02 04 0233*        ld hl,str_bcu
046C83 CD 67 00 04 0234*        call printString
046C87 2A 69 03 04 0235*        ld hl,(ubc)
046C8B CD A0 00 04 0236*        call printHex24
046C8F             0237*        ; call printNewLine
046C8F             0238*    
046C8F 21 F8 02 04 0239*        ld hl,str_deu
046C93 CD 67 00 04 0240*        call printString
046C97 2A 6C 03 04 0241*        ld hl,(ude)
046C9B CD A0 00 04 0242*        call printHex24
046C9F             0243*        ; call printNewLine
046C9F             0244*    
046C9F 21 FD 02 04 0245*        ld hl,str_ixu
046CA3 CD 67 00 04 0246*        call printString
046CA7 2A 6F 03 04 0247*        ld hl,(uix)
046CAB CD A0 00 04 0248*        call printHex24
046CAF             0249*        ; call printNewLine
046CAF             0250*    
046CAF 21 02 03 04 0251*        ld hl,str_iyu
046CB3 CD 67 00 04 0252*        call printString
046CB7 2A 72 03 04 0253*        ld hl,(uiy)
046CBB CD A0 00 04 0254*        call printHex24
046CBF             0255*    
046CBF CD 7C 00 04 0256*        call printNewLine
046CC3             0257*        ; call printNewLine
046CC3             0258*    ; restore everything
046CC3 2A 66 03 04 0259*        ld hl, (uhl)
046CC7 ED 4B 69 03 0260*        ld bc, (ubc)
       04          
046CCC ED 5B 6C 03 0261*        ld de, (ude)
       04          
046CD1 DD 2A 6F 03 0262*        ld ix, (uix)
       04          
046CD6 FD 2A 72 03 0263*        ld iy, (uiy)
       04          
046CDB F1          0264*        pop af
046CDC             0265*    ; all done
046CDC C9          0266*        ret
046CDD             0267*    
046CDD             0268*    dumpRegistersHexPrime:
046CDD D9          0269*        exx
046CDE 08          0270*        ex af,af'
046CDF CD 40 6C 04 0271*        call dumpRegistersHex
046CE3 08          0272*        ex af,af'
046CE4 D9          0273*        exx
046CE5 C9          0274*        ret
046CE6             0275*    
046CE6             0276*    ; additionally dump prime registers
046CE6             0277*    ; inputs: none
046CE6             0278*    ; outputs: values of every register printed to screen
046CE6             0279*    ; destroys: nothing
046CE6             0280*    dumpRegistersHexAll:
046CE6 CD 40 6C 04 0281*        call dumpRegistersHex
046CEA 08          0282*        ex af,af'
046CEB D9          0283*        exx
046CEC CD 40 6C 04 0284*        call dumpRegistersHex
046CF0 08          0285*        ex af,af'
046CF1 D9          0286*        exx
046CF2 C9          0287*        ret
046CF3             0288*    
046CF3             0289*    ; print hlu to screen in hexidecimal format
046CF3             0290*    ; inputs: none
046CF3             0291*    ; destroys: nothing
046CF3             0292*    print_hex_hl:
046CF3 F5          0293*        push af
046CF4 E5          0294*        push hl
046CF5 21 EE 02 04 0295*        ld hl,str_hlu
046CF9 CD 67 00 04 0296*        call printString
046CFD E1          0297*        pop hl
046CFE E5          0298*        push hl
046CFF CD A0 00 04 0299*        call printHex24
046D03 3E 20       0300*        ld a,' '
046D05 5B D7       0301*        rst.lil 10h
046D07 E1          0302*        pop hl
046D08 F1          0303*        pop af
046D09 C9          0304*        ret
046D0A             0305*    
046D0A             0306*    ; print bcu to screen in hexidecimal format
046D0A             0307*    ; inputs: none
046D0A             0308*    ; destroys: nothing
046D0A             0309*    print_hex_bc:
046D0A F5          0310*        push af
046D0B E5          0311*        push hl
046D0C C5          0312*        push bc
046D0D 21 F3 02 04 0313*        ld hl,str_bcu
046D11 CD 67 00 04 0314*        call printString
046D15 E1          0315*        pop hl
046D16 E5          0316*        push hl
046D17 CD A0 00 04 0317*        call printHex24
046D1B 3E 20       0318*        ld a,' '
046D1D 5B D7       0319*        rst.lil 10h
046D1F C1          0320*        pop bc
046D20 E1          0321*        pop hl
046D21 F1          0322*        pop af
046D22 C9          0323*        ret
046D23             0324*    
046D23             0325*    ; print deu to screen in hexidecimal format
046D23             0326*    ; inputs: none
046D23             0327*    ; destroys: nothing
046D23             0328*    print_hex_de:
046D23 F5          0329*        push af
046D24 E5          0330*        push hl
046D25 D5          0331*        push de
046D26 21 F8 02 04 0332*        ld hl,str_deu
046D2A CD 67 00 04 0333*        call printString
046D2E E1          0334*        pop hl
046D2F E5          0335*        push hl
046D30 CD A0 00 04 0336*        call printHex24
046D34 3E 20       0337*        ld a,' '
046D36 5B D7       0338*        rst.lil 10h
046D38 D1          0339*        pop de
046D39 E1          0340*        pop hl
046D3A F1          0341*        pop af
046D3B C9          0342*        ret
046D3C             0343*    
046D3C             0344*    
046D3C             0345*    ; inputs: whatever is in the flags register
046D3C             0346*    ; outputs: binary representation of flags
046D3C             0347*    ;          with a header so we know which is what
046D3C             0348*    ; destroys: nothing
046D3C             0349*    ; preserves: everything
046D3C             0350*    dumpFlags:
046D3C             0351*    ; first we curse zilog for not giving direct access to flags
046D3C F5          0352*        push af ; this is so we can send it back unharmed
046D3D F5          0353*        push af ; this is so we can pop it to hl
046D3E             0354*    ; store everything in scratch
046D3E 22 66 03 04 0355*        ld (uhl),hl
046D42 ED 43 69 03 0356*        ld (ubc),bc
       04          
046D47 ED 53 6C 03 0357*        ld (ude),de
       04          
046D4C DD 22 6F 03 0358*        ld (uix),ix
       04          
046D51 FD 22 72 03 0359*        ld (uiy),iy
       04          
046D56             0360*    ; next we print the header
046D56 21 82 6D 04 0361*        ld hl,@header
046D5A CD 67 00 04 0362*        call printString
046D5E E1          0363*        pop hl ; flags are now in l
046D5F 7D          0364*        ld a,l ; flags are now in a
046D60 CD 9F 02 04 0365*        call printBin8
046D64 CD 7C 00 04 0366*        call printNewLine
046D68             0367*    ; restore everything
046D68 2A 66 03 04 0368*        ld hl, (uhl)
046D6C ED 4B 69 03 0369*        ld bc, (ubc)
       04          
046D71 ED 5B 6C 03 0370*        ld de, (ude)
       04          
046D76 DD 2A 6F 03 0371*        ld ix, (uix)
       04          
046D7B FD 2A 72 03 0372*        ld iy, (uiy)
       04          
046D80 F1          0373*        pop af ; send her home the way she came
046D81 C9          0374*        ret
046D82             0375*    ; Bit 7 (S): Sign flag
046D82             0376*    ; Bit 6 (Z): Zero flag
046D82             0377*    ; Bit 5 (5): Reserved (copy of bit 5 of the result)
046D82             0378*    ; Bit 4 (H): Half Carry flag
046D82             0379*    ; Bit 3 (3): Reserved (copy of bit 3 of the result)
046D82             0380*    ; Bit 2 (PV): Parity/Overflow flag
046D82             0381*    ; Bit 1 (N): Subtract flag
046D82             0382*    ; Bit 0 (C): Carry flag
046D82 53 5A 78 48 0383*    @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
046D8D             0384*    
046D8D             0385*    
046D8D             0386*    ; print bytes from an address to the screen in hexidecimal format
046D8D             0387*    ; inputs: hl = address of first byte to print, a = number of bytes to print
046D8D             0388*    ; outputs: values of each byte printed to screen separated by spaces
046D8D             0389*    ; destroys: nothing
046D8D             0390*    dumpMemoryHex:
046D8D             0391*    ; save registers to the stack
046D8D C5          0392*        push bc
046D8E E5          0393*        push hl
046D8F F5          0394*        push af
046D90             0395*    
046D90             0396*    ; print the address and separator
046D90 CD A0 00 04 0397*        call printHex24
046D94 3E 3A       0398*        ld a,':'
046D96 5B D7       0399*        rst.lil 10h
046D98 3E 20       0400*        ld a,' '
046D9A 5B D7       0401*        rst.lil 10h
046D9C             0402*    
046D9C             0403*    ; set b to be our loop counter
046D9C F1          0404*        pop af
046D9D 47          0405*        ld b,a
046D9E E1          0406*        pop hl
046D9F E5          0407*        push hl
046DA0 F5          0408*        push af
046DA1             0409*    @loop:
046DA1             0410*    ; print the byte
046DA1 7E          0411*        ld a,(hl)
046DA2 CD AE 00 04 0412*        call printHex8
046DA6             0413*    ; print a space
046DA6 3E 20       0414*        ld a,' '
046DA8 5B D7       0415*        rst.lil 10h
046DAA 23          0416*        inc hl
046DAB 10 F4       0417*        djnz @loop
046DAD             0418*        ; call printNewLine
046DAD             0419*    
046DAD             0420*    ; restore everything
046DAD F1          0421*        pop af
046DAE E1          0422*        pop hl
046DAF C1          0423*        pop bc
046DB0             0424*    
046DB0             0425*    ; all done
046DB0 C9          0426*        ret
046DB1             0427*    
046DB1             0428*    
046DB1             0429*    ; print bytes from an address to the screen in binary format
046DB1             0430*    ; inputs: hl = address of first byte to print, a = number of bytes to print
046DB1             0431*    ; outputs: values of each byte printed to screen separated by spaces
046DB1             0432*    ; destroys: nothing
046DB1             0433*    dumpMemoryBin:
046DB1             0434*    ; save all registers to the stack
046DB1 F5          0435*        push af
046DB2 C5          0436*        push bc
046DB3 D5          0437*        push de
046DB4 E5          0438*        push hl
046DB5 DD E5       0439*        push ix
046DB7 FD E5       0440*        push iy
046DB9             0441*    
046DB9             0442*    ; set b to be our loop counter
046DB9 47          0443*        ld b,a
046DBA             0444*    @loop:
046DBA             0445*    ; print the byte
046DBA 7E          0446*        ld a,(hl)
046DBB E5          0447*        push hl
046DBC C5          0448*        push bc
046DBD CD 9F 02 04 0449*        call printBin8
046DC1 C1          0450*        pop bc
046DC2             0451*    ; print a space
046DC2 3E 20       0452*        ld a,' '
046DC4 5B D7       0453*        rst.lil 10h
046DC6 E1          0454*        pop hl
046DC7 23          0455*        inc hl
046DC8 10 F0       0456*        djnz @loop
046DCA CD 7C 00 04 0457*        call printNewLine
046DCE             0458*    
046DCE             0459*    ; restore everything
046DCE FD E1       0460*        pop iy
046DD0 DD E1       0461*        pop ix
046DD2 E1          0462*        pop hl
046DD3 D1          0463*        pop de
046DD4 C1          0464*        pop bc
046DD5 F1          0465*        pop af
046DD6             0466*    ; all done
046DD6 C9          0467*        ret
046DD7             0468*    
046DD7             0469*    ; print bytes from an address to the screen in binary format
046DD7             0470*    ; with the bits of each byte in reverse order (lsb first)
046DD7             0471*    ; inputs: hl = address of first byte to print, a = number of bytes to print
046DD7             0472*    ; outputs: values of each byte printed to screen separated by spaces
046DD7             0473*    ; destroys: nothing
046DD7             0474*    dumpMemoryBinRev:
046DD7             0475*    ; save all registers to the stack
046DD7 F5          0476*        push af
046DD8 C5          0477*        push bc
046DD9 D5          0478*        push de
046DDA E5          0479*        push hl
046DDB DD E5       0480*        push ix
046DDD FD E5       0481*        push iy
046DDF             0482*    
046DDF             0483*    ; set b to be our loop counter
046DDF 47          0484*        ld b,a
046DE0             0485*    @loop:
046DE0             0486*    ; print the byte
046DE0 7E          0487*        ld a,(hl)
046DE1 E5          0488*        push hl
046DE2 C5          0489*        push bc
046DE3 CD C4 02 04 0490*        call printBin8Rev
046DE7 C1          0491*        pop bc
046DE8             0492*    ; print a space
046DE8 3E 20       0493*        ld a,' '
046DEA 5B D7       0494*        rst.lil 10h
046DEC E1          0495*        pop hl
046DED 23          0496*        inc hl
046DEE 10 F0       0497*        djnz @loop
046DF0 CD 7C 00 04 0498*        call printNewLine
046DF4             0499*    
046DF4             0500*    ; restore everything
046DF4 FD E1       0501*        pop iy
046DF6 DD E1       0502*        pop ix
046DF8 E1          0503*        pop hl
046DF9 D1          0504*        pop de
046DFA C1          0505*        pop bc
046DFB F1          0506*        pop af
046DFC             0507*    ; all done
046DFC C9          0508*        ret
046DFD             0509*    
046DFD             0510*    DEBUG_PRINT:
046DFD             0511*        PUSH_ALL
                       M1 Args: none
046DFD 08          0001*M1      ex af,af'
046DFE D9          0002*M1      exx
046DFF F5          0003*M1      push af
046E00 E5          0004*M1      push hl
046E01 C5          0005*M1      push bc
046E02 D5          0006*M1      push de
046E03             0007*M1  
046E03 08          0008*M1      ex af,af'
046E04 D9          0009*M1      exx
046E05 F5          0010*M1      push af
046E06 E5          0011*M1      push hl
046E07 C5          0012*M1      push bc
046E08 D5          0013*M1      push de
046E09 DD E5       0014*M1      push ix
046E0B FD E5       0015*M1      push iy
046E0D             0512*        ; ld c,0 ; X
046E0D             0513*        ; ld b,0 ; Y
046E0D             0514*        ; call vdu_move_cursor
046E0D CD 7C 00 04 0515*        call printNewLine
046E11             0516*        POP_ALL
                       M1 Args: none
046E11 FD E1       0001*M1      pop iy
046E13 DD E1       0002*M1      pop ix
046E15 D1          0003*M1      pop de
046E16 C1          0004*M1      pop bc
046E17 E1          0005*M1      pop hl
046E18 F1          0006*M1      pop af
046E19 08          0007*M1      ex af,af'
046E1A D9          0008*M1      exx
046E1B             0009*M1  
046E1B D1          0010*M1      pop de
046E1C C1          0011*M1      pop bc
046E1D E1          0012*M1      pop hl
046E1E F1          0013*M1      pop af
046E1F 08          0014*M1      ex af,af'
046E20 D9          0015*M1      exx
046E21             0517*        PUSH_ALL
                       M1 Args: none
046E21 08          0001*M1      ex af,af'
046E22 D9          0002*M1      exx
046E23 F5          0003*M1      push af
046E24 E5          0004*M1      push hl
046E25 C5          0005*M1      push bc
046E26 D5          0006*M1      push de
046E27             0007*M1  
046E27 08          0008*M1      ex af,af'
046E28 D9          0009*M1      exx
046E29 F5          0010*M1      push af
046E2A E5          0011*M1      push hl
046E2B C5          0012*M1      push bc
046E2C D5          0013*M1      push de
046E2D DD E5       0014*M1      push ix
046E2F FD E5       0015*M1      push iy
046E31 CD 3C 6D 04 0518*        call dumpFlags
046E35             0519*        POP_ALL
                       M1 Args: none
046E35 FD E1       0001*M1      pop iy
046E37 DD E1       0002*M1      pop ix
046E39 D1          0003*M1      pop de
046E3A C1          0004*M1      pop bc
046E3B E1          0005*M1      pop hl
046E3C F1          0006*M1      pop af
046E3D 08          0007*M1      ex af,af'
046E3E D9          0008*M1      exx
046E3F             0009*M1  
046E3F D1          0010*M1      pop de
046E40 C1          0011*M1      pop bc
046E41 E1          0012*M1      pop hl
046E42 F1          0013*M1      pop af
046E43 08          0014*M1      ex af,af'
046E44 D9          0015*M1      exx
046E45             0520*        PUSH_ALL
                       M1 Args: none
046E45 08          0001*M1      ex af,af'
046E46 D9          0002*M1      exx
046E47 F5          0003*M1      push af
046E48 E5          0004*M1      push hl
046E49 C5          0005*M1      push bc
046E4A D5          0006*M1      push de
046E4B             0007*M1  
046E4B 08          0008*M1      ex af,af'
046E4C D9          0009*M1      exx
046E4D F5          0010*M1      push af
046E4E E5          0011*M1      push hl
046E4F C5          0012*M1      push bc
046E50 D5          0013*M1      push de
046E51 DD E5       0014*M1      push ix
046E53 FD E5       0015*M1      push iy
046E55 CD 40 6C 04 0521*        call dumpRegistersHex
046E59             0522*        ; call waitKeypress
046E59 CD 7C 00 04 0523*        call printNewLine
046E5D             0524*        POP_ALL
                       M1 Args: none
046E5D FD E1       0001*M1      pop iy
046E5F DD E1       0002*M1      pop ix
046E61 D1          0003*M1      pop de
046E62 C1          0004*M1      pop bc
046E63 E1          0005*M1      pop hl
046E64 F1          0006*M1      pop af
046E65 08          0007*M1      ex af,af'
046E66 D9          0008*M1      exx
046E67             0009*M1  
046E67 D1          0010*M1      pop de
046E68 C1          0011*M1      pop bc
046E69 E1          0012*M1      pop hl
046E6A F1          0013*M1      pop af
046E6B 08          0014*M1      ex af,af'
046E6C D9          0015*M1      exx
046E6D C9          0525*        ret
046E6E             0526*    DEBUG_WAITKEYPRESS:
046E6E             0527*        PUSH_ALL
                       M1 Args: none
046E6E 08          0001*M1      ex af,af'
046E6F D9          0002*M1      exx
046E70 F5          0003*M1      push af
046E71 E5          0004*M1      push hl
046E72 C5          0005*M1      push bc
046E73 D5          0006*M1      push de
046E74             0007*M1  
046E74 08          0008*M1      ex af,af'
046E75 D9          0009*M1      exx
046E76 F5          0010*M1      push af
046E77 E5          0011*M1      push hl
046E78 C5          0012*M1      push bc
046E79 D5          0013*M1      push de
046E7A DD E5       0014*M1      push ix
046E7C FD E5       0015*M1      push iy
046E7E CD 8B 03 04 0528*        call waitKeypress
046E82             0529*        POP_ALL
                       M1 Args: none
046E82 FD E1       0001*M1      pop iy
046E84 DD E1       0002*M1      pop ix
046E86 D1          0003*M1      pop de
046E87 C1          0004*M1      pop bc
046E88 E1          0005*M1      pop hl
046E89 F1          0006*M1      pop af
046E8A 08          0007*M1      ex af,af'
046E8B D9          0008*M1      exx
046E8C             0009*M1  
046E8C D1          0010*M1      pop de
046E8D C1          0011*M1      pop bc
046E8E E1          0012*M1      pop hl
046E8F F1          0013*M1      pop af
046E90 08          0014*M1      ex af,af'
046E91 D9          0015*M1      exx
046E92 C9          0530*        RET
046E93             0531*    
046E93             0532*    dumpVduCmdStr:
046E93             0533*        PUSH_ALL
                       M1 Args: none
046E93 08          0001*M1      ex af,af'
046E94 D9          0002*M1      exx
046E95 F5          0003*M1      push af
046E96 E5          0004*M1      push hl
046E97 C5          0005*M1      push bc
046E98 D5          0006*M1      push de
046E99             0007*M1  
046E99 08          0008*M1      ex af,af'
046E9A D9          0009*M1      exx
046E9B F5          0010*M1      push af
046E9C E5          0011*M1      push hl
046E9D C5          0012*M1      push bc
046E9E D5          0013*M1      push de
046E9F DD E5       0014*M1      push ix
046EA1 FD E5       0015*M1      push iy
046EA3 79          0534*        ld a,c
046EA4 CD 8D 6D 04 0535*        call dumpMemoryHex
046EA8 CD 8B 03 04 0536*        call waitKeypress
046EAC             0537*        POP_ALL
                       M1 Args: none
046EAC FD E1       0001*M1      pop iy
046EAE DD E1       0002*M1      pop ix
046EB0 D1          0003*M1      pop de
046EB1 C1          0004*M1      pop bc
046EB2 E1          0005*M1      pop hl
046EB3 F1          0006*M1      pop af
046EB4 08          0007*M1      ex af,af'
046EB5 D9          0008*M1      exx
046EB6             0009*M1  
046EB6 D1          0010*M1      pop de
046EB7 C1          0011*M1      pop bc
046EB8 E1          0012*M1      pop hl
046EB9 F1          0013*M1      pop af
046EBA 08          0014*M1      ex af,af'
046EBB D9          0015*M1      exx
046EBC C9          0538*        ret
046EBD             0539*    ; end dumpVduCmdStr
046EBD             0058     
046EBD             0059     ; --- MAIN PROGRAM FILE ---
046EBD             0060     init:
046EBD CD 64 3B 04 0061         call bf_get_dir
046EC1 CD 53 36 04 0062         call ui_init
046EC5 CD 84 69 04 0063         call ps_prt_irq_init
046EC9 C9          0064         ret
046ECA             0065     ; end init
046ECA             0066     main:
046ECA             0067     ; call the change directory routine and jp to user input
046ECA CD 8F 3D 04 0068         call get_input
046ECE             0069     
046ECE             0070     ; we come back here when user wants to quit app
046ECE             0071     ; shut down everytyhing and gracefully exit to MOS
046ECE CD 9F 67 04 0072         call ps_close_file ; close any playing file and stop the PRT timer
046ED2 FB          0073         ei ; interrupts were disabled by get_input
046ED3             0074     ; restore original screen mode
046ED3 3A 00 35 04 0075         ld a,(original_screen_mode)
046ED7 CD 48 1C 04 0076         call vdu_set_screen_mode
046EDB CD 43 1C 04 0077         call vdu_reset_viewports
046EDF CD 7A 1B 04 0078         call vdu_cls
046EE3             0079     ; print thanks for playing message
046EE3 CD 60 00 04 0080         call printInline
046EE7 54 68 61 6E 0081         asciz "Thank you for using\r\n"
       6B 20 79 6F 
       75 20 66 6F 
       72 20 75 73 
       69 6E 67 0D 
       0A 00       
046EFD 21 92 38 04 0082         ld hl,agon_jukebox_ascii
046F01 CD 67 00 04 0083         call printString
046F05             0084     ; set cursor behaviuor
046F05 CD F4 1A 04 0085         call vdu_cursor_on
046F09 26 10       0086         ld h,%00010000 ; bit 4 controls cursor scroll at bottom of screen
046F0B 2E 00       0087         ld l,%00000000 ; bit 4 reset means cursor scrolls screen
046F0D CD 66 1B 04 0088         call vdu_cursor_behaviour
046F11 C9          0089         ret ; back to MOS
046F12             0090     ; end main
046F12             0091     
046F12             0092     ; must be final include in program so file data does not stomp on program code or other data
046F12             0093         include "files.inc"
046F12             0001*    ; THIS MUST BE LAST INCLUDE SO FILE DATA DOES NOT OVERWRITE OTHER CODE OR DATA
046F12             0002*    
046F12             0003*    ; buffer for loading files unrelated to audio
046F12             0004*    ; e.g.: fonts, sprites, etc. (limited to 8k)
046F12             0005*    filedata: equ 0xB7E000 ; address of onboard 8k sram
046F12             0006*    
046F12             0007*    bf_fil_struct: equ 0x06FF00 ;
046F12             0008*    bf_fil_obj: equ 0x06FF00 ; 15 bytes: Object identifier
046F12             0009*    bf_fil_flag: equ 0x06FF0F ; 1 bytes: File status flags
046F12             0010*    bf_fil_err: equ 0x06FF10 ; 1 bytes: Abort flag (error code)
046F12             0011*    bf_fil_fptr: equ 0x06FF11 ; 4 bytes: File read/write pointer (Zeroed on file open)
046F12             0012*    bf_fil_clust: equ 0x06FF15 ; 4 bytes: Current cluster of fpter (invalid when fptr is 0)
046F12             0013*    bf_fil_sect: equ 0x06FF19 ; 4 bytes: Sector number appearing in buf[] (0
046F12             0014*    bf_fil_dir_sect: equ 0x06FF1D ; 4 bytes: Sector number containing the directory entry
046F12             0015*    bf_fil_dir_ptr: equ 0x06FF21 ; 3 bytes: Pointer to the directory entry in the win[]
046F12             0016*    
046F12             0017*    
046F12             0018*    bf_struct: equ 0x070000 ; browsing song jukebox info
046F12             0019*    bf_file_idx: equ 0x070000 ; 1 bytes: Current file index in the directory page
046F12             0020*    bf_dir_num_files: equ 0x070001 ; 3 bytes: Number of files/directories in the directory (virtually unlimited)
046F12             0021*    bf_files_cur_pg: equ 0x070004 ; 3 bytes: Number of files/directories of the current directory page
046F12             0022*    bf_files_last_pg: equ 0x070007 ; 3 bytes: Number of files/directories of the last directory page
046F12             0023*    bf_page_cur: equ 0x07000A ; 3 bytes: Current directory page number
046F12             0024*    bf_dir_num_pages: equ 0x07000D ; 3 bytes: Number of pages in the directory (virtually unlimited)
046F12             0025*    bf_dir_path: equ 0x070010 ; 256 bytes: Path of the current directory
046F12             0026*    bf_struct_size: equ 512
046F12             0027*    
046F12             0028*    bf_dir_struct: equ 0x070200 ; browsing song directory info
046F12             0029*    bf_dir_obj: equ 0x070200 ; 15 bytes: Object identifier
046F12             0030*    bf_dir_dptr: equ 0x07020F ; 4 bytes: Current read/write offset
046F12             0031*    bf_dir_clust: equ 0x070213 ; 4 bytes: Current cluster
046F12             0032*    bf_dir_sect: equ 0x070217 ; 4 bytes: Current sector (0:Read operation has terminated)
046F12             0033*    bf_dir_dir: equ 0x07021B ; 3 bytes: Pointer to the directory item in the win[]
046F12             0034*    bf_dir_fn: equ 0x07021E ; 12 bytes: SFN (in/out) {body[8],ext[3],status[1]}
046F12             0035*    bf_dir_blk_ofs: equ 0x07022A ; 4 bytes: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
046F12             0036*    
046F12             0037*    
046F12             0038*    bf_filinfo_ptrs: equ 0x070300 ; 768 bytes: List of filename pointers in the current directory page (256*3)
046F12             0039*    bf_filinfo_ptrs_size: equ 768
046F12             0040*    
046F12             0041*    bf_dir_fil_list: equ 0x070600 ; 71168 bytes: browsing song directory file list
046F12             0042*    bf_dir_fil_list_size: equ 71168
046F12             0043*    
046F12             0044*    bf_wav_header: equ 0x081C00 ; 76 bytes: browsing song .wav file header
046F12             0045*    
046F12             0046*    
046F12             0047*    ps_fil_struct: equ 0x090000 ;
046F12             0048*    ps_fil_obj: equ 0x090000 ; 15 bytes: Object identifier
046F12             0049*    ps_fil_flag: equ 0x09000F ; 1 bytes: File status flags
046F12             0050*    ps_fil_err: equ 0x090010 ; 1 bytes: Abort flag (error code)
046F12             0051*    ps_fil_fptr: equ 0x090011 ; 4 bytes: File read/write pointer (Zeroed on file open)
046F12             0052*    ps_fil_clust: equ 0x090015 ; 4 bytes: Current cluster of fpter (invalid when fptr is 0)
046F12             0053*    ps_fil_sect: equ 0x090019 ; 4 bytes: Sector number appearing in buf[] (0
046F12             0054*    ps_fil_dir_sect: equ 0x09001D ; 4 bytes: Sector number containing the directory entry
046F12             0055*    ps_fil_dir_ptr: equ 0x090021 ; 3 bytes: Pointer to the directory entry in the win[]
046F12             0056*    
046F12             0057*    
046F12             0058*    ps_filinfo_struct: equ 0x090100 ;
046F12             0059*    ps_filinfo_fsize: equ 0x090100 ; 4 bytes: File size
046F12             0060*    ps_filinfo_fdate: equ 0x090104 ; 2 bytes: Modified date
046F12             0061*    ps_filinfo_ftime: equ 0x090106 ; 2 bytes: Modified time
046F12             0062*    ps_filinfo_fattrib: equ 0x090108 ; 1 bytes: File attribute
046F12             0063*    ps_filinfo_altname: equ 0x090109 ; 13 bytes: Alternative file name
046F12             0064*    ps_filinfo_fname: equ 0x090116 ; 256 bytes: Primary file name
046F12             0065*    
046F12             0066*    
046F12             0067*    ps_wav_header: equ 0x090300 ; 76 bytes: playing song .wav file header
046F12             0068*    
046F12             0069*    
046F12             0070*    ps_wav_data: equ 0x090400 ; virtually unlimited bytes:
