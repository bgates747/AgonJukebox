PC     Output      Line
040000             0001         assume adl=1
040000             0002         org 0x040000
040000 C3 45 00 04 0003         jp start
040004             0004         align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0005         db "MOS"
040043 00          0006         db 00h
040044 01          0007         db 01h
040045             0008     
040045             0009     start:
040045 F5          0010         push af
040046 C5          0011         push bc
040047 D5          0012         push de
040048 DD E5       0013         push ix
04004A FD E5       0014         push iy
04004C             0015     
04004C CD 70 72 04 0016         call init
040050 CD 80 72 04 0017         call main
040054             0018     
040054             0019     exit:
040054 FD E1       0020         pop iy
040056 DD E1       0021         pop ix
040058 D1          0022         pop de
040059 C1          0023         pop bc
04005A F1          0024         pop af
04005B 21 00 00 00 0025         ld hl,0
04005F             0026     
04005F C9          0027         ret
040060             0028     
040060             0029     ; API INCLUDES
040060             0030         include "mos_api.inc"
040060             0001*    ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040060             0002*    ; Title:	AGON MOS - API for user projects
040060             0003*    ; Author:	Dean Belfield
040060             0004*    ;			Adapted for agon-ez80asm by Jeroen Venema
040060             0005*    ;			Added MOS error codes for return in HL
040060             0006*    ; Created:	03/08/2022
040060             0007*    ; Last Updated:	10/08/2023
040060             0008*    ;
040060             0009*    ; Modinfo:
040060             0010*    ; 05/08/2022:	Added mos_feof
040060             0011*    ; 09/08/2022:	Added system variables: cursorX, cursorY
040060             0012*    ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040060             0013*    ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040060             0014*    ; 24/09/2022:	Added mos_getError, mos_mkdir
040060             0015*    ; 13/10/2022:	Added mos_oscli
040060             0016*    ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040060             0017*    ; 04/03/2023:	Added sysvar_scrpixelIndex
040060             0018*    ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040060             0019*    ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040060             0020*    ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040060             0021*    ; 22/03/2023:	The VDP commands are now indexed from 0x80
040060             0022*    ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040060             0023*    ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040060             0024*    ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040060             0025*    ; 19/05/2023:	Added sysvar_scrMode
040060             0026*    ; 05/06/2023:	Added sysvar_rtcEnable
040060             0027*    ; 03/08/2023:	Added mos_setkbvector
040060             0028*    ; 10/08/2023:	Added mos_getkbmap
040060             0029*    
040060             0030*    ; VDP control (VDU 23, 0, n)
040060             0031*    ;
040060             0032*    vdp_gp:				EQU 80h
040060             0033*    vdp_keycode:		EQU 81h
040060             0034*    vdp_cursor:			EQU	82h
040060             0035*    vdp_scrchar:		EQU	83h
040060             0036*    vdp_scrpixel:		EQU	84h
040060             0037*    vdp_audio:			EQU	85h
040060             0038*    vdp_mode:			EQU	86h
040060             0039*    vdp_rtc:			EQU	87h
040060             0040*    vdp_keystate:		EQU	88h
040060             0041*    vdp_logicalcoords:	EQU	C0h
040060             0042*    vdp_terminalmode:	EQU	FFh
040060             0043*    
040060             0044*    ; MOS high level functions
040060             0045*    ;
040060             0046*    mos_getkey:			EQU	00h
040060             0047*    mos_load:			EQU	01h
040060             0048*    mos_save:			EQU	02h
040060             0049*    mos_cd:				EQU	03h
040060             0050*    mos_dir:			EQU	04h
040060             0051*    mos_del:			EQU	05h
040060             0052*    mos_ren:			EQU	06h
040060             0053*    mos_mkdir:			EQU	07h
040060             0054*    mos_sysvars:		EQU	08h
040060             0055*    mos_editline:		EQU	09h
040060             0056*    mos_fopen:			EQU	0Ah
040060             0057*    mos_fclose:			EQU	0Bh
040060             0058*    mos_fgetc:			EQU	0Ch
040060             0059*    mos_fputc:			EQU	0Dh
040060             0060*    mos_feof:			EQU	0Eh
040060             0061*    mos_getError:		EQU	0Fh
040060             0062*    mos_oscli:			EQU	10h
040060             0063*    mos_copy:			EQU	11h
040060             0064*    mos_getrtc:			EQU	12h
040060             0065*    mos_setrtc:			EQU	13h
040060             0066*    mos_setintvector:	EQU	14h
040060             0067*    mos_uopen:			EQU	15h
040060             0068*    mos_uclose:			EQU	16h
040060             0069*    mos_ugetc:			EQU	17h
040060             0070*    mos_uputc:			EQU	18h
040060             0071*    mos_getfil:			EQU	19h
040060             0072*    mos_fread:			EQU	1Ah
040060             0073*    mos_fwrite:			EQU	1Bh
040060             0074*    mos_flseek:			EQU	1Ch
040060             0075*    mos_setkbvector:	EQU	1Dh
040060             0076*    mos_getkbmap:		EQU	1Eh
040060             0077*    
040060             0078*    ; MOS program exit codes
040060             0079*    ;
040060             0080*    EXIT_OK:				EQU  0;	"OK",
040060             0081*    EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040060             0082*    EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040060             0083*    EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040060             0084*    EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040060             0085*    EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040060             0086*    EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040060             0087*    EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040060             0088*    EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040060             0089*    EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040060             0090*    EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040060             0091*    EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040060             0092*    EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040060             0093*    EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040060             0094*    EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040060             0095*    EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040060             0096*    EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040060             0097*    EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040060             0098*    EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040060             0099*    EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040060             0100*    EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040060             0101*    EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040060             0102*    ; FatFS file access functions
040060             0103*    ;
040060             0104*    ffs_fopen:			EQU	80h
040060             0105*    ffs_fclose:			EQU	81h
040060             0106*    ffs_fread:			EQU	82h
040060             0107*    ffs_fwrite:			EQU	83h
040060             0108*    ffs_flseek:			EQU	84h
040060             0109*    ffs_ftruncate:		EQU	85h
040060             0110*    ffs_fsync:			EQU	86h
040060             0111*    ffs_fforward:		EQU	87h
040060             0112*    ffs_fexpand:		EQU	88h
040060             0113*    ffs_fgets:			EQU	89h
040060             0114*    ffs_fputc:			EQU	8Ah
040060             0115*    ffs_fputs:			EQU	8Bh
040060             0116*    ffs_fprintf:		EQU	8Ch
040060             0117*    ffs_ftell:			EQU	8Dh
040060             0118*    ffs_feof:			EQU	8Eh
040060             0119*    ffs_fsize:			EQU	8Fh
040060             0120*    ffs_ferror:			EQU	90h
040060             0121*    
040060             0122*    ; FatFS directory access functions
040060             0123*    ;
040060             0124*    ffs_dopen:			EQU	91h
040060             0125*    ffs_dclose:			EQU	92h
040060             0126*    ffs_dread:			EQU	93h
040060             0127*    ffs_dfindfirst:		EQU	94h
040060             0128*    ffs_dfindnext:		EQU	95h
040060             0129*    
040060             0130*    ; FatFS file and directory management functions
040060             0131*    ;
040060             0132*    ffs_stat:			EQU	96h
040060             0133*    ffs_unlink:			EQU	97h
040060             0134*    ffs_rename:			EQU	98h
040060             0135*    ffs_chmod:			EQU	99h
040060             0136*    ffs_utime:			EQU	9Ah
040060             0137*    ffs_mkdir:			EQU	9Bh
040060             0138*    ffs_chdir:			EQU	9Ch
040060             0139*    ffs_chdrive:		EQU	9Dh
040060             0140*    ffs_getcwd:			EQU	9Eh
040060             0141*    
040060             0142*    ; FatFS volume management and system configuration functions
040060             0143*    ;
040060             0144*    ffs_mount:			EQU	9Fh
040060             0145*    ffs_mkfs:			EQU	A0h
040060             0146*    ffs_fdisk:			EQU	A1h
040060             0147*    ffs_getfree:		EQU	A2h
040060             0148*    ffs_getlabel:		EQU	A3h
040060             0149*    ffs_setlabel:		EQU	A4h
040060             0150*    ffs_setcp:			EQU	A5h
040060             0151*    
040060             0152*    ; File access modes
040060             0153*    ;
040060             0154*    fa_read:			EQU	01h
040060             0155*    fa_write:			EQU	02h
040060             0156*    fa_open_existing:	EQU	00h
040060             0157*    fa_create_new:		EQU	04h
040060             0158*    fa_create_always:	EQU	08h
040060             0159*    fa_open_always:		EQU	10h
040060             0160*    fa_open_append:		EQU	30h
040060             0161*    
040060             0162*    ; System variable indexes for api_sysvars
040060             0163*    ; Index into _sysvars in globals.inc
040060             0164*    ;
040060             0165*    sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040060             0166*    sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040060             0167*    sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040060             0168*    sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040060             0169*    sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040060             0170*    sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040060             0171*    sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040060             0172*    sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040060             0173*    sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040060             0174*    sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040060             0175*    sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040060             0176*    sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040060             0177*    sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040060             0178*    sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040060             0179*    sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040060             0180*    sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040060             0181*    sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040060             0182*    sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040060             0183*    sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040060             0184*    sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040060             0185*    sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040060             0186*    sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040060             0187*    sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040060             0188*    sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040060             0189*    sysvar_scrMode:			EQU	27h	; 1: Screen mode
040060             0190*    sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040060             0191*    
040060             0192*    ; Flags for the VPD protocol
040060             0193*    ;
040060             0194*    vdp_pflag_cursor:		EQU	00000001b
040060             0195*    vdp_pflag_scrchar:		EQU	00000010b
040060             0196*    vdp_pflag_point:		EQU	00000100b
040060             0197*    vdp_pflag_audio:		EQU	00001000b
040060             0198*    vdp_pflag_mode:			EQU	00010000b
040060             0199*    vdp_pflag_rtc:			EQU	00100000b
040060             0200*    
040060             0201*    ;
040060             0202*    ; FatFS structures
040060             0203*    ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040060             0204*    ;
040060             0205*    ; Object ID and allocation information (FFOBJID)
040060             0206*    ;
040060             0207*    ; Indexes into FFOBJID structure
040060             0208*    ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040060             0209*    ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040060             0210*    ffobjid_attr:		EQU	5	; 1: Object attribute
040060             0211*    ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040060             0212*    ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040060             0213*    ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040060             0214*    ;
040060             0215*    ; File object structure (FIL)
040060             0216*    ;
040060             0217*    ; Indexes into FIL structure
040060             0218*    fil_obj:		EQU 0	; 15: Object identifier
040060             0219*    fil_flag:		EQU	15 	;  1: File status flags
040060             0220*    fil_err:		EQU	16	;  1: Abort flag (error code)
040060             0221*    fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040060             0222*    fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040060             0223*    fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040060             0224*    fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040060             0225*    fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040060             0226*    ;
040060             0227*    ; Directory object structure (DIR)
040060             0228*    ; Indexes into DIR structure
040060             0229*    dir_obj:		EQU  0	; 15: Object identifier
040060             0230*    dir_dptr:		EQU	15	;  4: Current read/write offset
040060             0231*    dir_clust:		EQU	19	;  4: Current cluster
040060             0232*    dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040060             0233*    dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040060             0234*    dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040060             0235*    dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040060             0236*    dir_struct_size:	EQU	46	;  4: Size of the struct
040060             0237*    ;
040060             0238*    ; File information structure (FILINFO)
040060             0239*    ;
040060             0240*    ; Indexes into FILINFO structure
040060             0241*    filinfo_fsize:		EQU 0	;   4: File size
040060             0242*    filinfo_fdate:		EQU	4	;   2: Modified date
040060             0243*    filinfo_ftime:		EQU	6	;   2: Modified time
040060             0244*    filinfo_fattrib:	EQU	8	;   1: File attribute
040060             0245*    filinfo_altname:	EQU	9	;  13: Alternative file name
040060             0246*    filinfo_fname:		EQU	22	; 256: Primary file name
040060             0247*    filinfo_struct_size: EQU filinfo_fname+256 ; size of the FILINFO structure
040060             0248*    
040060             0249*    ; /* File attribute bits for directory entry (FILINFO.fattrib) */
040060             0250*    AM_RDO: equ 0 ; Bit 0 - Read Only
040060             0251*    AM_HID: equ 1 ; Bit 1 - Hidden
040060             0252*    AM_SYS: equ 2 ; Bit 2 - System
040060             0253*    AM_DIR: equ 4 ; Bit 4 - Directory
040060             0254*    AM_ARC: equ 5 ; Bit 5 - Archive
040060             0255*    
040060             0256*    ;
040060             0257*    ; Macro for calling the API
040060             0258*    ; Parameters:
040060             0259*    ; - function: One of the function numbers listed above
040060             0260*    ;
040060             0261*    	MACRO	MOSCALL	function
040060             0262*    			LD	A, function
040060             0263*    			RST.LIL	08h
040060             0264*    	ENDMACRO
040060             0265*    
040060             0266*    ;
040060             0267*    ; Same as above but keeps IY safe on FFS calls
040060             0268*    ; (can be use for regular MOS calls as well)
040060             0269*    ;
040060             0270*    	MACRO	FFSCALL	function
040060             0271*    			PUSH IY
040060             0272*    			LD	A, function
040060             0273*    			RST.LIL	08h
040060             0274*    			POP IY
040060             0275*    	ENDMACRO
040060             0031         include "macros.inc"
040060             0001*    
040060             0002*    ; test the sign of HL
040060             0003*    ; inputs: HL obviously
040060             0004*    ; outputs: sign flag set if HL is negative, zero flag set if HL is zero
040060             0005*    ; destroys: flags
040060             0006*        MACRO SIGN_HLU
040060             0007*        add hl,de ; 1 cycle
040060             0008*        or a ; clear flags ; 1 cycle
040060             0009*        sbc hl,de ; 2 cycles
040060             0010*        ; 4 cycles total
040060             0011*        ENDMACRO
040060             0012*    
040060             0013*    ; put the value in A into HLU
040060             0014*    ; affects: HLU
040060             0015*    ; destroys: nothing
040060             0016*    ; note: $ instead of @@ b/c anon labels deprecated in ez80asm
040060             0017*        MACRO A_TO_HLU
040060             0018*        xor a ; 1 cycle
040060             0019*        ld ($+8+1),hl ; 7 cycles
040060             0020*        ld ($+4+3),a ; 5 cycles
040060             0021*        ld hl,0x000000 ; 4 cycles
040060             0022*        ; 17 cycles total
040060             0023*        ENDMACRO
040060             0024*    
040060             0025*    ; alternative: https://discord.com/channels/1158535358624039014/1282290921815408681/1318315567102300220
040060             0026*    ; one cycle less but burns flags
040060             0027*        MACRO A_TO_HLU_ALT
040060             0028*        push hl ; 4 cycles
040060             0029*        ld hl,2 ; 4 cycles
040060             0030*        add hl,sp ; 1 cycle
040060             0031*        ld (hl),a ; 2 cycles
040060             0032*        pop hl ; 4 cycles
040060             0033*        ; 15 cycles total
040060             0034*        ENDMACRO
040060             0035*    
040060             0036*        MACRO hlu_mul256
040060             0037*        add hl,hl ; * 2
040060             0038*        add hl,hl ; * 4
040060             0039*        add hl,hl ; * 8
040060             0040*        add hl,hl ; * 16
040060             0041*        add hl,hl ; * 32
040060             0042*        add hl,hl ; * 64
040060             0043*        add hl,hl ; * 128
040060             0044*        add hl,hl ; * 256
040060             0045*        ENDMACRO
040060             0046*    
040060             0047*    ; https://discord.com/channels/1158535358624039014/1282290921815408681/1317793870070812715
040060             0048*        MACRO SRL_UHL
040060             0049*        dec sp ; 1 cycle
040060             0050*        push hl ; 4 cycles
040060             0051*        inc sp ; 1 cycle
040060             0052*        pop hl ; 4 cycles
040060             0053*        inc hl ; 1 cycle
040060             0054*        dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
040060             0055*        ; 13 cycles total
040060             0056*        ENDMACRO
040060             0057*    
040060             0058*        MACRO printChar char
040060             0059*        LD A, char
040060             0060*        RST.LIL 10h
040060             0061*        ENDMACRO
040060             0062*    
040060             0063*    ; Simulated call to subroutine at HL
040060             0064*    ; inputs: HL pointing to the subroutine address plus whatever the called function expects
040060             0065*    ; outputs: whatever the subroutine does, including HL and BC
040060             0066*    ; destroys: only what the subroutine does, but always BC
040060             0067*        MACRO CALL_HL
040060             0068*        ld bc,$+6 ; Address of first instruction after the jump
040060             0069*        push bc ; which constitutes the return address
040060             0070*        jp (hl) ; Jump to the address in HL
040060             0071*        ENDMACRO
040060             0072*    
040060             0073*    ; Simulated call to subroutine at IX
040060             0074*    ; inputs: IX pointing to the subroutine address plus whatever the called function expects
040060             0075*    ; outputs: whatever the subroutine does, including IX and BC
040060             0076*    ; destroys: only what the subroutine does, but always BC
040060             0077*        MACRO CALL_IX
040060             0078*        ld bc,$+6 ; Address of first instruction after the jump
040060             0079*        push bc ; which constitutes the return address
040060             0080*        jp (ix) ; Jump to the address in IX
040060             0081*        ENDMACRO
040060             0082*    
040060             0083*    ; Simulated call to soubroutinte at IY
040060             0084*    ; inputs: IY pointing to the subroutine address plus whatever the called function expects
040060             0085*    ; outputs: whatever the subroutine does, including IY and BC
040060             0086*    ; destroys: only what the subroutine does, but always BC
040060             0087*        MACRO CALL_IY
040060             0088*        ld bc,$+6 ; Address of first instruction after the jump
040060             0089*        push bc ; which constitutes the return address
040060             0090*        jp (iy) ; Jump to the address in IY
040060             0091*        ENDMACRO
040060             0092*    
040060             0093*    ; put the value in HLU into A
040060             0094*    ; destroys: af
040060             0095*        MACRO HLU_TO_A
040060             0096*        dec sp ; 1 cycle
040060             0097*        push hl ; 4 cycles
040060             0098*        inc sp ; 1 cycle
040060             0099*        pop af ; 4 cycles
040060             0100*        ; 10 cycles total
040060             0101*        ENDMACRO
040060             0102*    
040060             0103*        MACRO PUSH_ALL
040060             0104*        ex af,af'
040060             0105*        exx
040060             0106*        push af
040060             0107*        push hl
040060             0108*        push bc
040060             0109*        push de
040060             0110*    
040060             0111*        ex af,af'
040060             0112*        exx
040060             0113*        push af
040060             0114*        push hl
040060             0115*        push bc
040060             0116*        push de
040060             0117*        push ix
040060             0118*        push iy
040060             0119*        ENDMACRO
040060             0120*    
040060             0121*        MACRO POP_ALL
040060             0122*        pop iy
040060             0123*        pop ix
040060             0124*        pop de
040060             0125*        pop bc
040060             0126*        pop hl
040060             0127*        pop af
040060             0128*        ex af,af'
040060             0129*        exx
040060             0130*    
040060             0131*        pop de
040060             0132*        pop bc
040060             0133*        pop hl
040060             0134*        pop af
040060             0135*        ex af,af'
040060             0136*        exx
040060             0137*        ENDMACRO
040060             0032         include "functions.inc"
040060             0001*    ; Print a zero-terminated string inline with code, e.g.:
040060             0002*    ;
040060             0003*    ;    call printInline
040060             0004*    ;    ASCIZ "Hello, world!\r\n"
040060             0005*    ;
040060             0006*    ; Destroys: HL,AF
040060             0007*    printInline:
040060 E1          0008*        pop hl ; get the return address = pointer to start of string
040061 CD 67 00 04 0009*        call printString ; HL advances to end of string
040065 E5          0010*        push hl ; restore the return address = pointer to end of string
040066 C9          0011*        ret
040067             0012*    
040067             0013*    ; Print a zero-terminated string
040067             0014*    ; IX: Pointer to string, A: signed offset from IX
040067             0015*    printStringIX:
040067             0016*    
040067             0017*    ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
040067             0018*    ; Print a zero-terminated string
040067             0019*    ; HL: Pointer to string
040067             0020*    ; returns: hl pointed to character after string terminator
040067             0021*    ; destroys: af, hl
040067             0022*    printString:
040067 C5          0023*        PUSH BC
040068 01 00 00 00 0024*        LD BC,0
04006C 3E 00       0025*        LD A,0
04006E 5B DF       0026*        RST.LIL 18h
040070 C1          0027*        POP BC
040071 C9          0028*        RET
040072             0029*    ; print a VDU sequence
040072             0030*    ; HL: Pointer to VDU sequence - <1 byte length> <data>
040072             0031*    sendVDUsequence:
040072 C5          0032*        PUSH BC
040073 01 00 00 00 0033*        LD BC, 0
040077 4E          0034*        LD C, (HL)
040078 5B DF       0035*        RST.LIL 18h
04007A C1          0036*        POP BC
04007B C9          0037*        RET
04007C             0038*    ; Print Newline sequence to VDP
04007C             0039*    ; destroys: nothing
04007C             0040*    printNewLine:
04007C F5          0041*        push af ; for some reason rst.lil 10h sets carry flag
04007D 3E 0D       0042*        LD A, '\r'
04007F 5B D7       0043*        RST.LIL 10h
040081 3E 0A       0044*        LD A, '\n'
040083 5B D7       0045*        RST.LIL 10h
040085 F1          0046*        pop af
040086 C9          0047*        RET
040087             0048*    
040087             0049*    ; print a zero-terminated string at a graphics coordinate
040087             0050*    ; Inputs: HL Pointer to string, BC,DE x,y position (in pixels)
040087             0051*    printStringGfx:
040087 E5          0052*        push hl ; preserve string pointer
040088             0053*    ; move graphics cursor to x,y location
040088 3E 44       0054*        ld a,plot_pt+mv_abs
04008A CD FE 20 04 0055*        call vdu_plot
04008E             0056*    ; print string
04008E E1          0057*        pop hl ; restore string pointer
04008F             0058*    @print_loop:
04008F 7E          0059*        ld a,(hl)
040090 B7          0060*        or a ; check for end of string
040091 C8          0061*        ret z ; if zero, we're done
040092 08          0062*        ex af,af' ; preserve character
040093 3E 05       0063*        ld a,5 ; VDU 5 char to gfx cursor
040095 5B D7       0064*        rst.lil 10h ; send it
040097 08          0065*        ex af,af' ; restore character
040098 5B D7       0066*        rst.lil 10h ; print character
04009A 23          0067*        inc hl
04009B C3 8F 00 04 0068*        jp @print_loop
04009F C9          0069*        ret
0400A0             0070*    ; end printStringGfx
0400A0             0071*    
0400A0             0072*    ; Print a 24-bit HEX number
0400A0             0073*    ; HLU: Number to print
0400A0             0074*    printHex24:
0400A0             0075*        HLU_TO_A
                       M1 Args: none
0400A0 3B          0001*M1      dec sp ; 1 cycle
0400A1 E5          0002*M1      push hl ; 4 cycles
0400A2 33          0003*M1      inc sp ; 1 cycle
0400A3 F1          0004*M1      pop af ; 4 cycles
0400A4             0005*M1      ; 10 cycles total
0400A4 CD AE 00 04 0076*        CALL printHex8
0400A8             0077*    ; Print a 16-bit HEX number
0400A8             0078*    ; HL: Number to print
0400A8             0079*    printHex16:
0400A8 7C          0080*        LD A,H
0400A9 CD AE 00 04 0081*        CALL printHex8
0400AD 7D          0082*        LD A,L
0400AE             0083*    ; Print an 8-bit HEX number
0400AE             0084*    ; A: Number to print
0400AE             0085*    printHex8:
0400AE 4F          0086*        LD C,A
0400AF 1F          0087*        RRA
0400B0 1F          0088*        RRA
0400B1 1F          0089*        RRA
0400B2 1F          0090*        RRA
0400B3 CD B8 00 04 0091*        CALL @F
0400B7 79          0092*        LD A,C
0400B8             0093*    @@:
0400B8 E6 0F       0094*        AND 0Fh
0400BA C6 90       0095*        ADD A,90h
0400BC 27          0096*        DAA
0400BD CE 40       0097*        ADC A,40h
0400BF 27          0098*        DAA
0400C0 5B D7       0099*        RST.LIL 10h
0400C2 C9          0100*        RET
0400C3             0101*    
0400C3             0102*    ; Print a 0x HEX prefix
0400C3             0103*    DisplayHexPrefix:
0400C3 3E 30       0104*        LD A, '0'
0400C5 5B D7       0105*        RST.LIL 10h
0400C7 3E 78       0106*        LD A, 'x'
0400C9 5B D7       0107*        RST.LIL 10h
0400CB C9          0108*        RET
0400CC             0109*    
0400CC             0110*        MACRO printDecBC
0400CC             0111*        push hl
0400CC             0112*        push bc
0400CC             0113*        pop hl
0400CC             0114*        call printDec
0400CC             0115*        pop hl
0400CC             0116*        ENDMACRO
0400CC             0117*    
0400CC             0118*        MACRO printDecDE
0400CC             0119*        push hl
0400CC             0120*        push de
0400CC             0121*        pop hl
0400CC             0122*        call printDec
0400CC             0123*        pop hl
0400CC             0124*        ENDMACRO
0400CC             0125*    
0400CC             0126*        MACRO printDecHL
0400CC             0127*        call printDec
0400CC             0128*        ENDMACRO
0400CC             0129*    
0400CC             0130*        MACRO printDecIX
0400CC             0131*        push hl
0400CC             0132*        push ix
0400CC             0133*        pop hl
0400CC             0134*        call printDec
0400CC             0135*        pop hl
0400CC             0136*        ENDMACRO
0400CC             0137*    
0400CC             0138*        MACRO printDecIY
0400CC             0139*        push hl
0400CC             0140*        push iy
0400CC             0141*        pop hl
0400CC             0142*        call printDec
0400CC             0143*        pop hl
0400CC             0144*        ENDMACRO
0400CC             0145*    
0400CC             0146*    
0400CC             0147*    ; Prints the right justified decimal value in HL without leading zeroes
0400CC             0148*    ; HL : Value to print
0400CC             0149*    ; preserves all registers and flags
0400CC             0150*    printDec:
0400CC             0151*    ; back up all the things
0400CC F5          0152*        push af
0400CD C5          0153*        push bc
0400CE D5          0154*        push de
0400CF E5          0155*        push hl
0400D0 11 F8 00 04 0156*        LD DE, _printDecBuffer
0400D4 CD 75 01 04 0157*        CALL u24_to_ascii
0400D8             0158*    ; replace leading zeroes with spaces
0400D8 21 F8 00 04 0159*        LD HL, _printDecBuffer
0400DC 06 07       0160*        ld B, 7 ; if HL was 0, we want to keep the final zero
0400DE             0161*    @loop:
0400DE 7E          0162*        LD A, (HL)
0400DF FE 30       0163*        CP '0'
0400E1 C2 EB 00 04 0164*        JP NZ, @done
0400E5 3E 20       0165*        LD A, ' '
0400E7 77          0166*        LD (HL), A
0400E8 23          0167*        INC HL
0400E9 10 F3       0168*        DJNZ @loop
0400EB             0169*    @done:
0400EB 21 F8 00 04 0170*        LD HL, _printDecBuffer
0400EF CD 67 00 04 0171*        CALL printString
0400F3             0172*    ; restore all the things
0400F3 E1          0173*        pop hl
0400F4 D1          0174*        pop de
0400F5 C1          0175*        pop bc
0400F6 F1          0176*        pop af
0400F7 C9          0177*        RET
0400F8 00 00 00 00 0178*    _printDecBuffer: blkb 16,0 ; a few bytes extra just to be sure
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
040108             0179*    
040108             0180*    ; same as printDec but signed
040108             0181*    printDecS:
040108             0182*    ; back up all the things
040108 F5          0183*        push af
040109 C5          0184*        push bc
04010A D5          0185*        push de
04010B E5          0186*        push hl
04010C CD 05 05 04 0187*        call hlu_abs ; abs(hl), sign flag set if negative
040110 F5          0188*        push af ; save sign flag
040111 11 F8 00 04 0189*        LD DE, _printDecBuffer
040115 CD 75 01 04 0190*        CALL u24_to_ascii
040119             0191*    ; replace leading zeroes with spaces
040119 21 F8 00 04 0192*        LD HL, _printDecBuffer
04011D 06 07       0193*        ld B, 7 ; if HL was 0, we want to keep the final zero
04011F F1          0194*        pop af ; restore sign flag
040120 3E 20       0195*        ld a,' ' ; assume positive
040122 F2 28 01 04 0196*        jp p,@print
040126 3E 2D       0197*        ld a,'-'
040128             0198*    @print:
040128 5B D7       0199*        rst.lil 10h
04012A             0200*    @loop:
04012A 7E          0201*        LD A, (HL)
04012B FE 30       0202*        CP '0'
04012D C2 37 01 04 0203*        JP NZ, @done
040131 3E 20       0204*        LD A, ' '
040133 77          0205*        LD (HL), A
040134 23          0206*        INC HL
040135 10 F3       0207*        DJNZ @loop
040137             0208*    @done:
040137 21 F8 00 04 0209*        LD HL, _printDecBuffer
04013B CD 67 00 04 0210*        CALL printString
04013F             0211*    ; restore all the things
04013F E1          0212*        pop hl
040140 D1          0213*        pop de
040141 C1          0214*        pop bc
040142 F1          0215*        pop af
040143 C9          0216*        RET
040144             0217*    
040144             0218*    printDec8:
040144             0219*    ; back up all the things
040144 F5          0220*        push af
040145 C5          0221*        push bc
040146 D5          0222*        push de
040147 E5          0223*        push hl
040148             0224*    ; initialize hl to 0 and load it with a
040148 21 00 00 00 0225*        ld hl,0
04014C 6F          0226*        ld l,a
04014D             0227*    ; convert l to ascii
04014D 11 F8 00 04 0228*        LD DE, _printDecBuffer
040151 CD 95 01 04 0229*        CALL u8_to_ascii
040155             0230*    ; replace leading zeroes with spaces
040155 21 F8 00 04 0231*        LD HL, _printDecBuffer
040159 06 03       0232*        ld B, 3 ; if A was 0, we want to keep the final zero
04015B             0233*    @loop:
04015B 7E          0234*        LD A, (HL)
04015C FE 30       0235*        CP '0'
04015E C2 68 01 04 0236*        JP NZ, @done
040162 3E 20       0237*        LD A, ' '
040164 77          0238*        LD (HL), A
040165 23          0239*        INC HL
040166 10 F3       0240*        DJNZ @loop
040168             0241*    @done:
040168 21 F8 00 04 0242*        LD HL, _printDecBuffer
04016C CD 67 00 04 0243*        CALL printString
040170             0244*    ; restore all the things
040170 E1          0245*        pop hl
040171 D1          0246*        pop de
040172 C1          0247*        pop bc
040173 F1          0248*        pop af
040174 C9          0249*        RET
040175             0250*    ; end printDec8
040175             0251*    
040175             0252*    ; This routine converts the unsigned 24-bit value in HLU into its ASCII representation,
040175             0253*    ; starting to memory location pointing by DE, in decimal form and with leading zeroes
040175             0254*    ; so it will allways be 8 characters length
040175             0255*    ; HL : Value to convert to string
040175             0256*    ; DE : pointer to buffer, at least 8 byte + 0
040175             0257*    u24_to_ascii:
040175 01 80 69 67 0258*        LD BC,-10000000
040179 CD AC 01 04 0259*        CALL one_digit
04017D 01 C0 BD F0 0260*        LD BC,-1000000
040181 CD AC 01 04 0261*        CALL one_digit
040185 01 60 79 FE 0262*        LD BC,-100000
040189 CD AC 01 04 0263*        CALL one_digit
04018D 01 F0 D8 FF 0264*        LD BC,-10000
040191 CD AC 01 04 0265*        CALL one_digit
040195             0266*    u8_to_ascii: ; same arguments but hl <= 255, uhl and h = 0
040195 01 18 FC FF 0267*        LD BC,-1000
040199 CD AC 01 04 0268*        CALL one_digit
04019D 01 9C FF FF 0269*        LD BC,-100
0401A1 CD AC 01 04 0270*        CALL one_digit
0401A5 0E F6       0271*        LD C,-10
0401A7 CD AC 01 04 0272*        CALL one_digit
0401AB 48          0273*        LD C,B
0401AC             0274*    one_digit:
0401AC 3E 2F       0275*        LD A,'0'-1
0401AE             0276*    @divide_me:
0401AE 3C          0277*        INC A
0401AF 09          0278*        ADD HL,BC
0401B0 38 FC       0279*        JR C,@divide_me
0401B2 ED 42       0280*        SBC HL,BC
0401B4 12          0281*        LD (DE),A
0401B5 13          0282*        INC DE
0401B6 C9          0283*        RET
0401B7             0284*    
0401B7             0285*    print_u24:
0401B7 D5          0286*        push de
0401B8 E5          0287*        push hl
0401B9 11 F8 00 04 0288*        ld de,_printDecBuffer
0401BD CD 75 01 04 0289*        call u24_to_ascii
0401C1 21 F8 00 04 0290*        ld hl,_printDecBuffer
0401C5 CD 67 00 04 0291*        call printString
0401C9 3E 20       0292*        ld a,' '
0401CB 5B D7       0293*        rst.lil 10h
0401CD E1          0294*        pop hl
0401CE D1          0295*        pop de
0401CF C9          0296*        ret
0401D0             0297*    
0401D0             0298*    ; u168_to_ascii: Converts an unsigned 16.8 fixed-point value in HL to an ASCII string.
0401D0             0299*    ; HL : Value to convert to string (integer part in H, fractional part in L)
0401D0             0300*    ; DE : Pointer to buffer, requires at least 11 bytes (8 digits, sign, decimal point, and null terminator)
0401D0             0301*    u168_to_ascii:
0401D0             0302*    ; add a leading space to make room for sign flag if needed
0401D0 3E 20       0303*        ld a,' '
0401D2 12          0304*        ld (de),a
0401D3 13          0305*        inc de
0401D4             0306*    ; Convert integer part
0401D4 E5          0307*        push hl ; Save HL (we’ll need the fractional part later)
0401D5             0308*        ; call hlu_udiv256 ; Shift to get integer portion in HL
0401D5             0309*        SRL_UHL ; Shift to get integer portion in HL
                       M1 Args: none
0401D5 3B          0001*M1      dec sp ; 1 cycle
0401D6 E5          0002*M1      push hl ; 4 cycles
0401D7 33          0003*M1      inc sp ; 1 cycle
0401D8 E1          0004*M1      pop hl ; 4 cycles
0401D9 23          0005*M1      inc hl ; 1 cycle
0401DA 52 2B       0006*M1      dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
0401DC             0007*M1      ; 13 cycles total
0401DC 01 F0 D8 FF 0310*        ld bc, -10000
0401E0 CD 03 02 04 0311*        call @one_int
0401E4 01 18 FC FF 0312*        ld bc, -1000
0401E8 CD 03 02 04 0313*        call @one_int
0401EC 01 9C FF FF 0314*        ld bc, -100
0401F0 CD 03 02 04 0315*        call @one_int
0401F4 0E F6       0316*        ld c, -10
0401F6 CD 03 02 04 0317*        call @one_int
0401FA 48          0318*        ld c, b
0401FB CD 03 02 04 0319*        call @one_int
0401FF C3 0E 02 04 0320*        jp @frac ; Jump to fractional part conversion
040203             0321*    @one_int:
040203 3E 2F       0322*        ld a, '0' - 1 ; Start ASCII character at '0'
040205             0323*    @divide_me:
040205 3C          0324*        inc a
040206 09          0325*        add hl, bc ; Accumulate until overflow
040207 38 FC       0326*        jr c, @divide_me
040209 ED 42       0327*        sbc hl, bc ; Remove excess after overflow
04020B 12          0328*        ld (de), a ; Store ASCII digit
04020C 13          0329*        inc de
04020D C9          0330*        ret
04020E             0331*    ; Convert fractional part
04020E             0332*    @frac:
04020E 3E 2E       0333*        ld a, '.' ; Decimal point
040210 12          0334*        ld (de), a
040211 13          0335*        inc de
040212 E1          0336*        pop hl ; Restore HL with original fraction
040213 06 03       0337*        ld b, 3 ; Loop counter for 3 fractional digits
040215             0338*    @frac_loop:
040215 26 0A       0339*        ld h, 10 ; Load multiplier for fractional part
040217 ED 6C       0340*        mlt hl ; Multiply by 10, result in HL (H holds the integer part)
040219 3E 30       0341*        ld a, '0'
04021B 84          0342*        add a, h ; Convert integer part to ASCII
04021C 12          0343*        ld (de), a
04021D 13          0344*        inc de
04021E 10 F5       0345*        djnz @frac_loop ; Repeat for each fractional digit
040220             0346*    ; Add null terminator
040220 AF          0347*        xor a ; Null terminator
040221 12          0348*        ld (de), a
040222 C9          0349*        ret
040223             0350*    
040223             0351*    print_u168:
040223 D5          0352*        push de
040224 E5          0353*        push hl
040225 11 F8 00 04 0354*        ld de,_printDecBuffer
040229 CD D0 01 04 0355*        call u168_to_ascii
04022D 21 F8 00 04 0356*        ld hl,_printDecBuffer
040231 CD 67 00 04 0357*        call printString
040235 E1          0358*        pop hl
040236 D1          0359*        pop de
040237 C9          0360*        ret
040238             0361*    
040238             0362*    ; signed version of u168_to_ascii
040238             0363*    s168_to_ascii:
040238 D5          0364*        push de ; save starting address of buffer
040239 CD 05 05 04 0365*        call hlu_abs
04023D F5          0366*        push af ; save sign flag
04023E CD D0 01 04 0367*        call u168_to_ascii
040242 F1          0368*        pop af ; restore sign flag
040243 D1          0369*        pop de ; restore starting address of buffer
040244 F0          0370*        ret p ; hlu was positive so nothing to do
040245 3E 2D       0371*        ld a,'-'
040247 12          0372*        ld (de),a
040248 C9          0373*        ret
040249             0374*    
040249             0375*    print_s168:
040249 D5          0376*        push de
04024A E5          0377*        push hl
04024B 11 F8 00 04 0378*        ld de,_printDecBuffer
04024F CD 38 02 04 0379*        call s168_to_ascii
040253 21 F8 00 04 0380*        ld hl,_printDecBuffer
040257 CD 67 00 04 0381*        call printString
04025B E1          0382*        pop hl
04025C D1          0383*        pop de
04025D C9          0384*        ret
04025E             0385*    
04025E             0386*    print_s168_hl:
04025E F5          0387*        push af
04025F E5          0388*        push hl
040260 CD 49 02 04 0389*        call print_s168
040264 3E 20       0390*        ld a,' '
040266 5B D7       0391*        rst.lil 10h
040268 E1          0392*        pop hl
040269 F1          0393*        pop af
04026A C9          0394*        ret
04026B             0395*    
04026B             0396*    print_s168_bc:
04026B F5          0397*        push af
04026C C5          0398*        push bc
04026D E5          0399*        push hl
04026E C5          0400*        push bc
04026F E1          0401*        pop hl
040270 CD 49 02 04 0402*        call print_s168
040274 3E 20       0403*        ld a,' '
040276 5B D7       0404*        rst.lil 10h
040278 E1          0405*        pop hl
040279 C1          0406*        pop bc
04027A F1          0407*        pop af
04027B C9          0408*        ret
04027C             0409*    
04027C             0410*    print_s168_de:
04027C F5          0411*        push af
04027D D5          0412*        push de
04027E E5          0413*        push hl
04027F EB          0414*        ex de,hl
040280 CD 49 02 04 0415*        call print_s168
040284 3E 20       0416*        ld a,' '
040286 5B D7       0417*        rst.lil 10h
040288 E1          0418*        pop hl
040289 D1          0419*        pop de
04028A F1          0420*        pop af
04028B C9          0421*        ret
04028C             0422*    
04028C             0423*    print_s168_hl_bc_de:
04028C F5          0424*        push af
04028D C5          0425*        push bc
04028E D5          0426*        push de
04028F E5          0427*        push hl
040290 CD 49 02 04 0428*        call print_s168
040294 3E 20       0429*        ld a,' '
040296 5B D7       0430*        rst.lil 10h
040298 C5          0431*        push bc
040299 E1          0432*        pop hl
04029A CD 49 02 04 0433*        call print_s168
04029E 3E 20       0434*        ld a,' '
0402A0 5B D7       0435*        rst.lil 10h
0402A2 EB          0436*        ex de,hl
0402A3 CD 49 02 04 0437*        call print_s168
0402A7 3E 20       0438*        ld a,' '
0402A9 5B D7       0439*        rst.lil 10h
0402AB E1          0440*        pop hl
0402AC D1          0441*        pop de
0402AD C1          0442*        pop bc
0402AE F1          0443*        pop af
0402AF C9          0444*        ret
0402B0             0445*    
0402B0             0446*    print_s168_bc_de:
0402B0 F5          0447*        push af
0402B1 C5          0448*        push bc
0402B2 D5          0449*        push de
0402B3 C5          0450*        push bc
0402B4 E1          0451*        pop hl
0402B5 CD 49 02 04 0452*        call print_s168
0402B9 3E 20       0453*        ld a,' '
0402BB 5B D7       0454*        rst.lil 10h
0402BD EB          0455*        ex de,hl
0402BE CD 49 02 04 0456*        call print_s168
0402C2 3E 20       0457*        ld a,' '
0402C4 5B D7       0458*        rst.lil 10h
0402C6 E1          0459*        pop hl
0402C7 D1          0460*        pop de
0402C8 C1          0461*        pop bc
0402C9 F1          0462*        pop af
0402CA C9          0463*        ret
0402CB             0464*    
0402CB             0465*    print_s168_a:
0402CB F5          0466*        push af
0402CC C5          0467*        push bc
0402CD E5          0468*        push hl
0402CE 21 00 00 00 0469*        ld hl,0
0402D2 6F          0470*        ld l,a
0402D3 CD 5E 02 04 0471*        call print_s168_hl
0402D7 E1          0472*        pop hl
0402D8 C1          0473*        pop bc
0402D9 F1          0474*        pop af
0402DA C9          0475*        ret
0402DB             0476*    
0402DB             0477*    ; #### new functions added by Brandon R. Gates ####
0402DB             0478*    
0402DB             0479*    ; print the binary representation of the 8-bit value in a
0402DB             0480*    ; destroys a, hl, bc
0402DB             0481*    printBin8:
0402DB 06 08       0482*        ld b,8 ; loop counter for 8 bits
0402DD 21 F8 02 04 0483*        ld hl,@cmd ; set hl to the low byte of the output string
0402E1             0484*        ; (which will be the high bit of the value in a)
0402E1             0485*    @loop:
0402E1 07          0486*        rlca ; put the next highest bit into carry
0402E2 38 04       0487*        jr c,@one
0402E4 36 30       0488*        ld (hl),'0'
0402E6 18 02       0489*        jr @next_bit
0402E8             0490*    @one:
0402E8 36 31       0491*        ld (hl),'1'
0402EA             0492*    @next_bit:
0402EA 23          0493*        inc hl
0402EB 10 F4       0494*        djnz @loop
0402ED             0495*    ; print it
0402ED 21 F8 02 04 0496*        ld hl,@cmd
0402F1 01 08 00 00 0497*        ld bc,@end-@cmd
0402F5 5B DF       0498*        rst.lil $18
0402F7 C9          0499*        ret
0402F8             0500*    @cmd: ds 8 ; eight bytes for eight bits
040300             0501*    @end:
040300             0502*    
040300             0503*    ; print the binary representation of the 8-bit value in a
040300             0504*    ; in reverse order (lsb first)
040300             0505*    ; destroys a, hl, bc
040300             0506*    printBin8Rev:
       FF FF FF FF 
       FF FF FF FF 
040300 06 08       0507*        ld b,8 ; loop counter for 8 bits
040302 21 1D 03 04 0508*        ld hl,@cmd ; set hl to the low byte of the output string
040306             0509*        ; (which will be the high bit of the value in a)
040306             0510*    @loop:
040306 0F          0511*        rrca ; put the next lowest bit into carry
040307 38 04       0512*        jr c,@one
040309 36 30       0513*        ld (hl),'0'
04030B 18 02       0514*        jr @next_bit
04030D             0515*    @one:
04030D 36 31       0516*        ld (hl),'1'
04030F             0517*    @next_bit:
04030F 23          0518*        inc hl
040310 10 F4       0519*        djnz @loop
040312             0520*    ; print it
040312 21 1D 03 04 0521*        ld hl,@cmd
040316 01 08 00 00 0522*        ld bc,@end-@cmd
04031A 5B DF       0523*        rst.lil $18
04031C C9          0524*        ret
04031D             0525*    @cmd: ds 8 ; eight bytes for eight bits
040325             0526*    @end:
040325             0527*    
       FF FF FF FF 
       FF FF FF FF 
040325 20 61 66 3D 0528*    str_afu: db " af=",0
       00          
04032A 20 68 6C 3D 0529*    str_hlu: db " hl=",0
       00          
04032F 20 62 63 3D 0530*    str_bcu: db " bc=",0
       00          
040334 20 64 65 3D 0531*    str_deu: db " de=",0
       00          
040339 20 69 78 3D 0532*    str_ixu: db " ix=",0
       00          
04033E 20 69 79 3D 0533*    str_iyu: db " iy=",0
       00          
040343             0534*    
040343             0535*    ; print udeuhl to screen in hexidecimal format
040343             0536*    ; inputs: none
040343             0537*    ; outputs: concatenated hexidecimal udeuhl
040343             0538*    ; destroys: nothing
040343             0539*    dumpUDEUHLHex:
040343             0540*    ; store everything in scratch
040343 22 A2 03 04 0541*        ld (uhl),hl
040347 ED 43 A5 03 0542*        ld (ubc),bc
       04          
04034C ED 53 A8 03 0543*        ld (ude),de
       04          
040351 DD 22 AB 03 0544*        ld (uix),ix
       04          
040356 FD 22 AE 03 0545*        ld (uiy),iy
       04          
04035B F5          0546*        push af
04035C             0547*    
04035C             0548*    ; print each register
04035C             0549*    
04035C 21 96 03 04 0550*        ld hl,str_udeuhl
040360 CD 67 00 04 0551*        call printString
040364 2A A8 03 04 0552*        ld hl,(ude)
040368 CD A0 00 04 0553*        call printHex24
04036C 3E 2E       0554*        ld a,'.' ; print a dot to separate the values
04036E 5B D7       0555*        rst.lil 10h
040370 2A A2 03 04 0556*        ld hl,(uhl)
040374 CD A0 00 04 0557*        call printHex24
040378 CD 7C 00 04 0558*        call printNewLine
04037C             0559*    
04037C             0560*    ; restore everything
04037C 2A A2 03 04 0561*        ld hl, (uhl)
040380 ED 4B A5 03 0562*        ld bc, (ubc)
       04          
040385 ED 5B A8 03 0563*        ld de, (ude)
       04          
04038A DD 2A AB 03 0564*        ld ix, (uix)
       04          
04038F FD 2A AE 03 0565*        ld iy, (uiy)
       04          
040394 F1          0566*        pop af
040395             0567*    ; all done
040395 C9          0568*        ret
040396             0569*    
040396 75 64 65 2E 0570*    str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04039F             0571*    
04039F             0572*    ; global scratch memory for registers
04039F 00 00 00    0573*    uaf: dl 0
0403A2 00 00 00    0574*    uhl: dl 0
0403A5 00 00 00    0575*    ubc: dl 0
0403A8 00 00 00    0576*    ude: dl 0
0403AB 00 00 00    0577*    uix: dl 0
0403AE 00 00 00    0578*    uiy: dl 0
0403B1 00 00 00    0579*    usp: dl 0
0403B4 00 00 00    0580*    upc: dl 0
0403B7             0581*    
0403B7             0582*    
0403B7             0583*    ; set all the bits in the flag register
0403B7             0584*    ; more of an academic exercise than anything useful
0403B7             0585*    ; inputs; none
0403B7             0586*    ; outputs; a=0,f=255
0403B7             0587*    ; destroys: flags, hl
0403B7             0588*    ; preserves: a, because why not
0403B7             0589*    setAllFlags:
0403B7 21 FF 00 00 0590*        ld hl,255
0403BB 67          0591*        ld h,a ; four cycles to preserve a is cheap
0403BC E5          0592*        push hl
0403BD F1          0593*        pop af
0403BE C9          0594*        ret
0403BF             0595*    
0403BF             0596*    ; reset all the bits in the flag register
0403BF             0597*    ; unlike its inverse counterpart, this may actually be useful
0403BF             0598*    ; inputs; none
0403BF             0599*    ; outputs; a=0,f=0
0403BF             0600*    ; destroys: flags, hl
0403BF             0601*    ; preserves: a, because why not
0403BF             0602*    resetAllFlags:
0403BF 21 00 00 00 0603*        ld hl,0
0403C3 67          0604*        ld h,a ; four cycles to preserve a is cheap
0403C4 E5          0605*        push hl
0403C5 F1          0606*        pop af
0403C6 C9          0607*        ret
0403C7             0608*    
0403C7             0609*    ; wait until user presses a key
0403C7             0610*    ; inputs: none
0403C7             0611*    ; outputs: ascii code of key pressed in a
0403C7             0612*    ; destroys: af,ix
0403C7             0613*    waitKeypress:
0403C7             0614*        MOSCALL mos_getkey
                       M1 Args: function=mos_getkey 
0403C7 3E 00       0001*M1  			LD	A, function
0403C9 5B CF       0002*M1  			RST.LIL	08h
0403CB C9          0615*        ret
0403CC             0616*    
0403CC             0617*    ; clear a block of memory by writing a prescribed value to each byte in the range
0403CC             0618*    ; inputs: a = value to write, hl = address of first byte, bc = number of bytes
0403CC             0619*    ; outputs: memory block is cleared
0403CC             0620*    ; destroys: hl, bc, de
0403CC             0621*    clear_mem:
0403CC 0B          0622*        dec bc ; we do this because we will increment de before writing the first byte
0403CD 77          0623*        ld (hl),a
0403CE E5          0624*        push hl
0403CF D1          0625*        pop de
0403D0 13          0626*        inc de ; target address
0403D1 ED B0       0627*        ldir
0403D3 C9          0628*        ret
0403D4             0033         include "arith24.inc"
0403D4             0001*    ;------------------------------------------------------------------------
0403D4             0002*    ;  arith24.asm
0403D4             0003*    ;  24-bit ez80 arithmetic routines
0403D4             0004*    ;  Copyright (c) Shawn Sijnstra 2024
0403D4             0005*    ;  MIT license
0403D4             0006*    ;
0403D4             0007*    ;  This library was created as a tool to help make ez80
0403D4             0008*    ;  24-bit native assembly routines for simple mathematical problems
0403D4             0009*    ;  more widely available.
0403D4             0010*    ;
0403D4             0011*    ;------------------------------------------------------------------------
0403D4             0012*    
0403D4             0013*    ;------------------------------------------------------------------------
0403D4             0014*    ; umul24:	HL = HL*DE (unsigned)
0403D4             0015*    ; Preserves AF, BC, DE
0403D4             0016*    ; Uses a fast multiply routine.
0403D4             0017*    ;------------------------------------------------------------------------
0403D4             0018*    umul24:
0403D4 D5          0019*    	push	DE
0403D5 C5          0020*    	push	BC
0403D6 F5          0021*    	push	AF
0403D7 E5          0022*    	push	HL
0403D8 C1          0023*    	pop		BC
0403D9 3E 18       0024*        ld	 	a, 24 ; No. of bits to process
0403DB 21 00 00 00 0025*        ld	 	hl, 0 ; Result
0403DF             0026*    umul24_lp:
0403DF 29          0027*    	add	hl,hl
0403E0 EB          0028*    	ex	de,hl
0403E1 29          0029*    	add	hl,hl
0403E2 EB          0030*    	ex	de,hl
0403E3 30 01       0031*    	jr	nc,umul24_nc
0403E5 09          0032*    	add	hl,bc
0403E6             0033*    umul24_nc:
0403E6 3D          0034*    	dec	a
0403E7 20 F6       0035*    	jr	nz,umul24_lp
0403E9 F1          0036*    	pop	af
0403EA C1          0037*    	pop	bc
0403EB D1          0038*    	pop	de
0403EC C9          0039*    	ret
0403ED             0040*    
0403ED             0041*    
0403ED             0042*    ;------------------------------------------------------------------------
0403ED             0043*    ; udiv24
0403ED             0044*    ; Unsigned 24-bit division
0403ED             0045*    ; Divides HLU by DEU. Gives result in DEU (and BC), remainder in HLU.
0403ED             0046*    ;
0403ED             0047*    ; Uses AF BC DE HL
0403ED             0048*    ; Uses Restoring Division algorithm
0403ED             0049*    ;------------------------------------------------------------------------
0403ED             0050*    
0403ED             0051*    udiv24:
0403ED E5          0052*    	push	hl
0403EE C1          0053*    	pop		bc	;move dividend to BCU
0403EF 21 00 00 00 0054*    	ld		hl,0	;result
0403F3 A7          0055*    	and		a
0403F4 ED 52       0056*    	sbc		hl,de	;test for div by 0
0403F6 C8          0057*    	ret		z		;it's zero, carry flag is clear
0403F7 19          0058*    	add		hl,de	;HL is 0 again
0403F8 3E 18       0059*    	ld		a,24	;number of loops through.
0403FA             0060*    udiv1:
0403FA C5          0061*    	push	bc	;complicated way of doing this because of lack of access to top bits
0403FB E3          0062*    	ex		(sp),hl
0403FC 37          0063*    	scf
0403FD ED 6A       0064*    	adc	hl,hl
0403FF E3          0065*    	ex	(sp),hl
040400 C1          0066*    	pop	bc		;we now have bc = (bc * 2) + 1
040401             0067*    
040401 ED 6A       0068*    	adc	hl,hl
040403 A7          0069*    	and	a		;is this the bug
040404 ED 52       0070*    	sbc	hl,de
040406 30 02       0071*    	jr	nc,udiv2
040408 19          0072*    	add	hl,de
040409             0073*    ;	dec	c
040409 0B          0074*    	dec	bc
04040A             0075*    udiv2:
04040A 3D          0076*    	dec	a
04040B 20 ED       0077*    	jr	nz,udiv1
04040D 37          0078*    	scf		;flag used for div0 error
04040E C5          0079*    	push	bc
04040F D1          0080*    	pop		de	;remainder
040410 C9          0081*    	ret
040411             0082*    
040411             0083*    
040411             0084*    
040411             0085*    ;------------------------------------------------------------------------
040411             0086*    ; neg24
040411             0087*    ; Returns: HLU = 0-HLU
040411             0088*    ; preserves all other registers
040411             0089*    ;------------------------------------------------------------------------
040411             0090*    neg24:
040411 D5          0091*    	push	de
040412 EB          0092*    	ex		de,hl
040413 21 00 00 00 0093*    	ld		hl,0
040417 B7          0094*    	or		a
040418 ED 52       0095*    	sbc		hl,de
04041A D1          0096*    	pop		de
04041B C9          0097*    	ret
04041C             0098*    
04041C             0099*    ;------------------------------------------------------------------------
04041C             0100*    ; or_hlu_deu: 24 bit bitwise OR
04041C             0101*    ; Returns: hlu = hlu OR deu
04041C             0102*    ; preserves all other registers
04041C             0103*    ;------------------------------------------------------------------------
04041C             0104*    or_hlu_deu:
04041C 22 A5 04 04 0105*    	ld	(bitbuf1),hl
040420 ED 53 A8 04 0106*    	ld	(bitbuf2),de
       04          
040425 D5          0107*    	push	de	;preserve DEU
040426 C5          0108*    	push	bc	;preserve BCU
040427 06 03       0109*    	ld		b,3
040429 21 A5 04 04 0110*    	ld	hl,bitbuf1
04042D 11 A5 04 04 0111*    	ld	de,bitbuf1
040431             0112*    orloop_24:
040431 1A          0113*    	ld	a,(de)
040432 B6          0114*    	or	(hl)
040433 12          0115*    	ld	(de),a
040434 13          0116*    	inc	de
040435 23          0117*    	inc	hl
040436 10 F9       0118*    	djnz	orloop_24
040438 2A A8 04 04 0119*    	ld	hl,(bitbuf2)
04043C C1          0120*    	pop		bc	;restore BC
04043D D1          0121*    	pop		de	;restore DE
04043E             0122*    
04043E             0123*    ;------------------------------------------------------------------------
04043E             0124*    ; and_hlu_deu: 24 bit bitwise AND
04043E             0125*    ; Returns: hlu = hlu AND deu
04043E             0126*    ; preserves all other registers
04043E             0127*    ;------------------------------------------------------------------------
04043E             0128*    and_hlu_deu:
04043E 22 A5 04 04 0129*    	ld	(bitbuf1),hl
040442 ED 53 A8 04 0130*    	ld	(bitbuf2),de
       04          
040447 D5          0131*    	push	de	;preserve DEU
040448 C5          0132*    	push	bc	;preserve BCU
040449 06 03       0133*    	ld		b,3
04044B 21 A5 04 04 0134*    	ld	hl,bitbuf1
04044F 11 A5 04 04 0135*    	ld	de,bitbuf1
040453             0136*    andloop_24:
040453 1A          0137*    	ld	a,(de)
040454 A6          0138*    	and	(hl)
040455 12          0139*    	ld	(de),a
040456 13          0140*    	inc	de
040457 23          0141*    	inc	hl
040458 10 F9       0142*    	djnz	andloop_24
04045A 2A A8 04 04 0143*    	ld	hl,(bitbuf2)
04045E C1          0144*    	pop		bc	;restore BC
04045F D1          0145*    	pop		de	;restore DE
040460             0146*    
040460             0147*    ;------------------------------------------------------------------------
040460             0148*    ; xor_hlu_deu: 24 bit bitwise XOR
040460             0149*    ; Returns: hlu = hlu XOR deu
040460             0150*    ; preserves all other registers
040460             0151*    ;------------------------------------------------------------------------
040460             0152*    xor_hlu_deu:
040460 22 A5 04 04 0153*    	ld	(bitbuf1),hl
040464 ED 53 A8 04 0154*    	ld	(bitbuf2),de
       04          
040469 D5          0155*    	push	de	;preserve DEU
04046A C5          0156*    	push	bc	;preserve BCU
04046B 06 03       0157*    	ld		b,3
04046D 21 A5 04 04 0158*    	ld	hl,bitbuf1
040471 11 A5 04 04 0159*    	ld	de,bitbuf1
040475             0160*    xorloop_24:
040475 1A          0161*    	ld	a,(de)
040476 AE          0162*    	xor	(hl)
040477 12          0163*    	ld	(de),a
040478 13          0164*    	inc	de
040479 23          0165*    	inc	hl
04047A 10 F9       0166*    	djnz	xorloop_24
04047C 2A A8 04 04 0167*    	ld	hl,(bitbuf2)
040480 C1          0168*    	pop		bc	;restore BC
040481 D1          0169*    	pop		de	;restore DE
040482             0170*    
040482             0171*    ;------------------------------------------------------------------------
040482             0172*    ; shl_hlu: 24 bit shift left hlu by a positions
040482             0173*    ; Returns: hlu = hlu << a
040482             0174*    ;		   a = 0
040482             0175*    ; NOTE: only considers a up to 16 bits.
040482             0176*    ; preserves all other registers
040482             0177*    ; modified by Brandon R. Gates to use a instead of de
040482             0178*    ;------------------------------------------------------------------------
040482             0179*    shl_hlu:
040482 B7          0180*    	or a
040483 C8          0181*    	ret		z		;we're done
040484 29          0182*    	add		hl,hl	;shift HLU left
040485 3D          0183*    	dec a
040486 18 FA       0184*    	jr		shl_hlu
040488             0185*    
040488             0186*    ;------------------------------------------------------------------------
040488             0187*    ; shr_hlu: 24 bit shift right hlu by a positions
040488             0188*    ; Returns: hlu = hlu >> a
040488             0189*    ;		   a = 0
040488             0190*    ; NOTE: only considers a up to 16 bits.
040488             0191*    ; preserves all other registers
040488             0192*    ; modified by Brandon R. Gates to use a instead of de
040488             0193*    ;------------------------------------------------------------------------
040488             0194*    shr_hlu:
040488 22 A5 04 04 0195*    	ld		(bitbuf1),hl
04048C 21 A7 04 04 0196*    	ld		hl,bitbuf1+2
040490             0197*    @shr_loop:
040490 B7          0198*    	or a
040491 28 0D       0199*    	jr		z,@shr_done		;we're done
040493             0200*    ;carry is clear from or instruction
040493 CB 1E       0201*    	rr		(hl)
040495 2B          0202*    	dec		hl
040496 CB 1E       0203*    	rr		(hl)
040498 2B          0204*    	dec		hl
040499 CB 1E       0205*    	rr		(hl)
04049B 23          0206*    	inc		hl
04049C 23          0207*    	inc		hl
04049D 3D          0208*    	dec a
04049E 18 F0       0209*    	jr		@shr_loop
0404A0             0210*    @shr_done:
0404A0 2A A5 04 04 0211*    	ld		hl,(bitbuf1)	;collect result
0404A4 C9          0212*    	ret
0404A5             0213*    
0404A5             0214*    ;------------------------------------------------------------------------
0404A5             0215*    ; Scratch area for calculations
0404A5             0216*    ;------------------------------------------------------------------------
0404A5 00 00 00    0217*    bitbuf1:	dw24	0	;bit manipulation buffer 1
0404A8 00 00 00    0218*    bitbuf2:	dw24	0	;bit manipulation buffer 2
0404AB             0219*    
0404AB             0220*    ; -----------------------------------------------------------------------
0404AB             0221*    ; Functions added by Brandon R. Gates
0404AB             0222*    ; -----------------------------------------------------------------------
0404AB             0223*    
0404AB             0224*    ;------------------------------------------------------------------------
0404AB             0225*    ; shr_hlu_div: Quick division by powers of two based on log2 of A
0404AB             0226*    ;              Determines the LSB of A and shifts HLU accordingly.
0404AB             0227*    ;              HLU = HLU >> LSB(A)
0404AB             0228*    ; Returns: HLU = HLU >> LSB(A)
0404AB             0229*    ; Destroys: af
0404AB             0230*    ;------------------------------------------------------------------------
0404AB             0231*    shr_hlu_log2a:
0404AB B7          0232*    	or a    ; check for zero
0404AC C8          0233*    	ret z   ; nothing to shift so we're done
0404AD C5          0234*    	push 	bc ; preserve
0404AE 06 00       0235*    	ld		b,0 ; clear b
0404B0             0236*    @find_bit:
0404B0 0F          0237*    	rrca ; bit 0 to carry
0404B1 DA BA 04 04 0238*    	jp c,@found_bit
0404B5 04          0239*    	inc b ; next bit
0404B6 C3 B0 04 04 0240*    	jp @find_bit
0404BA             0241*    @found_bit:
0404BA 78          0242*    	ld a,b
0404BB CD 88 04 04 0243*    	call shr_hlu
0404BF C1          0244*    	pop 	bc ; restore
0404C0 C9          0245*    	ret
0404C1             0246*    ; end shr_hlu_log2a
0404C1             0247*    
0404C1             0248*    ;------------------------------------------------------------------------
0404C1             0249*    ; shl_hlu_log2a: Quick multiplication by powers of two based on log2 of A
0404C1             0250*    ;                Determines the LSB of A and shifts HLU accordingly.
0404C1             0251*    ;                HLU = HLU << LSB(A)
0404C1             0252*    ; Returns: HLU = HLU << LSB(A)
0404C1             0253*    ; Destroys: af
0404C1             0254*    ;------------------------------------------------------------------------
0404C1             0255*    shl_hlu_log2a:
0404C1 B7          0256*    	or a    ; check for zero
0404C2 C8          0257*    	ret z   ; nothing to shift so we're done
0404C3 C5          0258*    	push 	bc ; preserve
0404C4 06 00       0259*    	ld		b,0 ; clear b
0404C6             0260*    @find_bit:
0404C6 0F          0261*    	rrca ; bit 0 to carry
0404C7 DA D0 04 04 0262*    	jp c,@found_bit
0404CB 04          0263*    	inc b ; next bit
0404CC C3 C6 04 04 0264*    	jp @find_bit
0404D0             0265*    @found_bit:
0404D0 78          0266*    	ld a,b
0404D1 CD 82 04 04 0267*    	call shl_hlu
0404D5 C1          0268*    	pop 	bc ; restore
0404D6 C9          0269*    	ret
0404D7             0270*    ; end shl_hlu_log2a
0404D7             0271*    
0404D7             0272*    
0404D7             0273*    ; UHL / UDE --> UDE (signed), remainder UHL (unsigned)
0404D7 F5          0274*    push af ; dummy push to make IDE happy
0404D8             0275*    sdiv24:
0404D8             0276*    ; make everything positive and store sign flags
0404D8 CD 05 05 04 0277*        call hlu_abs
0404DC F5          0278*        push af
0404DD EB          0279*        ex de,hl
0404DE CD 05 05 04 0280*        call hlu_abs
0404E2 EB          0281*        ex de,hl
0404E3 F5          0282*        push af
0404E4             0283*    ; do the division
0404E4 CD ED 03 04 0284*        call udiv24 ; de = quotient, hl = remainder
0404E8             0285*    ; adjust sign of result
0404E8 F1          0286*        pop af ; sign de
0404E9 FA F6 04 04 0287*        jp m,@de_neg
0404ED F1          0288*        pop af ; sign hl
0404EE F0          0289*        ret p ; both positive, nothing to do
0404EF             0290*    @hl_neg:
0404EF EB          0291*        ex de,hl ; quotient to hl for sign adjustment
0404F0 CD 15 05 04 0292*        call neg_hlu ; de pos, hl neg, result is negative
0404F4 EB          0293*        ex de,hl ; negated quotient to de
0404F5 C9          0294*        ret
0404F6             0295*    @de_neg:
0404F6 F1          0296*        pop af
0404F7 F8          0297*        ret m ; both negative, nothing to do
0404F8 EB          0298*        ex de,hl ; quotient to hl for sign adjustment
0404F9 CD 15 05 04 0299*        call neg_hlu ; result is negative
0404FD EB          0300*        ex de,hl ; negated quotient to de
0404FE C9          0301*        ret
0404FF             0034         include "maths.inc"
0404FF             0001*    ;------------------------------------------------------------------------
0404FF             0002*    ; Scratch area for calculations
0404FF             0003*    ;------------------------------------------------------------------------
0404FF 00 00 00    0004*    scratch1: dw24 0 ;bit manipulation buffer 1
040502 00 00 00    0005*    scratch2: dw24 0 ;bit manipulation buffer 2
040505             0006*    
040505             0007*    ; absolute value of hlu
040505             0008*    ; returns: abs(hlu), flags set according to the incoming sign of hlu:
040505             0009*    ;         s1,z0,pv0,n1,c0 if hlu was negative
040505             0010*    ;         s0,z1,pv0,n1,c0 if hlu was zero
040505             0011*    ;         s0,z0,pv0,n1,c0 if hlu was positive
040505             0012*    ; destroys: a
040505             0013*    hlu_abs:
040505 19          0014*        add hl,de
040506 B7          0015*        or a
040507 ED 52       0016*        sbc hl,de
040509 FA 0E 05 04 0017*        jp m,@is_neg
04050D C9          0018*        ret ; hlu is positive or zero so we're done
04050E             0019*    @is_neg:
04050E F5          0020*        push af ; otherwise, save current flags for return
04050F CD 15 05 04 0021*        call neg_hlu ; negate hlu
040513 F1          0022*        pop af ; get back flags
040514 C9          0023*        ret
040515             0024*    
040515             0025*    ; flip the sign of hlu
040515             0026*    ; inputs: hlu
040515             0027*    ; returns: 0-hlu, flags set appropriately for the result:
040515             0028*    ;         s1,z0,pv0,n1,c1 if result is negative
040515             0029*    ;         s0,z1,pv0,n1,c0 if result is zero
040515             0030*    ;         s0,z0,pv0,n1,c1 if result is positive
040515             0031*    ; destroys a
040515             0032*    neg_hlu:
040515 D5          0033*        push de ; save de
040516 EB          0034*        ex de,hl ; put hl into de
040517 21 00 00 00 0035*        ld hl,0 ; clear hl
04051B AF          0036*        xor a ; clear carry
04051C ED 52       0037*        sbc hl,de ; 0-hlu = -hlu
04051E D1          0038*        pop de ; get de back
04051F C9          0039*        ret ; easy peasy
040520             0040*    
040520             0041*    ;------------------------------------------------------------------------
040520             0042*    ; divide hlu by 2, inspired by above
040520             0043*    ;------------------------------------------------------------------------
040520             0044*    hlu_div2:
040520 22 FF 04 04 0045*        ld (scratch1),hl
040524 21 01 05 04 0046*        ld hl,scratch1+2
040528 CB 1E       0047*        rr (hl)
04052A 2B          0048*        dec hl
04052B CB 1E       0049*        rr (hl)
04052D 2B          0050*        dec hl
04052E CB 1E       0051*        rr (hl)
040530 23          0052*        inc hl
040531 23          0053*        inc hl
040532 2A FF 04 04 0054*        ld hl,(scratch1)
040536 C9          0055*        ret
040537             0056*    
040537             0057*    ; this is my little hack to divide by 16
040537             0058*    hlu_div16:
040537 AF          0059*        xor a
040538 29          0060*        add hl,hl
040539 17          0061*        rla
04053A 29          0062*        add hl,hl
04053B 17          0063*        rla
04053C 29          0064*        add hl,hl
04053D 17          0065*        rla
04053E 29          0066*        add hl,hl
04053F 17          0067*        rla
040540 22 4D 05 04 0068*        ld (@scratch),hl
040544 32 50 05 04 0069*        ld (@scratch+3),a
040548 2A 4E 05 04 0070*        ld hl,(@scratch+1)
04054C C9          0071*        ret
04054D             0072*    @scratch: ds 4
040551             0073*    
040551             0074*    ; hlu signed division by 256
040551             0075*    ; returns: hlu / 256
040551             0076*    ; destroys: af
040551             0077*    hlu_sdiv256:
       FF FF FF FF 
040551 AF          0078*        xor a ; assume hl is positive
040552 22 68 05 04 0079*        ld (@buffer),hl
040556             0080*        SIGN_HLU
                       M1 Args: none
040556 19          0001*M1      add hl,de ; 1 cycle
040557 B7          0002*M1      or a ; clear flags ; 1 cycle
040558 ED 52       0003*M1      sbc hl,de ; 2 cycles
04055A             0004*M1      ; 4 cycles total
04055A F2 5F 05 04 0081*        jp p,@hl_pos
04055E 3D          0082*        dec a
04055F             0083*    @hl_pos:
04055F 32 6B 05 04 0084*        ld (@buffer+3),a
040563 2A 69 05 04 0085*        ld hl,(@buffer+1)
040567 C9          0086*        ret
040568             0087*    @buffer: ds 4
04056C             0088*    
04056C             0089*    ; hlu 1 byte right shift, unsigned
04056C             0090*    ; returns: hlu / 256, fractional portion in a
04056C             0091*    ; destroys: af
04056C             0092*    hlu_udiv256:
       FF FF FF FF 
04056C AF          0093*        xor a
04056D 32 7E 05 04 0094*        ld (@buffer+3),a
040571 7D          0095*        ld a,l ; save the fractional portion
040572 22 7B 05 04 0096*        ld (@buffer),hl
040576 2A 7C 05 04 0097*        ld hl,(@buffer+1)
04057A C9          0098*        ret
04057B             0099*    @buffer: ds 4
04057F             0100*    
04057F             0101*    ; floor(value,n)
04057F             0102*    ; inputs: hl = value to floor, de = n
04057F             0103*    ; outputs: hl = value floored to n
04057F             0104*    ; destroys: af, hl, bc, de
04057F             0105*    hlu_floor:
       FF FF FF FF 
04057F D5          0106*        push de ; save n
040580 CD ED 03 04 0107*        call udiv24 ; de = quotient, hl = remainder
040584 E1          0108*        pop hl ; get n back (was de)
040585 CD D4 03 04 0109*        call umul24 ; hl = n * quotient
040589 C9          0110*        ret
04058A             0111*    ; end hlu_floor
04058A             0112*    
04058A             0113*    ; ceil(value,n)
04058A             0114*    ; inputs: hl = value to ceil, de = n
04058A             0115*    ; outputs: hl = value ceiled to n
04058A             0116*    ; destroys: af, hl, bc, de
04058A             0117*    hlu_ceiling:
04058A D5          0118*        push de ; save n
04058B CD ED 03 04 0119*        call udiv24 ; de = quotient, hl = remainder
04058F             0120*        SIGN_HLU ; test remaider for zero
                       M1 Args: none
04058F 19          0001*M1      add hl,de ; 1 cycle
040590 B7          0002*M1      or a ; clear flags ; 1 cycle
040591 ED 52       0003*M1      sbc hl,de ; 2 cycles
040593             0004*M1      ; 4 cycles total
040593 CA 98 05 04 0121*        jp z,@F ; if zero, nothing to add
040597 13          0122*        inc de ; add 1 to quotient for the ceiling
040598             0123*    @@:
040598 E1          0124*        pop hl ; get n back (was de)
040599 CD D4 03 04 0125*        call umul24 ; hl = n * quotient
04059D C9          0126*        ret
04059E             0127*    ; end hlu_ceiling
04059E             0128*    
04059E C9          0129*        ret
04059F             0130*    
04059F 00 00 00 00 0131*    add_bcd_arg1: db #00,#00,#00,#00
0405A3 00 00 00 00 0132*    add_bcd_arg2: db #00,#00,#00,#00
0405A7             0133*    
0405A7             0134*    ; set bcd values in a scratch memory address from registers bcde
0405A7             0135*    ; input: hl; scratch address,bcde; 8-place bcd number
0405A7             0136*    ; destroys ; hl
0405A7             0137*    set_bcd:
0405A7 73          0138*        ld (hl),e
0405A8 23          0139*        inc hl
0405A9 72          0140*        ld (hl),d
0405AA 23          0141*        inc hl
0405AB 71          0142*        ld (hl),c
0405AC 23          0143*        inc hl
0405AD 70          0144*        ld (hl),b
0405AE C9          0145*        ret
0405AF             0146*    
0405AF             0147*    ; load bcd values from a scratch memory address to bcde
0405AF             0148*    ; input: hl; scratch address
0405AF             0149*    ; output: bcde; 8-place bcd number
0405AF             0150*    ; destroys: hl
0405AF             0151*    get_bcd:
0405AF 5E          0152*        ld e,(hl)
0405B0 23          0153*        inc hl
0405B1 56          0154*        ld d,(hl)
0405B2 23          0155*        inc hl
0405B3 4E          0156*        ld c,(hl)
0405B4 23          0157*        inc hl
0405B5 46          0158*        ld b,(hl)
0405B6 C9          0159*        ret
0405B7             0160*    
0405B7             0161*    ; BCD addition
0405B7             0162*    ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0405B7             0163*    ;       a is the number of bytes holding each number (number of places/2)
0405B7             0164*    ; outputs: (hl) + (de) --> (hl)
0405B7             0165*    ; destroys: a,b,de,hl
0405B7             0166*    add_bcd:
0405B7 47          0167*        ld b,a ; loop counter
0405B8 AF          0168*        xor a ; reset a, clear carry flag
0405B9             0169*    adcec:
0405B9 1A          0170*        ld a,(de) ; addend to acc
0405BA 8E          0171*        adc a,(hl) ; add (hl) to acc
0405BB 27          0172*        daa ; adjust result to bcd
0405BC 77          0173*        ld (hl),a ; store result
0405BD 23          0174*        inc hl ; advance memory pointers
0405BE 13          0175*        inc de
0405BF 10 F8       0176*        djnz adcec ; loop until b == 0
0405C1 C9          0177*        ret
0405C2             0178*    
0405C2             0179*    ; BCD subtraction
0405C2             0180*    ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0405C2             0181*    ;       a is the number of bytes holding each number (number of places/2)
0405C2             0182*    ; outputs: (hl) - (de) --> (hl)
0405C2             0183*    ; destroys: a,b,de,hl
0405C2             0184*    sub_bcd:
0405C2 47          0185*        ld b,a ; loop counter
0405C3 AF          0186*        xor a ; reset a,clear carry flag
0405C4             0187*    subdec:
0405C4 1A          0188*        ld a,(de) ; subtrahend to acc
0405C5 9E          0189*        sbc a,(hl) ; subtract (hl) from acc
0405C6 27          0190*        daa ; adjust result to bcd
0405C7 77          0191*        ld (hl),a ; store result
0405C8 23          0192*        inc hl ; advance memory pointers
0405C9 13          0193*        inc de
0405CA 10 F8       0194*        djnz subdec ; loop until b == 0
0405CC C9          0195*        ret
0405CD             0196*    
0405CD             0197*    ; http://www.z80.info/pseudo-random.txt
0405CD             0198*    rand_8:
0405CD C5          0199*        push bc
0405CE 3A E1 05 04 0200*        ld a,(r_seed)
0405D2 4F          0201*        ld c,a
0405D3             0202*    
0405D3 0F          0203*        rrca ; multiply by 32
0405D4 0F          0204*        rrca
0405D5 0F          0205*        rrca
0405D6 EE 1F       0206*        xor 0x1f
0405D8             0207*    
0405D8 81          0208*        add a,c
0405D9 DE FF       0209*        sbc a,255 ; carry
0405DB             0210*    
0405DB 32 E1 05 04 0211*        ld (r_seed),a
0405DF C1          0212*        pop bc
0405E0 C9          0213*        ret
0405E1 50          0214*    r_seed: defb $50
0405E2             0215*    
0405E2             0216*    ; https://www.omnimaga.org/asm-language/ez80-optimized-routines/msg399325/#msg399325
0405E2             0217*    prng24:
0405E2             0218*    ;;Expects ADL mode.
0405E2             0219*    ;;Output: HL
0405E2             0220*    ;;50cc
0405E2             0221*    ;;33 bytes
0405E2             0222*    ;;cycle length: 281,474,959,933,440 (about 2.8 trillion)
0405E2 ED 5B 03 06 0223*        ld de,(seed1)
       04          
0405E7 B7          0224*        or a
0405E8 ED 62       0225*        sbc hl,hl
0405EA 19          0226*        add hl,de
0405EB 29          0227*        add hl,hl
0405EC 29          0228*        add hl,hl
0405ED 2C          0229*        inc l
0405EE 19          0230*        add hl,de
0405EF 22 03 06 04 0231*        ld (seed1),hl
0405F3 2A 06 06 04 0232*        ld hl,(seed2)
0405F7 29          0233*        add hl,hl
0405F8 9F          0234*        sbc a,a
0405F9 E6 1B       0235*        and %00011011
0405FB AD          0236*        xor l
0405FC 6F          0237*        ld l,a
0405FD 22 06 06 04 0238*        ld (seed2),hl
040601 19          0239*        add hl,de
040602 C9          0240*        ret
040603 00 00 00    0241*    seed1: dl 0
040606 00 00 00    0242*    seed2: dl 0
040609             0243*    
040609             0244*    
040609             0245*    ; https://map.grauw.nl/sources/external/z80bits.html#2.1
040609             0246*    ; h / l -> h, remain a
040609             0247*    ; 2.1 Restoring 8-bit / 8-bit Unsigned
040609             0248*    ; Input: H = Dividend, L = Divisor, A = 0
040609             0249*    ; Output: H = Quotient, A = Remainder, L = Divisor (unchanged)
040609             0250*    udiv8:
040609 AF          0251*        xor a
04060A 06 08       0252*        ld b,8
04060C             0253*    @loop:
04060C CB 24       0254*        sla h
04060E 17          0255*        rla
04060F BD          0256*        cp l
040610 38 02       0257*        jr c,$+4
040612 95          0258*        sub l
040613 24          0259*        inc h
040614 10 F6       0260*        djnz @loop
040616 C9          0261*        ret
040617             0262*    
040617             0263*    ; https://www.omnimaga.org/asm-language/(z80)-32-bit-by-16-bits-division-and-32-bit-square-root/msg406903/#msg406903
040617             0264*    ; This divides HLIX by BC
040617             0265*    ; The result is stored in HLIX, the remainder in DE
040617             0266*    ; BC is unmodified
040617             0267*    ; A is 0
040617             0268*    udiv3216:
040617 11 00 00 00 0269*        ld de,0		; 10
04061B 3E 20       0270*        ld a,32		; 7
04061D             0271*    @loop:
04061D 52 DD 29    0272*        add.s ix,ix		; 15
040620 52 ED 6A    0273*        adc.s hl,hl		; 15
040623 EB          0274*        ex de,hl		; 4
040624 52 ED 6A    0275*        adc.s hl,hl		; 15
040627 B7          0276*        or a			; 4
040628 52 ED 42    0277*        sbc.s hl,bc		; 15
04062B 52 DD 23    0278*        inc.s ix		; 10
04062E 30 05       0279*        jr nc,@cansub		; 12/7
040630 52 09       0280*        add.s hl,bc		; 11
040632 52 DD 2B    0281*        dec.s ix		; 10
040635             0282*    @cansub:
040635 EB          0283*        ex de,hl		; 4
040636 3D          0284*        dec a		; 4
040637 20 E4       0285*        jr nz,@loop	; 12/7
040639 C9          0286*        ret			; 10
04063A             0287*    ; end udiv3216
04063A             0288*    
04063A             0289*    ; https://discord.com/channels/1158535358624039014/1282290921815408681/1329274504022720512
04063A             0290*    ; calc84maniac's 32-bit by 23-bit division routine
04063A             0291*    ; This divides AUIX by UDE (maximum 23 bits)
04063A             0292*    ; The result is stored in AUIX, the remainder in UHL
04063A             0293*    ; UDE, C are unmodified
04063A             0294*    ; B is 0
04063A             0295*    udiv3223:
04063A B7          0296*        or a,a         ; 1
04063B ED 62       0297*        sbc hl,hl      ; 2
04063D 06 20       0298*        ld b,32        ; 2
04063F             0299*    @loop:
04063F DD 29       0300*        add ix,ix      ; 2
040641 8F          0301*        adc a,a        ; 1
040642 ED 6A       0302*        adc hl,hl      ; 2
040644 ED 52       0303*        sbc hl,de      ; 2
040646 DD 23       0304*        inc ix         ; 2
040648 30 03       0305*        jr nc,@cansub  ; 2/4
04064A 19          0306*        add hl,de      ; 1
04064B DD 2B       0307*        dec ix         ; 2
04064D             0308*    @cansub:
04064D 10 F0       0309*        djnz @loop     ; 2/4
04064F C9          0310*        ret            ; 10
040650             0311*    ; end udiv3223
040650             0312*    
040650             0313*    ; calc84maniac https://discord.com/channels/1158535358624039014/1282290921815408681/1330991583369101322
040650             0314*    ; add uhl to signed integer a
040650             0315*    add_uhl_a_signed:
040650 D5          0316*        push de    ; 4 cycles
040651 EB          0317*        ex de, hl  ; 1 cycle  UDE = UHL
040652 07          0318*        rlca       ; 1 cycle  CF = signbit(A)
040653 ED 62       0319*        sbc hl, hl ; 2 cycles UHL = -signbit(A)
040655 0F          0320*        rrca       ; 1 cycle  Restore A
040656 6F          0321*        ld l, a    ; 1 cycle  UHL = signext(A)
040657 19          0322*        add hl, de ; 1 cycle  UHL = UDE + signext(A)
040658 D1          0323*        pop de     ; 4 cycles
040659             0324*                   ; 15 cycles total
040659 C9          0325*        ret
04065A             0326*    ; end hlu_add_a_signed
04065A             0035         include "font.inc"
04065A             0001*    Lat2_VGA8_8x8: equ 64016
04065A             0002*    font_data:
04065A             0003*        ; incbin "../assets/fonts/Lat2-VGA8_8x8.font"
04065A             0004*        include "../fonts/Lat2-VGA8_8x8.font.inc"
04065A             0001**   ; 0 NULL
04065A 00          0002**       db %00000000
04065B 00          0003**       db %00000000
04065C 78          0004**       db %01111000
04065D 0C          0005**       db %00001100
04065E 7C          0006**       db %01111100
04065F CC          0007**       db %11001100
040660 76          0008**       db %01110110
040661 0F          0009**       db %00001111
040662             0010**   
040662             0011**   ; 1 START_OF_HEADING
040662 3C          0012**       db %00111100
040663 42          0013**       db %01000010
040664 B9          0014**       db %10111001
040665 A5          0015**       db %10100101
040666 B9          0016**       db %10111001
040667 A5          0017**       db %10100101
040668 42          0018**       db %01000010
040669 3C          0019**       db %00111100
04066A             0020**   
04066A             0021**   ; 2 START_OF_TEXT
04066A 00          0022**       db %00000000
04066B 00          0023**       db %00000000
04066C 18          0024**       db %00011000
04066D 3C          0025**       db %00111100
04066E 66          0026**       db %01100110
04066F FF          0027**       db %11111111
040670 00          0028**       db %00000000
040671 00          0029**       db %00000000
040672             0030**   
040672             0031**   ; 3 END_OF_TEXT
040672 7E          0032**       db %01111110
040673 81          0033**       db %10000001
040674 A5          0034**       db %10100101
040675 81          0035**       db %10000001
040676 BD          0036**       db %10111101
040677 99          0037**       db %10011001
040678 81          0038**       db %10000001
040679 7E          0039**       db %01111110
04067A             0040**   
04067A             0041**   ; 4 END_OF_TRANSMISSION
04067A 10          0042**       db %00010000
04067B 38          0043**       db %00111000
04067C 7C          0044**       db %01111100
04067D FE          0045**       db %11111110
04067E 7C          0046**       db %01111100
04067F 38          0047**       db %00111000
040680 10          0048**       db %00010000
040681 00          0049**       db %00000000
040682             0050**   
040682             0051**   ; 5 ENQUIRY
040682 3C          0052**       db %00111100
040683 7E          0053**       db %01111110
040684 DB          0054**       db %11011011
040685 FF          0055**       db %11111111
040686 C3          0056**       db %11000011
040687 7E          0057**       db %01111110
040688 3C          0058**       db %00111100
040689 00          0059**       db %00000000
04068A             0060**   
04068A             0061**   ; 6 ACKNOWLEDGE
04068A 10          0062**       db %00010000
04068B 38          0063**       db %00111000
04068C 7C          0064**       db %01111100
04068D FE          0065**       db %11111110
04068E FE          0066**       db %11111110
04068F 10          0067**       db %00010000
040690 38          0068**       db %00111000
040691 00          0069**       db %00000000
040692             0070**   
040692             0071**   ; 7 BELL
040692 00          0072**       db %00000000
040693 00          0073**       db %00000000
040694 18          0074**       db %00011000
040695 3C          0075**       db %00111100
040696 18          0076**       db %00011000
040697 00          0077**       db %00000000
040698 00          0078**       db %00000000
040699 00          0079**       db %00000000
04069A             0080**   
04069A             0081**   ; 8 BACKSPACE
04069A 00          0082**       db %00000000
04069B 3C          0083**       db %00111100
04069C 18          0084**       db %00011000
04069D FF          0085**       db %11111111
04069E FF          0086**       db %11111111
04069F 08          0087**       db %00001000
0406A0 18          0088**       db %00011000
0406A1 00          0089**       db %00000000
0406A2             0090**   
0406A2             0091**   ; 9 HORIZONTAL_TAB
0406A2 00          0092**       db %00000000
0406A3 EE          0093**       db %11101110
0406A4 FE          0094**       db %11111110
0406A5 FE          0095**       db %11111110
0406A6 7C          0096**       db %01111100
0406A7 38          0097**       db %00111000
0406A8 10          0098**       db %00010000
0406A9 00          0099**       db %00000000
0406AA             0100**   
0406AA             0101**   ; 10 LINE_FEED
0406AA 00          0102**       db %00000000
0406AB 3C          0103**       db %00111100
0406AC 42          0104**       db %01000010
0406AD 81          0105**       db %10000001
0406AE 81          0106**       db %10000001
0406AF 42          0107**       db %01000010
0406B0 3C          0108**       db %00111100
0406B1 00          0109**       db %00000000
0406B2             0110**   
0406B2             0111**   ; 11 VERTICAL_TAB
0406B2 1F          0112**       db %00011111
0406B3 07          0113**       db %00000111
0406B4 0D          0114**       db %00001101
0406B5 7C          0115**       db %01111100
0406B6 C6          0116**       db %11000110
0406B7 C6          0117**       db %11000110
0406B8 7C          0118**       db %01111100
0406B9 00          0119**       db %00000000
0406BA             0120**   
0406BA             0121**   ; 12 FORM_FEED
0406BA 00          0122**       db %00000000
0406BB 7E          0123**       db %01111110
0406BC C3          0124**       db %11000011
0406BD C3          0125**       db %11000011
0406BE 7E          0126**       db %01111110
0406BF 18          0127**       db %00011000
0406C0 7E          0128**       db %01111110
0406C1 18          0129**       db %00011000
0406C2             0130**   
0406C2             0131**   ; 13 CARRIAGE_RETURN
0406C2 04          0132**       db %00000100
0406C3 06          0133**       db %00000110
0406C4 07          0134**       db %00000111
0406C5 04          0135**       db %00000100
0406C6 04          0136**       db %00000100
0406C7 FC          0137**       db %11111100
0406C8 F8          0138**       db %11111000
0406C9 00          0139**       db %00000000
0406CA             0140**   
0406CA             0141**   ; 14 SHIFT_OUT
0406CA 0C          0142**       db %00001100
0406CB 0A          0143**       db %00001010
0406CC 0D          0144**       db %00001101
0406CD 0B          0145**       db %00001011
0406CE F9          0146**       db %11111001
0406CF F9          0147**       db %11111001
0406D0 1F          0148**       db %00011111
0406D1 1F          0149**       db %00011111
0406D2             0150**   
0406D2             0151**   ; 15 SHIFT_IN
0406D2 00          0152**       db %00000000
0406D3 92          0153**       db %10010010
0406D4 7C          0154**       db %01111100
0406D5 44          0155**       db %01000100
0406D6 C6          0156**       db %11000110
0406D7 7C          0157**       db %01111100
0406D8 92          0158**       db %10010010
0406D9 00          0159**       db %00000000
0406DA             0160**   
0406DA             0161**   ; 16 DATA_LINK_ESCAPE
0406DA FF          0162**       db %11111111
0406DB FF          0163**       db %11111111
0406DC E7          0164**       db %11100111
0406DD C3          0165**       db %11000011
0406DE E7          0166**       db %11100111
0406DF FF          0167**       db %11111111
0406E0 FF          0168**       db %11111111
0406E1 FF          0169**       db %11111111
0406E2             0170**   
0406E2             0171**   ; 17 DEVICE_CONTROL_1
0406E2 FF          0172**       db %11111111
0406E3 C3          0173**       db %11000011
0406E4 BD          0174**       db %10111101
0406E5 7E          0175**       db %01111110
0406E6 7E          0176**       db %01111110
0406E7 BD          0177**       db %10111101
0406E8 C3          0178**       db %11000011
0406E9 FF          0179**       db %11111111
0406EA             0180**   
0406EA             0181**   ; 18 DEVICE_CONTROL_2
0406EA 18          0182**       db %00011000
0406EB 3C          0183**       db %00111100
0406EC 7E          0184**       db %01111110
0406ED 18          0185**       db %00011000
0406EE 18          0186**       db %00011000
0406EF 7E          0187**       db %01111110
0406F0 3C          0188**       db %00111100
0406F1 18          0189**       db %00011000
0406F2             0190**   
0406F2             0191**   ; 19 DEVICE_CONTROL_3
0406F2 66          0192**       db %01100110
0406F3 66          0193**       db %01100110
0406F4 66          0194**       db %01100110
0406F5 66          0195**       db %01100110
0406F6 66          0196**       db %01100110
0406F7 00          0197**       db %00000000
0406F8 66          0198**       db %01100110
0406F9 00          0199**       db %00000000
0406FA             0200**   
0406FA             0201**   ; 20 DEVICE_CONTROL_4
0406FA 7F          0202**       db %01111111
0406FB DB          0203**       db %11011011
0406FC 7B          0204**       db %01111011
0406FD 3B          0205**       db %00111011
0406FE 1B          0206**       db %00011011
0406FF 1B          0207**       db %00011011
040700 1B          0208**       db %00011011
040701 00          0209**       db %00000000
040702             0210**   
040702             0211**   ; 21 NEGATIVE_ACKNOWLEDGE
040702 3E          0212**       db %00111110
040703 61          0213**       db %01100001
040704 3C          0214**       db %00111100
040705 66          0215**       db %01100110
040706 66          0216**       db %01100110
040707 3C          0217**       db %00111100
040708 86          0218**       db %10000110
040709 7C          0219**       db %01111100
04070A             0220**   
04070A             0221**   ; 22 SYNCHRONOUS_IDLE
04070A 38          0222**       db %00111000
04070B 64          0223**       db %01100100
04070C F0          0224**       db %11110000
04070D 60          0225**       db %01100000
04070E F0          0226**       db %11110000
04070F 64          0227**       db %01100100
040710 38          0228**       db %00111000
040711 00          0229**       db %00000000
040712             0230**   
040712             0231**   ; 23 END_OF_TRANSMISSION_BLOCK
040712 18          0232**       db %00011000
040713 7E          0233**       db %01111110
040714 18          0234**       db %00011000
040715 18          0235**       db %00011000
040716 7E          0236**       db %01111110
040717 18          0237**       db %00011000
040718 00          0238**       db %00000000
040719 FF          0239**       db %11111111
04071A             0240**   
04071A             0241**   ; 24 CANCEL
04071A 18          0242**       db %00011000
04071B 3C          0243**       db %00111100
04071C 7E          0244**       db %01111110
04071D 18          0245**       db %00011000
04071E 18          0246**       db %00011000
04071F 18          0247**       db %00011000
040720 18          0248**       db %00011000
040721 00          0249**       db %00000000
040722             0250**   
040722             0251**   ; 25 END_OF_MEDIUM
040722 18          0252**       db %00011000
040723 18          0253**       db %00011000
040724 18          0254**       db %00011000
040725 18          0255**       db %00011000
040726 7E          0256**       db %01111110
040727 3C          0257**       db %00111100
040728 18          0258**       db %00011000
040729 00          0259**       db %00000000
04072A             0260**   
04072A             0261**   ; 26 SUBSTITUTE
04072A 00          0262**       db %00000000
04072B 18          0263**       db %00011000
04072C 0C          0264**       db %00001100
04072D FE          0265**       db %11111110
04072E 0C          0266**       db %00001100
04072F 18          0267**       db %00011000
040730 00          0268**       db %00000000
040731 00          0269**       db %00000000
040732             0270**   
040732             0271**   ; 27 ESCAPE
040732 00          0272**       db %00000000
040733 30          0273**       db %00110000
040734 60          0274**       db %01100000
040735 FE          0275**       db %11111110
040736 60          0276**       db %01100000
040737 30          0277**       db %00110000
040738 00          0278**       db %00000000
040739 00          0279**       db %00000000
04073A             0280**   
04073A             0281**   ; 28 FILE_SEPARATOR
04073A 00          0282**       db %00000000
04073B 00          0283**       db %00000000
04073C 00          0284**       db %00000000
04073D C0          0285**       db %11000000
04073E C0          0286**       db %11000000
04073F C0          0287**       db %11000000
040740 FF          0288**       db %11111111
040741 00          0289**       db %00000000
040742             0290**   
040742             0291**   ; 29 GROUP_SEPARATOR
040742 00          0292**       db %00000000
040743 24          0293**       db %00100100
040744 66          0294**       db %01100110
040745 FF          0295**       db %11111111
040746 66          0296**       db %01100110
040747 24          0297**       db %00100100
040748 00          0298**       db %00000000
040749 00          0299**       db %00000000
04074A             0300**   
04074A             0301**   ; 30 RECORD_SEPARATOR
04074A 48          0302**       db %01001000
04074B 78          0303**       db %01111000
04074C 84          0304**       db %10000100
04074D 60          0305**       db %01100000
04074E 18          0306**       db %00011000
04074F 84          0307**       db %10000100
040750 78          0308**       db %01111000
040751 00          0309**       db %00000000
040752             0310**   
040752             0311**   ; 31 UNIT_SEPARATOR
040752 78          0312**       db %01111000
040753 00          0313**       db %00000000
040754 7C          0314**       db %01111100
040755 C0          0315**       db %11000000
040756 78          0316**       db %01111000
040757 0C          0317**       db %00001100
040758 F8          0318**       db %11111000
040759 00          0319**       db %00000000
04075A             0320**   
04075A             0321**   ; 32
04075A 00          0322**       db %00000000
04075B 00          0323**       db %00000000
04075C 00          0324**       db %00000000
04075D 00          0325**       db %00000000
04075E 00          0326**       db %00000000
04075F 00          0327**       db %00000000
040760 00          0328**       db %00000000
040761 00          0329**       db %00000000
040762             0330**   
040762             0331**   ; 33 !
040762 30          0332**       db %00110000
040763 78          0333**       db %01111000
040764 78          0334**       db %01111000
040765 30          0335**       db %00110000
040766 30          0336**       db %00110000
040767 00          0337**       db %00000000
040768 30          0338**       db %00110000
040769 00          0339**       db %00000000
04076A             0340**   
04076A             0341**   ; 34 "
04076A 6C          0342**       db %01101100
04076B 6C          0343**       db %01101100
04076C 00          0344**       db %00000000
04076D 00          0345**       db %00000000
04076E 00          0346**       db %00000000
04076F 00          0347**       db %00000000
040770 00          0348**       db %00000000
040771 00          0349**       db %00000000
040772             0350**   
040772             0351**   ; 35 #
040772 6C          0352**       db %01101100
040773 6C          0353**       db %01101100
040774 FE          0354**       db %11111110
040775 6C          0355**       db %01101100
040776 FE          0356**       db %11111110
040777 6C          0357**       db %01101100
040778 6C          0358**       db %01101100
040779 00          0359**       db %00000000
04077A             0360**   
04077A             0361**   ; 36 $
04077A 10          0362**       db %00010000
04077B 7E          0363**       db %01111110
04077C 90          0364**       db %10010000
04077D 7C          0365**       db %01111100
04077E 12          0366**       db %00010010
04077F FC          0367**       db %11111100
040780 10          0368**       db %00010000
040781 00          0369**       db %00000000
040782             0370**   
040782             0371**   ; 37 %
040782 00          0372**       db %00000000
040783 C6          0373**       db %11000110
040784 CC          0374**       db %11001100
040785 18          0375**       db %00011000
040786 30          0376**       db %00110000
040787 66          0377**       db %01100110
040788 C6          0378**       db %11000110
040789 00          0379**       db %00000000
04078A             0380**   
04078A             0381**   ; 38 &
04078A 38          0382**       db %00111000
04078B 6C          0383**       db %01101100
04078C 38          0384**       db %00111000
04078D 76          0385**       db %01110110
04078E DC          0386**       db %11011100
04078F CC          0387**       db %11001100
040790 76          0388**       db %01110110
040791 00          0389**       db %00000000
040792             0390**   
040792             0391**   ; 39 '
040792 30          0392**       db %00110000
040793 30          0393**       db %00110000
040794 60          0394**       db %01100000
040795 00          0395**       db %00000000
040796 00          0396**       db %00000000
040797 00          0397**       db %00000000
040798 00          0398**       db %00000000
040799 00          0399**       db %00000000
04079A             0400**   
04079A             0401**   ; 40 (
04079A 18          0402**       db %00011000
04079B 30          0403**       db %00110000
04079C 60          0404**       db %01100000
04079D 60          0405**       db %01100000
04079E 60          0406**       db %01100000
04079F 30          0407**       db %00110000
0407A0 18          0408**       db %00011000
0407A1 00          0409**       db %00000000
0407A2             0410**   
0407A2             0411**   ; 41 )
0407A2 60          0412**       db %01100000
0407A3 30          0413**       db %00110000
0407A4 18          0414**       db %00011000
0407A5 18          0415**       db %00011000
0407A6 18          0416**       db %00011000
0407A7 30          0417**       db %00110000
0407A8 60          0418**       db %01100000
0407A9 00          0419**       db %00000000
0407AA             0420**   
0407AA             0421**   ; 42 *
0407AA 00          0422**       db %00000000
0407AB 66          0423**       db %01100110
0407AC 3C          0424**       db %00111100
0407AD FF          0425**       db %11111111
0407AE 3C          0426**       db %00111100
0407AF 66          0427**       db %01100110
0407B0 00          0428**       db %00000000
0407B1 00          0429**       db %00000000
0407B2             0430**   
0407B2             0431**   ; 43 +
0407B2 00          0432**       db %00000000
0407B3 30          0433**       db %00110000
0407B4 30          0434**       db %00110000
0407B5 FC          0435**       db %11111100
0407B6 30          0436**       db %00110000
0407B7 30          0437**       db %00110000
0407B8 00          0438**       db %00000000
0407B9 00          0439**       db %00000000
0407BA             0440**   
0407BA             0441**   ; 44 ,
0407BA 00          0442**       db %00000000
0407BB 00          0443**       db %00000000
0407BC 00          0444**       db %00000000
0407BD 00          0445**       db %00000000
0407BE 00          0446**       db %00000000
0407BF 30          0447**       db %00110000
0407C0 30          0448**       db %00110000
0407C1 60          0449**       db %01100000
0407C2             0450**   
0407C2             0451**   ; 45 -
0407C2 00          0452**       db %00000000
0407C3 00          0453**       db %00000000
0407C4 00          0454**       db %00000000
0407C5 FC          0455**       db %11111100
0407C6 00          0456**       db %00000000
0407C7 00          0457**       db %00000000
0407C8 00          0458**       db %00000000
0407C9 00          0459**       db %00000000
0407CA             0460**   
0407CA             0461**   ; 46 .
0407CA 00          0462**       db %00000000
0407CB 00          0463**       db %00000000
0407CC 00          0464**       db %00000000
0407CD 00          0465**       db %00000000
0407CE 00          0466**       db %00000000
0407CF 30          0467**       db %00110000
0407D0 30          0468**       db %00110000
0407D1 00          0469**       db %00000000
0407D2             0470**   
0407D2             0471**   ; 47 /
0407D2 00          0472**       db %00000000
0407D3 06          0473**       db %00000110
0407D4 0C          0474**       db %00001100
0407D5 18          0475**       db %00011000
0407D6 30          0476**       db %00110000
0407D7 60          0477**       db %01100000
0407D8 C0          0478**       db %11000000
0407D9 00          0479**       db %00000000
0407DA             0480**   
0407DA             0481**   ; 48 0
0407DA 7C          0482**       db %01111100
0407DB C6          0483**       db %11000110
0407DC C6          0484**       db %11000110
0407DD D6          0485**       db %11010110
0407DE C6          0486**       db %11000110
0407DF C6          0487**       db %11000110
0407E0 7C          0488**       db %01111100
0407E1 00          0489**       db %00000000
0407E2             0490**   
0407E2             0491**   ; 49 1
0407E2 30          0492**       db %00110000
0407E3 70          0493**       db %01110000
0407E4 30          0494**       db %00110000
0407E5 30          0495**       db %00110000
0407E6 30          0496**       db %00110000
0407E7 30          0497**       db %00110000
0407E8 FC          0498**       db %11111100
0407E9 00          0499**       db %00000000
0407EA             0500**   
0407EA             0501**   ; 50 2
0407EA 78          0502**       db %01111000
0407EB CC          0503**       db %11001100
0407EC 0C          0504**       db %00001100
0407ED 38          0505**       db %00111000
0407EE 60          0506**       db %01100000
0407EF CC          0507**       db %11001100
0407F0 FC          0508**       db %11111100
0407F1 00          0509**       db %00000000
0407F2             0510**   
0407F2             0511**   ; 51 3
0407F2 78          0512**       db %01111000
0407F3 CC          0513**       db %11001100
0407F4 0C          0514**       db %00001100
0407F5 38          0515**       db %00111000
0407F6 0C          0516**       db %00001100
0407F7 CC          0517**       db %11001100
0407F8 78          0518**       db %01111000
0407F9 00          0519**       db %00000000
0407FA             0520**   
0407FA             0521**   ; 52 4
0407FA 1C          0522**       db %00011100
0407FB 3C          0523**       db %00111100
0407FC 6C          0524**       db %01101100
0407FD CC          0525**       db %11001100
0407FE FE          0526**       db %11111110
0407FF 0C          0527**       db %00001100
040800 1E          0528**       db %00011110
040801 00          0529**       db %00000000
040802             0530**   
040802             0531**   ; 53 5
040802 FC          0532**       db %11111100
040803 C0          0533**       db %11000000
040804 F8          0534**       db %11111000
040805 0C          0535**       db %00001100
040806 0C          0536**       db %00001100
040807 CC          0537**       db %11001100
040808 78          0538**       db %01111000
040809 00          0539**       db %00000000
04080A             0540**   
04080A             0541**   ; 54 6
04080A 38          0542**       db %00111000
04080B 60          0543**       db %01100000
04080C C0          0544**       db %11000000
04080D F8          0545**       db %11111000
04080E CC          0546**       db %11001100
04080F CC          0547**       db %11001100
040810 78          0548**       db %01111000
040811 00          0549**       db %00000000
040812             0550**   
040812             0551**   ; 55 7
040812 FC          0552**       db %11111100
040813 CC          0553**       db %11001100
040814 0C          0554**       db %00001100
040815 18          0555**       db %00011000
040816 30          0556**       db %00110000
040817 30          0557**       db %00110000
040818 30          0558**       db %00110000
040819 00          0559**       db %00000000
04081A             0560**   
04081A             0561**   ; 56 8
04081A 78          0562**       db %01111000
04081B CC          0563**       db %11001100
04081C CC          0564**       db %11001100
04081D 78          0565**       db %01111000
04081E CC          0566**       db %11001100
04081F CC          0567**       db %11001100
040820 78          0568**       db %01111000
040821 00          0569**       db %00000000
040822             0570**   
040822             0571**   ; 57 9
040822 78          0572**       db %01111000
040823 CC          0573**       db %11001100
040824 CC          0574**       db %11001100
040825 7C          0575**       db %01111100
040826 0C          0576**       db %00001100
040827 18          0577**       db %00011000
040828 70          0578**       db %01110000
040829 00          0579**       db %00000000
04082A             0580**   
04082A             0581**   ; 58 :
04082A 00          0582**       db %00000000
04082B 30          0583**       db %00110000
04082C 30          0584**       db %00110000
04082D 00          0585**       db %00000000
04082E 00          0586**       db %00000000
04082F 30          0587**       db %00110000
040830 30          0588**       db %00110000
040831 00          0589**       db %00000000
040832             0590**   
040832             0591**   ; 59 ;
040832 00          0592**       db %00000000
040833 30          0593**       db %00110000
040834 30          0594**       db %00110000
040835 00          0595**       db %00000000
040836 00          0596**       db %00000000
040837 30          0597**       db %00110000
040838 30          0598**       db %00110000
040839 60          0599**       db %01100000
04083A             0600**   
04083A             0601**   ; 60 <
04083A 18          0602**       db %00011000
04083B 30          0603**       db %00110000
04083C 60          0604**       db %01100000
04083D C0          0605**       db %11000000
04083E 60          0606**       db %01100000
04083F 30          0607**       db %00110000
040840 18          0608**       db %00011000
040841 00          0609**       db %00000000
040842             0610**   
040842             0611**   ; 61 =
040842 00          0612**       db %00000000
040843 00          0613**       db %00000000
040844 FC          0614**       db %11111100
040845 00          0615**       db %00000000
040846 00          0616**       db %00000000
040847 FC          0617**       db %11111100
040848 00          0618**       db %00000000
040849 00          0619**       db %00000000
04084A             0620**   
04084A             0621**   ; 62 >
04084A 60          0622**       db %01100000
04084B 30          0623**       db %00110000
04084C 18          0624**       db %00011000
04084D 0C          0625**       db %00001100
04084E 18          0626**       db %00011000
04084F 30          0627**       db %00110000
040850 60          0628**       db %01100000
040851 00          0629**       db %00000000
040852             0630**   
040852             0631**   ; 63 ?
040852 78          0632**       db %01111000
040853 CC          0633**       db %11001100
040854 0C          0634**       db %00001100
040855 18          0635**       db %00011000
040856 30          0636**       db %00110000
040857 00          0637**       db %00000000
040858 30          0638**       db %00110000
040859 00          0639**       db %00000000
04085A             0640**   
04085A             0641**   ; 64 @
04085A 7C          0642**       db %01111100
04085B C6          0643**       db %11000110
04085C DE          0644**       db %11011110
04085D DE          0645**       db %11011110
04085E DE          0646**       db %11011110
04085F C0          0647**       db %11000000
040860 78          0648**       db %01111000
040861 00          0649**       db %00000000
040862             0650**   
040862             0651**   ; 65 A
040862 30          0652**       db %00110000
040863 78          0653**       db %01111000
040864 CC          0654**       db %11001100
040865 CC          0655**       db %11001100
040866 FC          0656**       db %11111100
040867 CC          0657**       db %11001100
040868 CC          0658**       db %11001100
040869 00          0659**       db %00000000
04086A             0660**   
04086A             0661**   ; 66 B
04086A FC          0662**       db %11111100
04086B 66          0663**       db %01100110
04086C 66          0664**       db %01100110
04086D 7C          0665**       db %01111100
04086E 66          0666**       db %01100110
04086F 66          0667**       db %01100110
040870 FC          0668**       db %11111100
040871 00          0669**       db %00000000
040872             0670**   
040872             0671**   ; 67 C
040872 3C          0672**       db %00111100
040873 66          0673**       db %01100110
040874 C0          0674**       db %11000000
040875 C0          0675**       db %11000000
040876 C0          0676**       db %11000000
040877 66          0677**       db %01100110
040878 3C          0678**       db %00111100
040879 00          0679**       db %00000000
04087A             0680**   
04087A             0681**   ; 68 D
04087A F8          0682**       db %11111000
04087B 6C          0683**       db %01101100
04087C 66          0684**       db %01100110
04087D 66          0685**       db %01100110
04087E 66          0686**       db %01100110
04087F 6C          0687**       db %01101100
040880 F8          0688**       db %11111000
040881 00          0689**       db %00000000
040882             0690**   
040882             0691**   ; 69 E
040882 FE          0692**       db %11111110
040883 62          0693**       db %01100010
040884 68          0694**       db %01101000
040885 78          0695**       db %01111000
040886 68          0696**       db %01101000
040887 62          0697**       db %01100010
040888 FE          0698**       db %11111110
040889 00          0699**       db %00000000
04088A             0700**   
04088A             0701**   ; 70 F
04088A FE          0702**       db %11111110
04088B 62          0703**       db %01100010
04088C 68          0704**       db %01101000
04088D 78          0705**       db %01111000
04088E 68          0706**       db %01101000
04088F 60          0707**       db %01100000
040890 F0          0708**       db %11110000
040891 00          0709**       db %00000000
040892             0710**   
040892             0711**   ; 71 G
040892 3C          0712**       db %00111100
040893 66          0713**       db %01100110
040894 C0          0714**       db %11000000
040895 C0          0715**       db %11000000
040896 CE          0716**       db %11001110
040897 66          0717**       db %01100110
040898 3E          0718**       db %00111110
040899 00          0719**       db %00000000
04089A             0720**   
04089A             0721**   ; 72 H
04089A CC          0722**       db %11001100
04089B CC          0723**       db %11001100
04089C CC          0724**       db %11001100
04089D FC          0725**       db %11111100
04089E CC          0726**       db %11001100
04089F CC          0727**       db %11001100
0408A0 CC          0728**       db %11001100
0408A1 00          0729**       db %00000000
0408A2             0730**   
0408A2             0731**   ; 73 I
0408A2 78          0732**       db %01111000
0408A3 30          0733**       db %00110000
0408A4 30          0734**       db %00110000
0408A5 30          0735**       db %00110000
0408A6 30          0736**       db %00110000
0408A7 30          0737**       db %00110000
0408A8 78          0738**       db %01111000
0408A9 00          0739**       db %00000000
0408AA             0740**   
0408AA             0741**   ; 74 J
0408AA 1E          0742**       db %00011110
0408AB 0C          0743**       db %00001100
0408AC 0C          0744**       db %00001100
0408AD 0C          0745**       db %00001100
0408AE CC          0746**       db %11001100
0408AF CC          0747**       db %11001100
0408B0 78          0748**       db %01111000
0408B1 00          0749**       db %00000000
0408B2             0750**   
0408B2             0751**   ; 75 K
0408B2 E6          0752**       db %11100110
0408B3 66          0753**       db %01100110
0408B4 6C          0754**       db %01101100
0408B5 78          0755**       db %01111000
0408B6 6C          0756**       db %01101100
0408B7 66          0757**       db %01100110
0408B8 E6          0758**       db %11100110
0408B9 00          0759**       db %00000000
0408BA             0760**   
0408BA             0761**   ; 76 L
0408BA F0          0762**       db %11110000
0408BB 60          0763**       db %01100000
0408BC 60          0764**       db %01100000
0408BD 60          0765**       db %01100000
0408BE 62          0766**       db %01100010
0408BF 66          0767**       db %01100110
0408C0 FE          0768**       db %11111110
0408C1 00          0769**       db %00000000
0408C2             0770**   
0408C2             0771**   ; 77 M
0408C2 C6          0772**       db %11000110
0408C3 EE          0773**       db %11101110
0408C4 FE          0774**       db %11111110
0408C5 FE          0775**       db %11111110
0408C6 D6          0776**       db %11010110
0408C7 C6          0777**       db %11000110
0408C8 C6          0778**       db %11000110
0408C9 00          0779**       db %00000000
0408CA             0780**   
0408CA             0781**   ; 78 N
0408CA C6          0782**       db %11000110
0408CB E6          0783**       db %11100110
0408CC F6          0784**       db %11110110
0408CD DE          0785**       db %11011110
0408CE CE          0786**       db %11001110
0408CF C6          0787**       db %11000110
0408D0 C6          0788**       db %11000110
0408D1 00          0789**       db %00000000
0408D2             0790**   
0408D2             0791**   ; 79 O
0408D2 38          0792**       db %00111000
0408D3 6C          0793**       db %01101100
0408D4 C6          0794**       db %11000110
0408D5 C6          0795**       db %11000110
0408D6 C6          0796**       db %11000110
0408D7 6C          0797**       db %01101100
0408D8 38          0798**       db %00111000
0408D9 00          0799**       db %00000000
0408DA             0800**   
0408DA             0801**   ; 80 P
0408DA FC          0802**       db %11111100
0408DB 66          0803**       db %01100110
0408DC 66          0804**       db %01100110
0408DD 7C          0805**       db %01111100
0408DE 60          0806**       db %01100000
0408DF 60          0807**       db %01100000
0408E0 F0          0808**       db %11110000
0408E1 00          0809**       db %00000000
0408E2             0810**   
0408E2             0811**   ; 81 Q
0408E2 78          0812**       db %01111000
0408E3 CC          0813**       db %11001100
0408E4 CC          0814**       db %11001100
0408E5 CC          0815**       db %11001100
0408E6 DC          0816**       db %11011100
0408E7 78          0817**       db %01111000
0408E8 1C          0818**       db %00011100
0408E9 00          0819**       db %00000000
0408EA             0820**   
0408EA             0821**   ; 82 R
0408EA FC          0822**       db %11111100
0408EB 66          0823**       db %01100110
0408EC 66          0824**       db %01100110
0408ED 7C          0825**       db %01111100
0408EE 6C          0826**       db %01101100
0408EF 66          0827**       db %01100110
0408F0 E6          0828**       db %11100110
0408F1 00          0829**       db %00000000
0408F2             0830**   
0408F2             0831**   ; 83 S
0408F2 78          0832**       db %01111000
0408F3 CC          0833**       db %11001100
0408F4 E0          0834**       db %11100000
0408F5 70          0835**       db %01110000
0408F6 1C          0836**       db %00011100
0408F7 CC          0837**       db %11001100
0408F8 78          0838**       db %01111000
0408F9 00          0839**       db %00000000
0408FA             0840**   
0408FA             0841**   ; 84 T
0408FA FC          0842**       db %11111100
0408FB B4          0843**       db %10110100
0408FC 30          0844**       db %00110000
0408FD 30          0845**       db %00110000
0408FE 30          0846**       db %00110000
0408FF 30          0847**       db %00110000
040900 78          0848**       db %01111000
040901 00          0849**       db %00000000
040902             0850**   
040902             0851**   ; 85 U
040902 CC          0852**       db %11001100
040903 CC          0853**       db %11001100
040904 CC          0854**       db %11001100
040905 CC          0855**       db %11001100
040906 CC          0856**       db %11001100
040907 CC          0857**       db %11001100
040908 78          0858**       db %01111000
040909 00          0859**       db %00000000
04090A             0860**   
04090A             0861**   ; 86 V
04090A CC          0862**       db %11001100
04090B CC          0863**       db %11001100
04090C CC          0864**       db %11001100
04090D CC          0865**       db %11001100
04090E CC          0866**       db %11001100
04090F 78          0867**       db %01111000
040910 30          0868**       db %00110000
040911 00          0869**       db %00000000
040912             0870**   
040912             0871**   ; 87 W
040912 C6          0872**       db %11000110
040913 C6          0873**       db %11000110
040914 C6          0874**       db %11000110
040915 D6          0875**       db %11010110
040916 FE          0876**       db %11111110
040917 EE          0877**       db %11101110
040918 C6          0878**       db %11000110
040919 00          0879**       db %00000000
04091A             0880**   
04091A             0881**   ; 88 X
04091A C6          0882**       db %11000110
04091B C6          0883**       db %11000110
04091C 6C          0884**       db %01101100
04091D 38          0885**       db %00111000
04091E 6C          0886**       db %01101100
04091F C6          0887**       db %11000110
040920 C6          0888**       db %11000110
040921 00          0889**       db %00000000
040922             0890**   
040922             0891**   ; 89 Y
040922 CC          0892**       db %11001100
040923 CC          0893**       db %11001100
040924 CC          0894**       db %11001100
040925 78          0895**       db %01111000
040926 30          0896**       db %00110000
040927 30          0897**       db %00110000
040928 78          0898**       db %01111000
040929 00          0899**       db %00000000
04092A             0900**   
04092A             0901**   ; 90 Z
04092A FE          0902**       db %11111110
04092B C6          0903**       db %11000110
04092C 0C          0904**       db %00001100
04092D 18          0905**       db %00011000
04092E 30          0906**       db %00110000
04092F 66          0907**       db %01100110
040930 FE          0908**       db %11111110
040931 00          0909**       db %00000000
040932             0910**   
040932             0911**   ; 91 [
040932 78          0912**       db %01111000
040933 60          0913**       db %01100000
040934 60          0914**       db %01100000
040935 60          0915**       db %01100000
040936 60          0916**       db %01100000
040937 60          0917**       db %01100000
040938 78          0918**       db %01111000
040939 00          0919**       db %00000000
04093A             0920**   
04093A             0921**   ; 92 \
04093A 00          0922**       db %00000000
04093B C0          0923**       db %11000000
04093C 60          0924**       db %01100000
04093D 30          0925**       db %00110000
04093E 18          0926**       db %00011000
04093F 0C          0927**       db %00001100
040940 06          0928**       db %00000110
040941 00          0929**       db %00000000
040942             0930**   
040942             0931**   ; 93 ]
040942 78          0932**       db %01111000
040943 18          0933**       db %00011000
040944 18          0934**       db %00011000
040945 18          0935**       db %00011000
040946 18          0936**       db %00011000
040947 18          0937**       db %00011000
040948 78          0938**       db %01111000
040949 00          0939**       db %00000000
04094A             0940**   
04094A             0941**   ; 94 ^
04094A 18          0942**       db %00011000
04094B 3C          0943**       db %00111100
04094C 66          0944**       db %01100110
04094D 00          0945**       db %00000000
04094E 00          0946**       db %00000000
04094F 00          0947**       db %00000000
040950 00          0948**       db %00000000
040951 00          0949**       db %00000000
040952             0950**   
040952             0951**   ; 95 _
040952 00          0952**       db %00000000
040953 00          0953**       db %00000000
040954 00          0954**       db %00000000
040955 00          0955**       db %00000000
040956 00          0956**       db %00000000
040957 00          0957**       db %00000000
040958 00          0958**       db %00000000
040959 FF          0959**       db %11111111
04095A             0960**   
04095A             0961**   ; 96 `
04095A 30          0962**       db %00110000
04095B 30          0963**       db %00110000
04095C 18          0964**       db %00011000
04095D 00          0965**       db %00000000
04095E 00          0966**       db %00000000
04095F 00          0967**       db %00000000
040960 00          0968**       db %00000000
040961 00          0969**       db %00000000
040962             0970**   
040962             0971**   ; 97 a
040962 00          0972**       db %00000000
040963 00          0973**       db %00000000
040964 78          0974**       db %01111000
040965 0C          0975**       db %00001100
040966 7C          0976**       db %01111100
040967 CC          0977**       db %11001100
040968 76          0978**       db %01110110
040969 00          0979**       db %00000000
04096A             0980**   
04096A             0981**   ; 98 b
04096A E0          0982**       db %11100000
04096B 60          0983**       db %01100000
04096C 60          0984**       db %01100000
04096D 7C          0985**       db %01111100
04096E 66          0986**       db %01100110
04096F 66          0987**       db %01100110
040970 DC          0988**       db %11011100
040971 00          0989**       db %00000000
040972             0990**   
040972             0991**   ; 99 c
040972 00          0992**       db %00000000
040973 00          0993**       db %00000000
040974 78          0994**       db %01111000
040975 CC          0995**       db %11001100
040976 C0          0996**       db %11000000
040977 CC          0997**       db %11001100
040978 78          0998**       db %01111000
040979 00          0999**       db %00000000
04097A             1000**   
04097A             1001**   ; 100 d
04097A 1C          1002**       db %00011100
04097B 0C          1003**       db %00001100
04097C 0C          1004**       db %00001100
04097D 7C          1005**       db %01111100
04097E CC          1006**       db %11001100
04097F CC          1007**       db %11001100
040980 76          1008**       db %01110110
040981 00          1009**       db %00000000
040982             1010**   
040982             1011**   ; 101 e
040982 00          1012**       db %00000000
040983 00          1013**       db %00000000
040984 78          1014**       db %01111000
040985 CC          1015**       db %11001100
040986 FC          1016**       db %11111100
040987 C0          1017**       db %11000000
040988 78          1018**       db %01111000
040989 00          1019**       db %00000000
04098A             1020**   
04098A             1021**   ; 102 f
04098A 38          1022**       db %00111000
04098B 6C          1023**       db %01101100
04098C 60          1024**       db %01100000
04098D F0          1025**       db %11110000
04098E 60          1026**       db %01100000
04098F 60          1027**       db %01100000
040990 F0          1028**       db %11110000
040991 00          1029**       db %00000000
040992             1030**   
040992             1031**   ; 103 g
040992 00          1032**       db %00000000
040993 00          1033**       db %00000000
040994 76          1034**       db %01110110
040995 CC          1035**       db %11001100
040996 CC          1036**       db %11001100
040997 7C          1037**       db %01111100
040998 0C          1038**       db %00001100
040999 F8          1039**       db %11111000
04099A             1040**   
04099A             1041**   ; 104 h
04099A E0          1042**       db %11100000
04099B 60          1043**       db %01100000
04099C 6C          1044**       db %01101100
04099D 76          1045**       db %01110110
04099E 66          1046**       db %01100110
04099F 66          1047**       db %01100110
0409A0 E6          1048**       db %11100110
0409A1 00          1049**       db %00000000
0409A2             1050**   
0409A2             1051**   ; 105 i
0409A2 30          1052**       db %00110000
0409A3 00          1053**       db %00000000
0409A4 70          1054**       db %01110000
0409A5 30          1055**       db %00110000
0409A6 30          1056**       db %00110000
0409A7 30          1057**       db %00110000
0409A8 78          1058**       db %01111000
0409A9 00          1059**       db %00000000
0409AA             1060**   
0409AA             1061**   ; 106 j
0409AA 0C          1062**       db %00001100
0409AB 00          1063**       db %00000000
0409AC 0C          1064**       db %00001100
0409AD 0C          1065**       db %00001100
0409AE 0C          1066**       db %00001100
0409AF CC          1067**       db %11001100
0409B0 CC          1068**       db %11001100
0409B1 78          1069**       db %01111000
0409B2             1070**   
0409B2             1071**   ; 107 k
0409B2 E0          1072**       db %11100000
0409B3 60          1073**       db %01100000
0409B4 66          1074**       db %01100110
0409B5 6C          1075**       db %01101100
0409B6 78          1076**       db %01111000
0409B7 6C          1077**       db %01101100
0409B8 E6          1078**       db %11100110
0409B9 00          1079**       db %00000000
0409BA             1080**   
0409BA             1081**   ; 108 l
0409BA E0          1082**       db %11100000
0409BB 60          1083**       db %01100000
0409BC 60          1084**       db %01100000
0409BD 60          1085**       db %01100000
0409BE 60          1086**       db %01100000
0409BF 68          1087**       db %01101000
0409C0 30          1088**       db %00110000
0409C1 00          1089**       db %00000000
0409C2             1090**   
0409C2             1091**   ; 109 m
0409C2 00          1092**       db %00000000
0409C3 00          1093**       db %00000000
0409C4 CC          1094**       db %11001100
0409C5 FE          1095**       db %11111110
0409C6 FE          1096**       db %11111110
0409C7 D6          1097**       db %11010110
0409C8 C6          1098**       db %11000110
0409C9 00          1099**       db %00000000
0409CA             1100**   
0409CA             1101**   ; 110 n
0409CA 00          1102**       db %00000000
0409CB 00          1103**       db %00000000
0409CC F8          1104**       db %11111000
0409CD CC          1105**       db %11001100
0409CE CC          1106**       db %11001100
0409CF CC          1107**       db %11001100
0409D0 CC          1108**       db %11001100
0409D1 00          1109**       db %00000000
0409D2             1110**   
0409D2             1111**   ; 111 o
0409D2 00          1112**       db %00000000
0409D3 00          1113**       db %00000000
0409D4 78          1114**       db %01111000
0409D5 CC          1115**       db %11001100
0409D6 CC          1116**       db %11001100
0409D7 CC          1117**       db %11001100
0409D8 78          1118**       db %01111000
0409D9 00          1119**       db %00000000
0409DA             1120**   
0409DA             1121**   ; 112 p
0409DA 00          1122**       db %00000000
0409DB 00          1123**       db %00000000
0409DC DC          1124**       db %11011100
0409DD 66          1125**       db %01100110
0409DE 66          1126**       db %01100110
0409DF 7C          1127**       db %01111100
0409E0 60          1128**       db %01100000
0409E1 F0          1129**       db %11110000
0409E2             1130**   
0409E2             1131**   ; 113 q
0409E2 00          1132**       db %00000000
0409E3 00          1133**       db %00000000
0409E4 76          1134**       db %01110110
0409E5 CC          1135**       db %11001100
0409E6 CC          1136**       db %11001100
0409E7 7C          1137**       db %01111100
0409E8 0C          1138**       db %00001100
0409E9 1E          1139**       db %00011110
0409EA             1140**   
0409EA             1141**   ; 114 r
0409EA 00          1142**       db %00000000
0409EB 00          1143**       db %00000000
0409EC DC          1144**       db %11011100
0409ED 76          1145**       db %01110110
0409EE 66          1146**       db %01100110
0409EF 60          1147**       db %01100000
0409F0 F0          1148**       db %11110000
0409F1 00          1149**       db %00000000
0409F2             1150**   
0409F2             1151**   ; 115 s
0409F2 00          1152**       db %00000000
0409F3 00          1153**       db %00000000
0409F4 7C          1154**       db %01111100
0409F5 C0          1155**       db %11000000
0409F6 78          1156**       db %01111000
0409F7 0C          1157**       db %00001100
0409F8 F8          1158**       db %11111000
0409F9 00          1159**       db %00000000
0409FA             1160**   
0409FA             1161**   ; 116 t
0409FA 10          1162**       db %00010000
0409FB 30          1163**       db %00110000
0409FC 7C          1164**       db %01111100
0409FD 30          1165**       db %00110000
0409FE 30          1166**       db %00110000
0409FF 34          1167**       db %00110100
040A00 18          1168**       db %00011000
040A01 00          1169**       db %00000000
040A02             1170**   
040A02             1171**   ; 117 u
040A02 00          1172**       db %00000000
040A03 00          1173**       db %00000000
040A04 CC          1174**       db %11001100
040A05 CC          1175**       db %11001100
040A06 CC          1176**       db %11001100
040A07 CC          1177**       db %11001100
040A08 76          1178**       db %01110110
040A09 00          1179**       db %00000000
040A0A             1180**   
040A0A             1181**   ; 118 v
040A0A 00          1182**       db %00000000
040A0B 00          1183**       db %00000000
040A0C CC          1184**       db %11001100
040A0D CC          1185**       db %11001100
040A0E CC          1186**       db %11001100
040A0F 78          1187**       db %01111000
040A10 30          1188**       db %00110000
040A11 00          1189**       db %00000000
040A12             1190**   
040A12             1191**   ; 119 w
040A12 00          1192**       db %00000000
040A13 00          1193**       db %00000000
040A14 C6          1194**       db %11000110
040A15 D6          1195**       db %11010110
040A16 FE          1196**       db %11111110
040A17 FE          1197**       db %11111110
040A18 6C          1198**       db %01101100
040A19 00          1199**       db %00000000
040A1A             1200**   
040A1A             1201**   ; 120 x
040A1A 00          1202**       db %00000000
040A1B 00          1203**       db %00000000
040A1C C6          1204**       db %11000110
040A1D 6C          1205**       db %01101100
040A1E 38          1206**       db %00111000
040A1F 6C          1207**       db %01101100
040A20 C6          1208**       db %11000110
040A21 00          1209**       db %00000000
040A22             1210**   
040A22             1211**   ; 121 y
040A22 00          1212**       db %00000000
040A23 00          1213**       db %00000000
040A24 CC          1214**       db %11001100
040A25 CC          1215**       db %11001100
040A26 CC          1216**       db %11001100
040A27 7C          1217**       db %01111100
040A28 0C          1218**       db %00001100
040A29 F8          1219**       db %11111000
040A2A             1220**   
040A2A             1221**   ; 122 z
040A2A 00          1222**       db %00000000
040A2B 00          1223**       db %00000000
040A2C FC          1224**       db %11111100
040A2D 98          1225**       db %10011000
040A2E 30          1226**       db %00110000
040A2F 64          1227**       db %01100100
040A30 FC          1228**       db %11111100
040A31 00          1229**       db %00000000
040A32             1230**   
040A32             1231**   ; 123 {
040A32 1C          1232**       db %00011100
040A33 30          1233**       db %00110000
040A34 30          1234**       db %00110000
040A35 E0          1235**       db %11100000
040A36 30          1236**       db %00110000
040A37 30          1237**       db %00110000
040A38 1C          1238**       db %00011100
040A39 00          1239**       db %00000000
040A3A             1240**   
040A3A             1241**   ; 124 |
040A3A 30          1242**       db %00110000
040A3B 30          1243**       db %00110000
040A3C 30          1244**       db %00110000
040A3D 30          1245**       db %00110000
040A3E 30          1246**       db %00110000
040A3F 30          1247**       db %00110000
040A40 30          1248**       db %00110000
040A41 00          1249**       db %00000000
040A42             1250**   
040A42             1251**   ; 125 }
040A42 E0          1252**       db %11100000
040A43 30          1253**       db %00110000
040A44 30          1254**       db %00110000
040A45 1C          1255**       db %00011100
040A46 30          1256**       db %00110000
040A47 30          1257**       db %00110000
040A48 E0          1258**       db %11100000
040A49 00          1259**       db %00000000
040A4A             1260**   
040A4A             1261**   ; 126 ~
040A4A 76          1262**       db %01110110
040A4B DC          1263**       db %11011100
040A4C 00          1264**       db %00000000
040A4D 00          1265**       db %00000000
040A4E 00          1266**       db %00000000
040A4F 00          1267**       db %00000000
040A50 00          1268**       db %00000000
040A51 00          1269**       db %00000000
040A52             1270**   
040A52             1271**   ; 127 DELETE
040A52 7C          1272**       db %01111100
040A53 82          1273**       db %10000010
040A54 9A          1274**       db %10011010
040A55 A2          1275**       db %10100010
040A56 A2          1276**       db %10100010
040A57 9A          1277**       db %10011010
040A58 82          1278**       db %10000010
040A59 7C          1279**       db %01111100
040A5A             1280**   
040A5A             1281**   ; 128 NON_PRINTABLE_128
040A5A 3C          1282**       db %00111100
040A5B 66          1283**       db %01100110
040A5C C0          1284**       db %11000000
040A5D C0          1285**       db %11000000
040A5E 66          1286**       db %01100110
040A5F 3C          1287**       db %00111100
040A60 0C          1288**       db %00001100
040A61 78          1289**       db %01111000
040A62             1290**   
040A62             1291**   ; 129 NON_PRINTABLE_129
040A62 CC          1292**       db %11001100
040A63 00          1293**       db %00000000
040A64 CC          1294**       db %11001100
040A65 CC          1295**       db %11001100
040A66 CC          1296**       db %11001100
040A67 CC          1297**       db %11001100
040A68 76          1298**       db %01110110
040A69 00          1299**       db %00000000
040A6A             1300**   
040A6A             1301**   ; 130 NON_PRINTABLE_130
040A6A 0C          1302**       db %00001100
040A6B 18          1303**       db %00011000
040A6C 78          1304**       db %01111000
040A6D CC          1305**       db %11001100
040A6E FC          1306**       db %11111100
040A6F C0          1307**       db %11000000
040A70 78          1308**       db %01111000
040A71 00          1309**       db %00000000
040A72             1310**   
040A72             1311**   ; 131 NON_PRINTABLE_131
040A72 78          1312**       db %01111000
040A73 84          1313**       db %10000100
040A74 78          1314**       db %01111000
040A75 0C          1315**       db %00001100
040A76 7C          1316**       db %01111100
040A77 CC          1317**       db %11001100
040A78 76          1318**       db %01110110
040A79 00          1319**       db %00000000
040A7A             1320**   
040A7A             1321**   ; 132 NON_PRINTABLE_132
040A7A 6C          1322**       db %01101100
040A7B 00          1323**       db %00000000
040A7C 78          1324**       db %01111000
040A7D 0C          1325**       db %00001100
040A7E 7C          1326**       db %01111100
040A7F CC          1327**       db %11001100
040A80 76          1328**       db %01110110
040A81 00          1329**       db %00000000
040A82             1330**   
040A82             1331**   ; 133 NON_PRINTABLE_133
040A82 60          1332**       db %01100000
040A83 30          1333**       db %00110000
040A84 78          1334**       db %01111000
040A85 0C          1335**       db %00001100
040A86 7C          1336**       db %01111100
040A87 CC          1337**       db %11001100
040A88 76          1338**       db %01110110
040A89 00          1339**       db %00000000
040A8A             1340**   
040A8A             1341**   ; 134 NON_PRINTABLE_134
040A8A 7C          1342**       db %01111100
040A8B 82          1343**       db %10000010
040A8C B2          1344**       db %10110010
040A8D AA          1345**       db %10101010
040A8E B2          1346**       db %10110010
040A8F AA          1347**       db %10101010
040A90 82          1348**       db %10000010
040A91 7C          1349**       db %01111100
040A92             1350**   
040A92             1351**   ; 135 NON_PRINTABLE_135
040A92 00          1352**       db %00000000
040A93 78          1353**       db %01111000
040A94 CC          1354**       db %11001100
040A95 C0          1355**       db %11000000
040A96 CC          1356**       db %11001100
040A97 78          1357**       db %01111000
040A98 18          1358**       db %00011000
040A99 70          1359**       db %01110000
040A9A             1360**   
040A9A             1361**   ; 136 NON_PRINTABLE_136
040A9A 78          1362**       db %01111000
040A9B 84          1363**       db %10000100
040A9C 78          1364**       db %01111000
040A9D CC          1365**       db %11001100
040A9E FC          1366**       db %11111100
040A9F C0          1367**       db %11000000
040AA0 78          1368**       db %01111000
040AA1 00          1369**       db %00000000
040AA2             1370**   
040AA2             1371**   ; 137 NON_PRINTABLE_137
040AA2 CC          1372**       db %11001100
040AA3 00          1373**       db %00000000
040AA4 78          1374**       db %01111000
040AA5 CC          1375**       db %11001100
040AA6 FC          1376**       db %11111100
040AA7 C0          1377**       db %11000000
040AA8 78          1378**       db %01111000
040AA9 00          1379**       db %00000000
040AAA             1380**   
040AAA             1381**   ; 138 NON_PRINTABLE_138
040AAA 60          1382**       db %01100000
040AAB 30          1383**       db %00110000
040AAC 78          1384**       db %01111000
040AAD CC          1385**       db %11001100
040AAE FC          1386**       db %11111100
040AAF C0          1387**       db %11000000
040AB0 78          1388**       db %01111000
040AB1 00          1389**       db %00000000
040AB2             1390**   
040AB2             1391**   ; 139 NON_PRINTABLE_139
040AB2 00          1392**       db %00000000
040AB3 D8          1393**       db %11011000
040AB4 00          1394**       db %00000000
040AB5 70          1395**       db %01110000
040AB6 30          1396**       db %00110000
040AB7 30          1397**       db %00110000
040AB8 78          1398**       db %01111000
040AB9 00          1399**       db %00000000
040ABA             1400**   
040ABA             1401**   ; 140 NON_PRINTABLE_140
040ABA 70          1402**       db %01110000
040ABB D8          1403**       db %11011000
040ABC 00          1404**       db %00000000
040ABD 70          1405**       db %01110000
040ABE 30          1406**       db %00110000
040ABF 30          1407**       db %00110000
040AC0 78          1408**       db %01111000
040AC1 00          1409**       db %00000000
040AC2             1410**   
040AC2             1411**   ; 141 NON_PRINTABLE_141
040AC2 6C          1412**       db %01101100
040AC3 FE          1413**       db %11111110
040AC4 CC          1414**       db %11001100
040AC5 18          1415**       db %00011000
040AC6 30          1416**       db %00110000
040AC7 66          1417**       db %01100110
040AC8 FE          1418**       db %11111110
040AC9 00          1419**       db %00000000
040ACA             1420**   
040ACA             1421**   ; 142 NON_PRINTABLE_142
040ACA CC          1422**       db %11001100
040ACB 00          1423**       db %00000000
040ACC 78          1424**       db %01111000
040ACD CC          1425**       db %11001100
040ACE FC          1426**       db %11111100
040ACF CC          1427**       db %11001100
040AD0 CC          1428**       db %11001100
040AD1 00          1429**       db %00000000
040AD2             1430**   
040AD2             1431**   ; 143 NON_PRINTABLE_143
040AD2 78          1432**       db %01111000
040AD3 00          1433**       db %00000000
040AD4 FC          1434**       db %11111100
040AD5 98          1435**       db %10011000
040AD6 30          1436**       db %00110000
040AD7 64          1437**       db %01100100
040AD8 FC          1438**       db %11111100
040AD9 00          1439**       db %00000000
040ADA             1440**   
040ADA             1441**   ; 144 NON_PRINTABLE_144
040ADA 0C          1442**       db %00001100
040ADB 18          1443**       db %00011000
040ADC FE          1444**       db %11111110
040ADD 62          1445**       db %01100010
040ADE 78          1446**       db %01111000
040ADF 62          1447**       db %01100010
040AE0 FE          1448**       db %11111110
040AE1 00          1449**       db %00000000
040AE2             1450**   
040AE2             1451**   ; 145 NON_PRINTABLE_145
040AE2 00          1452**       db %00000000
040AE3 00          1453**       db %00000000
040AE4 7E          1454**       db %01111110
040AE5 1B          1455**       db %00011011
040AE6 7E          1456**       db %01111110
040AE7 D8          1457**       db %11011000
040AE8 7E          1458**       db %01111110
040AE9 00          1459**       db %00000000
040AEA             1460**   
040AEA             1461**   ; 146 NON_PRINTABLE_146
040AEA 3E          1462**       db %00111110
040AEB 78          1463**       db %01111000
040AEC D8          1464**       db %11011000
040AED FC          1465**       db %11111100
040AEE D8          1466**       db %11011000
040AEF D8          1467**       db %11011000
040AF0 DE          1468**       db %11011110
040AF1 00          1469**       db %00000000
040AF2             1470**   
040AF2             1471**   ; 147 NON_PRINTABLE_147
040AF2 78          1472**       db %01111000
040AF3 CC          1473**       db %11001100
040AF4 00          1474**       db %00000000
040AF5 78          1475**       db %01111000
040AF6 CC          1476**       db %11001100
040AF7 CC          1477**       db %11001100
040AF8 78          1478**       db %01111000
040AF9 00          1479**       db %00000000
040AFA             1480**   
040AFA             1481**   ; 148 NON_PRINTABLE_148
040AFA 00          1482**       db %00000000
040AFB CC          1483**       db %11001100
040AFC 00          1484**       db %00000000
040AFD 78          1485**       db %01111000
040AFE CC          1486**       db %11001100
040AFF CC          1487**       db %11001100
040B00 78          1488**       db %01111000
040B01 00          1489**       db %00000000
040B02             1490**   
040B02             1491**   ; 149 NON_PRINTABLE_149
040B02 18          1492**       db %00011000
040B03 30          1493**       db %00110000
040B04 78          1494**       db %01111000
040B05 CC          1495**       db %11001100
040B06 FC          1496**       db %11111100
040B07 CC          1497**       db %11001100
040B08 CC          1498**       db %11001100
040B09 00          1499**       db %00000000
040B0A             1500**   
040B0A             1501**   ; 150 NON_PRINTABLE_150
040B0A 78          1502**       db %01111000
040B0B CC          1503**       db %11001100
040B0C 00          1504**       db %00000000
040B0D CC          1505**       db %11001100
040B0E CC          1506**       db %11001100
040B0F CC          1507**       db %11001100
040B10 76          1508**       db %01110110
040B11 00          1509**       db %00000000
040B12             1510**   
040B12             1511**   ; 151 NON_PRINTABLE_151
040B12 60          1512**       db %01100000
040B13 30          1513**       db %00110000
040B14 CC          1514**       db %11001100
040B15 CC          1515**       db %11001100
040B16 CC          1516**       db %11001100
040B17 CC          1517**       db %11001100
040B18 76          1518**       db %01110110
040B19 00          1519**       db %00000000
040B1A             1520**   
040B1A             1521**   ; 152 NON_PRINTABLE_152
040B1A CC          1522**       db %11001100
040B1B 00          1523**       db %00000000
040B1C CC          1524**       db %11001100
040B1D CC          1525**       db %11001100
040B1E CC          1526**       db %11001100
040B1F 7C          1527**       db %01111100
040B20 0C          1528**       db %00001100
040B21 F8          1529**       db %11111000
040B22             1530**   
040B22             1531**   ; 153 NON_PRINTABLE_153
040B22 CC          1532**       db %11001100
040B23 00          1533**       db %00000000
040B24 78          1534**       db %01111000
040B25 CC          1535**       db %11001100
040B26 CC          1536**       db %11001100
040B27 CC          1537**       db %11001100
040B28 78          1538**       db %01111000
040B29 00          1539**       db %00000000
040B2A             1540**   
040B2A             1541**   ; 154 NON_PRINTABLE_154
040B2A CC          1542**       db %11001100
040B2B 00          1543**       db %00000000
040B2C CC          1544**       db %11001100
040B2D CC          1545**       db %11001100
040B2E CC          1546**       db %11001100
040B2F CC          1547**       db %11001100
040B30 78          1548**       db %01111000
040B31 00          1549**       db %00000000
040B32             1550**   
040B32             1551**   ; 155 NON_PRINTABLE_155
040B32 30          1552**       db %00110000
040B33 78          1553**       db %01111000
040B34 CC          1554**       db %11001100
040B35 C0          1555**       db %11000000
040B36 CC          1556**       db %11001100
040B37 78          1557**       db %01111000
040B38 30          1558**       db %00110000
040B39 00          1559**       db %00000000
040B3A             1560**   
040B3A             1561**   ; 156 NON_PRINTABLE_156
040B3A 38          1562**       db %00111000
040B3B 6C          1563**       db %01101100
040B3C 64          1564**       db %01100100
040B3D F0          1565**       db %11110000
040B3E 60          1566**       db %01100000
040B3F E6          1567**       db %11100110
040B40 FC          1568**       db %11111100
040B41 00          1569**       db %00000000
040B42             1570**   
040B42             1571**   ; 157 NON_PRINTABLE_157
040B42 CC          1572**       db %11001100
040B43 CC          1573**       db %11001100
040B44 78          1574**       db %01111000
040B45 FC          1575**       db %11111100
040B46 30          1576**       db %00110000
040B47 FC          1577**       db %11111100
040B48 30          1578**       db %00110000
040B49 30          1579**       db %00110000
040B4A             1580**   
040B4A             1581**   ; 158 NON_PRINTABLE_158
040B4A 78          1582**       db %01111000
040B4B 84          1583**       db %10000100
040B4C 78          1584**       db %01111000
040B4D CC          1585**       db %11001100
040B4E FC          1586**       db %11111100
040B4F CC          1587**       db %11001100
040B50 CC          1588**       db %11001100
040B51 00          1589**       db %00000000
040B52             1590**   
040B52             1591**   ; 159 NON_PRINTABLE_159
040B52 6C          1592**       db %01101100
040B53 00          1593**       db %00000000
040B54 FE          1594**       db %11111110
040B55 62          1595**       db %01100010
040B56 78          1596**       db %01111000
040B57 62          1597**       db %01100010
040B58 FE          1598**       db %11111110
040B59 00          1599**       db %00000000
040B5A             1600**   
040B5A             1601**   ; 160 NON_PRINTABLE_160
040B5A 18          1602**       db %00011000
040B5B 30          1603**       db %00110000
040B5C 78          1604**       db %01111000
040B5D 0C          1605**       db %00001100
040B5E 7C          1606**       db %01111100
040B5F CC          1607**       db %11001100
040B60 76          1608**       db %01110110
040B61 00          1609**       db %00000000
040B62             1610**   
040B62             1611**   ; 161 NON_PRINTABLE_161
040B62 18          1612**       db %00011000
040B63 30          1613**       db %00110000
040B64 00          1614**       db %00000000
040B65 70          1615**       db %01110000
040B66 30          1616**       db %00110000
040B67 30          1617**       db %00110000
040B68 78          1618**       db %01111000
040B69 00          1619**       db %00000000
040B6A             1620**   
040B6A             1621**   ; 162 NON_PRINTABLE_162
040B6A 18          1622**       db %00011000
040B6B 30          1623**       db %00110000
040B6C 00          1624**       db %00000000
040B6D 78          1625**       db %01111000
040B6E CC          1626**       db %11001100
040B6F CC          1627**       db %11001100
040B70 78          1628**       db %01111000
040B71 00          1629**       db %00000000
040B72             1630**   
040B72             1631**   ; 163 NON_PRINTABLE_163
040B72 18          1632**       db %00011000
040B73 30          1633**       db %00110000
040B74 CC          1634**       db %11001100
040B75 CC          1635**       db %11001100
040B76 CC          1636**       db %11001100
040B77 CC          1637**       db %11001100
040B78 76          1638**       db %01110110
040B79 00          1639**       db %00000000
040B7A             1640**   
040B7A             1641**   ; 164 NON_PRINTABLE_164
040B7A 76          1642**       db %01110110
040B7B DC          1643**       db %11011100
040B7C F8          1644**       db %11111000
040B7D CC          1645**       db %11001100
040B7E CC          1646**       db %11001100
040B7F CC          1647**       db %11001100
040B80 CC          1648**       db %11001100
040B81 00          1649**       db %00000000
040B82             1650**   
040B82             1651**   ; 165 NON_PRINTABLE_165
040B82 76          1652**       db %01110110
040B83 DC          1653**       db %11011100
040B84 E6          1654**       db %11100110
040B85 F6          1655**       db %11110110
040B86 DE          1656**       db %11011110
040B87 CE          1657**       db %11001110
040B88 C6          1658**       db %11000110
040B89 00          1659**       db %00000000
040B8A             1660**   
040B8A             1661**   ; 166 NON_PRINTABLE_166
040B8A 3C          1662**       db %00111100
040B8B 6C          1663**       db %01101100
040B8C 3E          1664**       db %00111110
040B8D 00          1665**       db %00000000
040B8E 7E          1666**       db %01111110
040B8F 00          1667**       db %00000000
040B90 00          1668**       db %00000000
040B91 00          1669**       db %00000000
040B92             1670**   
040B92             1671**   ; 167 NON_PRINTABLE_167
040B92 38          1672**       db %00111000
040B93 6C          1673**       db %01101100
040B94 38          1674**       db %00111000
040B95 00          1675**       db %00000000
040B96 7C          1676**       db %01111100
040B97 00          1677**       db %00000000
040B98 00          1678**       db %00000000
040B99 00          1679**       db %00000000
040B9A             1680**   
040B9A             1681**   ; 168 NON_PRINTABLE_168
040B9A 00          1682**       db %00000000
040B9B 18          1683**       db %00011000
040B9C 00          1684**       db %00000000
040B9D 18          1685**       db %00011000
040B9E 30          1686**       db %00110000
040B9F 60          1687**       db %01100000
040BA0 66          1688**       db %01100110
040BA1 3C          1689**       db %00111100
040BA2             1690**   
040BA2             1691**   ; 169 NON_PRINTABLE_169
040BA2 18          1692**       db %00011000
040BA3 30          1693**       db %00110000
040BA4 78          1694**       db %01111000
040BA5 30          1695**       db %00110000
040BA6 30          1696**       db %00110000
040BA7 30          1697**       db %00110000
040BA8 78          1698**       db %01111000
040BA9 00          1699**       db %00000000
040BAA             1700**   
040BAA             1701**   ; 170 NON_PRINTABLE_170
040BAA 00          1702**       db %00000000
040BAB 00          1703**       db %00000000
040BAC 00          1704**       db %00000000
040BAD FC          1705**       db %11111100
040BAE 0C          1706**       db %00001100
040BAF 0C          1707**       db %00001100
040BB0 00          1708**       db %00000000
040BB1 00          1709**       db %00000000
040BB2             1710**   
040BB2             1711**   ; 171 NON_PRINTABLE_171
040BB2 00          1712**       db %00000000
040BB3 00          1713**       db %00000000
040BB4 7E          1714**       db %01111110
040BB5 DB          1715**       db %11011011
040BB6 DE          1716**       db %11011110
040BB7 D8          1717**       db %11011000
040BB8 7E          1718**       db %01111110
040BB9 00          1719**       db %00000000
040BBA             1720**   
040BBA             1721**   ; 172 NON_PRINTABLE_172
040BBA 7E          1722**       db %01111110
040BBB D8          1723**       db %11011000
040BBC D8          1724**       db %11011000
040BBD DC          1725**       db %11011100
040BBE D8          1726**       db %11011000
040BBF D8          1727**       db %11011000
040BC0 7E          1728**       db %01111110
040BC1 00          1729**       db %00000000
040BC2             1730**   
040BC2             1731**   ; 173 NON_PRINTABLE_173
040BC2 00          1732**       db %00000000
040BC3 30          1733**       db %00110000
040BC4 00          1734**       db %00000000
040BC5 30          1735**       db %00110000
040BC6 30          1736**       db %00110000
040BC7 78          1737**       db %01111000
040BC8 78          1738**       db %01111000
040BC9 30          1739**       db %00110000
040BCA             1740**   
040BCA             1741**   ; 174 NON_PRINTABLE_174
040BCA 00          1742**       db %00000000
040BCB 33          1743**       db %00110011
040BCC 66          1744**       db %01100110
040BCD CC          1745**       db %11001100
040BCE 66          1746**       db %01100110
040BCF 33          1747**       db %00110011
040BD0 00          1748**       db %00000000
040BD1 00          1749**       db %00000000
040BD2             1750**   
040BD2             1751**   ; 175 NON_PRINTABLE_175
040BD2 00          1752**       db %00000000
040BD3 CC          1753**       db %11001100
040BD4 66          1754**       db %01100110
040BD5 33          1755**       db %00110011
040BD6 66          1756**       db %01100110
040BD7 CC          1757**       db %11001100
040BD8 00          1758**       db %00000000
040BD9 00          1759**       db %00000000
040BDA             1760**   
040BDA             1761**   ; 176 NON_PRINTABLE_176
040BDA 22          1762**       db %00100010
040BDB 88          1763**       db %10001000
040BDC 22          1764**       db %00100010
040BDD 88          1765**       db %10001000
040BDE 22          1766**       db %00100010
040BDF 88          1767**       db %10001000
040BE0 22          1768**       db %00100010
040BE1 88          1769**       db %10001000
040BE2             1770**   
040BE2             1771**   ; 177 NON_PRINTABLE_177
040BE2 55          1772**       db %01010101
040BE3 AA          1773**       db %10101010
040BE4 55          1774**       db %01010101
040BE5 AA          1775**       db %10101010
040BE6 55          1776**       db %01010101
040BE7 AA          1777**       db %10101010
040BE8 55          1778**       db %01010101
040BE9 AA          1779**       db %10101010
040BEA             1780**   
040BEA             1781**   ; 178 NON_PRINTABLE_178
040BEA 78          1782**       db %01111000
040BEB CC          1783**       db %11001100
040BEC 78          1784**       db %01111000
040BED 30          1785**       db %00110000
040BEE 30          1786**       db %00110000
040BEF 30          1787**       db %00110000
040BF0 78          1788**       db %01111000
040BF1 00          1789**       db %00000000
040BF2             1790**   
040BF2             1791**   ; 179 NON_PRINTABLE_179
040BF2 18          1792**       db %00011000
040BF3 18          1793**       db %00011000
040BF4 18          1794**       db %00011000
040BF5 18          1795**       db %00011000
040BF6 18          1796**       db %00011000
040BF7 18          1797**       db %00011000
040BF8 18          1798**       db %00011000
040BF9 18          1799**       db %00011000
040BFA             1800**   
040BFA             1801**   ; 180 NON_PRINTABLE_180
040BFA 18          1802**       db %00011000
040BFB 18          1803**       db %00011000
040BFC 18          1804**       db %00011000
040BFD F8          1805**       db %11111000
040BFE 18          1806**       db %00011000
040BFF 18          1807**       db %00011000
040C00 18          1808**       db %00011000
040C01 18          1809**       db %00011000
040C02             1810**   
040C02             1811**   ; 181 NON_PRINTABLE_181
040C02 18          1812**       db %00011000
040C03 30          1813**       db %00110000
040C04 78          1814**       db %01111000
040C05 CC          1815**       db %11001100
040C06 CC          1816**       db %11001100
040C07 CC          1817**       db %11001100
040C08 78          1818**       db %01111000
040C09 00          1819**       db %00000000
040C0A             1820**   
040C0A             1821**   ; 182 NON_PRINTABLE_182
040C0A 78          1822**       db %01111000
040C0B CC          1823**       db %11001100
040C0C 78          1824**       db %01111000
040C0D CC          1825**       db %11001100
040C0E CC          1826**       db %11001100
040C0F CC          1827**       db %11001100
040C10 78          1828**       db %01111000
040C11 00          1829**       db %00000000
040C12             1830**   
040C12             1831**   ; 183 NON_PRINTABLE_183
040C12 00          1832**       db %00000000
040C13 6C          1833**       db %01101100
040C14 38          1834**       db %00111000
040C15 38          1835**       db %00111000
040C16 6C          1836**       db %01101100
040C17 00          1837**       db %00000000
040C18 00          1838**       db %00000000
040C19 00          1839**       db %00000000
040C1A             1840**   
040C1A             1841**   ; 184 NON_PRINTABLE_184
040C1A 18          1842**       db %00011000
040C1B 30          1843**       db %00110000
040C1C CC          1844**       db %11001100
040C1D CC          1845**       db %11001100
040C1E CC          1846**       db %11001100
040C1F CC          1847**       db %11001100
040C20 78          1848**       db %01111000
040C21 00          1849**       db %00000000
040C22             1850**   
040C22             1851**   ; 185 NON_PRINTABLE_185
040C22 18          1852**       db %00011000
040C23 30          1853**       db %00110000
040C24 CC          1854**       db %11001100
040C25 CC          1855**       db %11001100
040C26 78          1856**       db %01111000
040C27 30          1857**       db %00110000
040C28 78          1858**       db %01111000
040C29 00          1859**       db %00000000
040C2A             1860**   
040C2A             1861**   ; 186 NON_PRINTABLE_186
040C2A 18          1862**       db %00011000
040C2B 30          1863**       db %00110000
040C2C CC          1864**       db %11001100
040C2D CC          1865**       db %11001100
040C2E CC          1866**       db %11001100
040C2F 7C          1867**       db %01111100
040C30 0C          1868**       db %00001100
040C31 F8          1869**       db %11111000
040C32             1870**   
040C32             1871**   ; 187 NON_PRINTABLE_187
040C32 38          1872**       db %00111000
040C33 6C          1873**       db %01101100
040C34 C6          1874**       db %11000110
040C35 FE          1875**       db %11111110
040C36 C6          1876**       db %11000110
040C37 CE          1877**       db %11001110
040C38 18          1878**       db %00011000
040C39 0E          1879**       db %00001110
040C3A             1880**   
040C3A             1881**   ; 188 NON_PRINTABLE_188
040C3A 6C          1882**       db %01101100
040C3B 38          1883**       db %00111000
040C3C 7C          1884**       db %01111100
040C3D C6          1885**       db %11000110
040C3E C0          1886**       db %11000000
040C3F C0          1887**       db %11000000
040C40 C6          1888**       db %11000110
040C41 7C          1889**       db %01111100
040C42             1890**   
040C42             1891**   ; 189 NON_PRINTABLE_189
040C42 00          1892**       db %00000000
040C43 CC          1893**       db %11001100
040C44 78          1894**       db %01111000
040C45 78          1895**       db %01111000
040C46 CC          1896**       db %11001100
040C47 C0          1897**       db %11000000
040C48 CC          1898**       db %11001100
040C49 78          1899**       db %01111000
040C4A             1900**   
040C4A             1901**   ; 190 NON_PRINTABLE_190
040C4A F8          1902**       db %11111000
040C4B 6C          1903**       db %01101100
040C4C 66          1904**       db %01100110
040C4D F6          1905**       db %11110110
040C4E 66          1906**       db %01100110
040C4F 6C          1907**       db %01101100
040C50 F8          1908**       db %11111000
040C51 00          1909**       db %00000000
040C52             1910**   
040C52             1911**   ; 191 NON_PRINTABLE_191
040C52 00          1912**       db %00000000
040C53 00          1913**       db %00000000
040C54 00          1914**       db %00000000
040C55 F8          1915**       db %11111000
040C56 18          1916**       db %00011000
040C57 18          1917**       db %00011000
040C58 18          1918**       db %00011000
040C59 18          1919**       db %00011000
040C5A             1920**   
040C5A             1921**   ; 192 NON_PRINTABLE_192
040C5A 18          1922**       db %00011000
040C5B 18          1923**       db %00011000
040C5C 18          1924**       db %00011000
040C5D 1F          1925**       db %00011111
040C5E 00          1926**       db %00000000
040C5F 00          1927**       db %00000000
040C60 00          1928**       db %00000000
040C61 00          1929**       db %00000000
040C62             1930**   
040C62             1931**   ; 193 NON_PRINTABLE_193
040C62 18          1932**       db %00011000
040C63 18          1933**       db %00011000
040C64 18          1934**       db %00011000
040C65 FF          1935**       db %11111111
040C66 00          1936**       db %00000000
040C67 00          1937**       db %00000000
040C68 00          1938**       db %00000000
040C69 00          1939**       db %00000000
040C6A             1940**   
040C6A             1941**   ; 194 NON_PRINTABLE_194
040C6A 00          1942**       db %00000000
040C6B 00          1943**       db %00000000
040C6C 00          1944**       db %00000000
040C6D FF          1945**       db %11111111
040C6E 18          1946**       db %00011000
040C6F 18          1947**       db %00011000
040C70 18          1948**       db %00011000
040C71 18          1949**       db %00011000
040C72             1950**   
040C72             1951**   ; 195 NON_PRINTABLE_195
040C72 18          1952**       db %00011000
040C73 18          1953**       db %00011000
040C74 18          1954**       db %00011000
040C75 1F          1955**       db %00011111
040C76 18          1956**       db %00011000
040C77 18          1957**       db %00011000
040C78 18          1958**       db %00011000
040C79 18          1959**       db %00011000
040C7A             1960**   
040C7A             1961**   ; 196 NON_PRINTABLE_196
040C7A 00          1962**       db %00000000
040C7B 00          1963**       db %00000000
040C7C 00          1964**       db %00000000
040C7D FF          1965**       db %11111111
040C7E 00          1966**       db %00000000
040C7F 00          1967**       db %00000000
040C80 00          1968**       db %00000000
040C81 00          1969**       db %00000000
040C82             1970**   
040C82             1971**   ; 197 NON_PRINTABLE_197
040C82 18          1972**       db %00011000
040C83 18          1973**       db %00011000
040C84 18          1974**       db %00011000
040C85 FF          1975**       db %11111111
040C86 18          1976**       db %00011000
040C87 18          1977**       db %00011000
040C88 18          1978**       db %00011000
040C89 18          1979**       db %00011000
040C8A             1980**   
040C8A             1981**   ; 198 NON_PRINTABLE_198
040C8A 00          1982**       db %00000000
040C8B 0C          1983**       db %00001100
040C8C 3E          1984**       db %00111110
040C8D 0C          1985**       db %00001100
040C8E 7C          1986**       db %01111100
040C8F CC          1987**       db %11001100
040C90 CC          1988**       db %11001100
040C91 76          1989**       db %01110110
040C92             1990**   
040C92             1991**   ; 199 NON_PRINTABLE_199
040C92 FE          1992**       db %11111110
040C93 66          1993**       db %01100110
040C94 60          1994**       db %01100000
040C95 78          1995**       db %01111000
040C96 60          1996**       db %01100000
040C97 66          1997**       db %01100110
040C98 FE          1998**       db %11111110
040C99 1C          1999**       db %00011100
040C9A             2000**   
040C9A             2001**   ; 200 NON_PRINTABLE_200
040C9A 00          2002**       db %00000000
040C9B 00          2003**       db %00000000
040C9C 7C          2004**       db %01111100
040C9D C6          2005**       db %11000110
040C9E FE          2006**       db %11111110
040C9F C0          2007**       db %11000000
040CA0 7A          2008**       db %01111010
040CA1 1E          2009**       db %00011110
040CA2             2010**   
040CA2             2011**   ; 201 NON_PRINTABLE_201
040CA2 48          2012**       db %01001000
040CA3 78          2013**       db %01111000
040CA4 84          2014**       db %10000100
040CA5 60          2015**       db %01100000
040CA6 18          2016**       db %00011000
040CA7 84          2017**       db %10000100
040CA8 78          2018**       db %01111000
040CA9 00          2019**       db %00000000
040CAA             2020**   
040CAA             2021**   ; 202 NON_PRINTABLE_202
040CAA 78          2022**       db %01111000
040CAB 00          2023**       db %00000000
040CAC 7C          2024**       db %01111100
040CAD C0          2025**       db %11000000
040CAE 78          2026**       db %01111000
040CAF 0C          2027**       db %00001100
040CB0 F8          2028**       db %11111000
040CB1 00          2029**       db %00000000
040CB2             2030**   
040CB2             2031**   ; 203 NON_PRINTABLE_203
040CB2 6C          2032**       db %01101100
040CB3 FE          2033**       db %11111110
040CB4 CC          2034**       db %11001100
040CB5 18          2035**       db %00011000
040CB6 30          2036**       db %00110000
040CB7 66          2037**       db %01100110
040CB8 FE          2038**       db %11111110
040CB9 00          2039**       db %00000000
040CBA             2040**   
040CBA             2041**   ; 204 NON_PRINTABLE_204
040CBA 78          2042**       db %01111000
040CBB 00          2043**       db %00000000
040CBC FC          2044**       db %11111100
040CBD 98          2045**       db %10011000
040CBE 30          2046**       db %00110000
040CBF 64          2047**       db %01100100
040CC0 FC          2048**       db %11111100
040CC1 00          2049**       db %00000000
040CC2             2050**   
040CC2             2051**   ; 205 NON_PRINTABLE_205
040CC2 6C          2052**       db %01101100
040CC3 38          2053**       db %00111000
040CC4 00          2054**       db %00000000
040CC5 00          2055**       db %00000000
040CC6 00          2056**       db %00000000
040CC7 00          2057**       db %00000000
040CC8 00          2058**       db %00000000
040CC9 00          2059**       db %00000000
040CCA             2060**   
040CCA             2061**   ; 206 NON_PRINTABLE_206
040CCA 18          2062**       db %00011000
040CCB 00          2063**       db %00000000
040CCC 00          2064**       db %00000000
040CCD 00          2065**       db %00000000
040CCE 00          2066**       db %00000000
040CCF 00          2067**       db %00000000
040CD0 00          2068**       db %00000000
040CD1 00          2069**       db %00000000
040CD2             2070**   
040CD2             2071**   ; 207 NON_PRINTABLE_207
040CD2 00          2072**       db %00000000
040CD3 00          2073**       db %00000000
040CD4 00          2074**       db %00000000
040CD5 00          2075**       db %00000000
040CD6 00          2076**       db %00000000
040CD7 00          2077**       db %00000000
040CD8 10          2078**       db %00010000
040CD9 1C          2079**       db %00011100
040CDA             2080**   
040CDA             2081**   ; 208 NON_PRINTABLE_208
040CDA 00          2082**       db %00000000
040CDB 00          2083**       db %00000000
040CDC 00          2084**       db %00000000
040CDD 00          2085**       db %00000000
040CDE FE          2086**       db %11111110
040CDF 00          2087**       db %00000000
040CE0 00          2088**       db %00000000
040CE1 00          2089**       db %00000000
040CE2             2090**   
040CE2             2091**   ; 209 NON_PRINTABLE_209
040CE2 00          2092**       db %00000000
040CE3 38          2093**       db %00111000
040CE4 30          2094**       db %00110000
040CE5 18          2095**       db %00011000
040CE6 00          2096**       db %00000000
040CE7 00          2097**       db %00000000
040CE8 00          2098**       db %00000000
040CE9 00          2099**       db %00000000
040CEA             2100**   
040CEA             2101**   ; 210 NON_PRINTABLE_210
040CEA 00          2102**       db %00000000
040CEB 38          2103**       db %00111000
040CEC 18          2104**       db %00011000
040CED 70          2105**       db %01110000
040CEE 00          2106**       db %00000000
040CEF 00          2107**       db %00000000
040CF0 00          2108**       db %00000000
040CF1 00          2109**       db %00000000
040CF2             2110**   
040CF2             2111**   ; 211 NON_PRINTABLE_211
040CF2 00          2112**       db %00000000
040CF3 00          2113**       db %00000000
040CF4 00          2114**       db %00000000
040CF5 00          2115**       db %00000000
040CF6 00          2116**       db %00000000
040CF7 38          2117**       db %00111000
040CF8 18          2118**       db %00011000
040CF9 70          2119**       db %01110000
040CFA             2120**   
040CFA             2121**   ; 212 NON_PRINTABLE_212
040CFA 66          2122**       db %01100110
040CFB CC          2123**       db %11001100
040CFC EE          2124**       db %11101110
040CFD 00          2125**       db %00000000
040CFE 00          2126**       db %00000000
040CFF 00          2127**       db %00000000
040D00 00          2128**       db %00000000
040D01 00          2129**       db %00000000
040D02             2130**   
040D02             2131**   ; 213 NON_PRINTABLE_213
040D02 00          2132**       db %00000000
040D03 EE          2133**       db %11101110
040D04 66          2134**       db %01100110
040D05 CC          2135**       db %11001100
040D06 00          2136**       db %00000000
040D07 00          2137**       db %00000000
040D08 00          2138**       db %00000000
040D09 00          2139**       db %00000000
040D0A             2140**   
040D0A             2141**   ; 214 NON_PRINTABLE_214
040D0A 00          2142**       db %00000000
040D0B 00          2143**       db %00000000
040D0C 00          2144**       db %00000000
040D0D 00          2145**       db %00000000
040D0E 00          2146**       db %00000000
040D0F EE          2147**       db %11101110
040D10 66          2148**       db %01100110
040D11 CC          2149**       db %11001100
040D12             2150**   
040D12             2151**   ; 215 NON_PRINTABLE_215
040D12 00          2152**       db %00000000
040D13 00          2153**       db %00000000
040D14 18          2154**       db %00011000
040D15 30          2155**       db %00110000
040D16 60          2156**       db %01100000
040D17 30          2157**       db %00110000
040D18 18          2158**       db %00011000
040D19 00          2159**       db %00000000
040D1A             2160**   
040D1A             2161**   ; 216 NON_PRINTABLE_216
040D1A 00          2162**       db %00000000
040D1B 00          2163**       db %00000000
040D1C 30          2164**       db %00110000
040D1D 18          2165**       db %00011000
040D1E 0C          2166**       db %00001100
040D1F 18          2167**       db %00011000
040D20 30          2168**       db %00110000
040D21 00          2169**       db %00000000
040D22             2170**   
040D22             2171**   ; 217 NON_PRINTABLE_217
040D22 18          2172**       db %00011000
040D23 18          2173**       db %00011000
040D24 18          2174**       db %00011000
040D25 F8          2175**       db %11111000
040D26 00          2176**       db %00000000
040D27 00          2177**       db %00000000
040D28 00          2178**       db %00000000
040D29 00          2179**       db %00000000
040D2A             2180**   
040D2A             2181**   ; 218 NON_PRINTABLE_218
040D2A 00          2182**       db %00000000
040D2B 00          2183**       db %00000000
040D2C 00          2184**       db %00000000
040D2D 1F          2185**       db %00011111
040D2E 18          2186**       db %00011000
040D2F 18          2187**       db %00011000
040D30 18          2188**       db %00011000
040D31 18          2189**       db %00011000
040D32             2190**   
040D32             2191**   ; 219 NON_PRINTABLE_219
040D32 FF          2192**       db %11111111
040D33 FF          2193**       db %11111111
040D34 FF          2194**       db %11111111
040D35 FF          2195**       db %11111111
040D36 FF          2196**       db %11111111
040D37 FF          2197**       db %11111111
040D38 FF          2198**       db %11111111
040D39 FF          2199**       db %11111111
040D3A             2200**   
040D3A             2201**   ; 220 NON_PRINTABLE_220
040D3A 38          2202**       db %00111000
040D3B 64          2203**       db %01100100
040D3C F0          2204**       db %11110000
040D3D 60          2205**       db %01100000
040D3E F0          2206**       db %11110000
040D3F 64          2207**       db %01100100
040D40 38          2208**       db %00111000
040D41 00          2209**       db %00000000
040D42             2210**   
040D42             2211**   ; 221 NON_PRINTABLE_221
040D42 00          2212**       db %00000000
040D43 0C          2213**       db %00001100
040D44 FE          2214**       db %11111110
040D45 18          2215**       db %00011000
040D46 30          2216**       db %00110000
040D47 FE          2217**       db %11111110
040D48 60          2218**       db %01100000
040D49 00          2219**       db %00000000
040D4A             2220**   
040D4A             2221**   ; 222 NON_PRINTABLE_222
040D4A 60          2222**       db %01100000
040D4B 30          2223**       db %00110000
040D4C 78          2224**       db %01111000
040D4D CC          2225**       db %11001100
040D4E FC          2226**       db %11111100
040D4F CC          2227**       db %11001100
040D50 CC          2228**       db %11001100
040D51 00          2229**       db %00000000
040D52             2230**   
040D52             2231**   ; 223 NON_PRINTABLE_223
040D52 60          2232**       db %01100000
040D53 30          2233**       db %00110000
040D54 FE          2234**       db %11111110
040D55 62          2235**       db %01100010
040D56 78          2236**       db %01111000
040D57 62          2237**       db %01100010
040D58 FE          2238**       db %11111110
040D59 00          2239**       db %00000000
040D5A             2240**   
040D5A             2241**   ; 224 NON_PRINTABLE_224
040D5A 38          2242**       db %00111000
040D5B 6C          2243**       db %01101100
040D5C FE          2244**       db %11111110
040D5D 62          2245**       db %01100010
040D5E 78          2246**       db %01111000
040D5F 62          2247**       db %01100010
040D60 FE          2248**       db %11111110
040D61 00          2249**       db %00000000
040D62             2250**   
040D62             2251**   ; 225 NON_PRINTABLE_225
040D62 7C          2252**       db %01111100
040D63 C6          2253**       db %11000110
040D64 C6          2254**       db %11000110
040D65 CC          2255**       db %11001100
040D66 C6          2256**       db %11000110
040D67 D6          2257**       db %11010110
040D68 DC          2258**       db %11011100
040D69 80          2259**       db %10000000
040D6A             2260**   
040D6A             2261**   ; 226 NON_PRINTABLE_226
040D6A CC          2262**       db %11001100
040D6B 00          2263**       db %00000000
040D6C 78          2264**       db %01111000
040D6D 30          2265**       db %00110000
040D6E 30          2266**       db %00110000
040D6F 30          2267**       db %00110000
040D70 78          2268**       db %01111000
040D71 00          2269**       db %00000000
040D72             2270**   
040D72             2271**   ; 227 NON_PRINTABLE_227
040D72 00          2272**       db %00000000
040D73 C0          2273**       db %11000000
040D74 7C          2274**       db %01111100
040D75 6E          2275**       db %01101110
040D76 6C          2276**       db %01101100
040D77 6C          2277**       db %01101100
040D78 6C          2278**       db %01101100
040D79 00          2279**       db %00000000
040D7A             2280**   
040D7A             2281**   ; 228 NON_PRINTABLE_228
040D7A 76          2282**       db %01110110
040D7B D8          2283**       db %11011000
040D7C D8          2284**       db %11011000
040D7D DC          2285**       db %11011100
040D7E D8          2286**       db %11011000
040D7F D8          2287**       db %11011000
040D80 76          2288**       db %01110110
040D81 00          2289**       db %00000000
040D82             2290**   
040D82             2291**   ; 229 NON_PRINTABLE_229
040D82 00          2292**       db %00000000
040D83 00          2293**       db %00000000
040D84 6E          2294**       db %01101110
040D85 D8          2295**       db %11011000
040D86 DE          2296**       db %11011110
040D87 D8          2297**       db %11011000
040D88 6E          2298**       db %01101110
040D89 00          2299**       db %00000000
040D8A             2300**   
040D8A             2301**   ; 230 NON_PRINTABLE_230
040D8A 00          2302**       db %00000000
040D8B 00          2303**       db %00000000
040D8C CC          2304**       db %11001100
040D8D CC          2305**       db %11001100
040D8E CC          2306**       db %11001100
040D8F CC          2307**       db %11001100
040D90 F6          2308**       db %11110110
040D91 C0          2309**       db %11000000
040D92             2310**   
040D92             2311**   ; 231 NON_PRINTABLE_231
040D92 60          2312**       db %01100000
040D93 30          2313**       db %00110000
040D94 CC          2314**       db %11001100
040D95 CC          2315**       db %11001100
040D96 CC          2316**       db %11001100
040D97 CC          2317**       db %11001100
040D98 78          2318**       db %01111000
040D99 00          2319**       db %00000000
040D9A             2320**   
040D9A             2321**   ; 232 NON_PRINTABLE_232
040D9A 78          2322**       db %01111000
040D9B CC          2323**       db %11001100
040D9C 00          2324**       db %00000000
040D9D CC          2325**       db %11001100
040D9E CC          2326**       db %11001100
040D9F CC          2327**       db %11001100
040DA0 78          2328**       db %01111000
040DA1 00          2329**       db %00000000
040DA2             2330**   
040DA2             2331**   ; 233 NON_PRINTABLE_233
040DA2 CC          2332**       db %11001100
040DA3 00          2333**       db %00000000
040DA4 CC          2334**       db %11001100
040DA5 CC          2335**       db %11001100
040DA6 78          2336**       db %01111000
040DA7 30          2337**       db %00110000
040DA8 78          2338**       db %01111000
040DA9 00          2339**       db %00000000
040DAA             2340**   
040DAA             2341**   ; 234 NON_PRINTABLE_234
040DAA 60          2342**       db %01100000
040DAB E0          2343**       db %11100000
040DAC 60          2344**       db %01100000
040DAD 60          2345**       db %01100000
040DAE F0          2346**       db %11110000
040DAF 00          2347**       db %00000000
040DB0 00          2348**       db %00000000
040DB1 00          2349**       db %00000000
040DB2             2350**   
040DB2             2351**   ; 235 NON_PRINTABLE_235
040DB2 70          2352**       db %01110000
040DB3 D8          2353**       db %11011000
040DB4 30          2354**       db %00110000
040DB5 D8          2355**       db %11011000
040DB6 70          2356**       db %01110000
040DB7 00          2357**       db %00000000
040DB8 00          2358**       db %00000000
040DB9 00          2359**       db %00000000
040DBA             2360**   
040DBA             2361**   ; 236 NON_PRINTABLE_236
040DBA CC          2362**       db %11001100
040DBB 00          2363**       db %00000000
040DBC CC          2364**       db %11001100
040DBD 78          2365**       db %01111000
040DBE 30          2366**       db %00110000
040DBF 30          2367**       db %00110000
040DC0 78          2368**       db %01111000
040DC1 00          2369**       db %00000000
040DC2             2370**   
040DC2             2371**   ; 237 NON_PRINTABLE_237
040DC2 06          2372**       db %00000110
040DC3 06          2373**       db %00000110
040DC4 36          2374**       db %00110110
040DC5 66          2375**       db %01100110
040DC6 FE          2376**       db %11111110
040DC7 60          2377**       db %01100000
040DC8 30          2378**       db %00110000
040DC9 00          2379**       db %00000000
040DCA             2380**   
040DCA             2381**   ; 238 NON_PRINTABLE_238
040DCA 10          2382**       db %00010000
040DCB 38          2383**       db %00111000
040DCC 7C          2384**       db %01111100
040DCD FE          2385**       db %11111110
040DCE 7C          2386**       db %01111100
040DCF 38          2387**       db %00111000
040DD0 10          2388**       db %00010000
040DD1 00          2389**       db %00000000
040DD2             2390**   
040DD2             2391**   ; 239 NON_PRINTABLE_239
040DD2 A0          2392**       db %10100000
040DD3 A0          2393**       db %10100000
040DD4 E0          2394**       db %11100000
040DD5 AE          2395**       db %10101110
040DD6 A4          2396**       db %10100100
040DD7 04          2397**       db %00000100
040DD8 04          2398**       db %00000100
040DD9 04          2399**       db %00000100
040DDA             2400**   
040DDA             2401**   ; 240 NON_PRINTABLE_240
040DDA 80          2402**       db %10000000
040DDB 80          2403**       db %10000000
040DDC 80          2404**       db %10000000
040DDD 8E          2405**       db %10001110
040DDE E8          2406**       db %11101000
040DDF 0C          2407**       db %00001100
040DE0 08          2408**       db %00001000
040DE1 08          2409**       db %00001000
040DE2             2410**   
040DE2             2411**   ; 241 NON_PRINTABLE_241
040DE2 30          2412**       db %00110000
040DE3 30          2413**       db %00110000
040DE4 FC          2414**       db %11111100
040DE5 30          2415**       db %00110000
040DE6 30          2416**       db %00110000
040DE7 00          2417**       db %00000000
040DE8 FC          2418**       db %11111100
040DE9 00          2419**       db %00000000
040DEA             2420**   
040DEA             2421**   ; 242 NON_PRINTABLE_242
040DEA 60          2422**       db %01100000
040DEB 30          2423**       db %00110000
040DEC 18          2424**       db %00011000
040DED 30          2425**       db %00110000
040DEE 60          2426**       db %01100000
040DEF 00          2427**       db %00000000
040DF0 FC          2428**       db %11111100
040DF1 00          2429**       db %00000000
040DF2             2430**   
040DF2             2431**   ; 243 NON_PRINTABLE_243
040DF2 18          2432**       db %00011000
040DF3 30          2433**       db %00110000
040DF4 60          2434**       db %01100000
040DF5 30          2435**       db %00110000
040DF6 18          2436**       db %00011000
040DF7 00          2437**       db %00000000
040DF8 FC          2438**       db %11111100
040DF9 00          2439**       db %00000000
040DFA             2440**   
040DFA             2441**   ; 244 NON_PRINTABLE_244
040DFA 08          2442**       db %00001000
040DFB 14          2443**       db %00010100
040DFC 10          2444**       db %00010000
040DFD 10          2445**       db %00010000
040DFE 10          2446**       db %00010000
040DFF 10          2447**       db %00010000
040E00 10          2448**       db %00010000
040E01 10          2449**       db %00010000
040E02             2450**   
040E02             2451**   ; 245 NON_PRINTABLE_245
040E02 10          2452**       db %00010000
040E03 10          2453**       db %00010000
040E04 10          2454**       db %00010000
040E05 10          2455**       db %00010000
040E06 10          2456**       db %00010000
040E07 50          2457**       db %01010000
040E08 20          2458**       db %00100000
040E09 00          2459**       db %00000000
040E0A             2460**   
040E0A             2461**   ; 246 NON_PRINTABLE_246
040E0A 00          2462**       db %00000000
040E0B 30          2463**       db %00110000
040E0C 00          2464**       db %00000000
040E0D FC          2465**       db %11111100
040E0E 00          2466**       db %00000000
040E0F 30          2467**       db %00110000
040E10 00          2468**       db %00000000
040E11 00          2469**       db %00000000
040E12             2470**   
040E12             2471**   ; 247 NON_PRINTABLE_247
040E12 00          2472**       db %00000000
040E13 76          2473**       db %01110110
040E14 DC          2474**       db %11011100
040E15 00          2475**       db %00000000
040E16 76          2476**       db %01110110
040E17 DC          2477**       db %11011100
040E18 00          2478**       db %00000000
040E19 00          2479**       db %00000000
040E1A             2480**   
040E1A             2481**   ; 248 NON_PRINTABLE_248
040E1A 70          2482**       db %01110000
040E1B D8          2483**       db %11011000
040E1C 70          2484**       db %01110000
040E1D 00          2485**       db %00000000
040E1E 00          2486**       db %00000000
040E1F 00          2487**       db %00000000
040E20 00          2488**       db %00000000
040E21 00          2489**       db %00000000
040E22             2490**   
040E22             2491**   ; 249 NON_PRINTABLE_249
040E22 00          2492**       db %00000000
040E23 00          2493**       db %00000000
040E24 00          2494**       db %00000000
040E25 30          2495**       db %00110000
040E26 30          2496**       db %00110000
040E27 00          2497**       db %00000000
040E28 00          2498**       db %00000000
040E29 00          2499**       db %00000000
040E2A             2500**   
040E2A             2501**   ; 250 NON_PRINTABLE_250
040E2A 00          2502**       db %00000000
040E2B 00          2503**       db %00000000
040E2C 00          2504**       db %00000000
040E2D 18          2505**       db %00011000
040E2E 18          2506**       db %00011000
040E2F 00          2507**       db %00000000
040E30 00          2508**       db %00000000
040E31 00          2509**       db %00000000
040E32             2510**   
040E32             2511**   ; 251 NON_PRINTABLE_251
040E32 1F          2512**       db %00011111
040E33 10          2513**       db %00010000
040E34 10          2514**       db %00010000
040E35 90          2515**       db %10010000
040E36 50          2516**       db %01010000
040E37 30          2517**       db %00110000
040E38 10          2518**       db %00010000
040E39 00          2519**       db %00000000
040E3A             2520**   
040E3A             2521**   ; 252 NON_PRINTABLE_252
040E3A A0          2522**       db %10100000
040E3B D0          2523**       db %11010000
040E3C 90          2524**       db %10010000
040E3D 90          2525**       db %10010000
040E3E 90          2526**       db %10010000
040E3F 00          2527**       db %00000000
040E40 00          2528**       db %00000000
040E41 00          2529**       db %00000000
040E42             2530**   
040E42             2531**   ; 253 NON_PRINTABLE_253
040E42 70          2532**       db %01110000
040E43 D8          2533**       db %11011000
040E44 30          2534**       db %00110000
040E45 60          2535**       db %01100000
040E46 F8          2536**       db %11111000
040E47 00          2537**       db %00000000
040E48 00          2538**       db %00000000
040E49 00          2539**       db %00000000
040E4A             2540**   
040E4A             2541**   ; 254 NON_PRINTABLE_254
040E4A 00          2542**       db %00000000
040E4B 00          2543**       db %00000000
040E4C 3C          2544**       db %00111100
040E4D 3C          2545**       db %00111100
040E4E 3C          2546**       db %00111100
040E4F 3C          2547**       db %00111100
040E50 00          2548**       db %00000000
040E51 00          2549**       db %00000000
040E52             2550**   
040E52             2551**   ; 255 NON_PRINTABLE_255
040E52 A0          2552**       db %10100000
040E53 A0          2553**       db %10100000
040E54 A0          2554**       db %10100000
040E55 AE          2555**       db %10101110
040E56 44          2556**       db %01000100
040E57 04          2557**       db %00000100
040E58 04          2558**       db %00000100
040E59 04          2559**       db %00000100
040E5A             2560**   
040E5A             0005*        ; incbin "../fonts/Lat2-VGA8_8x8.font"
040E5A             0006*    font_data_end:
040E5A             0007*    font_load:
040E5A             0008*    ; load font into a buffer
040E5A 21 10 FA 00 0009*        ld hl,Lat2_VGA8_8x8
040E5E 11 5A 06 04 0010*        ld de,font_data
040E62 01 00 08 00 0011*        ld bc,font_data_end-font_data
040E66 CD 83 1D 04 0012*        call vdu_load_buffer
040E6A             0013*    ; create font from buffer
040E6A 21 10 FA 00 0014*        ld hl,Lat2_VGA8_8x8
040E6E 1E 08       0015*        ld e,8
040E70 16 08       0016*        ld d,8
040E72 3E 00       0017*        ld a,0 ; flags
040E74 CD 85 20 04 0018*        call vdu_font_create
040E78             0019*    ; all done
040E78 C9          0020*        ret
040E79             0036         include "fixed168.inc"
040E79             0001*    ; multiply a signed 24-bit number by an unsigned 8-bit number giving a signed 24-bit result
040E79             0002*    ; uses EZ80 MLT instruction for speed
040E79             0003*    ; operation: UHL * A --> UHL
040E79             0004*    ; destroys: AF, HL
040E79             0005*    smul24x8:
040E79             0006*    ; make hl positive and store sign flag
040E79 CD 05 05 04 0007*        call hlu_abs
040E7D F5          0008*        push af
040E7E             0009*    ; do the division
040E7E CD 89 0E 04 0010*        call mul24x8 ; hl = product
040E82             0011*    ; adjust sign of result
040E82 F1          0012*        pop af ; sign de
040E83 F0          0013*        ret p ; hl was positive, nothing to do
040E84 CD 15 05 04 0014*        call neg_hlu ; result is negative
040E88 C9          0015*        ret
040E89             0016*    
040E89             0017*    ; unsigned multiplication of a 24-bit and 8-bit number giving a 32-bit result
040E89             0018*    ; uses EZ80 MLT instruction for speed
040E89             0019*    ; operation: UHL * A --> AUHL
040E89             0020*    ; destroys: AF, HL
040E89             0021*    mul24x8:
040E89 D5          0022*        push de ; preserve de
040E8A             0023*    ; low byte
040E8A 5D          0024*        ld e,l
040E8B 57          0025*        ld d,a
040E8C ED 5C       0026*        mlt de
040E8E 6B          0027*        ld l,e ; product low byte
040E8F 08          0028*        ex af,af' ; save multiplier
040E90 7A          0029*        ld a,d ; carry
040E91 08          0030*        ex af,af' ; save carry, restore multiplier
040E92             0031*    ; high byte
040E92 5C          0032*        ld e,h
040E93 57          0033*        ld d,a
040E94 ED 5C       0034*        mlt de
040E96 08          0035*        ex af,af' ; save multiplier, restore carry
040E97 83          0036*        add a,e ; add carry
040E98 67          0037*        ld h,a ; product middle byte
040E99 7A          0038*        ld a,d ; carry
040E9A 08          0039*        ex af,af' ; save carry, restore multiplier
040E9B             0040*    ; upper byte
040E9B 22 B6 0E 04 0041*        ld (@scratch),hl ; 7 cycles
040E9F 5F          0042*        ld e,a
040EA0 3A B8 0E 04 0043*        ld a,(@scratch+2)
040EA4 57          0044*        ld d,a
040EA5 ED 5C       0045*        mlt de
040EA7 08          0046*        ex af,af' ; restore carry
040EA8 8B          0047*        adc a,e ; add carry
040EA9 32 B8 0E 04 0048*        ld (@scratch+2),a ; 5 cycles
040EAD 2A B6 0E 04 0049*        ld hl,(@scratch) ; 7 cycles
040EB1             0050*    ; highest byte
040EB1 3E 00       0051*        ld a,0 ; preserve carry flag
040EB3 8A          0052*        adc a,d ; product highest byte
040EB4 D1          0053*        pop de ; restore de
040EB5 C9          0054*        ret
040EB6             0055*    @scratch: ds 3
040EB9             0056*    
       FF FF FF 
040EB9 00 00 00 00 0057*    mul24out: blkb 6,0
       00 00       
040EBF             0058*    
040EBF             0059*    ; unsigned multiplication of two 24-bit numbers giving a 48-bit result
040EBF             0060*    ; operation: UHL * UDE --> mul24out
040EBF             0061*    mul24:
040EBF DD E5       0062*        push ix ; preserve
040EC1             0063*    ; point to output buffer and clear it
040EC1 DD 21 B9 0E 0064*        ld ix,mul24out
       04          
040EC6 C5          0065*        push bc
040EC7 01 00 00 00 0066*        ld bc,0
040ECB DD 0F 00    0067*        ld (ix),bc
040ECE DD 0F 03    0068*        ld (ix+3),bc
040ED1 C1          0069*        pop bc
040ED2             0070*    ; STEP 1: UHL * E
040ED2 7B          0071*        ld a,e
040ED3 E5          0072*        push hl
040ED4 CD 89 0E 04 0073*        call mul24x8
040ED8 DD 2F 00    0074*        ld (ix+0),hl
040EDB DD 77 03    0075*        ld (ix+3),a
040EDE             0076*    ; STEP 2: UHL * D
040EDE E1          0077*        pop hl
040EDF E5          0078*        push hl
040EE0 7A          0079*        ld a,d
040EE1 CD 89 0E 04 0080*        call mul24x8
040EE5 CD FE 0E 04 0081*        call @accumulate
040EE9             0082*    ; STEP 3: UHL * DEU
040EE9 E1          0083*        pop hl
040EEA ED 53 2E 0F 0084*        ld (@de),de
       04          
040EEF 3A 30 0F 04 0085*        ld a,(@de+2)
040EF3 CD 89 0E 04 0086*        call mul24x8
040EF7 CD FE 0E 04 0087*        call @accumulate
040EFB             0088*    ; all done
040EFB DD E1       0089*        pop ix ; restore
040EFD C9          0090*        ret
040EFE             0091*    @accumulate:
040EFE DD 23       0092*        inc ix
040F00             0093*    ; highest byte of product to carry
040F00 DD 77 03    0094*        ld (ix+3),a
040F03             0095*    ; low byte of product
040F03 7D          0096*        ld a,l
040F04 DD 86 00    0097*        add a,(ix+0)
040F07 DD 77 00    0098*        ld (ix+0),a
040F0A             0099*    ; high byte of product
040F0A 7C          0100*        ld a,h
040F0B DD 8E 01    0101*        adc a,(ix+1)
040F0E DD 77 01    0102*        ld (ix+1),a
040F11             0103*    ; uppper byte of product
040F11 22 2B 0F 04 0104*        ld (@hl),hl
040F15 3A 2D 0F 04 0105*        ld a,(@hl+2)
040F19 DD 8E 02    0106*        adc a,(ix+2)
040F1C DD 77 02    0107*        ld (ix+2),a
040F1F             0108*    ; carry
040F1F 3E 00       0109*        ld a,0 ; preserve flags
040F21 DD 8E 03    0110*        adc a,(ix+3)
040F24 DD 77 03    0111*        ld (ix+3),a
040F27 C9          0112*        ret
040F28             0113*    
040F28 00 00 00    0114*    @ix: dl 0
040F2B 00 00 00    0115*    @hl: dl 0
040F2E 00 00 00    0116*    @de: dl 0
040F31             0117*    
040F31             0118*    ; ; UHL * UDE --> UHL (unsigned)
040F31             0119*    ; umul24:
040F31             0120*    ;     call mul24
040F31             0121*    ;     ld hl,(mul24out)
040F31             0122*    ;     ret
040F31             0123*    
040F31             0124*    ; UH.L = UH.L*UD.E (unsigned)
040F31             0125*    umul168:
040F31 CD BF 0E 04 0126*        call mul24
040F35 2A BA 0E 04 0127*        ld hl,(mul24out+1)
040F39 C9          0128*        ret
040F3A             0129*    
040F3A             0130*    ; UH.L * UD.E --> UH.L (signed)
040F3A             0131*    smul168:
040F3A             0132*    ; make everything positive and store sign flags
040F3A CD 05 05 04 0133*        call hlu_abs
040F3E F5          0134*        push af
040F3F EB          0135*        ex de,hl
040F40 CD 05 05 04 0136*        call hlu_abs
040F44 EB          0137*        ex de,hl
040F45 F5          0138*        push af
040F46             0139*    ; do the division
040F46 CD 31 0F 04 0140*        call umul168 ; hl = product
040F4A             0141*    ; adjust sign of result
040F4A F1          0142*        pop af ; sign de
040F4B FA 56 0F 04 0143*        jp m,@de_neg
040F4F F1          0144*        pop af ; sign hl
040F50 F0          0145*        ret p ; both positive, nothing to do
040F51             0146*    @hl_neg:
040F51 CD 15 05 04 0147*        call neg_hlu ; de pos, hl neg, result is negative
040F55 C9          0148*        ret
040F56             0149*    @de_neg:
040F56 F1          0150*        pop af
040F57 F8          0151*        ret m ; both negative, nothing to do
040F58 CD 15 05 04 0152*        call neg_hlu ; result is negative
040F5C C9          0153*        ret
040F5D             0154*    
040F5D             0155*    ; UH.L / UD.E --> UD.E rem UHL (unsigned)
040F5D             0156*    ; perform unsigned division of 16.8 fixed place values
040F5D             0157*    ; with an unsigned 16.8 fixed place result and 24-bit remainder
040F5D             0158*    udiv168:
040F5D             0159*    ; back up divisor
040F5D ED 53 94 0F 0160*        ld (@ude),de
       04          
040F62             0161*    ; get the 16-bit integer part of the quotient
040F62 CD ED 03 04 0162*        call udiv24 ; de = quotient, hl = remainder
040F66             0163*    ; load quotient to upper three bytes of output
040F66 ED 53 9B 0F 0164*        ld (div168_out+1),de
       04          
040F6B             0165*    @div256:
040F6B             0166*    ; multiply remainder by 256
040F6B             0167*        hlu_mul256
                       M1 Args: none
040F6B 29          0001*M1      add hl,hl ; * 2
040F6C 29          0002*M1      add hl,hl ; * 4
040F6D 29          0003*M1      add hl,hl ; * 8
040F6E 29          0004*M1      add hl,hl ; * 16
040F6F 29          0005*M1      add hl,hl ; * 32
040F70 29          0006*M1      add hl,hl ; * 64
040F71 29          0007*M1      add hl,hl ; * 128
040F72 29          0008*M1      add hl,hl ; * 256
040F73             0168*    ; skip fractional computation if remainder is zero
040F73             0169*        SIGN_HLU
                       M1 Args: none
040F73 19          0001*M1      add hl,de ; 1 cycle
040F74 B7          0002*M1      or a ; clear flags ; 1 cycle
040F75 ED 52       0003*M1      sbc hl,de ; 2 cycles
040F77             0004*M1      ; 4 cycles total
040F77 20 03       0170*        jr nz,@div_frac
040F79 AF          0171*        xor a
040F7A 18 0A       0172*        jr @write_frac
040F7C             0173*    ; now divide the shifted remainder by the divisor
040F7C             0174*    @div_frac:
040F7C ED 5B 94 0F 0175*        ld de,(@ude) ; get back divisor
       04          
040F81 CD ED 03 04 0176*        call udiv24 ; de = quotient, hl = remainder
040F85             0177*    ; load low byte of quotient to low byte of output
040F85 7B          0178*        ld a,e
040F86             0179*    @write_frac:
040F86 32 9A 0F 04 0180*        ld (div168_out),a
040F8A             0181*    ; load de with return value
040F8A ED 5B 9A 0F 0182*        ld de,(div168_out)
       04          
040F8F             0183*    ; load a with any overflow
040F8F 3A 9D 0F 04 0184*        ld a,(div168_out+3)
040F93 C9          0185*        ret ; ud.e is the 16.8 result
040F94             0186*    @ude: ds 6
040F9A             0187*    div168_out: ds 4 ; the extra byte is for overflow
040F9E             0188*    
040F9E             0189*    ; UH.L / UD.E --> UD.E (signed) rem UHL (unsigned)
040F9E             0190*    ; perform signed division of 16.8 fixed place values
040F9E             0191*    ; with a signed 16.8 fixed place result and unsigned 24-bit remainder
040F9E             0192*    sdiv168:
040F9E             0193*    ; make everything positive and store sign flags
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
040F9E CD 05 05 04 0194*        call hlu_abs
040FA2 F5          0195*        push af
040FA3 EB          0196*        ex de,hl
040FA4 CD 05 05 04 0197*        call hlu_abs
040FA8 EB          0198*        ex de,hl
040FA9 F5          0199*        push af
040FAA             0200*    ; do the division
040FAA CD 5D 0F 04 0201*        call udiv168 ; de = quotient, hl = remainder
040FAE             0202*    ; adjust sign of result
040FAE F1          0203*        pop af ; sign de
040FAF FA BC 0F 04 0204*        jp m,@de_neg
040FB3 F1          0205*        pop af ; sign hl
040FB4 F0          0206*        ret p ; both positive, nothing to do
040FB5             0207*    @hl_neg:
040FB5 EB          0208*        ex de,hl ; hl = quotient, de = remainder
040FB6 CD 15 05 04 0209*        call neg_hlu ; de pos, hl neg, result is negative
040FBA EB          0210*        ex de,hl ; de = negated quotient, hl = remainder
040FBB C9          0211*        ret
040FBC             0212*    @de_neg:
040FBC F1          0213*        pop af
040FBD F8          0214*        ret m ; both negative, nothing to do
040FBE EB          0215*        ex de,hl ; hl = quotient, de = remainder
040FBF CD 15 05 04 0216*        call neg_hlu ; result is negative
040FC3 EB          0217*        ex de,hl ; de = negated quotient, hl = remainder
040FC4 C9          0218*        ret
040FC5             0219*    
040FC5             0220*    ; convert signed angles from a 360 to 256 degree circle
040FC5             0221*    ; inputs: uh.l is the angle360 in 16.8 fixed format
040FC5             0222*    ; outputs: uh.l is the angle256 in 16.8 fixed format
040FC5             0223*    ; destroys: TODO
040FC5             0224*    deg_360_to_256:
040FC5 D5          0225*        push de ; preserve de
040FC6             0226*    ; make angle positive and store sign flag
040FC6 CD 05 05 04 0227*        call hlu_abs
040FCA F5          0228*        push af
040FCB             0229*    ; multiply by coversion factor of 256/360
040FCB 11 B6 00 00 0230*        ld de,0x0000B6 ; 0.711
040FCF CD 31 0F 04 0231*        call umul168 ; uh.l = uh.l * 0.711
040FD3             0232*    ; restore sign flag and adjust output accordingly
040FD3 F1          0233*        pop af
040FD4 F2 DC 0F 04 0234*        jp p,@pos ; positive number
040FD8 CD 15 05 04 0235*        call neg_hlu
040FDC             0236*    @pos:
040FDC             0237*    ; restore de and return uh.l as the result
040FDC D1          0238*        pop de
040FDD C9          0239*        ret
040FDE             0240*    
040FDE             0241*    ; convert signed angles from a 256 to 360 degree circle
040FDE             0242*    ; inputs: uh.l is the angle256 in 16.8 fixed format
040FDE             0243*    ; outputs: uh.l is the angle360 in 16.8 fixed format
040FDE             0244*    ; destroys: TODO
040FDE             0245*    deg_256_to_360:
040FDE D5          0246*        push de ; preserve de
040FDF             0247*    ; make angle positive and store sign flag
040FDF CD 05 05 04 0248*        call hlu_abs
040FE3 F5          0249*        push af
040FE4             0250*    ; multiply by coversion factor of 360/256
040FE4 11 68 01 00 0251*        ld de,0x000168 ; 1.406
040FE8 CD 31 0F 04 0252*        call umul168 ; uh.l = uh.l * 1.406
040FEC             0253*    ; restore sign flag and adjust output accordingly
040FEC F1          0254*        pop af
040FED F2 F5 0F 04 0255*        jp p,@pos ; positive number
040FF1 CD 15 05 04 0256*        call neg_hlu
040FF5             0257*    @pos:
040FF5             0258*    ; restore de and return uh.l as the result
040FF5 D1          0259*        pop de
040FF6 C9          0260*        ret
040FF7             0261*    
040FF7             0262*    ; fixed 16.8 routine
040FF7             0263*    ; cos(uh.l) --> uh.l
040FF7             0264*    ; destroys: f, hl
040FF7             0265*    cos168:
040FF7 D5          0266*        push de ; preserve de
040FF8             0267*    ; for cos we simply increment the angle by 90 degrees
040FF8             0268*    ; or 0x004000 in 16.8 degrees256
040FF8             0269*    ; which makes it a sin problem
040FF8 11 00 40 00 0270*        ld de,0x004000
040FFC 19          0271*        add hl,de ; modulo 256 happens below
040FFD D1          0272*        pop de ; restore de
040FFE             0273*    ; fall through to sin168
040FFE             0274*    
040FFE             0275*    ; ---------------------
040FFE             0276*    ; fixed 16.8 routine
040FFE             0277*    ; sin(uh.l) --> uh.l
040FFE             0278*    ; destroys: f, hl
040FFE             0279*    sin168:
040FFE D5          0280*        push de
040FFF             0281*    ; handle negative angles appropriately
040FFF CD 05 05 04 0282*        call hlu_abs
041003 F2 0C 10 04 0283*        jp p,@F
041007 11 00 00 FF 0284*        ld de,-256*256
04100B 19          0285*        add hl,de
04100C             0286*    @@:
04100C 2E 03       0287*        ld l,3 ; multiply by 3 to get our lookup index
04100E ED 6C       0288*        mlt hl
041010 11 C4 12 04 0289*        ld de,sin_lut_168 ; grab the lut address
041014 19          0290*        add hl,de ; bump hl by the index
041015 ED 27       0291*        ld hl,(hl) ; don't try this on a z80!
041017 D1          0292*        pop de
041018 C9          0293*        ret
041019             0294*    
041019             0295*    ; 16.8 fixed inputs / outputs
041019             0296*    ; takes: uh.l as angle in degrees 256
041019             0297*    ;        ud.e as radius
041019             0298*    ; returns ub.c as dx, ud.e as dy, uh.l as radius
041019             0299*    ;        displacements from origin (0,0)
041019             0300*    ; destroys: everything except indexes
041019             0301*    polar_to_cartesian:
041019             0302*    ; back up input parameters
041019 22 48 10 04 0303*        ld (@angle), hl
04101D ED 53 4B 10 0304*        ld (@radius), de
       04          
041022             0305*    ; compute dx = sin(uh.l) * ud.e
041022 CD FE 0F 04 0306*        call sin168 ; uh.l = sin(uh.l)
041026 ED 5B 4B 10 0307*        ld de,(@radius)
       04          
04102B CD 3A 0F 04 0308*        call smul168 ; uh.l = dx
04102F E5          0309*        push hl
041030             0310*    ; compute dy = -cos(uh.l) * ud.e
041030 2A 48 10 04 0311*        ld hl,(@angle)
041034 CD F7 0F 04 0312*        call cos168 ; uh.l = cos(uh.l)
041038 ED 5B 4B 10 0313*        ld de,(@radius)
       04          
04103D CD 3A 0F 04 0314*        call smul168 ; uh.l = dy
041041 CD 15 05 04 0315*        call neg_hlu ; invert dy for screen coords convention
041045 EB          0316*        ex de,hl ; de = dy for output
041046 C1          0317*        pop bc ; bc = dx for output
041047             0318*    ; and out
041047 C9          0319*        ret
041048             0320*    @angle: ds 3
04104B             0321*    @radius: ds 3
04104E             0322*    
04104E             0323*    ; 16.8 fixed inputs / outputs
04104E             0324*    ; inputs: ub.c as dx, ud.e as dy
04104E             0325*    ;        displacements from origin (0,0)
04104E             0326*    ; returns: uh.l as angle in degrees 256
04104E             0327*    ;        ud.e as radius
04104E             0328*    ; destroys: everything except indexes
04104E             0329*    cartesian_to_polar:
       FF FF FF FF 
       FF FF 
04104E ED 43 A7 10 0330*        ld (dx168),bc ; dx argument for distance168
       04          
041053 ED 53 AD 10 0331*        ld (dy168),de ; dy argument for distance168
       04          
041058             0332*    ; compute radius
041058 CD B3 10 04 0333*        call distance168 ; uh.l = radius
04105C E5          0334*        push hl ; save radius
04105D             0335*    ; compute angle
04105D ED 4B A7 10 0336*        ld bc,(dx168) ; dx argument for atan2_168fast
       04          
041062 ED 5B AD 10 0337*        ld de,(dy168) ; dy argument for atan2_168fast
       04          
041067 CD 13 11 04 0338*        call atan2_168fast ; uh.l = angle
04106B             0339*    ; return result
04106B D1          0340*        pop de ; de = radius (was hl)
04106C C9          0341*        ret
04106D             0342*    ; end cartesian_to_polar
04106D             0343*    
04106D             0344*    ; 16.8 fixed inputs / outputs
04106D             0345*    ; inputs: ub.c as dx, ud.e as dy
04106D             0346*    ;        displacements from origin (0,0)
04106D             0347*    ; returns: uh.l as angle in degrees 256
04106D             0348*    ;        ud.e as radius
04106D             0349*    ; destroys: everything except indexes
04106D             0350*    ; note: uses distance168sm which is more accurate for small deltas
04106D             0351*    cartesian_to_polar_sm:
04106D ED 43 A7 10 0352*        ld (dx168),bc ; dx argument for distance168
       04          
041072 ED 53 AD 10 0353*        ld (dy168),de ; dy argument for distance168
       04          
041077             0354*    ; compute radius
041077 CD EE 10 04 0355*        call distance168sm ; uh.l = radius
04107B E5          0356*        push hl ; save radius
04107C             0357*    ; compute angle
04107C ED 4B A7 10 0358*        ld bc,(dx168) ; dx argument for atan2_168fast
       04          
041081 ED 5B AD 10 0359*        ld de,(dy168) ; dy argument for atan2_168fast
       04          
041086 CD 13 11 04 0360*        call atan2_168fast ; uh.l = angle
04108A             0361*    ; return result
04108A D1          0362*        pop de ; de = radius (was hl)
04108B C9          0363*        ret
04108C             0364*    ; end cartesian_to_polar
04108C             0365*    
04108C             0366*    ; inputs: ub.c and ud.e are x0 and y0 in 16.8 fixed format
04108C             0367*    ;         ui.x and ui.y are x1 and y1 in 16.8 fixed format
04108C             0368*    ; output: ub.c and ud.e are dx and dy in 16.8 fixed format
04108C             0369*    ;         also populates scratch locations dx168 and dy168
04108C             0370*    ; destroys: a,hl,bc,de
04108C             0371*    dxy168:
04108C             0372*    ; compute dx = x1-x0
04108C AF          0373*        xor a ; clear carry
04108D DD E5       0374*        push ix ; move ix to hl via the stack
04108F E1          0375*        pop hl ; hl = x1
041090 ED 42       0376*        sbc hl,bc ; hl = dx
041092 22 A7 10 04 0377*        ld (dx168),hl ; dx to scratch
041096             0378*    ; compute dy = y1-y0
041096 AF          0379*        xor a ; clear carry
041097 FD E5       0380*        push iy ; move iy to hl via the stack
041099 E1          0381*        pop hl ; hl = y1
04109A ED 52       0382*        sbc hl,de ; hl = dy
04109C 22 AD 10 04 0383*        ld (dy168),hl ; dy to scratch
0410A0             0384*    ; populate output registers and return
0410A0 EB          0385*        ex de,hl ; ud.e = dy
0410A1 ED 4B A7 10 0386*        ld bc,(dx168) ; ub.c = dx
       04          
0410A6 C9          0387*        ret
0410A7 00 00 00 00 0388*    dx168: blkb 6,0
       00 00       
0410AD 00 00 00 00 0389*    dy168: blkb 6,0
       00 00       
0410B3             0390*    
0410B3             0391*    ; compute the euclidian distance between two cartesian coordinates
0410B3             0392*    ; using the formula d = sqrt(dx^2+dy^2)
0410B3             0393*    ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
0410B3             0394*    ; output; uh.l is the 16.8 fixed format distance
0410B3             0395*    ;         also populates scratch locations dx168 and dy168
0410B3             0396*    ; destroys: a,hl,bc,de
0410B3             0397*    ; NOTE: rounds both deltas down to the nearest integer to avoid overflow when squaring,
0410B3             0398*    ;       thus the result will always be an integer, albeit in 16.8 format
0410B3             0399*    distance168:
0410B3             0400*    ; compute dy^2
0410B3 2A AD 10 04 0401*        ld hl,(dy168)
0410B7 CD 05 05 04 0402*        call hlu_abs
0410BB             0403*        ; call hlu_udiv256 ; make integer to avoid overflow
0410BB             0404*        SRL_UHL ; make integer to avoid overflow
                       M1 Args: none
0410BB 3B          0001*M1      dec sp ; 1 cycle
0410BC E5          0002*M1      push hl ; 4 cycles
0410BD 33          0003*M1      inc sp ; 1 cycle
0410BE E1          0004*M1      pop hl ; 4 cycles
0410BF 23          0005*M1      inc hl ; 1 cycle
0410C0 52 2B       0006*M1      dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
0410C2             0007*M1      ; 13 cycles total
0410C2 E5          0405*        push hl
0410C3 D1          0406*        pop de
0410C4 CD D4 03 04 0407*        call umul24 ; hl = dy^2
0410C8 E5          0408*        push hl ; save dy^2
0410C9             0409*    ; compute dx^2
0410C9 2A A7 10 04 0410*        ld hl,(dx168)
0410CD CD 05 05 04 0411*        call hlu_abs
0410D1             0412*        ; call hlu_udiv256 ; make integer to avoid overflow
0410D1             0413*        SRL_UHL ; make integer to avoid overflow
                       M1 Args: none
0410D1 3B          0001*M1      dec sp ; 1 cycle
0410D2 E5          0002*M1      push hl ; 4 cycles
0410D3 33          0003*M1      inc sp ; 1 cycle
0410D4 E1          0004*M1      pop hl ; 4 cycles
0410D5 23          0005*M1      inc hl ; 1 cycle
0410D6 52 2B       0006*M1      dec.s hl ; 2 cycles <-- the .s sets hlu to zero (undocumented)
0410D8             0007*M1      ; 13 cycles total
0410D8 E5          0414*        push hl
0410D9 D1          0415*        pop de
0410DA CD D4 03 04 0416*        call umul24 ; hl = dx^2
0410DE             0417*    ; add dx^2 and dy^2
0410DE D1          0418*        pop de ; de = dy^2 (was hl)
0410DF 19          0419*        add hl,de ; hl = dx^2 + dy^2
0410E0             0420*    ; compute the square root
0410E0 CD DE 11 04 0421*        call sqrt24 ; de = sqrt(dx^2 + dy^2)
0410E4 EB          0422*        ex de,hl ; hl = distance
0410E5             0423*        hlu_mul256 ; convert back to 16.8 fixed
                       M1 Args: none
0410E5 29          0001*M1      add hl,hl ; * 2
0410E6 29          0002*M1      add hl,hl ; * 4
0410E7 29          0003*M1      add hl,hl ; * 8
0410E8 29          0004*M1      add hl,hl ; * 16
0410E9 29          0005*M1      add hl,hl ; * 32
0410EA 29          0006*M1      add hl,hl ; * 64
0410EB 29          0007*M1      add hl,hl ; * 128
0410EC 29          0008*M1      add hl,hl ; * 256
0410ED C9          0424*        ret
0410EE             0425*    
0410EE             0426*    ; compute the euclidian distance between two cartesian coordinates
0410EE             0427*    ; using the formula d = sqrt(dx^2+dy^2)
0410EE             0428*    ; inputs: dx168 and dy168 are dx and dy in 16.8 fixed format
0410EE             0429*    ; output; uh.l is the 16.8 fixed format distance
0410EE             0430*    ;         also populates scratch locations dx168 and dy168
0410EE             0431*    ; destroys: a,hl,bc,de
0410EE             0432*    ; NOTE: sm means 'small' because it doesn't round down the deltas
0410EE             0433*    ;       making it more accurate for small deltas,
0410EE             0434*    ;       but will overflow if used for screen-sized deltas
0410EE             0435*    distance168sm:
0410EE             0436*    ; compute dy^2
0410EE 2A AD 10 04 0437*        ld hl,(dy168)
0410F2 CD 05 05 04 0438*        call hlu_abs
0410F6 E5          0439*        push hl
0410F7 D1          0440*        pop de
0410F8 CD D4 03 04 0441*        call umul24 ; hl = dy^2
0410FC E5          0442*        push hl ; save dy^2
0410FD             0443*    ; compute dx^2
0410FD 2A A7 10 04 0444*        ld hl,(dx168)
041101 CD 05 05 04 0445*        call hlu_abs
041105 E5          0446*        push hl
041106 D1          0447*        pop de
041107 CD D4 03 04 0448*        call umul24 ; hl = dx^2
04110B             0449*    ; add dx^2 and dy^2
04110B D1          0450*        pop de ; de = dy^2 (was hl)
04110C 19          0451*        add hl,de ; hl = dx^2 + dy^2
04110D             0452*    ; compute the square root
04110D CD DE 11 04 0453*        call sqrt24 ; de = sqrt(dx^2 + dy^2)
041111 EB          0454*        ex de,hl ; hl = distance
041112 C9          0455*        ret
041113             0456*    
041113             0457*    ; atan2_(ub.c,ud.e) --> uh.l
041113             0458*    ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
041113             0459*    ;   whether inputs are integers or fractional doesn't matter
041113             0460*    ;   so long as the sign bit of the upper byte is correct
041113             0461*    ; output: uh.l is the 16.8 fixed angle in degrees 256
041113             0462*    ; angles are COMPASS HEADINGS based on
041113             0463*    ; screen coordinate conventions,where the y axis is flipped
041113             0464*    ; #E0 224      0       32 #20
041113             0465*    ;        -x,-y | +x,-y
041113             0466*    ; #C0 192------+------ 64 #40
041113             0467*    ;        -x,+y | +x,+y
041113             0468*    ; #A0 160   128 #80   96 #60
041113             0469*    atan2_168fast:
041113             0470*    ; get signs and make everything positive
041113             0471*    ; get abs(x) and store its original sign
041113 C5          0472*        push bc
041114 E1          0473*        pop hl
041115 CD 05 05 04 0474*        call hlu_abs ; if x was negative this also sets the sign flag
041119 E5          0475*        push hl ; store abs(x)
04111A C1          0476*        pop bc ; bc = abs(x)
04111B F5          0477*        push af ; store sign of x
04111C             0478*    ; get abs(y) and store its original sign
04111C EB          0479*        ex de,hl ; hl = y
04111D CD 05 05 04 0480*        call hlu_abs ; if y was negative this also sets the sign flag
041121 EB          0481*        ex de,hl ; de = abs(y)
041122 F5          0482*        push af ; store sign of y
041123             0483*    ; if abs(bc) < abs(de),then we do bc/de,otherwise de/bc
041123             0484*    ; this ensures that our lookup value is between 0 and 1 inclusive
041123 AF          0485*        xor a ; clear the carry flag
041124 D5          0486*        push de
041125 E1          0487*        pop hl
041126 ED 42       0488*        sbc hl,bc
041128 F5          0489*        push af ; save sign of de - bc
041129 F2 32 11 04 0490*        jp p,@1 ; bc <= de, so we skip ahead
04112D             0491*    ; otherwise we swap bc and de
04112D C5          0492*        push bc
04112E E1          0493*        pop hl
04112F EB          0494*        ex de,hl
041130 E5          0495*        push hl
041131 C1          0496*        pop bc
041132             0497*    @1:
041132             0498*    ; now we're ready to snag our preliminary result
041132 C5          0499*        push bc
041133 E1          0500*        pop hl
041134 CD A2 11 04 0501*        call atan_168fast ; uh.l comes back with prelim result
041138             0502*    ; now we adjust uh.l based on sign of de - bc
041138 F1          0503*        pop af
041139 F2 45 11 04 0504*        jp p,@2 ; bc <= de,so we skip ahead
04113D EB          0505*        ex de,hl
04113E 21 00 40 00 0506*        ld hl,64*256 ; subtract from 64 (90) degrees
041142 AF          0507*        xor a ; clear the carry flag
041143 ED 52       0508*        sbc hl,de
041145             0509*    @2:
041145             0510*    ; adjust the result based on quadrant
041145             0511*    ; #E0 224      0       32 #20
041145             0512*    ;        -x,-y | +x,-y
041145             0513*    ; #C0 192------+------ 64 #40
041145             0514*    ;        -x,+y | +x,+y
041145             0515*    ; #A0 160   128 #80   96 #60
041145 F1          0516*        pop af ; sign of y
041146 CA 83 11 04 0517*        jp z,@y_zero
04114A F2 63 11 04 0518*        jp p,@y_pos
04114E             0519*    ; y neg,check x
04114E F1          0520*        pop af ; sign of x
04114F CA 5D 11 04 0521*        jp z,@y_neg_x_zero
041153 F2 62 11 04 0522*        jp p,@y_neg_x_pos
041157             0523*    ; y neg,x neg
041157             0524*    ; angle is 128 to 256 (270 to 360)
041157             0525*    ; negating the intermediate does the trick
041157 CD 15 05 04 0526*        call neg_hlu
04115B 18 31       0527*        jr @zero_hlu
04115D             0528*    
04115D             0529*    @y_neg_x_zero:
04115D             0530*    ; y neg,x zero
04115D             0531*    ; angle is 0
04115D 21 00 00 00 0532*        ld hl,0
041161 C9          0533*        ret
041162             0534*    @y_neg_x_pos:
041162             0535*    ; y neg,x pos
041162             0536*    ; angle is 0 to 64 (0 to 90)
041162             0537*    ; so we're good
041162 C9          0538*        ret
041163             0539*    
041163             0540*    @y_pos:
041163 F1          0541*        pop af ; sign of x
041164 CA 73 11 04 0542*        jp z,@y_pos_x_zero
041168 F2 78 11 04 0543*        jp p,@y_pos_x_pos
04116C             0544*    ; y pos,x neg
04116C             0545*    ; angle is 128 to 192 (180-270)
04116C             0546*    ; so we add 128 to intermediate
04116C 11 00 80 00 0547*        ld de,128*256
041170 19          0548*        add hl,de
041171 18 1B       0549*        jr @zero_hlu
041173             0550*    @y_pos_x_zero:
041173             0551*    ; y pos,x zero
041173             0552*    ; angle is 128 (180)
041173 21 00 80 00 0553*        ld hl,128*256
041177 C9          0554*        ret
041178             0555*    @y_pos_x_pos:
041178             0556*    ; y pos,x pos
041178             0557*    ; angle is 64 to 128 (90 to 180)
041178             0558*    ; neg the intermediate and add 180 degrees
041178 CD 15 05 04 0559*        call neg_hlu
04117C 11 00 80 00 0560*        ld de,128*256
041180 19          0561*        add hl,de
041181 18 0B       0562*        jr @zero_hlu
041183             0563*    
041183             0564*    @y_zero:
041183 F1          0565*        pop af ; sign of x
041184 FA 89 11 04 0566*        jp m,@y_zero_x_neg
041188             0567*    ; y zero,x pos
041188             0568*    ; angle is 64 (90),nothing to do
041188 C9          0569*        ret
041189             0570*    @y_zero_x_neg:
041189             0571*    ; y zero ,x neg
041189             0572*    ; angle is 192 (270)
041189 21 00 C0 00 0573*        ld hl,192*256
04118D C9          0574*        ret
04118E             0575*    @zero_hlu:
04118E AF          0576*        xor a
04118F 22 9C 11 04 0577*        ld (@scratch),hl
041193 32 9E 11 04 0578*        ld (@scratch+2),a
041197 2A 9C 11 04 0579*        ld hl,(@scratch)
04119B C9          0580*        ret
04119C             0581*    @scratch: ds 6
0411A2             0582*    
0411A2             0583*    ; inputs: ub.c and ud.e are dx and dy in 16.8 fixed format
0411A2             0584*    ; output: uh.l is the 16.8 fixed format angle in degrees 256
0411A2             0585*    ; destroys: a,hl,bc,de
0411A2             0586*    ; note: only works for angles from 0 to 32 (45) degrees
0411A2             0587*    ;   use atan2_168fast (which calls this proc) to handle the full 256 (360) degrees
0411A2             0588*    atan_168fast:
0411A2             0589*    ; because we use compass headings instead of geometric angles
0411A2             0590*    ; we compute dx/dy which is 1/tan(theta) in the maths world
0411A2             0591*    ; we can do faster unsigned division here because we know dx and dy are positive
       FF FF FF FF 
       FF FF 
0411A2 CD 5D 0F 04 0592*        call udiv168 ; ud.e = dx/dy
0411A6 EB          0593*        ex de,hl ; uh.l = dx/dy
0411A7             0594*    ; test uh.l for 0
0411A7 19          0595*        add hl,de
0411A8 B7          0596*        or a
0411A9 ED 52       0597*        sbc hl,de
0411AB 28 22       0598*        jr z,@is_zero
0411AD             0599*    ; test uh.l for 1
0411AD AF          0600*        xor a ; clear carry
0411AE EB          0601*        ex de,hl
0411AF 21 00 01 00 0602*        ld hl,1*256 ; 1 in 16.8 fixed format
0411B3 ED 52       0603*        sbc hl,de
0411B5 28 13       0604*        jr z,@is_45
0411B7 EB          0605*        ex de,hl
0411B8             0606*    ; no special cases so we move on
0411B8             0607*    ; l contains the fractional portion of tan(uh.l)
0411B8             0608*    ; we multiply it by three to get our lookup table index
0411B8 26 03       0609*        ld h,3
0411BA ED 6C       0610*        mlt hl ; index into lut
0411BC 11 00 00 00 0611*        ld de,0 ; clear deu
0411C0 54          0612*        ld d,h ; copy hl to de
0411C1 5D          0613*        ld e,l ; de contains our index
0411C2 21 C7 15 04 0614*        ld hl,atan_lut_168 ; grab the lut address
0411C6 19          0615*        add hl,de ; bump hl by the index
0411C7 ED 27       0616*        ld hl,(hl) ; don't try this on a z80!
0411C9 C9          0617*        ret ; and out
0411CA             0618*    @is_45:
0411CA 21 00 20 00 0619*        ld hl,32*256
0411CE C9          0620*        ret
0411CF             0621*    ; for the case tan(0)
0411CF             0622*    @is_zero:
0411CF 21 00 00 00 0623*        ld hl,0*256
0411D3 C9          0624*        ret
0411D4             0625*    
0411D4             0626*    ; Expects  ADL mode
0411D4             0627*    ; Inputs:  UH.L
0411D4             0628*    ; Outputs: UH.L is the 16.8 square root
0411D4             0629*    ;          UDE is the integer difference inputHL-DE^2
0411D4             0630*    sqrt168:
0411D4 CD DE 11 04 0631*        call sqrt24
0411D8 EB          0632*        ex de,hl
0411D9 29          0633*        add hl,hl
0411DA 29          0634*        add hl,hl
0411DB 29          0635*        add hl,hl
0411DC 29          0636*        add hl,hl
0411DD C9          0637*        ret
0411DE             0638*    
0411DE             0639*    ; credit: xeda112358
0411DE             0640*    ; https://www.cemetech.net/forum/viewtopic.php?t=11178&postdays=0&postorder=asc&start=0
0411DE             0641*    sqrt24:
0411DE             0642*    ; Expects ADL mode
0411DE             0643*    ; Inputs: HL
0411DE             0644*    ; Outputs: DE is the integer square root
0411DE             0645*    ;  HL is the difference inputHL-DE^2
0411DE             0646*    ;  c flag reset
0411DE 01 00 00 00 0647*        ld bc,0 ; clear bcu
0411E2 11 00 00 00 0648*        ld de,0 ; clear deu
0411E6 AF          0649*        xor a
0411E7 45          0650*        ld b,l
0411E8 C5          0651*        push bc
0411E9 47          0652*        ld b,a
0411EA 6F          0653*        ld l,a
0411EB             0654*    ; Iteration 1
0411EB 29          0655*        add hl,hl
0411EC CB 11       0656*        rl c
0411EE 29          0657*        add hl,hl
0411EF CB 11       0658*        rl c
0411F1 91          0659*        sub c
0411F2 30 04       0660*        jr nc,$+6
0411F4 1C          0661*        inc e
0411F5 1C          0662*        inc e
0411F6 2F          0663*        cpl
0411F7 4F          0664*        ld c,a
0411F8             0665*    ; Iteration 2
0411F8 29          0666*        add hl,hl
0411F9 CB 11       0667*        rl c
0411FB 29          0668*        add hl,hl
0411FC CB 11       0669*        rl c
0411FE CB 13       0670*        rl e
041200 7B          0671*        ld a,e
041201 91          0672*        sub c
041202 30 04       0673*        jr nc,$+6
041204 1C          0674*        inc e
041205 1C          0675*        inc e
041206 2F          0676*        cpl
041207 4F          0677*        ld c,a
041208             0678*    ; Iteration 3
041208 29          0679*        add hl,hl
041209 CB 11       0680*        rl c
04120B 29          0681*        add hl,hl
04120C CB 11       0682*        rl c
04120E CB 13       0683*        rl e
041210 7B          0684*        ld a,e
041211 91          0685*        sub c
041212 30 04       0686*        jr nc,$+6
041214 1C          0687*        inc e
041215 1C          0688*        inc e
041216 2F          0689*        cpl
041217 4F          0690*        ld c,a
041218             0691*    ; Iteration 4
041218 29          0692*        add hl,hl
041219 CB 11       0693*        rl c
04121B 29          0694*        add hl,hl
04121C CB 11       0695*        rl c
04121E CB 13       0696*        rl e
041220 7B          0697*        ld a,e
041221 91          0698*        sub c
041222 30 04       0699*        jr nc,$+6
041224 1C          0700*        inc e
041225 1C          0701*        inc e
041226 2F          0702*        cpl
041227 4F          0703*        ld c,a
041228             0704*    ; Iteration 5
041228 29          0705*        add hl,hl
041229 CB 11       0706*        rl c
04122B 29          0707*        add hl,hl
04122C CB 11       0708*        rl c
04122E CB 13       0709*        rl e
041230 7B          0710*        ld a,e
041231 91          0711*        sub c
041232 30 04       0712*        jr nc,$+6
041234 1C          0713*        inc e
041235 1C          0714*        inc e
041236 2F          0715*        cpl
041237 4F          0716*        ld c,a
041238             0717*    ; Iteration 6
041238 29          0718*        add hl,hl
041239 CB 11       0719*        rl c
04123B 29          0720*        add hl,hl
04123C CB 11       0721*        rl c
04123E CB 13       0722*        rl e
041240 7B          0723*        ld a,e
041241 91          0724*        sub c
041242 30 04       0725*        jr nc,$+6
041244 1C          0726*        inc e
041245 1C          0727*        inc e
041246 2F          0728*        cpl
041247 4F          0729*        ld c,a
041248             0730*    ; Iteration 7
041248 29          0731*        add hl,hl
041249 CB 11       0732*        rl c
04124B 29          0733*        add hl,hl
04124C CB 11       0734*        rl c
04124E CB 10       0735*        rl b
041250 EB          0736*        ex de,hl
041251 29          0737*        add hl,hl
041252 E5          0738*        push hl
041253 ED 42       0739*        sbc hl,bc
041255 30 06       0740*        jr nc,$+8
041257 7C          0741*        ld a,h
041258 2F          0742*        cpl
041259 47          0743*        ld b,a
04125A 7D          0744*        ld a,l
04125B 2F          0745*        cpl
04125C 4F          0746*        ld c,a
04125D E1          0747*        pop hl
04125E 30 02       0748*        jr nc,$+4
041260 23          0749*        inc hl
041261 23          0750*        inc hl
041262 EB          0751*        ex de,hl
041263             0752*    ; Iteration 8
041263 29          0753*        add hl,hl
041264 69          0754*        ld l,c
041265 60          0755*        ld h,b
041266 ED 6A       0756*        adc hl,hl
041268 ED 6A       0757*        adc hl,hl
04126A EB          0758*        ex de,hl
04126B 29          0759*        add hl,hl
04126C ED 52       0760*        sbc hl,de
04126E 19          0761*        add hl,de
04126F EB          0762*        ex de,hl
041270 30 04       0763*        jr nc,$+6
041272 ED 52       0764*        sbc hl,de
041274 13          0765*        inc de
041275 13          0766*        inc de
041276             0767*    ; Iteration 9
041276 F1          0768*        pop af
041277 17          0769*        rla
041278 ED 6A       0770*        adc hl,hl
04127A 17          0771*        rla
04127B ED 6A       0772*        adc hl,hl
04127D EB          0773*        ex de,hl
04127E 29          0774*        add hl,hl
04127F ED 52       0775*        sbc hl,de
041281 19          0776*        add hl,de
041282 EB          0777*        ex de,hl
041283 30 04       0778*        jr nc,$+6
041285 ED 52       0779*        sbc hl,de
041287 13          0780*        inc de
041288 13          0781*        inc de
041289             0782*    ; Iteration 10
041289 17          0783*        rla
04128A ED 6A       0784*        adc hl,hl
04128C 17          0785*        rla
04128D ED 6A       0786*        adc hl,hl
04128F EB          0787*        ex de,hl
041290 29          0788*        add hl,hl
041291 ED 52       0789*        sbc hl,de
041293 19          0790*        add hl,de
041294 EB          0791*        ex de,hl
041295 30 04       0792*        jr nc,$+6
041297 ED 52       0793*        sbc hl,de
041299 13          0794*        inc de
04129A 13          0795*        inc de
04129B             0796*    ; Iteration 11
04129B 17          0797*        rla
04129C ED 6A       0798*        adc hl,hl
04129E 17          0799*        rla
04129F ED 6A       0800*        adc hl,hl
0412A1 EB          0801*        ex de,hl
0412A2 29          0802*        add hl,hl
0412A3 ED 52       0803*        sbc hl,de
0412A5 19          0804*        add hl,de
0412A6 EB          0805*        ex de,hl
0412A7 30 04       0806*        jr nc,$+6
0412A9 ED 52       0807*        sbc hl,de
0412AB 13          0808*        inc de
0412AC 13          0809*        inc de
0412AD             0810*    ; Iteration 12
0412AD 17          0811*        rla
0412AE ED 6A       0812*        adc hl,hl
0412B0 17          0813*        rla
0412B1 ED 6A       0814*        adc hl,hl
0412B3 EB          0815*        ex de,hl
0412B4 29          0816*        add hl,hl
0412B5 ED 52       0817*        sbc hl,de
0412B7 19          0818*        add hl,de
0412B8 EB          0819*        ex de,hl
0412B9 30 04       0820*        jr nc,$+6
0412BB ED 52       0821*        sbc hl,de
0412BD 13          0822*        inc de
0412BE 13          0823*        inc de
0412BF CB 1A       0824*        rr d
0412C1 CB 1B       0825*        rr e
0412C3 C9          0826*        ret
0412C4             0827*    
0412C4             0828*    sin_lut_168:
0412C4 00 00 00    0829*        dl 0x000000 ; 0.000 00, 0.000
0412C7 06 00 00    0830*        dl 0x000006 ; 1.406 01, 0.025
0412CA 0C 00 00    0831*        dl 0x00000C ; 2.813 02, 0.049
0412CD 12 00 00    0832*        dl 0x000012 ; 4.219 03, 0.074
0412D0 19 00 00    0833*        dl 0x000019 ; 5.625 04, 0.098
0412D3 1F 00 00    0834*        dl 0x00001F ; 7.031 05, 0.122
0412D6 25 00 00    0835*        dl 0x000025 ; 8.438 06, 0.147
0412D9 2B 00 00    0836*        dl 0x00002B ; 9.844 07, 0.171
0412DC 31 00 00    0837*        dl 0x000031 ; 11.250 08, 0.195
0412DF 38 00 00    0838*        dl 0x000038 ; 12.656 09, 0.219
0412E2 3E 00 00    0839*        dl 0x00003E ; 14.063 0A, 0.243
0412E5 44 00 00    0840*        dl 0x000044 ; 15.469 0B, 0.267
0412E8 4A 00 00    0841*        dl 0x00004A ; 16.875 0C, 0.290
0412EB 50 00 00    0842*        dl 0x000050 ; 18.281 0D, 0.314
0412EE 56 00 00    0843*        dl 0x000056 ; 19.688 0E, 0.337
0412F1 5C 00 00    0844*        dl 0x00005C ; 21.094 0F, 0.360
0412F4 61 00 00    0845*        dl 0x000061 ; 22.500 10, 0.383
0412F7 67 00 00    0846*        dl 0x000067 ; 23.906 11, 0.405
0412FA 6D 00 00    0847*        dl 0x00006D ; 25.313 12, 0.428
0412FD 73 00 00    0848*        dl 0x000073 ; 26.719 13, 0.450
041300 78 00 00    0849*        dl 0x000078 ; 28.125 14, 0.471
041303 7E 00 00    0850*        dl 0x00007E ; 29.531 15, 0.493
041306 83 00 00    0851*        dl 0x000083 ; 30.938 16, 0.514
041309 88 00 00    0852*        dl 0x000088 ; 32.344 17, 0.535
04130C 8E 00 00    0853*        dl 0x00008E ; 33.750 18, 0.556
04130F 93 00 00    0854*        dl 0x000093 ; 35.156 19, 0.576
041312 98 00 00    0855*        dl 0x000098 ; 36.563 1A, 0.596
041315 9D 00 00    0856*        dl 0x00009D ; 37.969 1B, 0.615
041318 A2 00 00    0857*        dl 0x0000A2 ; 39.375 1C, 0.634
04131B A7 00 00    0858*        dl 0x0000A7 ; 40.781 1D, 0.653
04131E AB 00 00    0859*        dl 0x0000AB ; 42.188 1E, 0.672
041321 B0 00 00    0860*        dl 0x0000B0 ; 43.594 1F, 0.690
041324 B5 00 00    0861*        dl 0x0000B5 ; 45.000 20, 0.707
041327 B9 00 00    0862*        dl 0x0000B9 ; 46.406 21, 0.724
04132A BD 00 00    0863*        dl 0x0000BD ; 47.813 22, 0.741
04132D C1 00 00    0864*        dl 0x0000C1 ; 49.219 23, 0.757
041330 C5 00 00    0865*        dl 0x0000C5 ; 50.625 24, 0.773
041333 C9 00 00    0866*        dl 0x0000C9 ; 52.031 25, 0.788
041336 CD 00 00    0867*        dl 0x0000CD ; 53.438 26, 0.803
041339 D1 00 00    0868*        dl 0x0000D1 ; 54.844 27, 0.818
04133C D4 00 00    0869*        dl 0x0000D4 ; 56.250 28, 0.831
04133F D8 00 00    0870*        dl 0x0000D8 ; 57.656 29, 0.845
041342 DB 00 00    0871*        dl 0x0000DB ; 59.063 2A, 0.858
041345 DE 00 00    0872*        dl 0x0000DE ; 60.469 2B, 0.870
041348 E1 00 00    0873*        dl 0x0000E1 ; 61.875 2C, 0.882
04134B E4 00 00    0874*        dl 0x0000E4 ; 63.281 2D, 0.893
04134E E7 00 00    0875*        dl 0x0000E7 ; 64.688 2E, 0.904
041351 EA 00 00    0876*        dl 0x0000EA ; 66.094 2F, 0.914
041354 EC 00 00    0877*        dl 0x0000EC ; 67.500 30, 0.924
041357 EE 00 00    0878*        dl 0x0000EE ; 68.906 31, 0.933
04135A F1 00 00    0879*        dl 0x0000F1 ; 70.313 32, 0.942
04135D F3 00 00    0880*        dl 0x0000F3 ; 71.719 33, 0.950
041360 F4 00 00    0881*        dl 0x0000F4 ; 73.125 34, 0.957
041363 F6 00 00    0882*        dl 0x0000F6 ; 74.531 35, 0.964
041366 F8 00 00    0883*        dl 0x0000F8 ; 75.938 36, 0.970
041369 F9 00 00    0884*        dl 0x0000F9 ; 77.344 37, 0.976
04136C FB 00 00    0885*        dl 0x0000FB ; 78.750 38, 0.981
04136F FC 00 00    0886*        dl 0x0000FC ; 80.156 39, 0.985
041372 FD 00 00    0887*        dl 0x0000FD ; 81.563 3A, 0.989
041375 FE 00 00    0888*        dl 0x0000FE ; 82.969 3B, 0.992
041378 FE 00 00    0889*        dl 0x0000FE ; 84.375 3C, 0.995
04137B FF 00 00    0890*        dl 0x0000FF ; 85.781 3D, 0.997
04137E FF 00 00    0891*        dl 0x0000FF ; 87.188 3E, 0.999
041381 FF 00 00    0892*        dl 0x0000FF ; 88.594 3F, 1.000
041384 00 01 00    0893*        dl 0x000100 ; 90.000 40, 1.000
041387 FF 00 00    0894*        dl 0x0000FF ; 91.406 41, 1.000
04138A FF 00 00    0895*        dl 0x0000FF ; 92.813 42, 0.999
04138D FF 00 00    0896*        dl 0x0000FF ; 94.219 43, 0.997
041390 FE 00 00    0897*        dl 0x0000FE ; 95.625 44, 0.995
041393 FE 00 00    0898*        dl 0x0000FE ; 97.031 45, 0.992
041396 FD 00 00    0899*        dl 0x0000FD ; 98.438 46, 0.989
041399 FC 00 00    0900*        dl 0x0000FC ; 99.844 47, 0.985
04139C FB 00 00    0901*        dl 0x0000FB ; 101.250 48, 0.981
04139F F9 00 00    0902*        dl 0x0000F9 ; 102.656 49, 0.976
0413A2 F8 00 00    0903*        dl 0x0000F8 ; 104.063 4A, 0.970
0413A5 F6 00 00    0904*        dl 0x0000F6 ; 105.469 4B, 0.964
0413A8 F4 00 00    0905*        dl 0x0000F4 ; 106.875 4C, 0.957
0413AB F3 00 00    0906*        dl 0x0000F3 ; 108.281 4D, 0.950
0413AE F1 00 00    0907*        dl 0x0000F1 ; 109.688 4E, 0.942
0413B1 EE 00 00    0908*        dl 0x0000EE ; 111.094 4F, 0.933
0413B4 EC 00 00    0909*        dl 0x0000EC ; 112.500 50, 0.924
0413B7 EA 00 00    0910*        dl 0x0000EA ; 113.906 51, 0.914
0413BA E7 00 00    0911*        dl 0x0000E7 ; 115.313 52, 0.904
0413BD E4 00 00    0912*        dl 0x0000E4 ; 116.719 53, 0.893
0413C0 E1 00 00    0913*        dl 0x0000E1 ; 118.125 54, 0.882
0413C3 DE 00 00    0914*        dl 0x0000DE ; 119.531 55, 0.870
0413C6 DB 00 00    0915*        dl 0x0000DB ; 120.938 56, 0.858
0413C9 D8 00 00    0916*        dl 0x0000D8 ; 122.344 57, 0.845
0413CC D4 00 00    0917*        dl 0x0000D4 ; 123.750 58, 0.831
0413CF D1 00 00    0918*        dl 0x0000D1 ; 125.156 59, 0.818
0413D2 CD 00 00    0919*        dl 0x0000CD ; 126.563 5A, 0.803
0413D5 C9 00 00    0920*        dl 0x0000C9 ; 127.969 5B, 0.788
0413D8 C5 00 00    0921*        dl 0x0000C5 ; 129.375 5C, 0.773
0413DB C1 00 00    0922*        dl 0x0000C1 ; 130.781 5D, 0.757
0413DE BD 00 00    0923*        dl 0x0000BD ; 132.188 5E, 0.741
0413E1 B9 00 00    0924*        dl 0x0000B9 ; 133.594 5F, 0.724
0413E4 B5 00 00    0925*        dl 0x0000B5 ; 135.000 60, 0.707
0413E7 B0 00 00    0926*        dl 0x0000B0 ; 136.406 61, 0.690
0413EA AB 00 00    0927*        dl 0x0000AB ; 137.813 62, 0.672
0413ED A7 00 00    0928*        dl 0x0000A7 ; 139.219 63, 0.653
0413F0 A2 00 00    0929*        dl 0x0000A2 ; 140.625 64, 0.634
0413F3 9D 00 00    0930*        dl 0x00009D ; 142.031 65, 0.615
0413F6 98 00 00    0931*        dl 0x000098 ; 143.438 66, 0.596
0413F9 93 00 00    0932*        dl 0x000093 ; 144.844 67, 0.576
0413FC 8E 00 00    0933*        dl 0x00008E ; 146.250 68, 0.556
0413FF 88 00 00    0934*        dl 0x000088 ; 147.656 69, 0.535
041402 83 00 00    0935*        dl 0x000083 ; 149.063 6A, 0.514
041405 7E 00 00    0936*        dl 0x00007E ; 150.469 6B, 0.493
041408 78 00 00    0937*        dl 0x000078 ; 151.875 6C, 0.471
04140B 73 00 00    0938*        dl 0x000073 ; 153.281 6D, 0.450
04140E 6D 00 00    0939*        dl 0x00006D ; 154.688 6E, 0.428
041411 67 00 00    0940*        dl 0x000067 ; 156.094 6F, 0.405
041414 61 00 00    0941*        dl 0x000061 ; 157.500 70, 0.383
041417 5C 00 00    0942*        dl 0x00005C ; 158.906 71, 0.360
04141A 56 00 00    0943*        dl 0x000056 ; 160.313 72, 0.337
04141D 50 00 00    0944*        dl 0x000050 ; 161.719 73, 0.314
041420 4A 00 00    0945*        dl 0x00004A ; 163.125 74, 0.290
041423 44 00 00    0946*        dl 0x000044 ; 164.531 75, 0.267
041426 3E 00 00    0947*        dl 0x00003E ; 165.938 76, 0.243
041429 38 00 00    0948*        dl 0x000038 ; 167.344 77, 0.219
04142C 31 00 00    0949*        dl 0x000031 ; 168.750 78, 0.195
04142F 2B 00 00    0950*        dl 0x00002B ; 170.156 79, 0.171
041432 25 00 00    0951*        dl 0x000025 ; 171.563 7A, 0.147
041435 1F 00 00    0952*        dl 0x00001F ; 172.969 7B, 0.122
041438 19 00 00    0953*        dl 0x000019 ; 174.375 7C, 0.098
04143B 12 00 00    0954*        dl 0x000012 ; 175.781 7D, 0.074
04143E 0C 00 00    0955*        dl 0x00000C ; 177.188 7E, 0.049
041441 06 00 00    0956*        dl 0x000006 ; 178.594 7F, 0.025
041444 00 00 00    0957*        dl 0x000000 ; 180.000 80, 0.000
041447 FA FF FF    0958*        dl 0xFFFFFA ; 181.406 81, -0.025
04144A F4 FF FF    0959*        dl 0xFFFFF4 ; 182.813 82, -0.049
04144D EE FF FF    0960*        dl 0xFFFFEE ; 184.219 83, -0.074
041450 E7 FF FF    0961*        dl 0xFFFFE7 ; 185.625 84, -0.098
041453 E1 FF FF    0962*        dl 0xFFFFE1 ; 187.031 85, -0.122
041456 DB FF FF    0963*        dl 0xFFFFDB ; 188.438 86, -0.147
041459 D5 FF FF    0964*        dl 0xFFFFD5 ; 189.844 87, -0.171
04145C CF FF FF    0965*        dl 0xFFFFCF ; 191.250 88, -0.195
04145F C8 FF FF    0966*        dl 0xFFFFC8 ; 192.656 89, -0.219
041462 C2 FF FF    0967*        dl 0xFFFFC2 ; 194.063 8A, -0.243
041465 BC FF FF    0968*        dl 0xFFFFBC ; 195.469 8B, -0.267
041468 B6 FF FF    0969*        dl 0xFFFFB6 ; 196.875 8C, -0.290
04146B B0 FF FF    0970*        dl 0xFFFFB0 ; 198.281 8D, -0.314
04146E AA FF FF    0971*        dl 0xFFFFAA ; 199.688 8E, -0.337
041471 A4 FF FF    0972*        dl 0xFFFFA4 ; 201.094 8F, -0.360
041474 9F FF FF    0973*        dl 0xFFFF9F ; 202.500 90, -0.383
041477 99 FF FF    0974*        dl 0xFFFF99 ; 203.906 91, -0.405
04147A 93 FF FF    0975*        dl 0xFFFF93 ; 205.313 92, -0.428
04147D 8D FF FF    0976*        dl 0xFFFF8D ; 206.719 93, -0.450
041480 88 FF FF    0977*        dl 0xFFFF88 ; 208.125 94, -0.471
041483 82 FF FF    0978*        dl 0xFFFF82 ; 209.531 95, -0.493
041486 7D FF FF    0979*        dl 0xFFFF7D ; 210.938 96, -0.514
041489 78 FF FF    0980*        dl 0xFFFF78 ; 212.344 97, -0.535
04148C 72 FF FF    0981*        dl 0xFFFF72 ; 213.750 98, -0.556
04148F 6D FF FF    0982*        dl 0xFFFF6D ; 215.156 99, -0.576
041492 68 FF FF    0983*        dl 0xFFFF68 ; 216.563 9A, -0.596
041495 63 FF FF    0984*        dl 0xFFFF63 ; 217.969 9B, -0.615
041498 5E FF FF    0985*        dl 0xFFFF5E ; 219.375 9C, -0.634
04149B 59 FF FF    0986*        dl 0xFFFF59 ; 220.781 9D, -0.653
04149E 55 FF FF    0987*        dl 0xFFFF55 ; 222.188 9E, -0.672
0414A1 50 FF FF    0988*        dl 0xFFFF50 ; 223.594 9F, -0.690
0414A4 4B FF FF    0989*        dl 0xFFFF4B ; 225.000 A0, -0.707
0414A7 47 FF FF    0990*        dl 0xFFFF47 ; 226.406 A1, -0.724
0414AA 43 FF FF    0991*        dl 0xFFFF43 ; 227.813 A2, -0.741
0414AD 3F FF FF    0992*        dl 0xFFFF3F ; 229.219 A3, -0.757
0414B0 3B FF FF    0993*        dl 0xFFFF3B ; 230.625 A4, -0.773
0414B3 37 FF FF    0994*        dl 0xFFFF37 ; 232.031 A5, -0.788
0414B6 33 FF FF    0995*        dl 0xFFFF33 ; 233.438 A6, -0.803
0414B9 2F FF FF    0996*        dl 0xFFFF2F ; 234.844 A7, -0.818
0414BC 2C FF FF    0997*        dl 0xFFFF2C ; 236.250 A8, -0.831
0414BF 28 FF FF    0998*        dl 0xFFFF28 ; 237.656 A9, -0.845
0414C2 25 FF FF    0999*        dl 0xFFFF25 ; 239.063 AA, -0.858
0414C5 22 FF FF    1000*        dl 0xFFFF22 ; 240.469 AB, -0.870
0414C8 1F FF FF    1001*        dl 0xFFFF1F ; 241.875 AC, -0.882
0414CB 1C FF FF    1002*        dl 0xFFFF1C ; 243.281 AD, -0.893
0414CE 19 FF FF    1003*        dl 0xFFFF19 ; 244.688 AE, -0.904
0414D1 16 FF FF    1004*        dl 0xFFFF16 ; 246.094 AF, -0.914
0414D4 14 FF FF    1005*        dl 0xFFFF14 ; 247.500 B0, -0.924
0414D7 12 FF FF    1006*        dl 0xFFFF12 ; 248.906 B1, -0.933
0414DA 0F FF FF    1007*        dl 0xFFFF0F ; 250.313 B2, -0.942
0414DD 0D FF FF    1008*        dl 0xFFFF0D ; 251.719 B3, -0.950
0414E0 0C FF FF    1009*        dl 0xFFFF0C ; 253.125 B4, -0.957
0414E3 0A FF FF    1010*        dl 0xFFFF0A ; 254.531 B5, -0.964
0414E6 08 FF FF    1011*        dl 0xFFFF08 ; 255.938 B6, -0.970
0414E9 07 FF FF    1012*        dl 0xFFFF07 ; 257.344 B7, -0.976
0414EC 05 FF FF    1013*        dl 0xFFFF05 ; 258.750 B8, -0.981
0414EF 04 FF FF    1014*        dl 0xFFFF04 ; 260.156 B9, -0.985
0414F2 03 FF FF    1015*        dl 0xFFFF03 ; 261.563 BA, -0.989
0414F5 02 FF FF    1016*        dl 0xFFFF02 ; 262.969 BB, -0.992
0414F8 02 FF FF    1017*        dl 0xFFFF02 ; 264.375 BC, -0.995
0414FB 01 FF FF    1018*        dl 0xFFFF01 ; 265.781 BD, -0.997
0414FE 01 FF FF    1019*        dl 0xFFFF01 ; 267.188 BE, -0.999
041501 01 FF FF    1020*        dl 0xFFFF01 ; 268.594 BF, -1.000
041504 00 FF FF    1021*        dl 0xFFFF00 ; 270.000 C0, -1.000
041507 01 FF FF    1022*        dl 0xFFFF01 ; 271.406 C1, -1.000
04150A 01 FF FF    1023*        dl 0xFFFF01 ; 272.813 C2, -0.999
04150D 01 FF FF    1024*        dl 0xFFFF01 ; 274.219 C3, -0.997
041510 02 FF FF    1025*        dl 0xFFFF02 ; 275.625 C4, -0.995
041513 02 FF FF    1026*        dl 0xFFFF02 ; 277.031 C5, -0.992
041516 03 FF FF    1027*        dl 0xFFFF03 ; 278.438 C6, -0.989
041519 04 FF FF    1028*        dl 0xFFFF04 ; 279.844 C7, -0.985
04151C 05 FF FF    1029*        dl 0xFFFF05 ; 281.250 C8, -0.981
04151F 07 FF FF    1030*        dl 0xFFFF07 ; 282.656 C9, -0.976
041522 08 FF FF    1031*        dl 0xFFFF08 ; 284.063 CA, -0.970
041525 0A FF FF    1032*        dl 0xFFFF0A ; 285.469 CB, -0.964
041528 0C FF FF    1033*        dl 0xFFFF0C ; 286.875 CC, -0.957
04152B 0D FF FF    1034*        dl 0xFFFF0D ; 288.281 CD, -0.950
04152E 0F FF FF    1035*        dl 0xFFFF0F ; 289.688 CE, -0.942
041531 12 FF FF    1036*        dl 0xFFFF12 ; 291.094 CF, -0.933
041534 14 FF FF    1037*        dl 0xFFFF14 ; 292.500 D0, -0.924
041537 16 FF FF    1038*        dl 0xFFFF16 ; 293.906 D1, -0.914
04153A 19 FF FF    1039*        dl 0xFFFF19 ; 295.313 D2, -0.904
04153D 1C FF FF    1040*        dl 0xFFFF1C ; 296.719 D3, -0.893
041540 1F FF FF    1041*        dl 0xFFFF1F ; 298.125 D4, -0.882
041543 22 FF FF    1042*        dl 0xFFFF22 ; 299.531 D5, -0.870
041546 25 FF FF    1043*        dl 0xFFFF25 ; 300.938 D6, -0.858
041549 28 FF FF    1044*        dl 0xFFFF28 ; 302.344 D7, -0.845
04154C 2C FF FF    1045*        dl 0xFFFF2C ; 303.750 D8, -0.831
04154F 2F FF FF    1046*        dl 0xFFFF2F ; 305.156 D9, -0.818
041552 33 FF FF    1047*        dl 0xFFFF33 ; 306.563 DA, -0.803
041555 37 FF FF    1048*        dl 0xFFFF37 ; 307.969 DB, -0.788
041558 3B FF FF    1049*        dl 0xFFFF3B ; 309.375 DC, -0.773
04155B 3F FF FF    1050*        dl 0xFFFF3F ; 310.781 DD, -0.757
04155E 43 FF FF    1051*        dl 0xFFFF43 ; 312.188 DE, -0.741
041561 47 FF FF    1052*        dl 0xFFFF47 ; 313.594 DF, -0.724
041564 4B FF FF    1053*        dl 0xFFFF4B ; 315.000 E0, -0.707
041567 50 FF FF    1054*        dl 0xFFFF50 ; 316.406 E1, -0.690
04156A 55 FF FF    1055*        dl 0xFFFF55 ; 317.813 E2, -0.672
04156D 59 FF FF    1056*        dl 0xFFFF59 ; 319.219 E3, -0.653
041570 5E FF FF    1057*        dl 0xFFFF5E ; 320.625 E4, -0.634
041573 63 FF FF    1058*        dl 0xFFFF63 ; 322.031 E5, -0.615
041576 68 FF FF    1059*        dl 0xFFFF68 ; 323.438 E6, -0.596
041579 6D FF FF    1060*        dl 0xFFFF6D ; 324.844 E7, -0.576
04157C 72 FF FF    1061*        dl 0xFFFF72 ; 326.250 E8, -0.556
04157F 78 FF FF    1062*        dl 0xFFFF78 ; 327.656 E9, -0.535
041582 7D FF FF    1063*        dl 0xFFFF7D ; 329.063 EA, -0.514
041585 82 FF FF    1064*        dl 0xFFFF82 ; 330.469 EB, -0.493
041588 88 FF FF    1065*        dl 0xFFFF88 ; 331.875 EC, -0.471
04158B 8D FF FF    1066*        dl 0xFFFF8D ; 333.281 ED, -0.450
04158E 93 FF FF    1067*        dl 0xFFFF93 ; 334.688 EE, -0.428
041591 99 FF FF    1068*        dl 0xFFFF99 ; 336.094 EF, -0.405
041594 9F FF FF    1069*        dl 0xFFFF9F ; 337.500 F0, -0.383
041597 A4 FF FF    1070*        dl 0xFFFFA4 ; 338.906 F1, -0.360
04159A AA FF FF    1071*        dl 0xFFFFAA ; 340.313 F2, -0.337
04159D B0 FF FF    1072*        dl 0xFFFFB0 ; 341.719 F3, -0.314
0415A0 B6 FF FF    1073*        dl 0xFFFFB6 ; 343.125 F4, -0.290
0415A3 BC FF FF    1074*        dl 0xFFFFBC ; 344.531 F5, -0.267
0415A6 C2 FF FF    1075*        dl 0xFFFFC2 ; 345.938 F6, -0.243
0415A9 C8 FF FF    1076*        dl 0xFFFFC8 ; 347.344 F7, -0.219
0415AC CF FF FF    1077*        dl 0xFFFFCF ; 348.750 F8, -0.195
0415AF D5 FF FF    1078*        dl 0xFFFFD5 ; 350.156 F9, -0.171
0415B2 DB FF FF    1079*        dl 0xFFFFDB ; 351.563 FA, -0.147
0415B5 E1 FF FF    1080*        dl 0xFFFFE1 ; 352.969 FB, -0.122
0415B8 E7 FF FF    1081*        dl 0xFFFFE7 ; 354.375 FC, -0.098
0415BB EE FF FF    1082*        dl 0xFFFFEE ; 355.781 FD, -0.074
0415BE F4 FF FF    1083*        dl 0xFFFFF4 ; 357.188 FE, -0.049
0415C1 FA FF FF    1084*        dl 0xFFFFFA ; 358.594 FF, -0.025
0415C4 00 00 00    1085*        dl 0x000000 ; 0.000 00, 0.000 for interpolation
0415C7             1086*    
0415C7             1087*    atan_lut_168:
0415C7 00 00 00    1088*        dl 0x000000 ; 000000, 0.000
0415CA 28 00 00    1089*        dl 0x000028 ; 000001, 0.224
0415CD 51 00 00    1090*        dl 0x000051 ; 000002, 0.448
0415D0 7A 00 00    1091*        dl 0x00007A ; 000003, 0.671
0415D3 A2 00 00    1092*        dl 0x0000A2 ; 000004, 0.895
0415D6 CB 00 00    1093*        dl 0x0000CB ; 000005, 1.119
0415D9 F4 00 00    1094*        dl 0x0000F4 ; 000006, 1.343
0415DC 1D 01 00    1095*        dl 0x00011D ; 000007, 1.566
0415DF 45 01 00    1096*        dl 0x000145 ; 000008, 1.790
0415E2 6E 01 00    1097*        dl 0x00016E ; 000009, 2.013
0415E5 97 01 00    1098*        dl 0x000197 ; 00000A, 2.237
0415E8 BF 01 00    1099*        dl 0x0001BF ; 00000B, 2.460
0415EB E8 01 00    1100*        dl 0x0001E8 ; 00000C, 2.684
0415EE 11 02 00    1101*        dl 0x000211 ; 00000D, 2.907
0415F1 39 02 00    1102*        dl 0x000239 ; 00000E, 3.130
0415F4 62 02 00    1103*        dl 0x000262 ; 00000F, 3.353
0415F7 8B 02 00    1104*        dl 0x00028B ; 000010, 3.576
0415FA B3 02 00    1105*        dl 0x0002B3 ; 000011, 3.799
0415FD DC 02 00    1106*        dl 0x0002DC ; 000012, 4.022
041600 04 03 00    1107*        dl 0x000304 ; 000013, 4.245
041603 2D 03 00    1108*        dl 0x00032D ; 000014, 4.467
041606 55 03 00    1109*        dl 0x000355 ; 000015, 4.690
041609 7E 03 00    1110*        dl 0x00037E ; 000016, 4.912
04160C A6 03 00    1111*        dl 0x0003A6 ; 000017, 5.134
04160F CE 03 00    1112*        dl 0x0003CE ; 000018, 5.356
041612 F7 03 00    1113*        dl 0x0003F7 ; 000019, 5.578
041615 1F 04 00    1114*        dl 0x00041F ; 00001A, 5.799
041618 48 04 00    1115*        dl 0x000448 ; 00001B, 6.021
04161B 70 04 00    1116*        dl 0x000470 ; 00001C, 6.242
04161E 98 04 00    1117*        dl 0x000498 ; 00001D, 6.463
041621 C0 04 00    1118*        dl 0x0004C0 ; 00001E, 6.684
041624 E8 04 00    1119*        dl 0x0004E8 ; 00001F, 6.905
041627 11 05 00    1120*        dl 0x000511 ; 000020, 7.125
04162A 39 05 00    1121*        dl 0x000539 ; 000021, 7.345
04162D 61 05 00    1122*        dl 0x000561 ; 000022, 7.565
041630 89 05 00    1123*        dl 0x000589 ; 000023, 7.785
041633 B1 05 00    1124*        dl 0x0005B1 ; 000024, 8.005
041636 D9 05 00    1125*        dl 0x0005D9 ; 000025, 8.224
041639 01 06 00    1126*        dl 0x000601 ; 000026, 8.443
04163C 28 06 00    1127*        dl 0x000628 ; 000027, 8.662
04163F 50 06 00    1128*        dl 0x000650 ; 000028, 8.881
041642 78 06 00    1129*        dl 0x000678 ; 000029, 9.099
041645 A0 06 00    1130*        dl 0x0006A0 ; 00002A, 9.317
041648 C7 06 00    1131*        dl 0x0006C7 ; 00002B, 9.535
04164B EF 06 00    1132*        dl 0x0006EF ; 00002C, 9.752
04164E 16 07 00    1133*        dl 0x000716 ; 00002D, 9.970
041651 3E 07 00    1134*        dl 0x00073E ; 00002E, 10.187
041654 65 07 00    1135*        dl 0x000765 ; 00002F, 10.403
041657 8D 07 00    1136*        dl 0x00078D ; 000030, 10.620
04165A B4 07 00    1137*        dl 0x0007B4 ; 000031, 10.836
04165D DB 07 00    1138*        dl 0x0007DB ; 000032, 11.051
041660 03 08 00    1139*        dl 0x000803 ; 000033, 11.267
041663 2A 08 00    1140*        dl 0x00082A ; 000034, 11.482
041666 51 08 00    1141*        dl 0x000851 ; 000035, 11.697
041669 78 08 00    1142*        dl 0x000878 ; 000036, 11.911
04166C 9F 08 00    1143*        dl 0x00089F ; 000037, 12.125
04166F C6 08 00    1144*        dl 0x0008C6 ; 000038, 12.339
041672 ED 08 00    1145*        dl 0x0008ED ; 000039, 12.553
041675 13 09 00    1146*        dl 0x000913 ; 00003A, 12.766
041678 3A 09 00    1147*        dl 0x00093A ; 00003B, 12.978
04167B 61 09 00    1148*        dl 0x000961 ; 00003C, 13.191
04167E 87 09 00    1149*        dl 0x000987 ; 00003D, 13.403
041681 AE 09 00    1150*        dl 0x0009AE ; 00003E, 13.614
041684 D4 09 00    1151*        dl 0x0009D4 ; 00003F, 13.825
041687 FB 09 00    1152*        dl 0x0009FB ; 000040, 14.036
04168A 21 0A 00    1153*        dl 0x000A21 ; 000041, 14.247
04168D 47 0A 00    1154*        dl 0x000A47 ; 000042, 14.457
041690 6D 0A 00    1155*        dl 0x000A6D ; 000043, 14.666
041693 94 0A 00    1156*        dl 0x000A94 ; 000044, 14.876
041696 BA 0A 00    1157*        dl 0x000ABA ; 000045, 15.085
041699 E0 0A 00    1158*        dl 0x000AE0 ; 000046, 15.293
04169C 05 0B 00    1159*        dl 0x000B05 ; 000047, 15.501
04169F 2B 0B 00    1160*        dl 0x000B2B ; 000048, 15.709
0416A2 51 0B 00    1161*        dl 0x000B51 ; 000049, 15.916
0416A5 77 0B 00    1162*        dl 0x000B77 ; 00004A, 16.123
0416A8 9C 0B 00    1163*        dl 0x000B9C ; 00004B, 16.329
0416AB C2 0B 00    1164*        dl 0x000BC2 ; 00004C, 16.535
0416AE E7 0B 00    1165*        dl 0x000BE7 ; 00004D, 16.740
0416B1 0C 0C 00    1166*        dl 0x000C0C ; 00004E, 16.945
0416B4 32 0C 00    1167*        dl 0x000C32 ; 00004F, 17.150
0416B7 57 0C 00    1168*        dl 0x000C57 ; 000050, 17.354
0416BA 7C 0C 00    1169*        dl 0x000C7C ; 000051, 17.558
0416BD A1 0C 00    1170*        dl 0x000CA1 ; 000052, 17.761
0416C0 C6 0C 00    1171*        dl 0x000CC6 ; 000053, 17.964
0416C3 EB 0C 00    1172*        dl 0x000CEB ; 000054, 18.166
0416C6 0F 0D 00    1173*        dl 0x000D0F ; 000055, 18.368
0416C9 34 0D 00    1174*        dl 0x000D34 ; 000056, 18.569
0416CC 58 0D 00    1175*        dl 0x000D58 ; 000057, 18.770
0416CF 7D 0D 00    1176*        dl 0x000D7D ; 000058, 18.970
0416D2 A1 0D 00    1177*        dl 0x000DA1 ; 000059, 19.170
0416D5 C6 0D 00    1178*        dl 0x000DC6 ; 00005A, 19.370
0416D8 EA 0D 00    1179*        dl 0x000DEA ; 00005B, 19.569
0416DB 0E 0E 00    1180*        dl 0x000E0E ; 00005C, 19.767
0416DE 32 0E 00    1181*        dl 0x000E32 ; 00005D, 19.965
0416E1 56 0E 00    1182*        dl 0x000E56 ; 00005E, 20.163
0416E4 7A 0E 00    1183*        dl 0x000E7A ; 00005F, 20.360
0416E7 9E 0E 00    1184*        dl 0x000E9E ; 000060, 20.556
0416EA C1 0E 00    1185*        dl 0x000EC1 ; 000061, 20.752
0416ED E5 0E 00    1186*        dl 0x000EE5 ; 000062, 20.947
0416F0 08 0F 00    1187*        dl 0x000F08 ; 000063, 21.142
0416F3 2C 0F 00    1188*        dl 0x000F2C ; 000064, 21.337
0416F6 4F 0F 00    1189*        dl 0x000F4F ; 000065, 21.531
0416F9 72 0F 00    1190*        dl 0x000F72 ; 000066, 21.724
0416FC 95 0F 00    1191*        dl 0x000F95 ; 000067, 21.917
0416FF B8 0F 00    1192*        dl 0x000FB8 ; 000068, 22.109
041702 DB 0F 00    1193*        dl 0x000FDB ; 000069, 22.301
041705 FE 0F 00    1194*        dl 0x000FFE ; 00006A, 22.493
041708 21 10 00    1195*        dl 0x001021 ; 00006B, 22.683
04170B 44 10 00    1196*        dl 0x001044 ; 00006C, 22.874
04170E 66 10 00    1197*        dl 0x001066 ; 00006D, 23.063
041711 89 10 00    1198*        dl 0x001089 ; 00006E, 23.253
041714 AB 10 00    1199*        dl 0x0010AB ; 00006F, 23.441
041717 CD 10 00    1200*        dl 0x0010CD ; 000070, 23.629
04171A EF 10 00    1201*        dl 0x0010EF ; 000071, 23.817
04171D 11 11 00    1202*        dl 0x001111 ; 000072, 24.004
041720 33 11 00    1203*        dl 0x001133 ; 000073, 24.191
041723 55 11 00    1204*        dl 0x001155 ; 000074, 24.376
041726 77 11 00    1205*        dl 0x001177 ; 000075, 24.562
041729 99 11 00    1206*        dl 0x001199 ; 000076, 24.747
04172C BA 11 00    1207*        dl 0x0011BA ; 000077, 24.931
04172F DC 11 00    1208*        dl 0x0011DC ; 000078, 25.115
041732 FD 11 00    1209*        dl 0x0011FD ; 000079, 25.298
041735 1E 12 00    1210*        dl 0x00121E ; 00007A, 25.481
041738 3F 12 00    1211*        dl 0x00123F ; 00007B, 25.663
04173B 60 12 00    1212*        dl 0x001260 ; 00007C, 25.844
04173E 81 12 00    1213*        dl 0x001281 ; 00007D, 26.025
041741 A2 12 00    1214*        dl 0x0012A2 ; 00007E, 26.206
041744 C3 12 00    1215*        dl 0x0012C3 ; 00007F, 26.386
041747 E4 12 00    1216*        dl 0x0012E4 ; 000080, 26.565
04174A 04 13 00    1217*        dl 0x001304 ; 000081, 26.744
04174D 25 13 00    1218*        dl 0x001325 ; 000082, 26.922
041750 45 13 00    1219*        dl 0x001345 ; 000083, 27.100
041753 65 13 00    1220*        dl 0x001365 ; 000084, 27.277
041756 85 13 00    1221*        dl 0x001385 ; 000085, 27.453
041759 A5 13 00    1222*        dl 0x0013A5 ; 000086, 27.629
04175C C5 13 00    1223*        dl 0x0013C5 ; 000087, 27.805
04175F E5 13 00    1224*        dl 0x0013E5 ; 000088, 27.979
041762 05 14 00    1225*        dl 0x001405 ; 000089, 28.154
041765 24 14 00    1226*        dl 0x001424 ; 00008A, 28.327
041768 44 14 00    1227*        dl 0x001444 ; 00008B, 28.501
04176B 63 14 00    1228*        dl 0x001463 ; 00008C, 28.673
04176E 83 14 00    1229*        dl 0x001483 ; 00008D, 28.845
041771 A2 14 00    1230*        dl 0x0014A2 ; 00008E, 29.017
041774 C1 14 00    1231*        dl 0x0014C1 ; 00008F, 29.187
041777 E0 14 00    1232*        dl 0x0014E0 ; 000090, 29.358
04177A FF 14 00    1233*        dl 0x0014FF ; 000091, 29.527
04177D 1E 15 00    1234*        dl 0x00151E ; 000092, 29.697
041780 3C 15 00    1235*        dl 0x00153C ; 000093, 29.865
041783 5B 15 00    1236*        dl 0x00155B ; 000094, 30.033
041786 79 15 00    1237*        dl 0x001579 ; 000095, 30.201
041789 98 15 00    1238*        dl 0x001598 ; 000096, 30.368
04178C B6 15 00    1239*        dl 0x0015B6 ; 000097, 30.534
04178F D4 15 00    1240*        dl 0x0015D4 ; 000098, 30.700
041792 F2 15 00    1241*        dl 0x0015F2 ; 000099, 30.865
041795 10 16 00    1242*        dl 0x001610 ; 00009A, 31.030
041798 2E 16 00    1243*        dl 0x00162E ; 00009B, 31.194
04179B 4C 16 00    1244*        dl 0x00164C ; 00009C, 31.357
04179E 6A 16 00    1245*        dl 0x00166A ; 00009D, 31.520
0417A1 87 16 00    1246*        dl 0x001687 ; 00009E, 31.682
0417A4 A5 16 00    1247*        dl 0x0016A5 ; 00009F, 31.844
0417A7 C2 16 00    1248*        dl 0x0016C2 ; 0000A0, 32.005
0417AA DF 16 00    1249*        dl 0x0016DF ; 0000A1, 32.166
0417AD FC 16 00    1250*        dl 0x0016FC ; 0000A2, 32.326
0417B0 19 17 00    1251*        dl 0x001719 ; 0000A3, 32.486
0417B3 36 17 00    1252*        dl 0x001736 ; 0000A4, 32.645
0417B6 53 17 00    1253*        dl 0x001753 ; 0000A5, 32.803
0417B9 70 17 00    1254*        dl 0x001770 ; 0000A6, 32.961
0417BC 8C 17 00    1255*        dl 0x00178C ; 0000A7, 33.118
0417BF A9 17 00    1256*        dl 0x0017A9 ; 0000A8, 33.275
0417C2 C5 17 00    1257*        dl 0x0017C5 ; 0000A9, 33.431
0417C5 E2 17 00    1258*        dl 0x0017E2 ; 0000AA, 33.587
0417C8 FE 17 00    1259*        dl 0x0017FE ; 0000AB, 33.742
0417CB 1A 18 00    1260*        dl 0x00181A ; 0000AC, 33.896
0417CE 36 18 00    1261*        dl 0x001836 ; 0000AD, 34.050
0417D1 52 18 00    1262*        dl 0x001852 ; 0000AE, 34.203
0417D4 6E 18 00    1263*        dl 0x00186E ; 0000AF, 34.356
0417D7 8A 18 00    1264*        dl 0x00188A ; 0000B0, 34.509
0417DA A5 18 00    1265*        dl 0x0018A5 ; 0000B1, 34.660
0417DD C1 18 00    1266*        dl 0x0018C1 ; 0000B2, 34.811
0417E0 DC 18 00    1267*        dl 0x0018DC ; 0000B3, 34.962
0417E3 F7 18 00    1268*        dl 0x0018F7 ; 0000B4, 35.112
0417E6 13 19 00    1269*        dl 0x001913 ; 0000B5, 35.262
0417E9 2E 19 00    1270*        dl 0x00192E ; 0000B6, 35.410
0417EC 49 19 00    1271*        dl 0x001949 ; 0000B7, 35.559
0417EF 64 19 00    1272*        dl 0x001964 ; 0000B8, 35.707
0417F2 7F 19 00    1273*        dl 0x00197F ; 0000B9, 35.854
0417F5 99 19 00    1274*        dl 0x001999 ; 0000BA, 36.001
0417F8 B4 19 00    1275*        dl 0x0019B4 ; 0000BB, 36.147
0417FB CE 19 00    1276*        dl 0x0019CE ; 0000BC, 36.293
0417FE E9 19 00    1277*        dl 0x0019E9 ; 0000BD, 36.438
041801 03 1A 00    1278*        dl 0x001A03 ; 0000BE, 36.582
041804 1D 1A 00    1279*        dl 0x001A1D ; 0000BF, 36.726
041807 37 1A 00    1280*        dl 0x001A37 ; 0000C0, 36.870
04180A 51 1A 00    1281*        dl 0x001A51 ; 0000C1, 37.013
04180D 6B 1A 00    1282*        dl 0x001A6B ; 0000C2, 37.155
041810 85 1A 00    1283*        dl 0x001A85 ; 0000C3, 37.297
041813 9F 1A 00    1284*        dl 0x001A9F ; 0000C4, 37.439
041816 B9 1A 00    1285*        dl 0x001AB9 ; 0000C5, 37.579
041819 D2 1A 00    1286*        dl 0x001AD2 ; 0000C6, 37.720
04181C EC 1A 00    1287*        dl 0x001AEC ; 0000C7, 37.859
04181F 05 1B 00    1288*        dl 0x001B05 ; 0000C8, 37.999
041822 1E 1B 00    1289*        dl 0x001B1E ; 0000C9, 38.137
041825 37 1B 00    1290*        dl 0x001B37 ; 0000CA, 38.276
041828 50 1B 00    1291*        dl 0x001B50 ; 0000CB, 38.413
04182B 69 1B 00    1292*        dl 0x001B69 ; 0000CC, 38.550
04182E 82 1B 00    1293*        dl 0x001B82 ; 0000CD, 38.687
041831 9B 1B 00    1294*        dl 0x001B9B ; 0000CE, 38.823
041834 B4 1B 00    1295*        dl 0x001BB4 ; 0000CF, 38.959
041837 CC 1B 00    1296*        dl 0x001BCC ; 0000D0, 39.094
04183A E5 1B 00    1297*        dl 0x001BE5 ; 0000D1, 39.228
04183D FD 1B 00    1298*        dl 0x001BFD ; 0000D2, 39.362
041840 16 1C 00    1299*        dl 0x001C16 ; 0000D3, 39.496
041843 2E 1C 00    1300*        dl 0x001C2E ; 0000D4, 39.629
041846 46 1C 00    1301*        dl 0x001C46 ; 0000D5, 39.762
041849 5E 1C 00    1302*        dl 0x001C5E ; 0000D6, 39.894
04184C 76 1C 00    1303*        dl 0x001C76 ; 0000D7, 40.025
04184F 8E 1C 00    1304*        dl 0x001C8E ; 0000D8, 40.156
041852 A5 1C 00    1305*        dl 0x001CA5 ; 0000D9, 40.286
041855 BD 1C 00    1306*        dl 0x001CBD ; 0000DA, 40.416
041858 D5 1C 00    1307*        dl 0x001CD5 ; 0000DB, 40.546
04185B EC 1C 00    1308*        dl 0x001CEC ; 0000DC, 40.675
04185E 04 1D 00    1309*        dl 0x001D04 ; 0000DD, 40.803
041861 1B 1D 00    1310*        dl 0x001D1B ; 0000DE, 40.931
041864 32 1D 00    1311*        dl 0x001D32 ; 0000DF, 41.059
041867 49 1D 00    1312*        dl 0x001D49 ; 0000E0, 41.186
04186A 60 1D 00    1313*        dl 0x001D60 ; 0000E1, 41.312
04186D 77 1D 00    1314*        dl 0x001D77 ; 0000E2, 41.438
041870 8E 1D 00    1315*        dl 0x001D8E ; 0000E3, 41.564
041873 A5 1D 00    1316*        dl 0x001DA5 ; 0000E4, 41.689
041876 BB 1D 00    1317*        dl 0x001DBB ; 0000E5, 41.814
041879 D2 1D 00    1318*        dl 0x001DD2 ; 0000E6, 41.938
04187C E9 1D 00    1319*        dl 0x001DE9 ; 0000E7, 42.061
04187F FF 1D 00    1320*        dl 0x001DFF ; 0000E8, 42.184
041882 15 1E 00    1321*        dl 0x001E15 ; 0000E9, 42.307
041885 2C 1E 00    1322*        dl 0x001E2C ; 0000EA, 42.429
041888 42 1E 00    1323*        dl 0x001E42 ; 0000EB, 42.551
04188B 58 1E 00    1324*        dl 0x001E58 ; 0000EC, 42.672
04188E 6E 1E 00    1325*        dl 0x001E6E ; 0000ED, 42.793
041891 84 1E 00    1326*        dl 0x001E84 ; 0000EE, 42.913
041894 99 1E 00    1327*        dl 0x001E99 ; 0000EF, 43.033
041897 AF 1E 00    1328*        dl 0x001EAF ; 0000F0, 43.152
04189A C5 1E 00    1329*        dl 0x001EC5 ; 0000F1, 43.271
04189D DA 1E 00    1330*        dl 0x001EDA ; 0000F2, 43.390
0418A0 F0 1E 00    1331*        dl 0x001EF0 ; 0000F3, 43.508
0418A3 05 1F 00    1332*        dl 0x001F05 ; 0000F4, 43.625
0418A6 1B 1F 00    1333*        dl 0x001F1B ; 0000F5, 43.742
0418A9 30 1F 00    1334*        dl 0x001F30 ; 0000F6, 43.859
0418AC 45 1F 00    1335*        dl 0x001F45 ; 0000F7, 43.975
0418AF 5A 1F 00    1336*        dl 0x001F5A ; 0000F8, 44.091
0418B2 6F 1F 00    1337*        dl 0x001F6F ; 0000F9, 44.206
0418B5 84 1F 00    1338*        dl 0x001F84 ; 0000FA, 44.321
0418B8 99 1F 00    1339*        dl 0x001F99 ; 0000FB, 44.435
0418BB AD 1F 00    1340*        dl 0x001FAD ; 0000FC, 44.549
0418BE C2 1F 00    1341*        dl 0x001FC2 ; 0000FD, 44.662
0418C1 D7 1F 00    1342*        dl 0x001FD7 ; 0000FE, 44.775
0418C4 EB 1F 00    1343*        dl 0x001FEB ; 0000FF, 44.888
0418C7 00 20 00    1344*        dl 0x002000 ; 000100, 45.000 only needed for interpolation
0418CA             0037         include "time.inc"
0418CA             0001*    ; Convert seconds to HH:MM:SS format.
0418CA             0002*    ; inputs: hl = seconds
0418CA             0003*    ; outputs: hl = pointer to zero-terminated string representation of HH:MM:SS
0418CA             0004*    ; destroys: a,bc,de
0418CA             0005*    seconds_to_hhmmss:
0418CA             0006*    ; Divide the total seconds into hours, minutes, and seconds.
0418CA             0007*    ; Hours = Total seconds ÷ 3600.
0418CA 11 10 0E 00 0008*        ld de,3600
0418CE CD ED 03 04 0009*        call udiv24 ; de = hours, hl = remaining seconds
0418D2 E5          0010*        push hl ; save remainder
0418D3 EB          0011*        ex de,hl ; hl = hours
0418D4 11 2D 19 04 0012*        ld de,@bin2asc
0418D8 CD 95 01 04 0013*        call u8_to_ascii ; answer in @bin2asc
0418DC 3A 2F 19 04 0014*        ld a,(@bin2asc+2)
0418E0 32 37 19 04 0015*        ld (hhmmss+0),a
0418E4 3A 30 19 04 0016*        ld a,(@bin2asc+3)
0418E8 32 38 19 04 0017*        ld (hhmmss+1),a
0418EC             0018*    ; Minutes = Remaining seconds ÷ 60.
0418EC E1          0019*        pop hl ; restore remainder
0418ED 11 3C 00 00 0020*        ld de,60
0418F1 CD ED 03 04 0021*        call udiv24 ; de = minutes, hl = remaining seconds
0418F5 E5          0022*        push hl ; save remainder
0418F6 EB          0023*        ex de,hl ; hl = minutes
0418F7 11 2D 19 04 0024*        ld de,@bin2asc
0418FB CD 95 01 04 0025*        call u8_to_ascii ; answer in @bin2asc
0418FF 3A 2F 19 04 0026*        ld a,(@bin2asc+2)
041903 32 3A 19 04 0027*        ld (hhmmss+3),a
041907 3A 30 19 04 0028*        ld a,(@bin2asc+3)
04190B 32 3B 19 04 0029*        ld (hhmmss+4),a
04190F             0030*    ; Seconds = Remaining seconds.
04190F E1          0031*        pop hl ; restore remainder
041910 11 2D 19 04 0032*        ld de,@bin2asc
041914 CD 95 01 04 0033*        call u8_to_ascii ; answer in @bin2asc
041918 3A 2F 19 04 0034*        ld a,(@bin2asc+2)
04191C 32 3D 19 04 0035*        ld (hhmmss+6),a
041920 3A 30 19 04 0036*        ld a,(@bin2asc+3)
041924 32 3E 19 04 0037*        ld (hhmmss+7),a
041928 21 37 19 04 0038*        ld hl,hhmmss
04192C C9          0039*        ret
04192D 00 00 00 00 0040*    @bin2asc: blkw 5,0 ; scratch space for binary to ascii decimal conversion
       00 00 00 00 
       00 00       
041937 30 30 3A 30 0041*    hhmmss: asciz "00:00:00" ; buffer for output string
       30 3A 30 30 
       00          
041940             0042*    ; end seconds_to_hhmmss
041940             0038         include "timer.inc"
041940             0001*    ; Table 32. Timer Control Registers
041940             0002*    TMR0_CTL: equ 80h
041940             0003*    TMR1_CTL: equ 83h
041940             0004*    TMR2_CTL: equ 86h
041940             0005*    TMR3_CTL: equ 89h
041940             0006*    TMR4_CTL: equ 8Ch
041940             0007*    TMR5_CTL: equ 8Fh
041940             0008*    
041940             0009*    ; each timer register takes three bytes:
041940             0010*    ;   0: control register
041940             0011*    ;   1: low byte of timer reset value
041940             0012*    ;   2: high byte of timer reset value
041940             0013*    ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
041940             0014*    ; which correctly force the high and upper bytes of the address bus to zero
041940             0015*    
041940             0016*    TMR_REG_CTL: equ 0
041940             0017*    TMR_RES_LOW: equ 1
041940             0018*    TMR_RES_HIGH: equ 2
041940             0019*    
041940             0020*    ; Timer Control Register Bit Definitions
041940             0021*    PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
041940             0022*                                ; This bit is reset to 0 every time the TMRx_CTL register is read.
041940             0023*    PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
041940             0024*                                ; an interrupt signal is sent to the CPU. This bit remains 1 until
041940             0025*                                ; the TMRx_CTL register is read.
041940             0026*    
041940             0027*    IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
041940             0028*    IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
041940             0029*    
041940             0030*    PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
041940             0031*                                ;  0,and counting stops when the end-of-count value is reached.
041940             0032*    PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
041940             0033*                                ; written to the counter when the end-of-count value is reached.
041940             0034*    
041940             0035*    ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
041940             0036*    CLK_DIV_256:  equ %00001100 ;
041940             0037*    CLK_DIV_64:   equ %00001000 ;
041940             0038*    CLK_DIV_16:   equ %00000100 ;
041940             0039*    CLK_DIV_4:    equ %00000000 ;
041940             0040*    
041940             0041*    RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
041940             0042*    RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
041940             0043*                                ; When a 1 is written to this bit,the values in the reload registers
041940             0044*                                ;  are loaded into the downcounter when the timer restarts. The
041940             0045*                                ; programmer must ensure that this bit is set to 1 each time
041940             0046*                                ; SINGLE-PASS mode is used.
041940             0047*    
041940             0048*    ; disable/enable the programmable reload timer
041940             0049*    PRT_EN_0:     equ %00000000 ;
041940             0050*    PRT_EN_1:     equ %00000001 ;
041940             0051*    
041940             0052*    ; Table 37. Timer Input Source Select Register
041940             0053*    ; Each of the 4 timers are allocated two bits of the 8-bit register
041940             0054*    ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
041940             0055*    ;   00: System clock / CLK_DIV
041940             0056*    ;   01: RTC / CLK_DIV
041940             0057*    ;   NOTE: these are the values given in the manual,but it may be a typo
041940             0058*    ;   10: GPIO port B pin 1.
041940             0059*    ;   11: GPIO port B pin 1.
041940             0060*    TMR_ISS:   equ 92h ; register address
041940             0061*    
041940             0062*    ; Table 51. Real-Time Clock Control Register
041940             0063*    RTC_CTRL: equ EDh ; register address
041940             0064*    
041940             0065*    ; alarm interrupt disable/enable
041940             0066*    RTC_ALARM_0:    equ %00000000
041940             0067*    RTC_ALARM_1:    equ %10000000
041940             0068*    
041940             0069*    ; interrupt on alarm disable/enable
041940             0070*    RTC_INT_ENT_0:  equ %00000000
041940             0071*    RTC_INT_ENT_1:  equ %01000000
041940             0072*    
041940             0073*    RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
041940             0074*    RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
041940             0075*    
041940             0076*    RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
041940             0077*                                    ; On-chip 32768 Hz oscillator is enabled.
041940             0078*    RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
041940             0079*                                    ; On-chip 32768 Hz oscillator is disabled.
041940             0080*    
041940             0081*    RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
041940             0082*    RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
041940             0083*    
041940             0084*    RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
041940             0085*    RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
041940             0086*    
041940             0087*    RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
041940             0088*                                    ; RTC counter is enabled.
041940             0089*    RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
041940             0090*                                    ; RTC counter is disabled.
041940             0091*    
041940             0092*    ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
041940             0093*    
041940             0094*    prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
041940             0095*    prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
041940 00 00 00    0096*    prt_reload: dl 0x000000
041943             0097*    
041943             0098*    ; returns: a = 0 if running on hardware,1 if running on emulator
041943             0099*    ;          de = number PRT interrupts during test interval
041943             0100*    prt_calibrate:
041943 CD 52 1C 04 0101*        call vdu_vblank
041947             0102*    ; set a MOS timer
041947 21 78 00 00 0103*        ld hl,120*1 ; 1 second
04194B FD 21 CB 1A 0104*        ld iy,tmr_test
       04          
041950 CD A9 1A 04 0105*        call tmr_set
041954             0106*    ; set a PRT timer
041954             0107*        ; ld hl,prt_reload_hardware
041954             0108*        ; ld hl,prt_reload_emulator
041954 21 05 2D 00 0109*        ld hl,prt_reload_emulator + prt_reload_hardware / 2
041958 22 40 19 04 0110*        ld (prt_reload),hl
04195C CD E4 19 04 0111*        call prt_set
041960             0112*    @loop:
041960             0113*    ; check time remaining on MOS timer
041960 CD B7 1A 04 0114*        call tmr_get
041964 CA 6E 19 04 0115*        jp z,@done ; time expired,so quit
041968 FA 6E 19 04 0116*        jp m,@done ; time past expiration (negative),so quit
04196C 18 F2       0117*        jr @loop
04196E             0118*    @done:
04196E ED 5B 32 1A 0119*        ld de,(prt_irq_counter)
       04          
041973 01 0C 2D 00 0120*        ld bc,prt_reload_hardware ; default value for running on hardware
041977 ED 43 40 19 0121*        ld (prt_reload),bc
       04          
04197C 21 64 00 00 0122*        ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
041980 AF          0123*        xor a ; clear carry,zero is default value for running on hardware
041981 32 A3 19 04 0124*        ld (is_emulator),a
041985 ED 52       0125*        sbc hl,de
041987 21 A4 19 04 0126*        ld hl,on_hardware ; default message for running on hardware
04198B CA 43 19 04 0127*        jp z,prt_calibrate ; zero result is indeterminate so we try again
04198F F8          0128*        ret m ; negative result means we're on hardware
041990 3C          0129*        inc a ; we're on emulator
041991 32 A3 19 04 0130*        ld (is_emulator),a
041995 01 FF 2C 00 0131*        ld bc,prt_reload_emulator
041999 ED 43 40 19 0132*        ld (prt_reload),bc
       04          
04199E 21 BA 19 04 0133*        ld hl,on_emulator
0419A2 C9          0134*        ret
0419A3 00          0135*    is_emulator: db 0
0419A4 52 75 6E 6E 0136*    on_hardware: defb "Running on hardware\r\n",0
       69 6E 67 20 
       6F 6E 20 68 
       61 72 64 77 
       61 72 65 0D 
       0A 00       
0419BA 52 75 6E 6E 0137*    on_emulator: defb "Running on emulator\r\n",0
       69 6E 67 20 
       6F 6E 20 65 
       6D 75 6C 61 
       74 6F 72 0D 
       0A 00       
0419D0             0138*    
0419D0 43 61 6C 69 0139*    calibrating_timer: defb "Calibrating timer\r\n",0
       62 72 61 74 
       69 6E 67 20 
       74 69 6D 65 
       72 0D 0A 00 
0419E4             0140*    
0419E4             0141*    ; set PRT timer
0419E4             0142*    prt_set:
0419E4 21 00 00 00 0143*        ld hl,0
0419E8 22 32 1A 04 0144*        ld (prt_irq_counter),hl
0419EC 2A 40 19 04 0145*        ld hl,(prt_reload)
0419F0 ED 29 84    0146*        out0 (TMR1_CTL+TMR_RES_LOW),l
0419F3 ED 21 85    0147*    	out0 (TMR1_CTL+TMR_RES_HIGH),h
0419F6             0148*    ; disable timer
0419F6 3E 06       0149*        ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0419F8 ED 39 83    0150*    	out0 (TMR1_CTL+TMR_REG_CTL),a
0419FB             0151*    ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0419FB 3E 57       0152*        ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0419FD ED 39 83    0153*    	out0 (TMR1_CTL+TMR_REG_CTL),a
041A00 C9          0154*        ret
041A01             0155*    
041A01             0156*    ; ===============================================
041A01             0157*    ; PRT Timer Interrupt Handling
041A01             0158*    ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
041A01             0159*    ; -----------------------------------------------
041A01             0160*    prt_irq_init:
041A01             0161*        ; set up interrupt vector table 2
041A01 21 00 00 00 0162*    	ld hl,0
041A05 3A 0C 01 00 0163*    	ld a,($10c)
041A09 6F          0164*    	ld l,a
041A0A 3A 0D 01 00 0165*    	ld a,($10d)
041A0E 67          0166*    	ld h,a
041A0F             0167*    
041A0F             0168*    	; skip over CALL ($c3)
041A0F 23          0169*    	inc hl
041A10             0170*    	; load address of jump into vector table 2 (in ram)
041A10 ED 27       0171*    	ld hl,(hl)
041A12             0172*    
041A12             0173*    	; write CALL prt_irq_handler to vector table 2
041A12 3E C3       0174*    	ld a,$c3
041A14 77          0175*    	ld (hl),a
041A15 23          0176*    	inc hl
041A16 11 1D 1A 04 0177*    	ld de,prt_irq_handler
041A1A ED 1F       0178*    	ld (hl),de
041A1C             0179*    
041A1C C9          0180*        ret
041A1D             0181*    
041A1D             0182*    prt_irq_handler:
041A1D F3          0183*    	di
041A1E F5          0184*    	push af
041A1F E5          0185*        push hl
041A20 ED 38 83    0186*    	in0 a,(TMR1_CTL+TMR_REG_CTL)
041A23 2A 32 1A 04 0187*    	ld hl,(prt_irq_counter)
041A27 23          0188*    	inc hl
041A28 22 32 1A 04 0189*    	ld (prt_irq_counter),hl
041A2C E1          0190*        pop hl
041A2D F1          0191*    	pop af
041A2E FB          0192*    	ei
041A2F 5B ED 4D    0193*    	reti.l
041A32             0194*    
041A32             0195*    prt_irq_counter:
041A32 00 00 00    0196*    	.dl 0
041A35             0197*    prt_irq_counter_saved:
041A35 00 00 00    0198*        .dl 0
041A38             0199*    
041A38             0200*    prt_loop_reset:
041A38 E5          0201*        push hl
041A39 21 00 00 00 0202*    	ld hl,0
041A3D 22 32 1A 04 0203*    	ld (prt_irq_counter),hl
041A41 22 A3 1A 04 0204*        ld (prt_loop_counter),hl
041A45 22 A6 1A 04 0205*        ld (prt_loops),hl
041A49 CD E4 19 04 0206*        call prt_set
041A4D E1          0207*        pop hl
041A4E C9          0208*        ret
041A4F             0209*    
041A4F             0210*    prt_loop_start:
041A4F E5          0211*        push hl
041A50 21 00 00 00 0212*    	ld hl,0
041A54 22 32 1A 04 0213*    	ld (prt_irq_counter),hl
041A58 E1          0214*        pop hl
041A59 C9          0215*        ret
041A5A             0216*    
041A5A             0217*    prt_loop_stop:
041A5A E5          0218*        push hl
041A5B D5          0219*        push de
041A5C 2A 32 1A 04 0220*        ld hl,(prt_irq_counter)
041A60 ED 5B A3 1A 0221*        ld de,(prt_loop_counter)
       04          
041A65 19          0222*        add hl,de
041A66 22 A3 1A 04 0223*        ld (prt_loop_counter),hl
041A6A 21 00 00 00 0224*        ld hl,0
041A6E 22 32 1A 04 0225*        ld (prt_irq_counter),hl
041A72 2A A6 1A 04 0226*        ld hl,(prt_loops)
041A76 23          0227*        inc hl
041A77 22 A6 1A 04 0228*        ld (prt_loops),hl
041A7B D1          0229*        pop de
041A7C E1          0230*        pop hl
041A7D C9          0231*        ret
041A7E             0232*    
041A7E             0233*    ; inputs: bc = y,x text coordinates to print
041A7E             0234*    prt_loop_print:
041A7E F5          0235*        push af
041A7F E5          0236*        push hl
041A80 C5          0237*        push bc
041A81 D5          0238*        push de
041A82 DD E5       0239*        push ix
041A84 FD E5       0240*        push iy
041A86 CD B6 1B 04 0241*        call vdu_move_cursor
041A8A             0242*    
041A8A 2A A3 1A 04 0243*        ld hl,(prt_loop_counter)
041A8E CD CC 00 04 0244*        call printDec
041A92             0245*    
041A92 2A A6 1A 04 0246*        ld hl,(prt_loops)
041A96 CD CC 00 04 0247*        call printDec
041A9A             0248*    
041A9A FD E1       0249*        pop iy
041A9C DD E1       0250*        pop ix
041A9E D1          0251*        pop de
041A9F C1          0252*        pop bc
041AA0 E1          0253*        pop hl
041AA1 F1          0254*        pop af
041AA2 C9          0255*        ret
041AA3             0256*    
041AA3             0257*    prt_loop_counter:
041AA3 00 00 00    0258*        .dl 0
041AA6             0259*    prt_loops:
041AA6 00 00 00    0260*        .dl 0
041AA9             0261*    
041AA9             0262*    ; ===============================================
041AA9             0263*    ; Timer functions
041AA9             0264*    ; -----------------------------------------------
041AA9             0265*    ; set a countdown timer
041AA9             0266*    ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041AA9             0267*    ; returns: hl = current time
041AA9             0268*    tmr_set:
041AA9 FD 2F 03    0269*        ld (iy+3),hl            ; set time remaining
041AAC             0270*        MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041AAC 3E 08       0001*M1  			LD	A, function
041AAE 5B CF       0002*M1  			RST.LIL	08h
041AB0 DD 27 00    0271*        ld hl,(ix+sysvar_time)  ; get current time
041AB3 FD 2F 00    0272*        ld (iy+0),hl            ; set start time
041AB6 C9          0273*        ret
041AB7             0274*    
041AB7             0275*    ; gets time remaining on a countdown timer
041AB7             0276*    ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041AB7             0277*    ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041AB7             0278*    ;          sign flags: pos = time not expired,zero or neg = time expired
041AB7             0279*    tmr_get:
041AB7             0280*        MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041AB7 3E 08       0001*M1  			LD	A, function
041AB9 5B CF       0002*M1  			RST.LIL	08h
041ABB DD 17 00    0281*        ld de,(ix+sysvar_time)  ; get current time
041ABE FD 27 00    0282*        ld hl,(iy+0)            ; get start time
041AC1 AF          0283*        xor a                   ; clear carry
041AC2 ED 52       0284*        sbc hl,de               ; hl = time elapsed (will always be zero or negative)
041AC4 FD 17 03    0285*        ld de,(iy+3)            ; get timer set value
041AC7 AF          0286*        xor a                   ; clear carry
041AC8 ED 5A       0287*        adc hl,de               ; hl = time remaining
041ACA             0288*                                ; (we do adc because add hl,rr doesn't set sign or zero flags)
041ACA C9          0289*        ret
041ACB             0290*    
041ACB             0291*    tmr_test: ds 6 ; example of a buffer to hold timer data
041AD1             0292*    
       FF FF FF FF 
       FF FF 
041AD1 00 00 00    0293*    timestamp_now: dl 0
041AD4 00 00 00    0294*    timestamp_old: dl 0
041AD7 00 00 00    0295*    timestamp_chg: dl 0
041ADA             0296*    
041ADA             0297*    ; update the global timestamp from the system clock
041ADA             0298*    ; inputs: none
041ADA             0299*    ; returns: hl = time elapsed in 1/120ths of a second
041ADA             0300*    ;          de = current time
041ADA             0301*    ;          ix = pointer to syvars table
041ADA             0302*    ; destroys: af,hl,de,ix
041ADA             0303*    timestamp_tick:
041ADA ED 5B D1 1A 0304*        ld de,(timestamp_now)   ; get previous time
       04          
041ADF ED 53 D4 1A 0305*        ld (timestamp_old),de   ; save previous time
       04          
041AE4             0306*        MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041AE4 3E 08       0001*M1  			LD	A, function
041AE6 5B CF       0002*M1  			RST.LIL	08h
041AE8 DD 27 00    0307*        ld hl,(ix+sysvar_time)  ; get current time
041AEB 22 D1 1A 04 0308*        ld (timestamp_now),hl   ; save current time
041AEF AF          0309*        xor a                   ; clear carry
041AF0 ED 52       0310*        sbc hl,de               ; hl = time elapsed
041AF2 22 D7 1A 04 0311*        ld (timestamp_chg),hl   ; save elapsed time
041AF6 C9          0312*        ret
041AF7             0313*    
041AF7             0314*    ; set a countdown timer
041AF7             0315*    ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041AF7             0316*    ; requires: timestamp_tick to be called at least once before this function
041AF7             0317*    ; returns: hl = current time
041AF7             0318*    ; destroys: hl
041AF7             0319*    timestamp_tmr_set:
041AF7 FD 2F 03    0320*        ld (iy+3),hl            ; set time remaining
041AFA 2A D1 1A 04 0321*        ld hl,(timestamp_now)   ; get current timestamp
041AFE FD 2F 00    0322*        ld (iy+0),hl            ; set start time
041B01 C9          0323*        ret
041B02             0324*    
041B02             0325*    ; gets time remaining on a countdown timer following the global timestamp
041B02             0326*    ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
041B02             0327*    ; requires: timestamp_tick to be called at least once before this function
041B02             0328*    ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
041B02             0329*    ;          sign flags: pos = time not expired,zero or neg = time expired
041B02             0330*    ; destroys: af,hl,de
041B02             0331*    timestamp_tmr_get:
041B02 ED 5B D1 1A 0332*        ld de,(timestamp_now)   ; get current timestamp
       04          
041B07 FD 27 00    0333*        ld hl,(iy+0)            ; get start time
041B0A AF          0334*        xor a                   ; clear carry
041B0B ED 52       0335*        sbc hl,de               ; hl = time elapsed (will always be zero or negative)
041B0D FD 17 03    0336*        ld de,(iy+3)            ; get timer set value
041B10 AF          0337*        xor a                   ; clear carry
041B11 ED 5A       0338*        adc hl,de               ; hl = time remaining
041B13             0339*                                ; (we do adc because add hl,rr doesn't set sign or zero flags)
041B13 C9          0340*        ret
041B14             0341*    
041B14             0342*    ; set a stopwatch
041B14             0343*    ; returns: hl = start time
041B14             0344*    ; destroys: hl,ix
041B14             0345*    stopwatch_set:
041B14             0346*        MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041B14 3E 08       0001*M1  			LD	A, function
041B16 5B CF       0002*M1  			RST.LIL	08h
041B18 DD 27 00    0347*        ld hl,(ix+sysvar_time)  ; get current time
041B1B 22 30 1B 04 0348*        ld (stopwatch_started),hl            ; set start time
041B1F C9          0349*        ret
041B20             0350*    
041B20             0351*    ; gets time elapsed on a stopwatch
041B20             0352*    ; returns: hl = time elapsed in 1/120ths of a second
041B20             0353*    ; destroys: af,hl,de,ix
041B20             0354*    stopwatch_get:
041B20             0355*        MOSCALL mos_sysvars     ; ix points to syvars table
                       M1 Args: function=mos_sysvars 
041B20 3E 08       0001*M1  			LD	A, function
041B22 5B CF       0002*M1  			RST.LIL	08h
041B24 DD 27 00    0356*        ld hl,(ix+sysvar_time)  ; get current time
041B27 ED 5B 30 1B 0357*        ld de,(stopwatch_started)            ; get start time
       04          
041B2C AF          0358*        xor a                   ; clear carry
041B2D ED 52       0359*        sbc hl,de               ; hl = time elapsed (will always be zero or positive)
041B2F C9          0360*        ret
041B30             0361*    
041B30             0362*    stopwatch_started: ds 3 ; buffer to hold stopwatch start time
041B33             0363*    
041B33             0364*    ; ------------------
041B33             0365*    ; delay routine
041B33             0366*    ; Author: Richard Turrnidge
041B33             0367*    ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.asm
041B33             0368*    ; routine waits a fixed time,then returns
041B33             0369*    ; arrive with A =  the delay byte. One bit to be set only.
041B33             0370*    ; eg. ld A,00000100b
041B33             0371*    
041B33             0372*    multiPurposeDelay:
       FF FF FF 
041B33 F5          0373*        push af
041B34 C5          0374*        push bc
041B35 DD E5       0375*        push ix
041B37 47          0376*        ld b,a
041B38 3E 08       0377*        ld a,$08
041B3A 5B CF       0378*        RST.LIL	08h                 ; get IX pointer to sysvars
041B3C             0379*    
041B3C             0380*    waitLoop:
041B3C             0381*    
041B3C DD 7E 00    0382*        ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
041B3F             0383*    
041B3F             0384*                                    ;   we check if bit set is same as last time we checked.
041B3F             0385*                                    ;   bit 0 - don't use
041B3F             0386*                                    ;   bit 1 - changes 64 times per second
041B3F             0387*                                    ;   bit 2 - changes 32 times per second
041B3F             0388*                                    ;   bit 3 - changes 16 times per second
041B3F             0389*    
041B3F             0390*                                    ;   bit 4 - changes 8 times per second
041B3F             0391*                                    ;   bit 5 - changes 4 times per second
041B3F             0392*                                    ;   bit 6 - changes 2 times per second
041B3F             0393*                                    ;   bit 7 - changes 1 times per second
041B3F A0          0394*        and b
041B40 4F          0395*        ld c,a
041B41 3A 52 1B 04 0396*        ld a,(oldTimeStamp)
041B45 B9          0397*        cp c                        ; is A same as last value?
041B46 28 F4       0398*        jr z,waitLoop              ; loop here if it is
041B48 79          0399*        ld a,c
041B49 32 52 1B 04 0400*        ld (oldTimeStamp),a        ; set new value
041B4D             0401*    
041B4D DD E1       0402*        pop ix
041B4F C1          0403*        pop bc
041B50 F1          0404*        pop af
041B51 C9          0405*        ret
041B52             0406*    
041B52 00          0407*    oldTimeStamp:   .db 00h
041B53             0039         include "vdu.inc"
041B53             0001*    ; VDU 30: Home cursor
041B53             0002*    vdu_home_cursor:
041B53 3E 1E       0003*        ld a,30
041B55 5B D7       0004*    	rst.lil $10
041B57 C9          0005*    	ret
041B58             0006*    
041B58             0007*    vdu_cursor_on:
041B58 21 63 1B 04 0008*    	ld hl,@cmd
041B5C 01 03 00 00 0009*    	ld bc,@end-@cmd
041B60 5B DF       0010*    	rst.lil $18
041B62 C9          0011*    	ret
041B63             0012*    @cmd:
041B63 17 01 01    0013*    	db 23,1,1
041B66             0014*    @end:
041B66             0015*    
041B66             0016*    vdu_cursor_off:
041B66 21 71 1B 04 0017*    	ld hl,@cmd
041B6A 01 03 00 00 0018*    	ld bc,@end-@cmd
041B6E 5B DF       0019*    	rst.lil $18
041B70 C9          0020*    	ret
041B71             0021*    @cmd:
041B71 17 01 00    0022*    	db 23,1,0
041B74             0023*    @end:
041B74             0024*    
041B74             0025*    ; VDU 4: Write text at text cursor
041B74             0026*    ; This causes text to be written at th current text cursor position. This is the default mode for text display.
041B74             0027*    ; inputs: none
041B74             0028*    ; prerequisites: the text cursor at the intended position on screen
041B74             0029*    ; outputs: none
041B74             0030*    ; destroys: af
041B74             0031*    vdu_text_to_text_cursor:
041B74 3E 04       0032*        ld a,4
041B76 5B D7       0033*        rst.lil $10
041B78 C9          0034*        ret
041B79             0035*    ; end vdu_text_to_text_cursor
041B79             0036*    
041B79             0037*    ; set the text cursor to a specified location and print a string there
041B79             0038*    ; inputs: hl = address of string to print, c,b = x,y text coordinates
041B79             0039*    ; outputs: text
041B79             0040*    ; destroys: af, bc, hl
041B79             0041*    ; affects: moves text cursor to position after final char printed by default
041B79             0042*    ;          unless overridden by VDU 23, 16 cursor control command settings
041B79             0043*    ;          all subsequent print commands (rst.lil $10 or $18) will go to the text cursor
041B79             0044*    vdu_print_to_text_location:
041B79 E5          0045*        push hl ; preserve string pointer
041B7A 3E 04       0046*        ld a,4 ; VDU 4 char to text cursor
041B7C 5B D7       0047*        rst.lil $10
041B7E CD B6 1B 04 0048*        call vdu_move_cursor
041B82 E1          0049*        pop hl ; restore string pointer
041B83 CD 67 00 04 0050*        call printString
041B87 C9          0051*        ret
041B88             0052*    ; end vdu_print_at_text_location
041B88             0053*    
041B88             0054*    ; VDU 5: Write text at graphics cursor
041B88             0055*    ; inputs: none
041B88             0056*    ; prerequisites: the graphics cursor at the intended position on screen
041B88             0057*    ; outputs: none
041B88             0058*    ; destroys: af
041B88             0059*    vdu_text_to_gfx_cursor:
041B88 3E 05       0060*        ld a,5
041B8A 5B D7       0061*    	rst.lil $10
041B8C C9          0062*    	ret
041B8D             0063*    ; end vdu_char_to_gfx_cursor
041B8D             0064*    
041B8D             0065*    ; set the graphics cursor to a specified location and print a string there
041B8D             0066*    ; inputs: hl = address of string to print, bc,de = x,y graphics coordinates
041B8D             0067*    ; outputs: text
041B8D             0068*    ; destroys: af, bc, de, hl
041B8D             0069*    ; affects: moves graphics cursor to position after final char printed by default
041B8D             0070*    ;          unless overridden by setting bit 6 of the cursor control register (VDU 23, 16)
041B8D             0071*    ;          all subsequent print commands (rst.lil $10 or $18) will go to the graphics cursor
041B8D             0072*    vdu_print_to_gfx_location:
041B8D E5          0073*        push hl ; preserve string pointer
041B8E 3E 44       0074*        ld a,plot_pt+mv_abs
041B90 CD FE 20 04 0075*        call vdu_plot ; moves the graphics cursor to the specified location
041B94 3E 05       0076*        ld a,5 ; VDU 5 char to gfx cursor
041B96 5B D7       0077*        rst.lil $10
041B98 E1          0078*        pop hl ; restore string pointer
041B99 01 00 00 00 0079*        ld bc,0
041B9D 3E 00       0080*        ld a,0
041B9F 5B DF       0081*        rst.lil $18 ; print the string
041BA1 C9          0082*        ret
041BA2             0083*    ; end vdu_print_at_gfx_location
041BA2             0084*    
041BA2             0085*    ; VDU 8: Move cursor back one character
041BA2             0086*    vdu_cursor_back:
041BA2 3E 08       0087*        ld a,8
041BA4 5B D7       0088*        rst.lil $10
041BA6 C9          0089*        ret
041BA7             0090*    ; end vdu_cursor_back
041BA7             0091*    
041BA7             0092*    ; VDU 9: Move cursor forward one character
041BA7             0093*    vdu_cursor_forward:
041BA7 3E 09       0094*        ld a,9
041BA9 5B D7       0095*    	rst.lil $10
041BAB C9          0096*    	ret
041BAC             0097*    ; end vdu_cursor_forward
041BAC             0098*    
041BAC             0099*    ; VDU 10: Move cursor down one line
041BAC             0100*    vdu_cursor_down:
041BAC 3E 0A       0101*        ld a,10
041BAE 5B D7       0102*        rst.lil $10
041BB0 C9          0103*        ret
041BB1             0104*    ; end vdu_cursor_down
041BB1             0105*    
041BB1             0106*    ; VDU 11: Move cursor up one line
041BB1             0107*    vdu_cursor_up:
041BB1 3E 0B       0108*        ld a,11
041BB3 5B D7       0109*        rst.lil $10
041BB5 C9          0110*        ret
041BB6             0111*    ; end vdu_cursor_up
041BB6             0112*    
041BB6             0113*    
041BB6             0114*    ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041BB6             0115*    ; inputs: c=x, b=y 8-bit unsigned integers
041BB6             0116*    vdu_move_cursor:
041BB6 ED 43 C7 1B 0117*        ld (@x0),bc
       04          
041BBB 21 C6 1B 04 0118*    	ld hl,@cmd
041BBF 01 03 00 00 0119*    	ld bc,@end-@cmd
041BC3 5B DF       0120*    	rst.lil $18
041BC5 C9          0121*    	ret
041BC6 1F          0122*    @cmd: 	db 31
041BC7 00          0123*    @x0:	db 0
041BC8 00          0124*    @y0: 	db 0
041BC9 00          0125*    @end: 	db 0 ; padding
041BCA             0126*    
041BCA             0127*    ; https://agonconsole8.github.io/agon-docs/vdp/VDU-Commands/#vdu-23-1-n-cursor-control
041BCA             0128*    ; VDU 23, 16, setting, mask: Define cursor movement behaviour
041BCA             0129*    ; inputs: l = setting, h = mask
041BCA             0130*    ; new_setting = (current_setting AND mask) EOR setting
041BCA             0131*    ; in English: mask controls which bit to turn on or off, setting is the value of the bits to set or reset
041BCA             0132*    vdu_cursor_behaviour:
041BCA 22 DB 1B 04 0133*        ld (@setting),hl ; little-endian!
041BCE 21 D9 1B 04 0134*        ld hl,@cmd
041BD2 01 04 00 00 0135*        ld bc,@end-@cmd
041BD6 5B DF       0136*        rst.lil $18
041BD8 C9          0137*        ret
041BD9 17 10       0138*    @cmd: db 23,16
041BDB 00          0139*    @setting: db 0
041BDC 00          0140*    @mask: db 0
041BDD 00          0141*    @end: db 0 ; padding
041BDE             0142*    
041BDE             0143*    ; VDU 12: Clear text area (CLS)
041BDE             0144*    vdu_cls:
041BDE 3E 0C       0145*        ld a,12
041BE0 5B D7       0146*    	rst.lil $10
041BE2 C9          0147*    	ret
041BE3             0148*    
041BE3             0149*    vdu_flip:
041BE3 21 EE 1B 04 0150*    	ld hl,@cmd
041BE7 01 03 00 00 0151*    	ld bc,@end-@cmd
041BEB 5B DF       0152*    	rst.lil $18
041BED C9          0153*    	ret
041BEE 17 00 C3    0154*    @cmd: db 23,0,0xC3
041BF1             0155*    @end:
041BF1             0156*    
041BF1             0157*    ; VDU 16: Clear graphics area (CLG)
041BF1             0158*    vdu_clg:
041BF1 3E 10       0159*        ld a,16
041BF3 5B D7       0160*    	rst.lil $10
041BF5 C9          0161*    	ret
041BF6             0162*    
041BF6             0163*    ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
041BF6             0164*    ; VDU 23, 7: Scrolling
041BF6             0165*    ;     VDU 23, 7, extent, direction, speed: Scroll the screen
041BF6             0166*    ; inputs: a, extent; l, direction; h; speed
041BF6             0167*    vdu_scroll_down:
041BF6 32 0B 1C 04 0168*    	ld (@extent),a
041BFA 22 0C 1C 04 0169*    	ld (@dir),hl ; implicitly populates @speed
041BFE 21 09 1C 04 0170*    	ld hl,@cmd
041C02 01 05 00 00 0171*    	ld bc,@end-@cmd
041C06 5B DF       0172*    	rst.lil $18     ;; Sending command to VDP
041C08 C9          0173*    	ret
041C09 17 07       0174*    @cmd:       db 23,7
041C0B 00          0175*    @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
041C0C 00          0176*    @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
041C0D 00          0177*    @speed:     db 0x00 ; pixels
041C0E 00          0178*    @end:		db 0x00 ; padding
041C0F             0179*    
041C0F             0180*    ; COLOUR MODES
041C0F             0181*    ; Mode	Effect
041C0F             0182*    ; 0	Set on-screen pixel to target colour value
041C0F             0183*    ; 1	OR value with the on-screen pixel
041C0F             0184*    ; 2	AND value with the on-screen pixel
041C0F             0185*    ; 3	XOR value with the on-screen pixel
041C0F             0186*    ; 4	Invert the on-screen pixel
041C0F             0187*    ; 5	No operation
041C0F             0188*    ; 6	AND the inverse of the specified colour with the on-screen pixel
041C0F             0189*    ; 7	OR the inverse of the specified colour with the on-screen pixel
041C0F             0190*    
041C0F             0191*    ; VDU 17, colour: Define text colour (COLOUR)
041C0F             0192*    vdu_colour_text:
041C0F 32 1F 1C 04 0193*    	ld (@arg),a
041C13 21 1E 1C 04 0194*    	ld hl,@cmd
041C17 01 02 00 00 0195*    	ld bc,@end-@cmd
041C1B 5B DF       0196*    	rst.lil $18
041C1D C9          0197*    	ret
041C1E 11          0198*    @cmd: db 17
041C1F 00          0199*    @arg: db 0
041C20             0200*    @end:
041C20             0201*    
041C20             0202*    ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
041C20             0203*    ; inputs: a=mode, c=colour (add 128 to set background colour)
041C20             0204*    vdu_gcol:
041C20 32 35 1C 04 0205*    	ld (@mode),a
041C24 79          0206*        ld a,c
041C25 32 36 1C 04 0207*        ld (@col),a
041C29 21 34 1C 04 0208*    	ld hl,@cmd
041C2D 01 03 00 00 0209*    	ld bc,@end-@cmd
041C31 5B DF       0210*    	rst.lil $18
041C33 C9          0211*    	ret
041C34 12          0212*    @cmd:  db 18
041C35 00          0213*    @mode: db 0
041C36 00          0214*    @col:  db 0
041C37             0215*    @end:
041C37             0216*    
041C37             0217*    
041C37             0218*    ; VDU 28, left, bottom, right, top: Set text viewport **
041C37             0219*    ; MIND THE LITTLE-ENDIANESS
041C37             0220*    ; inputs: c=left,b=bottom,e=right,d=top
041C37             0221*    ; outputs; nothing
041C37             0222*    ; destroys: af, hl, bc, de
041C37             0223*    vdu_set_txt_viewport:
041C37 ED 43 4D 1C 0224*        ld (@lb),bc
       04          
041C3C ED 53 4F 1C 0225*    	ld (@rt),de
       04          
041C41 21 4C 1C 04 0226*    	ld hl,@cmd
041C45 01 05 00 00 0227*    	ld bc,@end-@cmd
041C49 5B DF       0228*    	rst.lil $18
041C4B C9          0229*    	ret
041C4C 1C          0230*    @cmd:   db 28 ; set text viewport command
041C4D 00 00       0231*    @lb: 	dw 0x0000 ; set by bc
041C4F 00 00       0232*    @rt: 	dw 0x0000 ; set by de
041C51 00          0233*    @end:   db 0x00	  ; padding
041C52             0234*    
041C52             0235*    ; Wait for VBLANK interrupt
041C52             0236*    vdu_vblank:
041C52 DD E5       0237*        PUSH 	IX
041C54             0238*    	MOSCALL	mos_sysvars
                       M1 Args: function=mos_sysvars 
041C54 3E 08       0001*M1  			LD	A, function
041C56 5B CF       0002*M1  			RST.LIL	08h
041C58 DD 7E 00    0239*    	LD	A, (IX + sysvar_time + 0)
041C5B             0240*    @wait:
041C5B DD BE 00    0241*        CP 	A, (IX + sysvar_time + 0)
041C5E 28 FB       0242*        JR	Z, @wait
041C60 DD E1       0243*        POP	IX
041C62 C9          0244*        RET
041C63             0245*    
041C63             0246*    ; VDU 29, x; y;: Set graphics origin
041C63             0247*    ; This command sets the graphics origin.
041C63             0248*    ; The origin is the point on the screen where the coordinates (0,0) are located.
041C63             0249*    ; inputs: bc=x0,de=y0
041C63             0250*    ; outputs; nothing
041C63             0251*    ; destroys: a might make it out alive
041C63             0252*    vdu_set_gfx_origin:
041C63 ED 43 79 1C 0253*        ld (@x0),bc
       04          
041C68 ED 53 7B 1C 0254*        ld (@y0),de
       04          
041C6D 21 78 1C 04 0255*        ld hl,@cmd
041C71 01 05 00 00 0256*        ld bc,@end-@cmd
041C75 5B DF       0257*        rst.lil $18
041C77 C9          0258*        ret
041C78 1D          0259*    @cmd:   db 29 ; set graphics origin command
041C79 00 00       0260*    @x0: 	dw 0x0000 ; set by bc
041C7B 00 00       0261*    @y0: 	dw 0x0000 ; set by de
041C7D 00          0262*    @end:   db 0x00	  ; padding
041C7E             0263*    
041C7E             0264*    ; VDU 24, left; bottom; right; top;: Set graphics viewport
041C7E             0265*    ; NOTE: the order of the y-coordinate parameters are inverted
041C7E             0266*    ; 	because we have turned off logical screen scaling
041C7E             0267*    ; NOTE: coordinates are relative to current gfx origin
041C7E             0268*    ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041C7E             0269*    ; outputs; nothing
041C7E             0270*    ; destroys: a might make it out alive
041C7E             0271*    vdu_set_gfx_viewport:
041C7E ED 43 9E 1C 0272*        ld (@x0),bc
       04          
041C83 FD 22 A0 1C 0273*        ld (@y1),iy
       04          
041C88 DD 22 A2 1C 0274*    	ld (@x1),ix
       04          
041C8D ED 53 A4 1C 0275*    	ld (@y0),de
       04          
041C92 21 9D 1C 04 0276*    	ld hl,@cmd
041C96 01 09 00 00 0277*    	ld bc,@end-@cmd
041C9A 5B DF       0278*    	rst.lil $18
041C9C C9          0279*    	ret
041C9D 18          0280*    @cmd:   db 24 ; set graphics viewport command
041C9E 00 00       0281*    @x0: 	dw 0x0000 ; set by bc
041CA0 00 00       0282*    @y1: 	dw 0x0000 ; set by iy
041CA2 00 00       0283*    @x1: 	dw 0x0000 ; set by ix
041CA4 00 00       0284*    @y0: 	dw 0x0000 ; set by de
041CA6 00          0285*    @end:   db 0x00	  ; padding
041CA7             0286*    
041CA7             0287*    ; VDU 26: Reset graphics and text viewports
041CA7             0288*    vdu_reset_viewports:
041CA7 3E 1A       0289*        ld a,26
041CA9 5B D7       0290*        rst.lil $10
041CAB C9          0291*        ret
041CAC             0292*    
041CAC             0293*    ; SCREEN MODES
041CAC             0294*    ; ===============================
041CAC             0295*    ; Mode  Horz  Vert  Cols  Refresh
041CAC             0296*    ; ---   ----  ----  ----  -------
041CAC             0297*    ; 11    320   240   2     60hz
041CAC             0298*    ; 139   320   240   2     60hz
041CAC             0299*    ; 23    512   384   2     60hz
041CAC             0300*    ; 151   512   384   2     60hz
041CAC             0301*    ; 6     640   240   2     60hz
041CAC             0302*    ; 134   640   240   2     60hz
041CAC             0303*    ; 2     640   480   2     60hz
041CAC             0304*    ; 130   640   480   2     60hz
041CAC             0305*    ; 17    800   600   2     60hz
041CAC             0306*    ; 145   800   600   2     60hz
041CAC             0307*    ; 18    1024  768   2     60hz
041CAC             0308*    ; 146   1024  768   2     60hz
041CAC             0309*    ; ---   ----  ----  ----  -------
041CAC             0310*    ; 10    320   240   4     60hz
041CAC             0311*    ; 138   320   240   4     60hz
041CAC             0312*    ; 22    512   384   4     60hz
041CAC             0313*    ; 150   512   384   4     60hz
041CAC             0314*    ; 5     640   240   4     60hz
041CAC             0315*    ; 133   640   240   4     60hz
041CAC             0316*    ; 1     640   480   4     60hz
041CAC             0317*    ; 129   640   480   4     60hz
041CAC             0318*    ; 16    800   600   4     60hz
041CAC             0319*    ; 19    1024  768   4     60hz
041CAC             0320*    ; ---   ----  ----  ----  -------
041CAC             0321*    ; 9     320   240   16    60hz
041CAC             0322*    ; 137   320   240   16    60hz
041CAC             0323*    ; 21    512   384   16    60hz
041CAC             0324*    ; 149   512   384   16    60hz
041CAC             0325*    ; 4     640   240   16    60hz
041CAC             0326*    ; 132   640   240   16    60hz
041CAC             0327*    ; 0     640   480   16    60hz
041CAC             0328*    ; 7     n/a   n/a   16    60hz
041CAC             0329*    ; ---   ----  ----  ----  -------
041CAC             0330*    ; 8     320   240   64    60hz
041CAC             0331*    ; 136   320   240   64    60hz
041CAC             0332*    ; 20    512   384   64    60hz
041CAC             0333*    ; 3     640   240   64    60hz
041CAC             0334*    ; ---   ----  ----  ----  -------
041CAC             0335*    vdu_set_screen_mode:
041CAC 32 BC 1C 04 0336*    	ld (@arg),a
041CB0 21 BB 1C 04 0337*    	ld hl,@cmd
041CB4 01 02 00 00 0338*    	ld bc,@end-@cmd
041CB8 5B DF       0339*    	rst.lil $18
041CBA C9          0340*    	ret
041CBB 16          0341*    @cmd: db 22 ; set screen mode
041CBC 00          0342*    @arg: db 0  ; screen mode parameter
041CBD             0343*    @end:
041CBD             0344*    
041CBD             0345*    ; get the current screen mode
041CBD             0346*    ; inputs: none
041CBD             0347*    ; outputs: a=screen mode
041CBD             0348*    ; destroys: af, ix
041CBD             0349*    vdu_get_screen_mode:
041CBD             0350*        MOSCALL mos_sysvars
                       M1 Args: function=mos_sysvars 
041CBD 3E 08       0001*M1  			LD	A, function
041CBF 5B CF       0002*M1  			RST.LIL	08h
041CC1 DD 7E 27    0351*        ld a,(IX+sysvar_scrMode)
041CC4 C9          0352*        ret
041CC5             0353*    ; end vdu_get_screen_mode
041CC5             0354*    
041CC5             0355*    ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
041CC5             0356*    ; inputs: a is scaling mode, 1=on, 0=off
041CC5             0357*    ; note: default setting on boot is scaling ON
041CC5             0358*    vdu_set_scaling:
041CC5 32 D7 1C 04 0359*    	ld (@arg),a
041CC9 21 D4 1C 04 0360*    	ld hl,@cmd
041CCD 01 04 00 00 0361*    	ld bc,@end-@cmd
041CD1 5B DF       0362*    	rst.lil $18
041CD3 C9          0363*    	ret
041CD4 17 00 C0    0364*    @cmd: db 23,0,0xC0
041CD7 00          0365*    @arg: db 0  ; scaling on/off
041CD8             0366*    @end:
041CD8             0367*    
041CD8             0368*    ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
041CD8             0369*    ; inputs: hl=bufferId
041CD8             0370*    vdu_buff_select:
041CD8 22 EA 1C 04 0371*    	ld (@bufferId),hl
041CDC 21 E7 1C 04 0372*    	ld hl,@cmd
041CE0 01 05 00 00 0373*    	ld bc,@end-@cmd
041CE4 5B DF       0374*    	rst.lil $18
041CE6 C9          0375*    	ret
041CE7 17 1B 20    0376*    @cmd: db 23,27,0x20
041CEA 00 00       0377*    @bufferId: dw 0x0000
041CEC 00          0378*    @end: db 0x00 ; padding
041CED             0379*    
041CED             0380*    ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
041CED             0381*    ; inputs: a=format; bc=width; de=height
041CED             0382*    ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
041CED             0383*    ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
041CED             0384*    ; 0 	RGBA8888 (4-bytes per pixel)
041CED             0385*    ; 1 	RGBA2222 (1-bytes per pixel)
041CED             0386*    ; 2 	Mono/Mask (1-bit per pixel)
041CED             0387*    ; 3 	Reserved for internal use by VDP (“native” format)
041CED             0388*    vdu_bmp_create:
041CED ED 43 09 1D 0389*        ld (@width),bc
       04          
041CF2 ED 53 0B 1D 0390*        ld (@height),de
       04          
041CF7 32 0D 1D 04 0391*        ld (@fmt),a
041CFB 21 06 1D 04 0392*    	ld hl,@cmd
041CFF 01 08 00 00 0393*    	ld bc,@end-@cmd
041D03 5B DF       0394*    	rst.lil $18
041D05 C9          0395*    	ret
041D06 17 1B 21    0396*    @cmd:       db 23,27,0x21
041D09 00 00       0397*    @width:     dw 0x0000
041D0B 00 00       0398*    @height:    dw 0x0000
041D0D 00          0399*    @fmt:       db 0x00
041D0E             0400*    @end:
041D0E             0401*    
041D0E             0402*    ; load an rgba2222 image file to a working buffer and make it an rgba8888 bitmap in a target buffer
041D0E             0403*    ; inputs: bc,de image width,height ; hl = targetBufferId ; ix = file size ; iy = pointer to filename
041D0E             0404*    vdu_load_img_rgba2_to_8:
041D0E             0405*    ; backup the target buffer id and image dimensions
041D0E E5          0406*        push hl
041D0F D5          0407*        push de
041D10 C5          0408*        push bc
041D11             0409*    ; load the rgba2 image to working buffer 65534
041D11 21 FE FF 00 0410*        ld hl,65534 ; temporary working buffer id
041D15 CD EC 1D 04 0411*    	call vdu_load_buffer_from_file
041D19             0412*    ; restore the image dimensions and target buffer id
041D19 C1          0413*        pop bc
041D1A D1          0414*        pop de
041D1B E1          0415*        pop hl
041D1C             0416*    ; fall through to vdu_rgba2_to_8
041D1C             0417*    
041D1C             0418*    ; https://discord.com/channels/1158535358624039014/1158536711148675072/1257757461729771771
041D1C             0419*    ; ok, so the "expand bitmap" can be used, when coupled with a "reverse" - the expanded bitmap _doesn't_ come out "right" otherwise, cos of endian-ness
041D1C             0420*    ; the "expand bitmap" command is:
041D1C             0421*    ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041D1C             0422*    ; and then to reverse the byte order to fix endian-ness:
041D1C             0423*    ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041D1C             0424*    ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041D1C             0425*    ; VDU 23,27,&20,targetBufferID%;
041D1C             0426*    ; VDU 23,27,&21,width%;height%;0
041D1C             0427*    ; -------------------------------------------------------------------
041D1C             0428*    ; inputs: bc,de image width,height ; hl = targetBufferId
041D1C             0429*    ; prerequisites: rgba2 image data loaded into workingBufferId 65534
041D1C             0430*    vdu_rgba2_to_8:
041D1C             0431*    ; load the image dimensions and buffer id parameters
041D1C ED 43 78 1D 0432*        ld (@width),bc
       04          
041D21 ED 53 7A 1D 0433*        ld (@height),de
       04          
041D26 22 5D 1D 04 0434*        ld (@bufferId0),hl
041D2A 22 6A 1D 04 0435*        ld (@bufferId2),hl
041D2E 22 73 1D 04 0436*        ld (@bufferId1),hl
041D32             0437*    ; clean up bytes that got stomped on by the ID loads
041D32 3E 48       0438*        ld a,0x48
041D34 32 5F 1D 04 0439*        ld (@bufferId0+2),a
041D38 3E 17       0440*        ld a,23
041D3A 32 75 1D 04 0441*        ld (@bufferId1+2),a
041D3E 3E 18       0442*        ld a,24
041D40 32 6C 1D 04 0443*        ld (@bufferId2+2),a
041D44 AF          0444*        xor a
041D45 32 7C 1D 04 0445*        ld (@height+2),a
041D49             0446*    ; send the vdu command strings
041D49 21 54 1D 04 0447*        ld hl,@beg
041D4D 01 29 00 00 0448*        ld bc,@end-@beg
041D51 5B DF       0449*        rst.lil $18
041D53 C9          0450*        ret
041D54             0451*    @beg:
041D54             0452*    ; Command 14: Consolidate blocks in a buffer
041D54             0453*    ; VDU 23, 0, &A0, bufferId; 14
041D54 17 00 A0    0454*        db 23,0,0xA0
041D57 FE FF       0455*        dw 65534 ; workingBufferId
041D59 0E          0456*        db 14 ; consolidate blocks
041D5A             0457*    ; the "expand bitmap" command is:
041D5A             0458*    ; VDU 23,0,&A0,targetBufferID%;&48,2,sourceBufferId%;0,&7F,&BF,&FF
041D5A 17 00 A0    0459*        db 23,0,0xA0
041D5D 00 00       0460*    @bufferId0: dw 0x0000 ; targetBufferId
041D5F 48          0461*        db 0x48 ; given as decimal command 72 in the docs
041D60 02          0462*        db 2 ; options mask: %00000011 is the number of bits per pixel in the source bitmap
041D61 FE FF       0463*        dw 65534 ; sourceBufferId
041D63 00 7F BF FF 0464*        db 0x00,0x7F,0xBF,0xFF ; expanding to bytes by bit-shifting?
041D67             0465*    ; reverse the byte order to fix endian-ness:
041D67             0466*    ; Command 24: Reverse the order of data of blocks within a buffer
041D67             0467*    ; VDU 23, 0, &A0, bufferId; 24, options, [valueSize;] [chunkSize;]
041D67             0468*    ; VDU 23,0,&A0,targetBufferID%;24,4,4;
041D67 17 00 A0    0469*        db 23,0,0xA0
041D6A 00 00       0470*    @bufferId2:    dw 0x0000 ; targetBufferId
041D6C 18          0471*        db 24 ; reverse byte order
041D6D 04          0472*        db 4 ; option: Reverse data of the value size within chunk of data of the specified size
041D6E 04 00       0473*        dw 4 ; size (4 bytes)
041D70             0474*    ; finally you'd need to set that buffer to be an RGBA8888 format bitmap:
041D70             0475*    ; VDU 23,27,&20,targetBufferID%;
041D70 17 1B 20    0476*        db 23,27,0x20 ; select bitmap
041D73 00 00       0477*    @bufferId1: dw 0x0000 ; targetBufferId
041D75             0478*    ; VDU 23,27,&21,width%;height%;0
041D75 17 1B 21    0479*        db 23,27,0x21 ; create bitmap from buffer
041D78 00 00       0480*    @width: dw 0x0000
041D7A 00 00       0481*    @height: dw 0x0000
041D7C 00          0482*        db 0x00 ; rgba8888 format
041D7D             0483*    @end:
041D7D             0484*    
041D7D             0485*    ; scratch variables
041D7D 00 00 00    0486*    bufferId0: dl 0x000000
041D80 00 00 00    0487*    bufferId1: dl 0x000000
041D83             0488*    
041D83             0489*    ; load a vdu buffer from local memory
041D83             0490*    ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041D83             0491*    vdu_load_buffer:
041D83 ED 43 AC 1D 0492*        ld (@length),bc
       04          
041D88 D5          0493*        push de ; save data pointer
041D89             0494*    ; send the vdu command string
041D89 7D          0495*        ld a,l
041D8A 32 A9 1D 04 0496*        ld (@bufferId),a
041D8E 7C          0497*        ld a,h
041D8F 32 AA 1D 04 0498*        ld (@bufferId+1),a
041D93 21 A6 1D 04 0499*        ld hl,@cmd
041D97 01 08 00 00 0500*        ld bc,@end-@cmd
041D9B 5B DF       0501*        rst.lil $18
041D9D             0502*    ; send the buffer data
041D9D E1          0503*        pop hl ; pointer to data
041D9E ED 4B AC 1D 0504*        ld bc,(@length)
       04          
041DA3 5B DF       0505*        rst.lil $18 ; send it
041DA5 C9          0506*        ret
041DA6             0507*    ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
041DA6 17 00 A0    0508*    @cmd:       db 23,0,0xA0
041DA9 00 00       0509*    @bufferId:	dw 0x0000
041DAB 00          0510*    		    db 0 ; load buffer
041DAC 00 00       0511*    @length:	dw 0x0000
041DAE 00          0512*    @end: db 0 ; padding
041DAF             0513*    
041DAF             0514*    ; Command 14: Consolidate blocks in a buffer
041DAF             0515*    vdu_consolidate_buffer:
041DAF             0516*    ; set parameters for vdu call
041DAF 7D          0517*        ld a,l
041DB0 32 C7 1D 04 0518*        ld (@bufferId),a
041DB4 7C          0519*        ld a,h
041DB5 32 C8 1D 04 0520*        ld (@bufferId+1),a
041DB9 21 C4 1D 04 0521*        ld hl,@beg
041DBD 01 06 00 00 0522*        ld bc,@end-@beg
041DC1 5B DF       0523*        rst.lil $18
041DC3 C9          0524*        ret
041DC4             0525*    ; VDU 23, 0, &A0, bufferId; 14
041DC4 17 00 A0    0526*    @beg: db 23,0,0xA0
041DC7 00 00       0527*    @bufferId: dw 0x0000
041DC9 0E          0528*               db 14
041DCA             0529*    @end:
041DCA             0530*    
041DCA             0531*    ; load an image file to a buffer and make it a bitmap
041DCA             0532*    ; inputs: a = image type ; bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
041DCA             0533*    vdu_load_img:
041DCA             0534*    ; back up image type and dimension parameters
041DCA 22 7D 1D 04 0535*        ld (bufferId0),hl
041DCE F5          0536*        push af
041DCF C5          0537*    	push bc
041DD0 D5          0538*    	push de
041DD1             0539*    ; load the image
041DD1 CD EC 1D 04 0540*    	call vdu_load_buffer_from_file
041DD5             0541*    ; now make it a bitmap
041DD5 2A 7D 1D 04 0542*        ld hl,(bufferId0)
041DD9 CD AF 1D 04 0543*        call vdu_consolidate_buffer
041DDD 2A 7D 1D 04 0544*        ld hl,(bufferId0)
041DE1 CD D8 1C 04 0545*        call vdu_buff_select
041DE5 D1          0546*    	pop de ; image height
041DE6 C1          0547*    	pop bc ; image width
041DE7 F1          0548*    	pop af ; image type
041DE8 C3 ED 1C 04 0549*    	jp vdu_bmp_create ; will return to caller from there
041DEC             0550*    
041DEC             0551*    ; inputs: hl = bufferId; iy = pointer to filename
041DEC             0552*    vdu_load_buffer_from_file:
041DEC 22 7D 1D 04 0553*        ld (bufferId0),hl
041DF0             0554*    
041DF0             0555*    ; clear target buffer
041DF0 CD 98 1F 04 0556*        call vdu_clear_buffer
041DF4             0557*    
041DF4             0558*    ; open the file in read mode
041DF4             0559*    ; Open a file
041DF4             0560*    ; HLU: Filename
041DF4             0561*    ;   C: Mode
041DF4             0562*    ; Returns:
041DF4             0563*    ;   A: Filehandle, or 0 if couldn't open
041DF4 FD E5       0564*    	push iy ; pointer to filename
041DF6 E1          0565*    	pop hl
041DF7 0E 01       0566*    	ld c,fa_read
041DF9             0567*        MOSCALL mos_fopen
                       M1 Args: function=mos_fopen 
041DF9 3E 0A       0001*M1  			LD	A, function
041DFB 5B CF       0002*M1  			RST.LIL	08h
041DFD 32 38 1E 04 0568*        ld (@filehandle),a
041E01             0569*    
041E01             0570*    @read_file:
041E01             0571*    ; Read a block of data from a file
041E01             0572*    ;   C: Filehandle
041E01             0573*    ; HLU: Pointer to where to write the data to
041E01             0574*    ; DEU: Number of bytes to read
041E01             0575*    ; Returns:
041E01             0576*    ; DEU: Number of bytes read
041E01 3A 38 1E 04 0577*        ld a,(@filehandle)
041E05 4F          0578*        ld c,a
041E06 21 00 E0 B7 0579*        ld hl,filedata
041E0A 11 00 20 00 0580*        ld de,8192 ; max we can read into onboard sram at one time
041E0E             0581*        MOSCALL mos_fread
                       M1 Args: function=mos_fread 
041E0E 3E 1A       0001*M1  			LD	A, function
041E10 5B CF       0002*M1  			RST.LIL	08h
041E12             0582*    
041E12             0583*    ; test de for zero bytes read
041E12 21 00 00 00 0584*        ld hl,0
041E16 AF          0585*        xor a ; clear carry
041E17 ED 52       0586*        sbc hl,de
041E19 CA 2F 1E 04 0587*        jp z,@close_file
041E1D             0588*    
041E1D             0589*    ; load a vdu buffer from local memory
041E1D             0590*    ; inputs: hl = bufferId ; bc = length ; de = pointer to data
041E1D 2A 7D 1D 04 0591*        ld hl,(bufferId0)
041E21 D5          0592*        push de ; chunksize
041E22 C1          0593*        pop bc
041E23 11 00 E0 B7 0594*        ld de,filedata
041E27 CD 83 1D 04 0595*        call vdu_load_buffer
041E2B             0596*    
041E2B             0597*    ; read the next block
041E2B C3 01 1E 04 0598*        jp @read_file
041E2F             0599*    
041E2F             0600*    ; close the file
041E2F             0601*    @close_file:
041E2F 3A 38 1E 04 0602*        ld a,(@filehandle)
041E33             0603*        MOSCALL mos_fclose
                       M1 Args: function=mos_fclose 
041E33 3E 0B       0001*M1  			LD	A, function
041E35 5B CF       0002*M1  			RST.LIL	08h
041E37 C9          0604*        ret ; vdu_load_buffer_from_file
041E38             0605*    
041E38 00          0606*    @filehandle: db 0 ; file handle
041E39 00 00 00    0607*    @fil: dl 0 ; pointer to FIL struct
041E3C             0608*    
041E3C 00 00 00    0609*    @chunkpointer: dl 0 ; pointer to current chunk
041E3F             0610*    
041E3F             0611*    ; File information structure (FILINFO)
041E3F             0612*    @filinfo:
041E3F 00 00 00 00 0613*    @filinfo_fsize:    blkb 4, 0   ; File size (4 bytes)
041E43 00 00       0614*    @filinfo_fdate:    blkb 2, 0   ; Modified date (2 bytes)
041E45 00 00       0615*    @filinfo_ftime:    blkb 2, 0   ; Modified time (2 bytes)
041E47 00          0616*    @filinfo_fattrib:  blkb 1, 0   ; File attribute (1 byte)
041E48 00 00 00 00 0617*    @filinfo_altname:  blkb 13, 0  ; Alternative file name (13 bytes)
       00 00 00 00 
       00 00 00 00 
       00          
041E55 00 00 00 00 0618*    @filinfo_fname:    blkb 256, 0 ; Primary file name (256 bytes)
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
041F55             0040         include "vdu_buffered_api.inc"
041F55             0001*    ; https://agonconsole8.github.io/agon-docs/vdp/Buffered-Commands-API/
041F55             0002*    
041F55             0003*    ; Command 0: Write block to a buffer
041F55             0004*    ; VDU 23, 0, &A0, bufferId; 0, length; <buffer-data>
041F55             0005*    ; inputs: hl = bufferId, bc = length of data, de = pointer to data
041F55             0006*    vdu_write_block_to_buffer:
041F55             0007*    ; back up input parameters
041F55 D5          0008*        push de ; pointer to data
041F56 C5          0009*        push bc ; length of data
041F57             0010*    ; set up the vdu command string
041F57 22 77 1F 04 0011*        ld (@bufferId),hl
041F5B ED 43 7A 1F 0012*        ld (@length),bc
       04          
041F60 AF          0013*        xor a ; load buffer
041F61 32 79 1F 04 0014*        ld (@bufferId+2),a
041F65 21 74 1F 04 0015*        ld hl,@cmd0
041F69 01 08 00 00 0016*        ld bc,@end0-@cmd0
041F6D 5B DF       0017*        rst.lil $18
041F6F             0018*    ; send the buffer data
041F6F C1          0019*        pop bc ; length of data
041F70 E1          0020*        pop hl ; pointer to data (was de)
041F71 5B DF       0021*        rst.lil $18 ; send it
041F73 C9          0022*        ret
041F74             0023*    ; command string data
041F74 17 00 A0    0024*    @cmd0:      db 23,0,0xA0
041F77 00 00       0025*    @bufferId:	dw 0x0000
041F79 00          0026*                db 0 ; load buffer
041F7A 00 00       0027*    @length:	dw 0x0000
041F7C 00          0028*    @end0:      db 0x00 ; padding
041F7D             0029*    ; end vdu_write_block_to_buffer
041F7D             0030*    
041F7D             0031*    ; Command 1: Call a buffer
041F7D             0032*    ; VDU 23, 0, &A0, bufferId; 1
041F7D             0033*    ; inputs: hl = bufferId
041F7D             0034*    vdu_call_buffer:
041F7D 22 95 1F 04 0035*        ld (@bufferId),hl
041F81 3E 01       0036*        ld a,1 ; call buffer
041F83 32 97 1F 04 0037*        ld (@bufferId+2),a
041F87 21 92 1F 04 0038*        ld hl,@cmd
041F8B 01 06 00 00 0039*        ld bc,@end-@cmd
041F8F 5B DF       0040*        rst.lil $18
041F91 C9          0041*        ret
041F92 17 00 A0    0042*    @cmd:     db 23,0,0xA0
041F95 00 00       0043*    @bufferId: dw 0x0000
041F97 01          0044*               db 1 ; call buffer
041F98             0045*    @end:
041F98             0046*    ; end vdu_call_buffer
041F98             0047*    
041F98             0048*    ; Command 2: Clear a buffer
041F98             0049*    ; VDU 23, 0 &A0, bufferId; 2
041F98             0050*    ; inputs: hl = bufferId
041F98             0051*    vdu_clear_buffer:
041F98 22 B0 1F 04 0052*        ld (@bufferId),hl
041F9C 3E 02       0053*        ld a,2 ; clear buffer
041F9E 32 B2 1F 04 0054*        ld (@bufferId+2),a
041FA2 21 AD 1F 04 0055*        ld hl,@cmd
041FA6 01 06 00 00 0056*        ld bc,@end-@cmd
041FAA 5B DF       0057*        rst.lil $18
041FAC C9          0058*        ret
041FAD 17 00 A0    0059*    @cmd:     db 23,0,0xA0
041FB0 00 00       0060*    @bufferId: dw 0x0000
041FB2 02          0061*               db 2 ; clear buffer
041FB3             0062*    @end:
041FB3             0063*    ; end vdu_clear_buffer
041FB3             0064*    
041FB3             0065*    ; Clear all buffers
041FB3             0066*    ; inputs: none
041FB3             0067*    vdu_clear_all_buffers:
041FB3             0068*    ; clear all buffers
041FB3 21 BE 1F 04 0069*        ld hl,@beg
041FB7 01 06 00 00 0070*        ld bc,@end-@beg
041FBB 5B DF       0071*        rst.lil $18
041FBD C9          0072*        ret
041FBE 17 00 A0    0073*    @beg: db 23,0,$A0
041FC1 FF FF       0074*          dw -1 ; bufferId -1 (65535) means clear all buffers
041FC3 02          0075*          db 2  ; command 2: clear a buffer
041FC4             0076*    @end:
041FC4             0077*    ; end vdu_clear_all_buffers
041FC4             0078*    
041FC4             0079*    ; Command 3: Create a writeable buffer
041FC4             0080*    ; VDU 23, 0 &A0, bufferId; 3, length;
041FC4             0081*    ; inputs: hl = bufferId, bc = length
041FC4             0082*    vdu_create_writeable_buffer:
041FC4 22 E1 1F 04 0083*        ld (@bufferId),hl
041FC8 ED 43 E4 1F 0084*        ld (@length),bc
       04          
041FCD 3E 03       0085*        ld a,3 ; create writeable buffer
041FCF 32 E3 1F 04 0086*        ld (@bufferId+2),a
041FD3 21 DE 1F 04 0087*        ld hl,@cmd
041FD7 01 08 00 00 0088*        ld bc,@end-@cmd
041FDB 5B DF       0089*        rst.lil $18
041FDD C9          0090*        ret
041FDE 17 00 A0    0091*    @cmd:     db 23,0,0xA0
041FE1 00 00       0092*    @bufferId: dw 0x0000
041FE3 03          0093*               db 3 ; create writeable buffer
041FE4 00 00       0094*    @length: dw 0x0000
041FE6 00          0095*    @end:     db 0x00 ; padding
041FE7             0096*    ; end vdu_create_writeable_buffer
041FE7             0097*    
041FE7             0098*    ; Command 4: Set output stream to a buffer
041FE7             0099*    ; VDU 23, 0 &A0, bufferId; 4
041FE7             0100*    ; inputs: hl = bufferId
041FE7             0101*    vdu_set_output_stream_buffer:
041FE7 22 FF 1F 04 0102*        ld (@bufferId),hl
041FEB 3E 04       0103*        ld a,4 ; set output stream to buffer
041FED 32 01 20 04 0104*        ld (@bufferId+2),a
041FF1 21 FC 1F 04 0105*        ld hl,@cmd
041FF5 01 06 00 00 0106*        ld bc,@end-@cmd
041FF9 5B DF       0107*        rst.lil $18
041FFB C9          0108*        ret
041FFC 17 00 A0    0109*    @cmd:     db 23,0,0xA0
041FFF 00 00       0110*    @bufferId: dw 0x0000
042001 04          0111*               db 4 ; set output stream to buffer
042002 00          0112*    @end:     db 0x00 ; padding
042003             0113*    ; end vdu_set_output_stream_buffer
042003             0114*    
042003             0115*    ; Command 5: Adjust buffer contents
042003             0116*    ; VDU 23, 0, &A0, bufferId; 5, operation, offset; [count;] <operand>, [arguments]
042003             0117*    vdu_adjust_buffer:
042003 C9          0118*        ret ; TODO: implement
042004             0119*    ; end vdu_adjust_buffer
042004             0120*    
042004             0121*    ; Command 6: Conditionally call a buffer
042004             0122*    ; VDU 23, 0, &A0, bufferId; 6, operation, checkBufferId; checkOffset; [arguments]
042004             0123*    vdu_call_buffer_conditional:
042004 C9          0124*        ret ; TODO: implement
042005             0125*    ; end vdu_call_buffer_conditional
042005             0126*    
042005             0127*    ; Command 7: Jump to a buffer
042005             0128*    ; VDU 23, 0, &A0, bufferId; 7
042005             0129*    ; inputs: hl = bufferId
042005             0130*    vdu_jump_to_buffer:
042005 22 1D 20 04 0131*        ld (@bufferId),hl
042009 3E 07       0132*        ld a,7 ; jump to buffer
04200B 32 1F 20 04 0133*        ld (@bufferId+2),a
04200F 21 1A 20 04 0134*        ld hl,@cmd
042013 01 06 00 00 0135*        ld bc,@end-@cmd
042017 5B DF       0136*        rst.lil $18
042019 C9          0137*        ret
04201A 17 00 A0    0138*    @cmd:     db 23,0,0xA0
04201D 00 00       0139*    @bufferId: dw 0x0000
04201F 07          0140*               db 7 ; jump to buffer
042020 00          0141*    @end:     db 0x00 ; padding
042021             0142*    ; end vdu_jump_to_buffer
042021             0143*    
042021             0144*    ; Command 8: Conditional Jump to a buffer
042021             0145*    ; VDU 23, 0, &A0, bufferId; 8, operation, checkBufferId; checkOffset; [arguments]
042021             0146*    vdu_jump_to_buffer_conditional:
042021 C9          0147*        ret ; TODO: implement
042022             0148*    ; end vdu_jump_to_buffer_conditional
042022             0149*    
042022             0150*    ; Command 9: Jump to an offset in a buffer
042022             0151*    ; VDU 23, 0, &A0, bufferId; 9, offset; offsetHighByte, [blockNumber;]
042022             0152*    vdu_jump_to_buffer_offset:
042022 C9          0153*        ret ; TODO: implement
042023             0154*    ; end vdu_jump_to_buffer_offset
042023             0155*    
042023             0156*    ; Command 10: Conditional jump to an offset in a buffer
042023             0157*    ; VDU 23, 0, &A0, bufferId; 10, offset; offsetHighByte, [blockNumber;] [arguments]
042023             0158*    vdu_jump_to_buffer_offset_conditional:
042023 C9          0159*        ret ; TODO: implement
042024             0160*    ; end vdu_jump_to_buffer_offset_conditional
042024             0161*    
042024             0162*    ; Command 11: Call buffer with an offset
042024             0163*    ; VDU 23, 0, &A0, bufferId; 11, offset; offsetHighByte, [blockNumber;]
042024             0164*    vdu_call_buffer_offset:
042024 C9          0165*        ret ; TODO: implement
042025             0166*    ; end vdu_call_buffer_offset
042025             0167*    
042025             0168*    ; Command 64: Compress a buffer
042025             0169*    ; VDU 23, 0, &A0, targetBufferId; 64, sourceBufferId;
042025             0170*    ; inputs: hl = sourceBufferId, de = targetBufferId
042025             0171*    vdu_compress_buffer:
042025 22 45 20 04 0172*        ld (@sourceBufferId),hl
042029 ED 53 42 20 0173*        ld (@targetBufferId),de
       04          
04202E 3E 40       0174*        ld a,64 ; compress buffer
042030 32 44 20 04 0175*        ld (@sourceBufferId-1),a
042034 21 3F 20 04 0176*        ld hl,@cmd
042038 01 08 00 00 0177*        ld bc,@end-@cmd
04203C 5B DF       0178*        rst.lil $18
04203E C9          0179*        ret
04203F 17 00 A0    0180*    @cmd:     db 23,0,0xA0
042042 00 00       0181*    @targetBufferId: dw 0x0000
042044 40          0182*               db 64 ; compress buffer
042045 00 00       0183*    @sourceBufferId: dw 0x0000
042047 00          0184*    @end:     db 0x00 ; padding
042048             0185*    
042048             0186*    
042048             0187*    ; Command 65: Decompress a buffer
042048             0188*    ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
042048             0189*    ; inputs: hl = sourceBufferId, de = targetBufferId
042048             0190*    vdu_decompress_buffer:
042048 22 68 20 04 0191*        ld (@sourceBufferId),hl
04204C ED 53 65 20 0192*        ld (@targetBufferId),de
       04          
042051 3E 41       0193*        ld a,65 ; decompress buffer
042053 32 67 20 04 0194*        ld (@sourceBufferId-1),a
042057 21 62 20 04 0195*        ld hl,@cmd
04205B 01 08 00 00 0196*        ld bc,@end-@cmd
04205F 5B DF       0197*        rst.lil $18
042061 C9          0198*        ret
042062 17 00 A0    0199*    @cmd:     db 23,0,0xA0
042065 00 00       0200*    @targetBufferId: dw 0x0000
042067 41          0201*               db 65 ; decompress buffer
042068 00 00       0202*    @sourceBufferId: dw 0x0000
04206A 00          0203*    @end:     db 0x00 ; padding
04206B             0041         include "vdu_fonts.inc"
04206B             0001*    ; select font
04206B             0002*    ; inputs: hl = bufferId, a = font flags
04206B             0003*    ; Flags:
04206B             0004*    ; Bit	Description
04206B             0005*    ; 0	Adjust cursor position to ensure text baseline is aligned
04206B             0006*    ;   0: Do not adjust cursor position (best for changing font on a new line)
04206B             0007*    ;   1: Adjust cursor position (best for changing font in the middle of a line)
04206B             0008*    ; 1-7	Reserved for future use
04206B             0009*    ; VDU 23, 0, &95, 0, bufferId; flags: Select font
04206B             0010*    vdu_font_select:
04206B 22 82 20 04 0011*        ld (@bufferId),hl
04206F 32 84 20 04 0012*        ld (@flags),a
042073 21 7E 20 04 0013*        ld hl,@cmd
042077 01 07 00 00 0014*        ld bc,@end-@cmd
04207B 5B DF       0015*        rst.lil $18
04207D C9          0016*        ret
04207E 17 00 95 00 0017*    @cmd: db 23, 0, 0x95, 0
042082 00 00       0018*    @bufferId: dw 0x0000
042084 00          0019*    @flags: db 0x00
042085             0020*    @end:
042085             0021*    
042085             0022*    ; create font from buffer
042085             0023*    ; inputs: hl = bufferId, e = width, d = height, d = ascent, a = flags
042085             0024*    ; VDU 23, 0, &95, 1, bufferId; width, height, ascent, flags: Create font from buffer
042085             0025*    vdu_font_create:
042085 22 AA 20 04 0026*        ld (@bufferId),hl
042089 ED 53 AC 20 0027*        ld (@width),de ; also loads height
       04          
04208E 32 AF 20 04 0028*        ld (@flags),a
042092 7A          0029*        ld a,d ; height
042093 32 AE 20 04 0030*        ld (@ascent),a ; ascent = height
042097             0031*    ; consolidate buffer
042097 CD AF 1D 04 0032*        call vdu_consolidate_buffer
04209B             0033*    ; create font
04209B 21 A6 20 04 0034*        ld hl,@cmd
04209F 01 0A 00 00 0035*        ld bc,@end-@cmd
0420A3 5B DF       0036*        rst.lil $18
0420A5 C9          0037*        ret
0420A6 17 00 95 01 0038*    @cmd: db 23, 0, 0x95, 1
0420AA 00 00       0039*    @bufferId: dw 0x0000
0420AC 00          0040*    @width: db 0x00
0420AD 00          0041*    @height: db 0x00
0420AE 00          0042*    @ascent: db 0x00
0420AF 00          0043*    @flags: db 0x00
0420B0             0044*    @end:
0420B0             0045*    
0420B0             0046*    ; set or adjust font property
0420B0             0047*    ; inputs: hl = bufferId, a = field, de = value
0420B0             0048*    ; VDU 23, 0, &95, 2, bufferId; field, value;: Set or adjust font property
0420B0             0049*    vdu_font_property:
0420B0 22 CC 20 04 0050*        ld (@bufferId),hl
0420B4 32 CE 20 04 0051*        ld (@field),a
0420B8 ED 53 CF 20 0052*        ld (@value),de
       04          
0420BD 21 C8 20 04 0053*        ld hl,@cmd
0420C1 01 09 00 00 0054*        ld bc,@end-@cmd
0420C5 5B DF       0055*        rst.lil $18
0420C7 C9          0056*        ret
0420C8 17 00 95 02 0057*    @cmd: db 23, 0, 0x95, 2
0420CC 00 00       0058*    @bufferId: dw 0x0000
0420CE 00          0059*    @field: db 0x00
0420CF 00 00       0060*    @value: dw 0x0000
0420D1 00          0061*    @end: db 0x00 ; padding
0420D2             0062*    
0420D2             0063*    ; VDU 23, 0, &95, 3, bufferId; [<args>]: Reserved
0420D2             0064*    
0420D2             0065*    ; Clear/Delete font
0420D2             0066*    ; inputs: hl = bufferId
0420D2             0067*    ; VDU 23, 0, &95, 4, bufferId;: Clear/Delete font
0420D2             0068*    vdu_font_clear:
0420D2 22 E5 20 04 0069*        ld (@bufferId),hl
0420D6 21 E1 20 04 0070*        ld hl,@cmd
0420DA 01 06 00 00 0071*        ld bc,@end-@cmd
0420DE 5B DF       0072*        rst.lil $18
0420E0 C9          0073*        ret
0420E1 17 00 95 04 0074*    @cmd: db 23, 0, 0x95, 4
0420E5 00 00       0075*    @bufferId: dw 0x0000
0420E7 00          0076*    @end: db 0x00 ; padding
0420E8             0077*    
0420E8             0078*    ; Copy system font to buffer
0420E8             0079*    ; inputs: hl = bufferId
0420E8             0080*    ; VDU 23, 0, &95, 5, bufferId;: Copy system font to buffer
0420E8             0081*    vdu_font_copy_system:
0420E8 22 FB 20 04 0082*        ld (@bufferId),hl
0420EC 21 F7 20 04 0083*        ld hl,@cmd
0420F0 01 06 00 00 0084*        ld bc,@end-@cmd
0420F4 5B DF       0085*        rst.lil $18
0420F6 C9          0086*        ret
0420F7 17 00 95 05 0087*    @cmd: db 23, 0, 0x95, 5
0420FB 00 00       0088*    @bufferId: dw 0x0000
0420FD 00          0089*    @end: db 0x00 ; padding
0420FE             0042         include "vdu_plot.inc"
0420FE             0001*    ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0420FE             0002*    ; PLOT code 	(Decimal) 	Effect
0420FE             0003*    ; &00-&07 	0-7 	Solid line, includes both ends
0420FE             0004*    plot_sl_both: equ 0x00
0420FE             0005*    
0420FE             0006*    ; &08-&0F 	8-15 	Solid line, final point omitted
0420FE             0007*    plot_sl_first: equ 0x08
0420FE             0008*    
0420FE             0009*    ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
0420FE             0010*    ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
0420FE             0011*    
0420FE             0012*    ; &20-&27 	32-39 	Solid line, first point omitted
0420FE             0013*    plot_sl_last: equ 0x20
0420FE             0014*    
0420FE             0015*    ; &28-&2F 	40-47 	Solid line, both points omitted
0420FE             0016*    plot_sl_none: equ 0x28
0420FE             0017*    
0420FE             0018*    ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
0420FE             0019*    ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
0420FE             0020*    
0420FE             0021*    ; &40-&47 	64-71 	Point plot
0420FE             0022*    plot_pt: equ 0x40
0420FE             0023*    
0420FE             0024*    ; &48-&4F 	72-79 	Line fill left and right to non-background §§
0420FE             0025*    plot_lf_lr_non_bg: equ 0x48
0420FE             0026*    
0420FE             0027*    ; &50-&57 	80-87 	Triangle fill
0420FE             0028*    plot_tf: equ 0x50
0420FE             0029*    
0420FE             0030*    ; &58-&5F 	88-95 	Line fill right to background §§
0420FE             0031*    plot_lf_r_bg: equ 0x58
0420FE             0032*    
0420FE             0033*    ; &60-&67 	96-103 	Rectangle fill
0420FE             0034*    plot_rf: equ 0x60
0420FE             0035*    
0420FE             0036*    ; &68-&6F 	104-111 	Line fill left and right to foreground §§
0420FE             0037*    plot_lf_lr_fg: equ 0x60
0420FE             0038*    
0420FE             0039*    ; &70-&77 	112-119 	Parallelogram fill
0420FE             0040*    plot_pf: equ 0x70
0420FE             0041*    
0420FE             0042*    ; &78-&7F 	120-127 	Line fill right to non-foreground §§
0420FE             0043*    plot_lf_r_non_fg: equ 0x78
0420FE             0044*    
0420FE             0045*    ; &80-&87 	128-135 	Not supported (Flood until non-background)
0420FE             0046*    ; &88-&8F 	136-143 	Not supported (Flood until foreground)
0420FE             0047*    
0420FE             0048*    ; &90-&97 	144-151 	Circle outline
0420FE             0049*    plot_co: equ 0x90
0420FE             0050*    
0420FE             0051*    ; &98-&9F 	152-159 	Circle fill
0420FE             0052*    plot_cf: equ 0x98
0420FE             0053*    
0420FE             0054*    ; &A0-&A7 	160-167 	Not supported (Circular arc)
0420FE             0055*    ; &A8-&AF 	168-175 	Not supported (Circular segment)
0420FE             0056*    ; &B0-&B7 	176-183 	Not supported (Circular sector)
0420FE             0057*    
0420FE             0058*    ; &B8-&BF 	184-191 	Rectangle copy/move
0420FE             0059*    plot_rcm: equ 0xB8
0420FE             0060*    
0420FE             0061*    ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
0420FE             0062*    ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
0420FE             0063*    ; &D0-&D7 	208-215 	Not defined
0420FE             0064*    ; &D8-&DF 	216-223 	Not defined
0420FE             0065*    ; &E0-&E7 	224-231 	Not defined
0420FE             0066*    
0420FE             0067*    ; &E8-&EF 	232-239 	Bitmap plot §
0420FE             0068*    plot_bmp: equ 0xE8
0420FE             0069*    
0420FE             0070*    ; &F0-&F7 	240-247 	Not defined
0420FE             0071*    ; &F8-&FF 	248-255 	Not defined
0420FE             0072*    
0420FE             0073*    ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
0420FE             0074*    ; Agon Console8 VDP 2.2.0
0420FE             0075*    
0420FE             0076*    ; Within each group of eight plot codes, the effects are as follows:
0420FE             0077*    ; Plot code 	Effect
0420FE             0078*    ; 0 	Move relative
0420FE             0079*    mv_rel: equ 0
0420FE             0080*    
0420FE             0081*    ; 1 	Plot relative in current foreground colour
0420FE             0082*    dr_rel_fg: equ 1
0420FE             0083*    
0420FE             0084*    ; 2 	Not supported (Plot relative in logical inverse colour)
0420FE             0085*    ; 3 	Plot relative in current background colour
0420FE             0086*    dr_rel_bg: equ 3
0420FE             0087*    
0420FE             0088*    ; 4 	Move absolute
0420FE             0089*    mv_abs: equ 4
0420FE             0090*    
0420FE             0091*    ; 5 	Plot absolute in current foreground colour
0420FE             0092*    dr_abs_fg: equ 5
0420FE             0093*    
0420FE             0094*    ; 6 	Not supported (Plot absolute in logical inverse colour)
0420FE             0095*    ; 7 	Plot absolute in current background colour
0420FE             0096*    dr_abs_bg: equ 7
0420FE             0097*    
0420FE             0098*    ; Codes 0-3 use the position data provided as part of the command
0420FE             0099*    ; as a relative position, adding the position given to the current
0420FE             0100*    ; graphical cursor position. Codes 4-7 use the position data provided
0420FE             0101*    ; as part of the command as an absolute position, setting the current
0420FE             0102*    ; graphical cursor position to the position given.
0420FE             0103*    
0420FE             0104*    ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
0420FE             0105*    ; current pixel colour. These operations cannot currently be supported
0420FE             0106*    ; by the graphics system the Agon VDP uses, so these codes are not
0420FE             0107*    ; supported. Support for these codes may be added in a future version
0420FE             0108*    ; of the VDP firmware.
0420FE             0109*    
0420FE             0110*    ; 16 colour palette constants
0420FE             0111*    c_black: equ 0
0420FE             0112*    c_red_dk: equ 1
0420FE             0113*    c_green_dk: equ 2
0420FE             0114*    c_yellow_dk: equ 3
0420FE             0115*    c_blue_dk: equ 4
0420FE             0116*    c_magenta_dk: equ 5
0420FE             0117*    c_cyan_dk: equ 6
0420FE             0118*    c_grey: equ 7
0420FE             0119*    c_grey_dk: equ 8
0420FE             0120*    c_red: equ 9
0420FE             0121*    c_green: equ 10
0420FE             0122*    c_yellow: equ 11
0420FE             0123*    c_blue: equ 12
0420FE             0124*    c_magenta: equ 13
0420FE             0125*    c_cyan: equ 14
0420FE             0126*    c_white: equ 15
0420FE             0127*    
0420FE             0128*    ; GCOL paint modes
0420FE             0129*    ; The GCOL command (VDU 18, mode, colour) is used to set the paint mode for the PLOT
0420FE             0130*    ; command. The paint mode is used to control how the PLOT command interacts with the
0420FE             0131*    ; existing pixels on the screen.
0420FE             0132*    gcol_mode_col: equ %000000000 ; Set on-screen pixel to target colour value
0420FE             0133*    gcol_mode_or: equ %000000001 ; OR value with the on-screen pixel
0420FE             0134*    gcol_mode_and: equ %000000010 ; AND value with the on-screen pixel
0420FE             0135*    gcol_mode_xor: equ %000000011 ; EOR value with the on-screen pixel
0420FE             0136*    gcol_mode_inv: equ %000000100 ; Invert the on-screen pixel
0420FE             0137*    gcol_mode_non: equ %000000101 ; No operation
0420FE             0138*    gcol_mode_and_inv: equ %000000110 ; AND the inverse of the specified colour with the on-screen pixel
0420FE             0139*    gcol_mode_or_inv: equ %000000111 ; OR the inverse of the specified colour with the on-screen pixel
0420FE             0140*    
0420FE             0141*    ; VDU 25, mode, x; y;: PLOT command
0420FE             0142*    ; inputs: a=mode, bc=x0, de=y0
0420FE             0143*    vdu_plot:
0420FE 32 18 21 04 0144*        ld (@mode),a
042102 ED 43 19 21 0145*        ld (@x0),bc
       04          
042107 ED 53 1B 21 0146*        ld (@y0),de
       04          
04210C 21 17 21 04 0147*    	ld hl,@cmd
042110 01 06 00 00 0148*    	ld bc,@end-@cmd
042114 5B DF       0149*    	rst.lil $18
042116 C9          0150*    	ret
042117 19          0151*    @cmd:   db 25
042118 00          0152*    @mode:  db 0
042119 00 00       0153*    @x0: 	dw 0
04211B 00 00       0154*    @y0: 	dw 0
04211D 00          0155*    @end:   db 0 ; extra byte to soak up deu
04211E             0156*    
04211E             0157*    ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04211E             0158*    ; &E8-&EF 	232-239 	Bitmap plot §
04211E             0159*    ; VDU 25, mode, x; y;: PLOT command
04211E             0160*    ; inputs: bc=x0, de=y0
04211E             0161*    ; prerequisites: vdu_buff_select
04211E             0162*    vdu_plot_bmp:
04211E ED 43 35 21 0163*        ld (@x0),bc
       04          
042123 ED 53 37 21 0164*        ld (@y0),de
       04          
042128 21 33 21 04 0165*    	ld hl,@cmd
04212C 01 06 00 00 0166*    	ld bc,@end-@cmd
042130 5B DF       0167*    	rst.lil $18
042132 C9          0168*    	ret
042133 19          0169*    @cmd:   db 25
042134 ED          0170*    @mode:  db plot_bmp+dr_abs_fg ; 0xED
042135 00 00       0171*    @x0: 	dw 0x0000
042137 00 00       0172*    @y0: 	dw 0x0000
042139 00          0173*    @end:   db 0x00 ; padding
04213A             0174*    
04213A             0175*    ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04213A             0176*    ; &E8-&EF 	232-239 	Bitmap plot §
04213A             0177*    ; VDU 25, mode, x; y;: PLOT command
04213A             0178*    ; inputs: bc=x0, de=y0
04213A             0179*    ; USING 16.8 FIXED POINT COORDINATES
04213A             0180*    ; inputs: ub.c is x coordinate, ud.e is y coordinate
04213A             0181*    ;   the fractional portiion of the inputs are truncated
04213A             0182*    ;   leaving only the 16-bit integer portion
04213A             0183*    ; prerequisites: vdu_buff_select
04213A             0184*    vdu_plot_bmp168:
04213A             0185*    ; populate in the reverse of normal to keep the
04213A             0186*    ; inputs from stomping on each other
04213A ED 53 58 21 0187*        ld (@y0-1),de
       04          
04213F ED 43 56 21 0188*        ld (@x0-1),bc
       04          
042144 3E ED       0189*        ld a,plot_bmp+dr_abs_fg ; 0xED
042146 32 56 21 04 0190*        ld (@mode),a ; restore the mode byte that got stomped on by bcu
04214A 21 55 21 04 0191*    	ld hl,@cmd
04214E 01 06 00 00 0192*    	ld bc,@end-@cmd
042152 5B DF       0193*    	rst.lil $18
042154 C9          0194*    	ret
042155 19          0195*    @cmd:   db 25
042156 ED          0196*    @mode:  db plot_bmp+dr_abs_fg ; 0xED
042157 00 00       0197*    @x0: 	dw 0x0000
042159 00 00       0198*    @y0: 	dw 0x0000
04215B             0199*    @end:  ; no padding required b/c we shifted de right
04215B             0200*    
04215B             0201*    ; draw a filled rectangle
04215B             0202*    vdu_plot_rf:
04215B ED 43 82 21 0203*        ld (@x0),bc
       04          
042160 ED 53 84 21 0204*        ld (@y0),de
       04          
042165 DD 22 88 21 0205*        ld (@x1),ix
       04          
04216A FD 22 8A 21 0206*        ld (@y1),iy
       04          
04216F 3E 19       0207*        ld a,25 ; we have to reload the 2nd plot command
042171 32 86 21 04 0208*        ld (@cmd1),a ; because the 24-bit y0 load stomped on it
042175 21 80 21 04 0209*    	ld hl,@cmd0
042179 01 0C 00 00 0210*    	ld bc,@end-@cmd0
04217D 5B DF       0211*    	rst.lil $18
04217F C9          0212*        ret
042180 19          0213*    @cmd0:  db 25 ; plot
042181 04          0214*    @arg0:  db plot_sl_both+mv_abs
042182 00 00       0215*    @x0:    dw 0x0000
042184 00 00       0216*    @y0:    dw 0x0000
042186 19          0217*    @cmd1:  db 25 ; plot
042187 65          0218*    @arg1:  db plot_rf+dr_abs_fg
042188 00 00       0219*    @x1:    dw 0x0000
04218A 00 00       0220*    @y1:    dw 0x0000
04218C 00          0221*    @end:   db 0x00 ; padding
04218D             0222*    
04218D             0223*    ; draw a filled circle
04218D             0224*    vdu_plot_cf:
04218D ED 43 B4 21 0225*        ld (@x0),bc
       04          
042192 ED 53 B6 21 0226*        ld (@y0),de
       04          
042197 DD 22 BA 21 0227*        ld (@x1),ix
       04          
04219C FD 22 BC 21 0228*        ld (@y1),iy
       04          
0421A1 3E 19       0229*        ld a,25 ; we have to reload the 2nd plot command
0421A3 32 B8 21 04 0230*        ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0421A7 21 B2 21 04 0231*    	ld hl,@cmd0
0421AB 01 0C 00 00 0232*    	ld bc,@end-@cmd0
0421AF 5B DF       0233*    	rst.lil $18
0421B1 C9          0234*        ret
0421B2 19          0235*    @cmd0:  db 25 ; plot
0421B3 04          0236*    @arg0:  db plot_sl_both+mv_abs
0421B4 00 00       0237*    @x0:    dw 0x0000
0421B6 00 00       0238*    @y0:    dw 0x0000
0421B8 19          0239*    @cmd1:  db 25 ; plot
0421B9 9D          0240*    @arg1:  db plot_cf+dr_abs_fg
0421BA 00 00       0241*    @x1:    dw 0x0000
0421BC 00 00       0242*    @y1:    dw 0x0000
0421BE 00          0243*    @end:   db 0x00 ; padding
0421BF             0043         include "vdu_sound.inc"
0421BF             0001*    ; enable enough additional channels so that total enabled = max_channels
0421BF             0002*    ; inputs: max_channels set
0421BF             0003*    ; returns: nothing
0421BF             0004*    ; destroys: af, bc, hl
0421BF             0005*    vdu_enable_channels:
0421BF 3E 01       0006*        ld a,max_channels
0421C1 D6 03       0007*        sub 3 ; subtract number of default channels already enabled
0421C3 F2 CA 21 04 0008*        jp p,@loop
0421C7 C9          0009*        ret
0421C8 3E 03       0010*        ld a,3 ; first non-default channel
0421CA             0011*    @loop:
0421CA 32 E5 21 04 0012*        ld (@channel),a
0421CE 21 E2 21 04 0013*        ld hl,@beg
0421D2 01 05 00 00 0014*        ld bc,@end-@beg
0421D6 F5          0015*        push af
0421D7 5B DF       0016*        rst.lil $18
0421D9 F1          0017*        pop af
0421DA 3C          0018*        inc a
0421DB FE 01       0019*        cp max_channels
0421DD C2 CA 21 04 0020*        jp nz,@loop
0421E1 C9          0021*        ret
0421E2             0022*    @beg:
0421E2 17 00 85    0023*                db 23, 0, $85
0421E5 00          0024*    @channel:   db 0
0421E6 08          0025*                db 8 ; command 8: enable channel
0421E7             0026*    @end:
0421E7             0027*    
0421E7             0028*    ; disable all but the three default sound channels
0421E7             0029*    ; inputs: max_channels set
0421E7             0030*    ; outputs: none
0421E7             0031*    ; destroys: ah,hl,bc
0421E7             0032*    vdu_disable_channels:
0421E7 3E 01       0033*        ld a,max_channels
0421E9 D6 03       0034*        sub 3 ; subtract number of default channels already enabled
0421EB F2 F2 21 04 0035*        jp p,@loop
0421EF C9          0036*        ret
0421F0 3E 03       0037*        ld a,3 ; first non-default channel
0421F2             0038*    @loop:
0421F2 32 0D 22 04 0039*        ld (@channel),a
0421F6 21 0A 22 04 0040*        ld hl,@beg
0421FA 01 05 00 00 0041*        ld bc,@end-@beg
0421FE F5          0042*        push af
0421FF 5B DF       0043*        rst.lil $18
042201 F1          0044*        pop af
042202 3C          0045*        inc a
042203 FE 01       0046*        cp max_channels
042205 C2 F2 21 04 0047*        jp nz,@loop
042209 C9          0048*        ret
04220A             0049*    @beg:
04220A 17 00 85    0050*        db 23, 0, $85
04220D 00          0051*    @channel: db 0
04220E 09          0052*        db 9 ; command 9: disable channel
04220F             0053*    @end:
04220F             0054*    
04220F             0055*    
04220F             0056*    ; ############################################################
04220F             0057*    ; VDU SOUND API
04220F             0058*    ; ############################################################
04220F             0059*    ; Command 0: Play note
04220F             0060*    ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
04220F             0061*        MACRO PLAY_NOTE channel, volume, frequency, duration
04220F             0062*        ld hl, @PLAY_NOTE_CMD        ; Start of command block
04220F             0063*        ld bc, @PLAY_NOTE_END - @PLAY_NOTE_CMD  ; Command block size
04220F             0064*        rst.lil $18
04220F             0065*        jr @PLAY_NOTE_END
04220F             0066*    @PLAY_NOTE_CMD:  db 23, 0, 0x85               ; Command header
04220F             0067*                     db channel                  ; Channel, 0 (commented out)
04220F             0068*                     db 0                        ; Play note command
04220F             0069*                     db volume                   ; Volume
04220F             0070*                     dw frequency                ; Frequency
04220F             0071*                     dw duration                 ; Duration
04220F             0072*    @PLAY_NOTE_END:
04220F             0073*        ENDMACRO
04220F             0074*    
04220F             0075*        MACRO MUTE_CHANNEL channel
04220F             0076*        ld hl, @MUTE_CHANNEL_CMD     ; Start of command block
04220F             0077*        ld bc, @MUTE_CHANNEL_END - @MUTE_CHANNEL_CMD  ; Command block size
04220F             0078*        rst.lil $18
04220F             0079*        jr @MUTE_CHANNEL_END
04220F             0080*    @MUTE_CHANNEL_CMD: db 23, 0, 0x85             ; Command header
04220F             0081*                       db channel                ; Channel, 0 (commented out)
04220F             0082*                       db 2                      ; Set volume command
04220F             0083*                       db 0                      ; Volume (mute)
04220F             0084*    @MUTE_CHANNEL_END:
04220F             0085*        ENDMACRO
04220F             0086*    
04220F             0087*    ; inputs: c = channel, b = volume, hl = frequency; de = duration;
04220F             0088*    vdu_play_note:
04220F 79          0089*        ld a,c
042210 32 30 22 04 0090*        ld (@channel),a
042214 78          0091*        ld a,b
042215 32 32 22 04 0092*        ld (@volume),a
042219 22 33 22 04 0093*        ld (@frequency),hl
04221D ED 53 35 22 0094*        ld (@duration),de
       04          
042222 21 2D 22 04 0095*        ld hl,@cmd
042226 01 0A 00 00 0096*        ld bc,@end-@cmd
04222A 5B DF       0097*        rst.lil $18
04222C C9          0098*        ret
04222D 17 00 85    0099*    @cmd:       db 23, 0, 0x85
042230 00          0100*    @channel:   db 0x00
042231 00          0101*                db 0x00 ; play note command
042232 00          0102*    @volume:    db 0x00
042233 00 00       0103*    @frequency: dw 0x0000
042235 00 00       0104*    @duration:  dw 0x0000
042237 00          0105*    @end:       db 0x00 ; padding
042238             0106*    
042238             0107*    ; Command 1: Status
042238             0108*    ; VDU 23, 0, &85, channel, 1
042238             0109*    ; inputs: a = channel
042238             0110*    ; Returns a bit mask indicating the status of the specified channel, or 255 if the channel is not valid, or has been disabled. The bit mask is as follows:
042238             0111*    ; Bit 	Name 	Meaning
042238             0112*    ; 0 	Active 	When set this indicates the channel is in use (has an active waveform)
042238             0113*    ; 1 	Playing 	Indicates the channel is actively playing a note, and thus will reject calls to play a new note
042238             0114*    ; 2 	Indefinite 	Set if the channel is playing an indefinite duration note
042238             0115*    ; 3 	Has Volume Envelope 	Set if the channel has a volume envelope
042238             0116*    ; 4 	Has Frequency Envelope 	Set if the channel has a frequency envelope
042238             0117*    
042238             0118*    ; Bits 5-7 are reserved for future use and, for enabled channels, will currently always be zero.
042238             0119*    vdu_channel_status:
042238 32 4A 22 04 0120*        ld (@channel),a
04223C 21 47 22 04 0121*        ld hl,@cmd
042240 01 05 00 00 0122*        ld bc,@end-@cmd
042244 5B DF       0123*        rst.lil $18
042246 C9          0124*        ret
042247 17 00 85    0125*    @cmd:       db 23, 0, 0x85
04224A 00          0126*    @channel:   db 0x00
04224B 01          0127*                db 0x01 ; get channel status command
04224C             0128*    @end:
04224C             0129*    
04224C             0130*    ; VDU 23, 0, &85, channel, 2, volume
04224C             0131*    ; inputs: c = channel, b = volume
04224C             0132*    ; Sets the volume of the specified channel. The volume is a value from 0 to 127, where 0 is silent and 127 is full volume. Values over 127 will be treated as 127 (with one exception described later).
04224C             0133*    
04224C             0134*    ; Specifying a channel of -1 (or 255) will set the global sound system volume level. (Requires Console8 VDP 2.5.0 or later.)
04224C             0135*    
04224C             0136*    ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the volume of a channel that is already playing a note.
04224C             0137*    vdu_channel_volume:
04224C 79          0138*        ld a,c
04224D 32 64 22 04 0139*        ld (@channel),a
042251 78          0140*        ld a,b
042252 32 66 22 04 0141*        ld (@volume),a
042256 21 61 22 04 0142*        ld hl,@cmd
04225A 01 06 00 00 0143*        ld bc,@end-@cmd
04225E 5B DF       0144*        rst.lil $18
042260 C9          0145*        ret
042261 17 00 85    0146*    @cmd:       db 23, 0, 0x85
042264 00          0147*    @channel:   db 0x00
042265 02          0148*                db 0x02 ; set volume command
042266 00          0149*    @volume:    db 0x00
042267             0150*    @end:
042267             0151*    
042267             0152*    ; VDU 23, 0, &85, channel, 3, frequency;
042267             0153*    
042267             0154*    ; Sets the frequency of the specified channel. The frequency is a 16-bit value specifying in Hz the frequency of the note to be played.
042267             0155*    
042267             0156*    ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the frequency of a channel that is already playing a note.
042267             0157*    
042267             0158*    ; Returns 1 on success, 0 for failure.
042267             0159*    vdu_channel_frequency:
042267 79          0160*        ld a,c
042268 32 7F 22 04 0161*        ld (@channel),a
04226C ED 53 81 22 0162*        ld (@frequency),de
       04          
042271 21 7C 22 04 0163*        ld hl,@cmd
042275 01 07 00 00 0164*        ld bc,@end-@cmd
042279 5B DF       0165*        rst.lil $18
04227B C9          0166*        ret
04227C 17 00 85    0167*    @cmd:       db 23, 0, 0x85
04227F 00          0168*    @channel:   db 0x00
042280 03          0169*                db 0x03 ; set frequency command
042281 00 00       0170*    @frequency: dw 0x0000
042283 00          0171*    @end:       db 0x00 ; padding
042284             0172*    
042284             0173*    
042284             0174*    ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
042284             0175*    ; inputs: c = channel, b = waveformOrSample, [hl = bufferId]
042284             0176*    ; Sets the waveform type for a channel to use. The waveformOrSample value is a single byte treated as a signed value.
042284             0177*    
042284             0178*    ; Using a negative value for the waveform indicates that a sample should be used instead. For more information see the documentation for the sample command.
042284             0179*    
042284             0180*    ; By default a channel is set to use waveform 0 (square wave).
042284             0181*    
042284             0182*    ; Valid waveform values are as follows:
042284             0183*    ; Value 	Waveform
042284             0184*    ; 0 	Square wave
042284             0185*    ; 1 	Triangle wave
042284             0186*    ; 2 	Sawtooth wave
042284             0187*    ; 3 	Sine wave
042284             0188*    ; 4 	Noise (simple white noise with no frequency support)
042284             0189*    ; 5 	VIC Noise (emulates a VIC6561; supports frequency)
042284             0190*    ; 8 	Sample (specifying a 16-bit buffer ID for sample data)
042284             0191*    
042284             0192*    vdu_channel_waveform:
042284 79          0193*        ld a,c
042285 32 AA 22 04 0194*        ld (@channel),a
042289 78          0195*        ld a,b
04228A 32 AC 22 04 0196*        ld (@waveform),a
04228E FE 08       0197*        cp 8 ; check if the waveform is a sample
042290 28 06       0198*        jr z, @sample
042292 01 06 00 00 0199*        ld bc,@bufferId-@cmd
042296 18 08       0200*        jr @sendToVdu
042298             0201*    @sample:
042298 22 AD 22 04 0202*        ld (@bufferId),hl
04229C 01 08 00 00 0203*        ld bc,@end-@cmd
0422A0             0204*    @sendToVdu:
0422A0 21 A7 22 04 0205*        ld hl,@cmd
0422A4 5B DF       0206*        rst.lil $18
0422A6 C9          0207*        ret
0422A7 17 00 85    0208*    @cmd:       db 23, 0, 0x85
0422AA 00          0209*    @channel:   db 0x00
0422AB 04          0210*                db 0x04 ; set waveform command
0422AC 00          0211*    @waveform:  db 0x00
0422AD 00 00       0212*    @bufferId:  dw 0x0000
0422AF 00          0213*    @end:       db 0x00 ; padding
0422B0             0214*    
0422B0             0215*    ; VDU 23, 0, &85, channel (ignored), 5, 2, bufferId; format, [sampleRate;]
0422B0             0216*    ; inputs: hl = bufferId; a = format, de = sample rate in Hz
0422B0             0217*    ; The format is a single byte giving the format of the sample data. The following formats are supported:
0422B0             0218*    ; Value	Description
0422B0             0219*    ; 0	8-bit signed
0422B0             0220*    ; 1	8-bit unsigned
0422B0             0221*    ; The format value can also have modifier bits set to modify the behaviour of the sample. The following modifier bits are supported:
0422B0             0222*    ; Value	Description
0422B0             0223*    ; 8	sample rate is sent in the next 16-bits
0422B0             0224*    ; 16	sample is tuneable
0422B0             0225*    ; The default sample rate for samples on the VDP is 16kHz (actually 16.384kHz to be precise).
0422B0             0226*    vdu_buffer_to_sound:
0422B0 22 D0 22 04 0227*        ld (@bufferId),hl
0422B4 C6 08       0228*        add a,8 ; modify format byte to indicate sample rate argument is given
0422B6 32 D2 22 04 0229*        ld (@format),a
0422BA ED 53 D3 22 0230*        ld (@sampleRate),de
       04          
0422BF 21 CA 22 04 0231*        ld hl,@cmd
0422C3 01 0B 00 00 0232*        ld bc,@end-@cmd
0422C7 5B DF       0233*        rst.lil $18
0422C9 C9          0234*        ret
0422CA 17 00 85    0235*    @cmd:       db 23, 0, 0x85
0422CD 00          0236*    @channel:   db 0x00 ; ignored
0422CE 05          0237*                db 0x05 ; buffer to sound command
0422CF 02          0238*                db 0x02 ; command 2 create sample
0422D0 00 00       0239*    @bufferId:  dw 0x0000
0422D2 00          0240*    @format:    db 0x00
0422D3 00 00       0241*    @sampleRate: dw 0x0000
0422D5 00          0242*    @end:       db 0x00 ; padding
0422D6             0243*    
0422D6             0244*    ; Command 13: Set sample rate
0422D6             0245*    ; VDU 23, 0, &85, channel, 13, sampleRate;
0422D6             0246*    ; inputs: c = channel, hl = sampleRate (Hz)
0422D6             0247*    vdu_set_sample_rate:
0422D6 79          0248*        ld a,c
0422D7 32 ED 22 04 0249*        ld (@channel),a
0422DB 22 EF 22 04 0250*        ld (@sampleRate),hl
0422DF 21 EA 22 04 0251*        ld hl,@cmd
0422E3 01 07 00 00 0252*        ld bc,@end-@cmd
0422E7 5B DF       0253*        rst.lil $18
0422E9 C9          0254*        ret
0422EA 17 00 85    0255*    @cmd:       db 23, 0, 0x85
0422ED 00          0256*    @channel:   db 0x00
0422EE 0D          0257*                db 13 ; set sample rate command
0422EF 00 00       0258*    @sampleRate: dw 0x0000
0422F1 00          0259*    @end:       db 0x00 ; padding
0422F2             0260*    
0422F2             0261*    ; load a sound file to a buffer
0422F2             0262*    ; inputs: hl = bufferId ; de = sampleRate in Hz ; iy = pointer to filename
0422F2             0263*    vdu_load_sfx:
0422F2             0264*    ; back up input parameters
0422F2 E5          0265*        push hl ; bufferId
0422F3 D5          0266*        push de ; sample rate
0422F4             0267*    ; load the sound
0422F4 CD EC 1D 04 0268*        call vdu_load_buffer_from_file
0422F8             0269*    ; now make the buffer a sound sample
0422F8 D1          0270*        pop de ; sample rate
0422F9 E1          0271*        pop hl ; bufferId
0422FA AF          0272*        xor a ; zero is the magic number for mono 8-bit signed PCM
0422FB CD B0 22 04 0273*        call vdu_buffer_to_sound
0422FF C9          0274*        ret
042300             0275*    
042300             0276*    
042300 00          0277*    last_channel: db 0
042301             0278*    max_channels: equ 1
042301             0279*    
042301             0280*    ; play a sound effect from an already loaded buffer
042301             0281*    ; inputs: hl = bufferId ; bc = duration in milliseconds
042301             0282*    vdu_play_sfx:
042301 22 39 23 04 0283*        ld (@bufferId),hl
042305 ED 43 43 23 0284*        ld (@duration),bc
       04          
04230A 3E 17       0285*        ld a,23
04230C 32 3B 23 04 0286*        ld (@bufferId+2),a
042310 3A 00 23 04 0287*        ld a,(last_channel)
042314 3C          0288*        inc a
042315             0289*        ; and 31 ; modulo 32
042315 FE 01       0290*        cp max_channels
042317 C2 1C 23 04 0291*        jp nz,@load_channel
04231B AF          0292*        xor a
04231C             0293*    @load_channel:
04231C 32 00 23 04 0294*        ld (last_channel),a
042320 32 36 23 04 0295*        ld (@channel0),a
042324 32 3E 23 04 0296*        ld (@channel1),a
042328 21 33 23 04 0297*        ld hl, @sample
04232C 01 12 00 00 0298*        ld bc, @sample_end - @sample
042330 5B DF       0299*        rst.lil $18
042332 C9          0300*        ret
042333             0301*    @sample:
042333             0302*    ; Command 4: Set waveform
042333             0303*    ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
042333 17 00 85    0304*        .db 23,0,$85                        ; do sound
042336             0305*    @channel0:
042336 00 04 08    0306*        .db 0,4,8 ; channel, command, waveform
042339             0307*    @bufferId:
042339 00 00       0308*        .dw 0x0000
04233B             0309*    ; Command 0: Play note
04233B             0310*    ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
04233B 17 00 85    0311*        .db 23,0,$85                        ; do sound
04233E             0312*    @channel1:
04233E 00 00 7F    0313*        .db 0,0,127                ; channel, volume
042341 00 00       0314*        .dw 0
042343             0315*    @duration:                              ; freq (tuneable samples only)
042343 00 00       0316*        .dw 0x0000                        ; duration
042345             0317*    @sample_end:
042345 00          0318*        .db 0x00 ; padding
042346             0319*    
042346             0320*    ; inputs: c = channel, b = volume, de = sample rate; hl = bufferId;
042346             0321*    vdu_play_sample:
042346             0322*        ; populate input parameters
042346 79          0323*        ld a,c
042347 32 79 23 04 0324*        ld (@channel0),a
04234B 32 81 23 04 0325*        ld (@channel1),a
04234F 32 88 23 04 0326*        ld (@channel2),a
042353 78          0327*        ld a,b
042354 32 8A 23 04 0328*        ld (@volume),a
042358 ED 53 83 23 0329*        ld (@sampleRate),de
       04          
04235D 22 7C 23 04 0330*        ld (@bufferId),hl
042361 3E 17       0331*        ld a,23
042363 32 7E 23 04 0332*        ld (@cmd1),a
042367 32 85 23 04 0333*        ld (@cmd2),a
04236B             0334*        ; prep the vdu command string
04236B 21 76 23 04 0335*        ld hl, @cmd0
04236F 01 19 00 00 0336*        ld bc, @end - @cmd0
042373 5B DF       0337*        rst.lil $18
042375 C9          0338*        ret
042376             0339*    ; set waveform command
042376 17 00 85    0340*    @cmd0:       db 23, 0, 0x85
042379 00          0341*    @channel0:   db 0x00
04237A 04          0342*                 db 0x04 ; set waveform command
04237B 08          0343*    @waveform:   db 0x08 ; sample
04237C 00 00       0344*    @bufferId:   dw 0x0000
04237E             0345*    ; set sample rate command
04237E 17 00 85    0346*    @cmd1:       db 23, 0, 0x85
042381 00          0347*    @channel1:   db 0x00
042382 0D          0348*                db 13 ; set sample rate command
042383 00 00       0349*    @sampleRate: dw 0x0000
042385             0350*    ; play note command
042385 17 00 85    0351*    @cmd2:       db 23, 0, 0x85
042388 00          0352*    @channel2:   db 0x00
042389 00          0353*                 db 0x00 ; play note command
04238A 00          0354*    @volume:     db 0x00
04238B 00 00       0355*    @frequency:  dw 0x00 ; no effect unless buffer has been set to tuneable sample
04238D 00 00       0356*    @duration:   dw 0x0000 ; milliseconds: set to -1 to loop indefinitely, 0 to play full duration once
04238F 00          0357*    @end:        db 0x00 ; padding
042390             0044     
042390             0045         include "fpp.inc"
042390             0001*    ;
042390             0002*    ; Title:	BBC Basic Interpreter - Z80 version
042390             0003*    ;		Z80 Floating Point Package
042390             0004*    ; Author:	(C) Copyright  R.T.Russell  1986
042390             0005*    ; Modified By:	Dean Belfield
042390             0006*    ; Created:	03/05/2022
042390             0007*    ; Last Updated:	07/06/2023
042390             0008*    ;
042390             0009*    ; Modinfo:
042390             0010*    ; 26/10/1986:	Version 0.0
042390             0011*    ; 14/12/1988:	Vesion 0.1 (Bug Fix)
042390             0012*    ; 12/05/2023:	Modified by Dean Belfield
042390             0013*    ; 07/06/2023:	Modified to run in ADL mode
042390             0014*    
042390             0015*    			; .ASSUME	ADL = 1
042390             0016*    
042390             0017*    			; SEGMENT CODE
042390             0018*    
042390             0019*    			; XDEF	FPP
042390             0020*    			; XDEF	DLOAD5
042390             0021*    			; XDEF	DLOAD5_SPL
042390             0022*    ;
042390             0023*    ;BINARY FLOATING POINT REPRESENTATION:
042390             0024*    ;   32 BIT SIGN-MAGNITUDE NORMALIZED MANTISSA
042390             0025*    ;    8 BIT EXCESS-128 SIGNED EXPONENT
042390             0026*    ;   SIGN BIT REPLACES MANTISSA MSB (IMPLIED "1")
042390             0027*    ;   MANTISSA=0 & EXPONENT=0 IMPLIES VALUE IS ZERO.
042390             0028*    ;
042390             0029*    ;BINARY INTEGER REPRESENTATION:
042390             0030*    ;   32 BIT 2'S-COMPLEMENT SIGNED INTEGER
042390             0031*    ;    "EXPONENT" BYTE = 0 (WHEN PRESENT)
042390             0032*    ;
042390             0033*    ;NORMAL REGISTER ALLOCATION: MANTISSA - HLH'L'
042390             0034*    ;                            EXPONENT - C
042390             0035*    ;ALTERNATE REGISTER ALLOCATION: MANTISSA - DED'E'
042390             0036*    ;                               EXPONENT - B
042390             0037*    
042390             0038*    ;
042390             0039*    ;Error codes:
042390             0040*    ;
042390             0041*    
042390             0042*    BADOP:			EQU     1               ;Bad operation code
042390             0043*    DIVBY0:			EQU     18              ;Division by zero
042390             0044*    TOOBIG_FP:			EQU     20              ;Too big
042390             0045*    NGROOT:			EQU     21              ;Negative root
042390             0046*    LOGRNG:			EQU     22              ;Log range
042390             0047*    ACLOST:			EQU     23              ;Accuracy lost
042390             0048*    EXPRNG:			EQU     24              ;Exp range
042390             0049*    ;
042390             0050*    ;Call entry and despatch code:
042390             0051*    ;
042390 FD E5       0052*    FPP:			PUSH    IY              ;Save IY
042392 FD 21 00 00 0053*            		LD      IY,0
       00          
042397 FD 39       0054*            		ADD     IY,SP           ;Save SP in IY
042399 CD A9 23 04 0055*            		CALL    OP              ;Perform operation
04239D BF          0056*            		CP      A               ;Good return (Z, NC)
04239E FD E1       0057*    EXIT_FP_:			POP     IY              ;Restore IY
0423A0 C9          0058*            		RET                     ;Return to caller
0423A1             0059*    ;
0423A1             0060*    ;Error exit:
0423A1             0061*    ;
0423A1 3E 01       0062*    BAD_FP:			LD      A,BADOP         ;"Bad operation code"
0423A3 FD F9       0063*    ERROR_FP_:			LD      SP,IY           ;Restore SP from IY
0423A5 B7          0064*            		OR      A               ;Set NZ
0423A6 37          0065*            		SCF                     ;Set C
0423A7 18 F5       0066*            		JR      EXIT_FP_
0423A9             0067*    ;
0423A9             0068*    ;Perform operation or function:
0423A9             0069*    ;
0423A9             0070*    ; OP:			CP      (RTABLE-DTABLE)/3
0423A9 FE 2A       0071*    OP:				CP      RTABLE-DTABLE/3 ; ez80asm doesn't do nested expressions
0423AB             0072*    
0423AB 30 F4       0073*            		JR      NC,BAD_FP
0423AD             0074*            		; CP      (FTABLE-DTABLE)/3
0423AD FE 10       0075*    				CP      FTABLE-DTABLE/3 ; ditto
0423AF 30 08       0076*            		JR      NC,DISPAT_FP
0423B1 08          0077*            		EX      AF,AF'
0423B2 78          0078*            		LD      A,B
0423B3 B1          0079*            		OR      C               ;Both integer?
0423B4 C4 BC 2E 04 0080*            		CALL    NZ,FLOATA       ;No, so float both
0423B8 08          0081*            		EX      AF,AF'
0423B9 E5          0082*    DISPAT_FP:			PUSH    HL
0423BA 21 CC 23 04 0083*            		LD      HL,DTABLE
0423BE C5          0084*            		PUSH    BC
0423BF 01 03 00 00 0085*    			LD	BC, 3		; C = 3
0423C3 47          0086*    			LD	B, A 		; B = op-code
0423C4 ED 4C       0087*    			MLT 	BC 		;BC = op-code * 3
0423C6 09          0088*    			ADD	HL, BC 		;Add to table base
0423C7 ED 27       0089*    			LD	HL, (HL)	;Get the routine address (24-bit)
0423C9             0090*    
0423C9             0091*    ;        		ADD     A, A            ;A = op-code * 2
0423C9             0092*    ;        		LD      C,A
0423C9             0093*    ;        		LD      B,0             ;BC = op-code * 2
0423C9             0094*    ;        		ADD     HL,BC
0423C9             0095*    ;        		LD      A,(HL)          ;Get low byte
0423C9             0096*    ;        		INC     HL
0423C9             0097*    ;        		LD      H,(HL)          ;Get high byte
0423C9             0098*    ;        		LD      L,A
0423C9             0099*    
0423C9 C1          0100*            		POP     BC
0423CA E3          0101*            		EX      (SP),HL
0423CB C9          0102*            		RET                     ;Off to routine
0423CC             0103*    ;
0423CC             0104*    ;Despatch table:
0423CC             0105*    ;
0423CC 7E 24 04    0106*    DTABLE:			DW24  IAND            ;AND (INTEGER)
0423CF EC 24 04    0107*            		DW24  IBDIV           ;DIV
0423D2 91 24 04    0108*            		DW24  IEOR            ;EOR
0423D5 B7 24 04    0109*            		DW24  IMOD            ;MOD
0423D8 A4 24 04    0110*            		DW24  IOR             ;OR
0423DB 72 27 04    0111*            		DW24  ILE             ;<=
0423DE 81 27 04    0112*            		DW24  INE             ;<>
0423E1 65 27 04    0113*            		DW24  IGE             ;>=
0423E4 4A 27 04    0114*            		DW24  ILT             ;<
0423E7 8E 27 04    0115*            		DW24  IEQ             ;=
0423EA DA 25 04    0116*            		DW24  IMUL            ;*
0423ED 15 25 04    0117*            		DW24  IADD            ;+
0423F0 57 27 04    0118*            		DW24  IGT             ;>
0423F3 FC 24 04    0119*            		DW24  ISUB            ;-
0423F6 91 26 04    0120*            		DW24  IPOW            ;^
0423F9 87 25 04    0121*            		DW24  IDIV            ;/
0423FC             0122*    ;
0423FC             0123*    FTABLE:
0423FC A0 27 04    0124*    				DW24  ABSV_FP            ;ABS
0423FF 86 2B 04    0125*            		DW24  ACS_FP             ;ACS
042402 C4 2A 04    0126*            		DW24  ASN_FP             ;ASN
042405 F4 2A 04    0127*            		DW24  ATN_FP             ;ATN
042408 BF 28 04    0128*            		DW24  COS_FP             ;COS
04240B CE 27 04    0129*            		DW24  DEG_FP             ;DEG
04240E 7B 29 04    0130*            		DW24  EXP_FP             ;EXP
042411 22 28 04    0131*            		DW24  INT_FP_            ;INT
042414 19 2A 04    0132*            		DW24  LN_FP              ;LN
042417 AE 2A 04    0133*            		DW24  LOG_FP             ;LOG
04241A AC 27 04    0134*            		DW24  NOTK_FP            ;NOT
04241D D8 27 04    0135*            		DW24  RAD_FP             ;RAD
042420 F3 27 04    0136*            		DW24  SGN_FP             ;SGN
042423 CC 28 04    0137*            		DW24  SIN_FP             ;SIN
042426 3B 28 04    0138*            		DW24  SQR_FP             ;SQR
042429 99 28 04    0139*            		DW24  TAN_FP             ;TAN
04242C             0140*    ;
04242C 49 2F 04    0141*    		        DW24  ZERO_FP            ;ZERO
04242F 54 29 04    0142*            		DW24  FONE_FP            ;FONE
042432 93 27 04    0143*            		DW24  TRUE_FP            ;TRUE
042435 C0 27 04    0144*            		DW24  PI_FP              ;PI
042438             0145*    ;
042438 07 28 04    0146*    		        DW24  VAL_FP             ;VAL
04243B 8F 2B 04    0147*            		DW24  STR_FP             ;STR$
04243E             0148*    ;
04243E F0 2D 04    0149*            		DW24  SFIX_FP            ;FIX
042441 CC 2E 04    0150*            		DW24  SFLOAT_FP          ;FLOAT
042444             0151*    ;
042444 1A 2F 04    0152*    		        DW24  FTEST_FP           ;TEST
042447 2C 2F 04    0153*            		DW24  FCOMP_FP           ;COMPARE
04244A             0154*    ;
04244A 7A 24 04    0155*    RTABLE:			DW24  FAND            ;AND (FLOATING-POINT)
04244D E8 24 04    0156*            		DW24  FBDIV           ;DIV
042450 8D 24 04    0157*            		DW24  FEOR            ;EOR
042453 B3 24 04    0158*            		DW24  FMOD            ;MOD
042456 A0 24 04    0159*            		DW24  FFOR             ;OR
042459 6C 27 04    0160*            		DW24  FLE             ;<=
04245C 7B 27 04    0161*            		DW24  FNE             ;<>
04245F 5F 27 04    0162*            		DW24  FGE             ;>=
042462 44 27 04    0163*            		DW24  FLT             ;<
042465 88 27 04    0164*            		DW24  FEQ             ;=
042468 34 26 04    0165*            		DW24  FMUL            ;*
04246B 22 25 04    0166*            		DW24  FADD            ;+
04246E 51 27 04    0167*            		DW24  FGT             ;>
042471 09 25 04    0168*            		DW24  FSUB            ;-
042474 11 27 04    0169*            		DW24  FPOW            ;^
042477 8B 25 04    0170*            		DW24  FDIV            ;/
04247A             0171*    ;
04247A             0172*    ;       PAGE
04247A             0173*    ;
04247A             0174*    ;ARITHMETIC AND LOGICAL OPERATORS:
04247A             0175*    ;All take two arguments, in HLH'L'C & DED'E'B.
04247A             0176*    ;Output in HLH'L'C
04247A             0177*    ;All registers except IX, IY destroyed.
04247A             0178*    ; (N.B. FPOW destroys IX).
04247A             0179*    ;
04247A             0180*    ;FAND - Floating-point AND.
04247A             0181*    ;IAND - Integer AND.
04247A             0182*    ;
04247A CD E4 2D 04 0183*    FAND:			CALL    FIX2
04247E 7C          0184*    IAND:			LD      A,H
04247F A2          0185*            		AND     D
042480 67          0186*            		LD      H,A
042481 7D          0187*            		LD      A,L
042482 A3          0188*            		AND     E
042483 6F          0189*            		LD      L,A
042484 D9          0190*            		EXX
042485 7C          0191*            		LD      A,H
042486 A2          0192*            		AND     D
042487 67          0193*            		LD      H,A
042488 7D          0194*            		LD      A,L
042489 A3          0195*            		AND     E
04248A 6F          0196*            		LD      L,A
04248B D9          0197*            		EXX
04248C C9          0198*            		RET
04248D             0199*    ;
04248D             0200*    ;FEOR - Floating-point exclusive-OR.
04248D             0201*    ;IEOR - Integer exclusive-OR.
04248D             0202*    ;
04248D CD E4 2D 04 0203*    FEOR:			CALL    FIX2
042491 7C          0204*    IEOR:			LD      A,H
042492 AA          0205*            		XOR     D
042493 67          0206*            		LD      H,A
042494 7D          0207*            		LD      A,L
042495 AB          0208*            		XOR     E
042496 6F          0209*            		LD      L,A
042497 D9          0210*            		EXX
042498 7C          0211*            		LD      A,H
042499 AA          0212*            		XOR     D
04249A 67          0213*            		LD      H,A
04249B 7D          0214*            		LD      A,L
04249C AB          0215*            		XOR     E
04249D 6F          0216*            		LD      L,A
04249E D9          0217*            		EXX
04249F C9          0218*            		RET
0424A0             0219*    ;
0424A0             0220*    ;FOR - Floating-point OR.
0424A0             0221*    ;IOR - Integer OR.
0424A0             0222*    ;
0424A0 CD E4 2D 04 0223*    FFOR:			CALL    FIX2
0424A4 7C          0224*    IOR:			LD      A,H
0424A5 B2          0225*            		OR      D
0424A6 67          0226*            		LD      H,A
0424A7 7D          0227*            		LD      A,L
0424A8 B3          0228*            		OR      E
0424A9 6F          0229*            		LD      L,A
0424AA D9          0230*            		EXX
0424AB 7C          0231*            		LD      A,H
0424AC B2          0232*            		OR      D
0424AD 67          0233*            		LD      H,A
0424AE 7D          0234*            		LD      A,L
0424AF B3          0235*            		OR      E
0424B0 6F          0236*            		LD      L,A
0424B1 D9          0237*            		EXX
0424B2 C9          0238*            		RET
0424B3             0239*    ;
0424B3             0240*    ;FMOD - Floating-point remainder.
0424B3             0241*    ;IMOD - Integer remainder.
0424B3             0242*    ;
0424B3 CD E4 2D 04 0243*    FMOD:			CALL    FIX2
0424B7 7C          0244*    IMOD:			LD      A,H
0424B8 AA          0245*            		XOR     D               ;DIV RESULT SIGN
0424B9 CB 7C       0246*            		BIT     7,H
0424BB 08          0247*            		EX      AF,AF'
0424BC CB 7C       0248*            		BIT     7,H
0424BE C4 00 2E 04 0249*            		CALL    NZ,NEGATE       ;MAKE ARGUMENTS +VE
0424C2 CD FD 2E 04 0250*            		CALL    SWAP_FP
0424C6 CB 7C       0251*            		BIT     7,H
0424C8 C4 00 2E 04 0252*            		CALL    NZ,NEGATE
0424CC 44          0253*            		LD      B,H
0424CD 4D          0254*            		LD      C,L
0424CE 21 00 00 00 0255*            		LD      HL,0
0424D2 D9          0256*            		EXX
0424D3 44          0257*            		LD      B,H
0424D4 4D          0258*            		LD      C,L
0424D5 21 00 00 00 0259*            		LD      HL,0
0424D9 3E DF       0260*            		LD      A,-33
0424DB CD 8A 30 04 0261*            		CALL    DIVA            ;DIVIDE
0424DF D9          0262*            		EXX
0424E0 0E 00       0263*            		LD      C,0             ;INTEGER MARKER
0424E2 08          0264*            		EX      AF,AF'
0424E3 C8          0265*            		RET     Z
0424E4 C3 00 2E 04 0266*            		JP      NEGATE
0424E8             0267*    ;
0424E8             0268*    ;BDIV - Integer division.
0424E8             0269*    ;
0424E8 CD E4 2D 04 0270*    FBDIV:			CALL    FIX2
0424EC CD B7 24 04 0271*    IBDIV:			CALL    IMOD
0424F0 B7          0272*            		OR      A
0424F1 CD FD 2E 04 0273*            		CALL    SWAP_FP
0424F5 0E 00       0274*            		LD      C,0
0424F7 F0          0275*            		RET     P
0424F8 C3 00 2E 04 0276*            		JP      NEGATE
0424FC             0277*    ;
0424FC             0278*    ;ISUB - Integer subtraction.
0424FC             0279*    ;FSUB - Floating point subtraction with rounding.
0424FC             0280*    ;
0424FC CD 98 2F 04 0281*    ISUB:			CALL    SUB_
042500 E0          0282*            		RET     PO
042501 CD 90 2F 04 0283*            		CALL    ADD_
042505 CD C0 2E 04 0284*            		CALL    FLOAT2
042509 7A          0285*    FSUB:			LD      A,D
04250A EE 80       0286*            		XOR     80H             ;CHANGE SIGN THEN ADD
04250C 57          0287*            		LD      D,A
04250D 18 13       0288*            		JR      FADD
04250F             0289*    ;
04250F             0290*    ;Reverse subtract.
04250F             0291*    ;
04250F 7C          0292*    RSUB:			LD      A,H
042510 EE 80       0293*            		XOR     80H
042512 67          0294*            		LD      H,A
042513 18 0D       0295*            		JR      FADD
042515             0296*    ;
042515             0297*    ;IADD - Integer addition.
042515             0298*    ;FADD - Floating point addition with rounding.
042515             0299*    ;
042515 CD 90 2F 04 0300*    IADD:			CALL    ADD_
042519 E0          0301*            		RET     PO
04251A CD 98 2F 04 0302*            		CALL    SUB_
04251E CD C0 2E 04 0303*            		CALL    FLOAT2
042522 05          0304*    FADD:			DEC     B
042523 04          0305*            		INC     B
042524 C8          0306*            		RET     Z               ;ARG 2 ZERO
042525 0D          0307*            		DEC     C
042526 0C          0308*            		INC     C
042527 CA FD 2E 04 0309*            		JP      Z,SWAP_FP          ;ARG 1 ZERO
04252B D9          0310*            		EXX
04252C 01 00 00 00 0311*            		LD      BC,0            ;INITIALISE
042530 D9          0312*            		EXX
042531 7C          0313*            		LD      A,H
042532 AA          0314*            		XOR     D               ;XOR SIGNS
042533 F5          0315*            		PUSH    AF
042534 78          0316*            		LD      A,B
042535 B9          0317*            		CP      C               ;COMPARE EXPONENTS
042536 DC FD 2E 04 0318*            		CALL    C,SWAP_FP          ;MAKE DED'E'B LARGEST
04253A 78          0319*            		LD      A,B
04253B CB FC       0320*            		SET     7,H             ;IMPLIED 1
04253D C4 D1 2D 04 0321*            		CALL    NZ,FIX          ;ALIGN
042541 F1          0322*            		POP     AF
042542 7A          0323*            		LD      A,D             ;SIGN OF LARGER
042543 CB FA       0324*            		SET     7,D             ;IMPLIED 1
042545 FA 55 25 04 0325*            		JP      M,FADD3         ;SIGNS DIFFERENT
042549 CD 90 2F 04 0326*            		CALL    ADD_             ;HLH'L'=HLH'L'+DED'E'
04254D DC 05 2F 04 0327*            		CALL    C,DIV2          ;NORMALISE
042551 CB FC       0328*            		SET     7,H
042553 18 0D       0329*            		JR      FADD4
042555             0330*    ;
042555 CD 98 2F 04 0331*    FADD3:			CALL    SUB_             ;HLH'L'=HLH'L'-DED'E'
042559 DC 18 2E 04 0332*            		CALL    C,NEG_           ;NEGATE HLH'L'B'C'
04255D CD 97 2E 04 0333*            		CALL    FLO48
042561 2F          0334*            		CPL                     ;CHANGE RESULT SIGN
042562 D9          0335*    FADD4:			EXX
042563 EB          0336*            		EX      DE,HL
042564 21 00 80 00 0337*            		LD      HL,8000H
042568 B7          0338*            		OR      A               ;CLEAR CARRY
042569 52 ED 42    0339*            		SBC.S   HL,BC
04256C EB          0340*            		EX      DE,HL
04256D D9          0341*            		EXX
04256E CC F7 2E 04 0342*            		CALL    Z,ODD           ;ROUND UNBIASSED
042572 DC E5 2E 04 0343*            		CALL    C,ADD1_FP          ;ROUND UP
042576 DC 12 2F 04 0344*            		CALL    C,INCC
04257A CB BC       0345*            		RES     7,H
04257C 0D          0346*            		DEC     C
04257D 0C          0347*            		INC     C
04257E CA 49 2F 04 0348*            		JP      Z,ZERO_FP
042582 B7          0349*            		OR      A               ;RESULT SIGNQ
042583 F0          0350*            		RET     P               ;POSITIVE
042584 CB FC       0351*            		SET     7,H             ;NEGATIVE
042586 C9          0352*            		RET
042587             0353*    ;
042587             0354*    ;IDIV - Integer division.
042587             0355*    ;FDIV - Floating point division with rounding.
042587             0356*    ;
042587 CD C0 2E 04 0357*    IDIV:			CALL    FLOAT2
04258B 05          0358*    FDIV:			DEC     B               ;TEST FOR ZERO
04258C 04          0359*            		INC     B
04258D 3E 12       0360*            		LD      A,DIVBY0
04258F CA A3 23 04 0361*            		JP      Z,ERROR_FP_         ;"Division by zero"
042593 0D          0362*            		DEC     C               ;TEST FOR ZERO
042594 0C          0363*            		INC     C
042595 C8          0364*            		RET     Z
042596 7C          0365*            		LD      A,H
042597 AA          0366*            		XOR     D               ;CALC. RESULT SIGN
042598 08          0367*            		EX      AF,AF'          ;SAVE SIGN
042599 CB FA       0368*            		SET     7,D             ;REPLACE IMPLIED 1's
04259B CB FC       0369*            		SET     7,H
04259D C5          0370*            		PUSH    BC              ;SAVE EXPONENTS
04259E 42          0371*            		LD      B,D             ;LOAD REGISTERS
04259F 4B          0372*            		LD      C,E
0425A0 11 00 00 00 0373*            		LD      DE,0
0425A4 D9          0374*            		EXX
0425A5 42          0375*            		LD      B,D
0425A6 4B          0376*            		LD      C,E
0425A7 11 00 00 00 0377*            		LD      DE,0
0425AB 3E E0       0378*            		LD      A,-32           ;LOOP COUNTER
0425AD CD 8A 30 04 0379*            		CALL    DIVA            ;DIVIDE
0425B1 D9          0380*            		EXX
0425B2 CB 7A       0381*            		BIT     7,D
0425B4 D9          0382*            		EXX
0425B5 CC A9 30 04 0383*            		CALL    Z,DIVB          ;NORMALISE & INC A
0425B9 EB          0384*            		EX      DE,HL
0425BA D9          0385*            		EXX
0425BB CB 38       0386*            		SRL     B               ;DIVISOR/2
0425BD CB 19       0387*            		RR      C
0425BF B7          0388*            		OR      A               ;CLEAR CARRY
0425C0 52 ED 42    0389*            		SBC.S   HL,BC           ;REMAINDER-DIVISOR/2
0425C3 3F          0390*            		CCF
0425C4 EB          0391*            		EX      DE,HL           ;RESULT IN HLH'L'
0425C5 CC F7 2E 04 0392*            		CALL    Z,ODD           ;ROUND UNBIASSED
0425C9 DC E5 2E 04 0393*            		CALL    C,ADD1_FP          ;ROUND UP
0425CD C1          0394*            		POP     BC              ;RESTORE EXPONENTS
0425CE DC 12 2F 04 0395*            		CALL    C,INCC
0425D2 1F          0396*            		RRA                     ;LSB OF A TO CARRY
0425D3 79          0397*            		LD      A,C             ;COMPUTE NEW EXPONENT
0425D4 98          0398*            		SBC     A,B
0425D5 3F          0399*            		CCF
0425D6 C3 77 26 04 0400*            		JP      CHKOVF
0425DA             0401*    ;
0425DA             0402*    ;IMUL - Integer multiplication.
0425DA             0403*    ;
0425DA 7C          0404*    IMUL:			LD      A,H
0425DB AA          0405*            		XOR     D
0425DC 08          0406*            		EX      AF,AF'          ;SAVE RESULT SIGN
0425DD CB 7C       0407*            		BIT     7,H
0425DF C4 00 2E 04 0408*            		CALL    NZ,NEGATE
0425E3 CD FD 2E 04 0409*            		CALL    SWAP_FP
0425E7 CB 7C       0410*            		BIT     7,H
0425E9 C4 00 2E 04 0411*            		CALL    NZ,NEGATE
0425ED 44          0412*            		LD      B,H
0425EE 4D          0413*            		LD      C,L
0425EF 21 00 00 00 0414*            		LD      HL,0
0425F3 D9          0415*            		EXX
0425F4 44          0416*            		LD      B,H
0425F5 4D          0417*            		LD      C,L
0425F6 21 00 00 00 0418*            		LD      HL,0
0425FA 3E DF       0419*            		LD      A,-33
0425FC CD C1 30 04 0420*            		CALL    MULA            ;MULTIPLY
042600 D9          0421*            		EXX
042601 0E BF       0422*            		LD      C,191           ;PRESET EXPONENT
042603 CD 25 2F 04 0423*            		CALL    TEST_FP            ;TEST RANGE
042607 20 0F       0424*            		JR      NZ,IMUL1        ;TOO BIG
042609 CB 7A       0425*            		BIT     7,D
04260B 20 0B       0426*            		JR      NZ,IMUL1
04260D CD FD 2E 04 0427*            		CALL    SWAP_FP
042611 4A          0428*            		LD      C,D             ;INTEGER MARKER
042612 08          0429*            		EX      AF,AF'
042613 F0          0430*            		RET     P
042614 C3 00 2E 04 0431*            		JP      NEGATE
042618             0432*    ;
042618 0D          0433*    IMUL1:			DEC     C
042619 D9          0434*            		EXX
04261A CB 23       0435*            		SLA     E
04261C CB 12       0436*            		RL      D
04261E D9          0437*            		EXX
04261F CB 13       0438*            		RL      E
042621 CB 12       0439*            		RL      D
042623 D9          0440*            		EXX
042624 52 ED 6A    0441*            		ADC.S   HL,HL
042627 D9          0442*            		EXX
042628 52 ED 6A    0443*            		ADC.S   HL,HL
04262B F2 18 26 04 0444*            		JP      P,IMUL1         ;NORMALISE
04262F 08          0445*            		EX      AF,AF'
042630 F8          0446*            		RET     M
042631 CB BC       0447*            		RES     7,H             ;POSITIVE
042633 C9          0448*            		RET
042634             0449*    ;
042634             0450*    ;FMUL - Floating point multiplication with rounding.
042634             0451*    ;
042634 05          0452*    FMUL:			DEC     B               ;TEST FOR ZERO
042635 04          0453*            		INC     B
042636 CA 49 2F 04 0454*            		JP      Z,ZERO_FP
04263A 0D          0455*            		DEC     C               ;TEST FOR ZERO
04263B 0C          0456*            		INC     C
04263C C8          0457*            		RET     Z
04263D 7C          0458*            		LD      A,H
04263E AA          0459*            		XOR     D               ;CALC. RESULT SIGN
04263F 08          0460*            		EX      AF,AF'
042640 CB FA       0461*            		SET     7,D             ;REPLACE IMPLIED 1's
042642 CB FC       0462*            		SET     7,H
042644 C5          0463*            		PUSH    BC              ;SAVE EXPONENTS
042645 44          0464*            		LD      B,H             ;LOAD REGISTERS
042646 4D          0465*            		LD      C,L
042647 21 00 00 00 0466*            		LD      HL,0
04264B D9          0467*            		EXX
04264C 44          0468*            		LD      B,H
04264D 4D          0469*            		LD      C,L
04264E 21 00 00 00 0470*            		LD      HL,0
042652 3E E0       0471*            		LD      A,-32           ;LOOP COUNTER
042654 CD C1 30 04 0472*            		CALL    MULA            ;MULTIPLY
042658 DC D7 30 04 0473*            		CALL    C,MULB          ;NORMALISE & INC A
04265C D9          0474*            		EXX
04265D E5          0475*            		PUSH    HL
04265E 21 00 80 00 0476*            		LD      HL,8000H
042662 B7          0477*            		OR      A               ;CLEAR CARRY
042663 52 ED 52    0478*            		SBC.S   HL,DE
042666 E1          0479*            		POP     HL
042667 CC F7 2E 04 0480*            		CALL    Z,ODD           ;ROUND UNBIASSED
04266B DC E5 2E 04 0481*            		CALL    C,ADD1_FP          ;ROUND UP
04266F C1          0482*            		POP     BC              ;RESTORE EXPONENTS
042670 DC 12 2F 04 0483*            		CALL    C,INCC
042674 1F          0484*            		RRA                     ;LSB OF A TO CARRY
042675 79          0485*            		LD      A,C             ;COMPUTE NEW EXPONENT
042676 88          0486*            		ADC     A,B
042677 38 06       0487*    CHKOVF:			JR      C,CHKO1
042679 F2 49 2F 04 0488*            		JP      P,ZERO_FP          ;UNDERFLOW
04267D 18 04       0489*            		JR      CHKO2
04267F FA 14 2F 04 0490*    CHKO1:			JP      M,OFLOW         ;OVERFLOW
042683 C6 80       0491*    CHKO2:			ADD     A,80H
042685 4F          0492*            		LD      C,A
042686 CA 49 2F 04 0493*            		JP      Z,ZERO_FP
04268A 08          0494*            		EX      AF,AF'          ;RESTORE SIGN BIT
04268B CB BC       0495*            		RES     7,H
04268D F0          0496*            		RET     P
04268E CB FC       0497*            		SET     7,H
042690 C9          0498*            		RET
042691             0499*    ;
042691             0500*    ;IPOW - Integer involution.
042691             0501*    ;
042691 CD FD 2E 04 0502*    IPOW:			CALL    SWAP_FP
042695 CB 7C       0503*            		BIT     7,H
042697 F5          0504*            		PUSH    AF              ;SAVE SIGN
042698 C4 00 2E 04 0505*            		CALL    NZ,NEGATE
04269C 48          0506*    IPOW0:			LD      C,B
04269D 06 20       0507*            		LD      B,32            ;LOOP COUNTER
04269F CD B5 2F 04 0508*    IPOW1:			CALL    X2
0426A3 38 08       0509*            		JR      C,IPOW2
0426A5 10 F8       0510*            		DJNZ    IPOW1
0426A7 F1          0511*            		POP     AF
0426A8 D9          0512*            		EXX
0426A9 2C          0513*            		INC     L               ;RESULT=1
0426AA D9          0514*            		EXX
0426AB 4C          0515*            		LD      C,H
0426AC C9          0516*            		RET
0426AD             0517*    ;
0426AD F1          0518*    IPOW2:			POP     AF
0426AE C5          0519*            		PUSH    BC
0426AF EB          0520*            		EX      DE,HL
0426B0 E5          0521*            		PUSH    HL
0426B1 D9          0522*            		EXX
0426B2 EB          0523*            		EX      DE,HL
0426B3 E5          0524*            		PUSH    HL
0426B4 D9          0525*            		EXX
0426B5 DD 21 00 00 0526*            		LD      IX,0
       00          
0426BA DD 39       0527*            		ADD     IX,SP
0426BC 28 48       0528*            		JR      Z,IPOW4
0426BE C5          0529*            		PUSH    BC
0426BF D9          0530*            		EXX
0426C0 D5          0531*            		PUSH    DE
0426C1 D9          0532*            		EXX
0426C2 D5          0533*            		PUSH    DE
0426C3 CD CC 2E 04 0534*            		CALL    SFLOAT_FP
0426C7 CD 00 2A 04 0535*            		CALL    RECIP
0426CB DD 71 04    0536*            		LD      (IX+4),C
0426CE D9          0537*            		EXX
0426CF DD 75 00    0538*            		LD      (IX+0),L
0426D2 DD 74 01    0539*            		LD      (IX+1),H
0426D5 D9          0540*            		EXX
0426D6 DD 75 02    0541*            		LD      (IX+2),L
0426D9 DD 74 03    0542*            		LD      (IX+3),H
0426DC 18 21       0543*            		JR      IPOW5
0426DE             0544*    ;
0426DE C5          0545*    IPOW3:			PUSH    BC
0426DF D9          0546*            		EXX
0426E0 CB 23       0547*            		SLA     E
0426E2 CB 12       0548*            		RL      D
0426E4 D5          0549*            		PUSH    DE
0426E5 D9          0550*            		EXX
0426E6 CB 13       0551*            		RL      E
0426E8 CB 12       0552*            		RL      D
0426EA D5          0553*            		PUSH    DE
0426EB 3E 0A       0554*            		LD      A,'*' & 0FH
0426ED F5          0555*            		PUSH    AF
0426EE CD C9 2F 04 0556*            		CALL    COPY_
0426F2 CD A9 23 04 0557*            		CALL    OP              ;SQUARE
0426F6 F1          0558*            		POP     AF
0426F7 CD F5 2C 04 0559*            		CALL    DLOAD5
0426FB DC A9 23 04 0560*            		CALL    C,OP            ;MULTIPLY BY X
0426FF D1          0561*    IPOW5:			POP     DE
042700 D9          0562*            		EXX
042701 D1          0563*            		POP     DE
042702 D9          0564*            		EXX
042703 79          0565*            		LD      A,C
042704 C1          0566*            		POP     BC
042705 4F          0567*            		LD      C,A
042706 10 D6       0568*    IPOW4:			DJNZ    IPOW3
042708 F1          0569*            		POP     AF
042709 F1          0570*            		POP     AF
04270A F1          0571*            		POP     AF
04270B C9          0572*            		RET
04270C             0573*    ;
04270C F1          0574*    FPOW0:			POP     AF
04270D F1          0575*            		POP     AF
04270E F1          0576*            		POP     AF
04270F 18 8B       0577*            		JR      IPOW0
042711             0578*    ;
042711             0579*    ;FPOW - Floating-point involution.
042711             0580*    ;
042711 CB 7A       0581*    FPOW:			BIT     7,D
042713 F5          0582*            		PUSH    AF
042714 CD FD 2E 04 0583*            		CALL    SWAP_FP
042718 CD D9 2F 04 0584*            		CALL    PUSH5
04271C 0D          0585*            		DEC     C
04271D 0C          0586*            		INC     C
04271E 28 EC       0587*            		JR      Z,FPOW0
042720 3E 9E       0588*            		LD      A,158
042722 B9          0589*            		CP      C
042723 38 0A       0590*            		JR      C,FPOW1
042725 3C          0591*            		INC     A
042726 CD D1 2D 04 0592*            		CALL    FIX
04272A 08          0593*            		EX      AF,AF'
04272B F2 0C 27 04 0594*            		JP      P,FPOW0
04272F CD FD 2E 04 0595*    FPOW1:			CALL    SWAP_FP
042733 CD 1D 2A 04 0596*            		CALL    LN0
042737 CD E2 2F 04 0597*            		CALL    POP5
04273B F1          0598*            		POP     AF
04273C CD 34 26 04 0599*            		CALL    FMUL
042740 C3 7F 29 04 0600*            		JP      EXP0
042744             0601*    ;
042744             0602*    ;Integer and floating-point compare.
042744             0603*    ;Result is TRUE (-1) or FALSE (0).
042744             0604*    ;
042744 CD 53 2F 04 0605*    FLT:			CALL    FCP
042748 18 04       0606*            		JR      ILT1
04274A CD 45 2F 04 0607*    ILT:			CALL    ICP
04274E D0          0608*    ILT1:			RET     NC
04274F 18 42       0609*            		JR      TRUE_FP
042751             0610*    ;
042751 CD 53 2F 04 0611*    FGT:			CALL    FCP
042755 18 04       0612*            		JR      IGT1
042757 CD 45 2F 04 0613*    IGT:			CALL    ICP
04275B C8          0614*    IGT1:			RET     Z
04275C D8          0615*            		RET     C
04275D 18 34       0616*            		JR      TRUE_FP
04275F             0617*    ;
04275F CD 53 2F 04 0618*    FGE:			CALL    FCP
042763 18 04       0619*            		JR      IGE1
042765 CD 45 2F 04 0620*    IGE:			CALL    ICP
042769 D8          0621*    IGE1:			RET     C
04276A 18 27       0622*            		JR      TRUE_FP
04276C             0623*    ;
04276C CD 53 2F 04 0624*    FLE:			CALL    FCP
042770 18 04       0625*            		JR      ILE1
042772 CD 45 2F 04 0626*    ILE:			CALL    ICP
042776 28 1B       0627*    ILE1:			JR      Z,TRUE_FP
042778 D0          0628*            		RET     NC
042779 18 18       0629*            		JR      TRUE_FP
04277B             0630*    ;
04277B CD 53 2F 04 0631*    FNE:			CALL    FCP
04277F 18 04       0632*            		JR      INE1
042781 CD 45 2F 04 0633*    INE:			CALL    ICP
042785 C8          0634*    INE1:			RET     Z
042786 18 0B       0635*            		JR      TRUE_FP
042788             0636*    ;
042788 CD 53 2F 04 0637*    FEQ:			CALL    FCP
04278C 18 04       0638*            		JR      IEQ1
04278E CD 45 2F 04 0639*    IEQ:			CALL    ICP
042792 C0          0640*    IEQ1:			RET     NZ
042793 21 FF FF FF 0641*    TRUE_FP:			LD      HL,-1
042797 D9          0642*            		EXX
042798 21 FF FF FF 0643*            		LD      HL,-1
04279C D9          0644*            		EXX
04279D AF          0645*            		XOR     A
04279E 4F          0646*            		LD      C,A
04279F C9          0647*            		RET
0427A0             0648*    ;
0427A0             0649*    ;FUNCTIONS:
0427A0             0650*    ;
0427A0             0651*    ;Result returned in HLH'L'C (floating point)
0427A0             0652*    ;Result returned in HLH'L' (C=0) (integer)
0427A0             0653*    ;All registers except IY destroyed.
0427A0             0654*    ;
0427A0             0655*    ;ABS - Absolute value
0427A0             0656*    ;Result is numeric, variable type.
0427A0             0657*    ;
0427A0 CB 7C       0658*    ABSV_FP:			BIT     7,H
0427A2 C8          0659*            		RET     Z               ;POSITIVE/ZERO
0427A3 0D          0660*            		DEC     C
0427A4 0C          0661*            		INC     C
0427A5 CA 00 2E 04 0662*            		JP      Z,NEGATE        ;INTEGER
0427A9 CB BC       0663*            		RES     7,H
0427AB C9          0664*            		RET
0427AC             0665*    ;
0427AC             0666*    ;NOT - Complement integer.
0427AC             0667*    ;Result is integer numeric.
0427AC             0668*    ;
0427AC CD F0 2D 04 0669*    NOTK_FP:			CALL    SFIX_FP
0427B0 7C          0670*            		LD      A,H
0427B1 2F          0671*            		CPL
0427B2 67          0672*            		LD      H,A
0427B3 7D          0673*            		LD      A,L
0427B4 2F          0674*            		CPL
0427B5 6F          0675*            		LD      L,A
0427B6 D9          0676*            		EXX
0427B7 7C          0677*            		LD      A,H
0427B8 2F          0678*            		CPL
0427B9 67          0679*            		LD      H,A
0427BA 7D          0680*            		LD      A,L
0427BB 2F          0681*            		CPL
0427BC 6F          0682*            		LD      L,A
0427BD D9          0683*            		EXX
0427BE AF          0684*            		XOR     A               ;NUMERIC MARKER
0427BF C9          0685*            		RET
0427C0             0686*    ;
0427C0             0687*    ;PI - Return PI (3.141592654)
0427C0             0688*    ;Result is floating-point numeric.
0427C0             0689*    ;
0427C0 21 0F 49 00 0690*    PI_FP:			LD      HL,490FH
0427C4 D9          0691*            		EXX
0427C5 21 A2 DA 00 0692*            		LD      HL,0DAA2H
0427C9 D9          0693*            		EXX
0427CA 0E 81       0694*            		LD      C,81H
0427CC AF          0695*            		XOR     A               ;NUMERIC MARKER
0427CD C9          0696*            		RET
0427CE             0697*    ;
0427CE             0698*    ;DEG - Convert radians to degrees
0427CE             0699*    ;Result is floating-point numeric.
0427CE             0700*    ;
0427CE CD E2 27 04 0701*    DEG_FP:			CALL    FPI180
0427D2 CD 34 26 04 0702*            		CALL    FMUL
0427D6 AF          0703*            		XOR     A
0427D7 C9          0704*            		RET
0427D8             0705*    ;
0427D8             0706*    ;RAD - Convert degrees to radians
0427D8             0707*    ;Result is floating-point numeric.
0427D8             0708*    ;
0427D8 CD E2 27 04 0709*    RAD_FP:			CALL    FPI180
0427DC CD 8B 25 04 0710*            		CALL    FDIV
0427E0 AF          0711*            		XOR     A
0427E1 C9          0712*            		RET
0427E2             0713*    ;
0427E2             0714*    ;180/PI
0427E2             0715*    ;
0427E2 CD CC 2E 04 0716*    FPI180:			CALL    SFLOAT_FP
0427E6 11 2E 65 00 0717*            		LD      DE,652EH
0427EA D9          0718*            		EXX
0427EB 11 D3 E0 00 0719*            		LD      DE,0E0D3H
0427EF D9          0720*            		EXX
0427F0 06 85       0721*            		LD      B,85H
0427F2 C9          0722*            		RET
0427F3             0723*    ;
0427F3             0724*    ;SGN - Return -1, 0 or +1
0427F3             0725*    ;Result is integer numeric.
0427F3             0726*    ;
0427F3 CD 25 2F 04 0727*    SGN_FP:			CALL    TEST_FP
0427F7 B1          0728*            		OR      C
0427F8 C8          0729*            		RET     Z               ;ZERO
0427F9 CB 7C       0730*            		BIT     7,H
0427FB C2 93 27 04 0731*            		JP      NZ,TRUE_FP         ;-1
0427FF CD 49 2F 04 0732*            		CALL    ZERO_FP
042803 C3 E5 2E 04 0733*            		JP      ADD1_FP            ;1
042807             0734*    ;
042807             0735*    ;VAL - Return numeric value of string.
042807             0736*    ;Input: ASCII string at IX
042807             0737*    ;Result is variable type numeric.
042807             0738*    ;
042807 CD 63 31 04 0739*    VAL_FP:			CALL    SIGNQ
04280B F5          0740*            		PUSH    AF
04280C CD 13 2D 04 0741*            		CALL    CON_FP
042810 F1          0742*            		POP     AF
042811 FE 2D       0743*            		CP      '-'
042813 3E 00       0744*            		LD      A,0             ;NUMERIC MARKER
042815 C0          0745*            		RET     NZ
042816 0D          0746*            		DEC     C
042817 0C          0747*            		INC     C
042818 CA 00 2E 04 0748*            		JP      Z,NEGATE        ;ZERO/INTEGER
04281C 7C          0749*            		LD      A,H
04281D EE 80       0750*            		XOR     80H             ;CHANGE SIGN (FP)
04281F 67          0751*            		LD      H,A
042820 AF          0752*            		XOR     A
042821 C9          0753*            		RET
042822             0754*    ;
042822             0755*    ;INT - Floor function
042822             0756*    ;Result is integer numeric.
042822             0757*    ;
042822 0D          0758*    INT_FP_:			DEC     C
042823 0C          0759*            		INC     C
042824 C8          0760*            		RET     Z               ;ZERO/INTEGER
042825 3E 9F       0761*            		LD      A,159
042827 44          0762*            		LD      B,H             ;B7=SIGN BIT
042828 CD D1 2D 04 0763*            		CALL    FIX
04282C 08          0764*            		EX      AF,AF'
04282D A0          0765*            		AND     B
04282E FC E5 2E 04 0766*            		CALL    M,ADD1_FP          ;NEGATIVE NON-INTEGER
042832 78          0767*            		LD      A,B
042833 B7          0768*            		OR      A
042834 FC 00 2E 04 0769*            		CALL    M,NEGATE
042838 AF          0770*            		XOR     A
042839 4F          0771*            		LD      C,A
04283A C9          0772*            		RET
04283B             0773*    ;
04283B             0774*    ;SQR - square root
04283B             0775*    ;Result is floating-point numeric.
04283B             0776*    ;
04283B CD CC 2E 04 0777*    SQR_FP:			CALL    SFLOAT_FP
04283F CB 7C       0778*    SQR0:			BIT     7,H
042841 3E 15       0779*            		LD      A,NGROOT
042843 C2 A3 23 04 0780*            		JP      NZ,ERROR_FP_        ;"-ve root"
042847 0D          0781*            		DEC     C
042848 0C          0782*            		INC     C
042849 C8          0783*            		RET     Z               ;ZERO
04284A CB FC       0784*            		SET     7,H             ;IMPLIED 1
04284C CB 41       0785*            		BIT     0,C
04284E CC 05 2F 04 0786*            		CALL    Z,DIV2          ;MAKE EXPONENT ODD
042852 79          0787*            		LD      A,C
042853 D6 80       0788*            		SUB     80H
042855 CB 2F       0789*            		SRA     A               ;HALVE EXPONENT
042857 C6 80       0790*            		ADD     A,80H
042859 4F          0791*            		LD      C,A
04285A C5          0792*            		PUSH    BC              ;SAVE EXPONENT
04285B EB          0793*            		EX      DE,HL
04285C 21 00 00 00 0794*            		LD      HL,0
042860 44          0795*            		LD      B,H
042861 4D          0796*            		LD      C,L
042862 D9          0797*            		EXX
042863 EB          0798*            		EX      DE,HL
042864 21 00 00 00 0799*            		LD      HL,0
042868 44          0800*            		LD      B,H
042869 4D          0801*            		LD      C,L
04286A 3E E1       0802*            		LD      A,-31
04286C CD FB 30 04 0803*            		CALL    SQRA            ;ROOT
042870 D9          0804*            		EXX
042871 CB 78       0805*            		BIT     7,B
042873 D9          0806*            		EXX
042874 CC FB 30 04 0807*            		CALL    Z,SQRA          ;NORMALISE & INC A
042878 CD 3C 31 04 0808*            		CALL    SQRB
04287C B7          0809*            		OR      A               ;CLEAR CARRY
04287D CD A9 30 04 0810*            		CALL    DIVB
042881 CB 1B       0811*            		RR      E               ;LSB TO CARRY
042883 60          0812*            		LD      H,B
042884 69          0813*            		LD      L,C
042885 D9          0814*            		EXX
042886 60          0815*            		LD      H,B
042887 69          0816*            		LD      L,C
042888 DC E5 2E 04 0817*            		CALL    C,ADD1_FP          ;ROUND UP
04288C C1          0818*            		POP     BC              ;RESTORE EXPONENT
04288D DC 12 2F 04 0819*            		CALL    C,INCC
042891 1F          0820*            		RRA
042892 9F          0821*            		SBC     A,A
042893 81          0822*            		ADD     A,C
042894 4F          0823*            		LD      C,A
042895 CB BC       0824*            		RES     7,H             ;POSITIVE
042897 AF          0825*            		XOR     A
042898 C9          0826*            		RET
042899             0827*    ;
042899             0828*    ;TAN - Tangent function
042899             0829*    ;Result is floating-point numeric.
042899             0830*    ;
042899 CD CC 2E 04 0831*    TAN_FP:			CALL    SFLOAT_FP
04289D CD D9 2F 04 0832*            		CALL    PUSH5
0428A1 CD C3 28 04 0833*            		CALL    COS0
0428A5 CD E2 2F 04 0834*            		CALL    POP5
0428A9 CD D9 2F 04 0835*            		CALL    PUSH5
0428AD CD FD 2E 04 0836*            		CALL    SWAP_FP
0428B1 CD D0 28 04 0837*            		CALL    SIN0
0428B5 CD E2 2F 04 0838*            		CALL    POP5
0428B9 CD 8B 25 04 0839*            		CALL    FDIV
0428BD AF          0840*            		XOR     A               ;NUMERIC MARKER
0428BE C9          0841*            		RET
0428BF             0842*    ;
0428BF             0843*    ;COS - Cosine function
0428BF             0844*    ;Result is floating-point numeric.
0428BF             0845*    ;
0428BF CD CC 2E 04 0846*    COS_FP:			CALL    SFLOAT_FP
0428C3 CD 28 2E 04 0847*    COS0:			CALL    SCALE
0428C7 1C          0848*            		INC     E
0428C8 1C          0849*            		INC     E
0428C9 7B          0850*            		LD      A,E
0428CA 18 10       0851*            		JR      SIN1
0428CC             0852*    ;
0428CC             0853*    ;SIN - Sine function
0428CC             0854*    ;Result is floating-point numeric.
0428CC             0855*    ;
0428CC CD CC 2E 04 0856*    SIN_FP:			CALL    SFLOAT_FP
0428D0 E5          0857*    SIN0:			PUSH    HL              ;H7=SIGN
0428D1 CD 28 2E 04 0858*            		CALL    SCALE
0428D5 F1          0859*            		POP     AF
0428D6 07          0860*            		RLCA
0428D7 07          0861*            		RLCA
0428D8 07          0862*            		RLCA
0428D9 E6 04       0863*            		AND     4
0428DB AB          0864*            		XOR     E
0428DC F5          0865*    SIN1:			PUSH    AF              ;OCTANT
0428DD CB BC       0866*            		RES     7,H
0428DF 1F          0867*            		RRA
0428E0 CD 6E 29 04 0868*            		CALL    PIBY4
0428E4 DC 0F 25 04 0869*            		CALL    C,RSUB          ;X=(PI/4)-X
0428E8 F1          0870*            		POP     AF
0428E9 F5          0871*            		PUSH    AF
0428EA E6 03       0872*            		AND     3
0428EC E2 25 29 04 0873*            		JP      PO,SIN2         ;USE COSINE APPROX.
0428F0 CD D9 2F 04 0874*            		CALL    PUSH5           ;SAVE X
0428F4 CD D1 2F 04 0875*            		CALL    SQUARE          ;PUSH X*X
0428F8 CD 16 30 04 0876*            		CALL    POLY
0428FC B7 A8       0877*            		DW	0A8B7H          ;a(8)
0428FE 11 36       0878*            		DW	3611H
042900 6D          0879*            		DB	6DH
042901 26 DE       0880*            		DW	0DE26H          ;a(6)
042903 05 D0       0881*            		DW	0D005H
042905 73          0882*            		DB	73H
042906 C0 80       0883*            		DW	80C0H           ;a(4)
042908 88 08       0884*            		DW	888H
04290A 79          0885*            		DB	79H
04290B 9D AA       0886*            		DW	0AA9DH          ;a(2)
04290D AA AA       0887*            		DW	0AAAAH
04290F 7D          0888*            		DB	7DH
042910 00 00       0889*            		DW	0               ;a(0)
042912 00 00       0890*            		DW	0
042914 80          0891*            		DB	80H
042915 CD E2 2F 04 0892*            		CALL    POP5
042919 CD E2 2F 04 0893*            		CALL    POP5
04291D CD 34 26 04 0894*            		CALL    FMUL
042921 C3 4A 29 04 0895*            		JP      SIN3
042925             0896*    ;
042925 CD D1 2F 04 0897*    SIN2:			CALL    SQUARE          ;PUSH X*X
042929 CD 16 30 04 0898*            		CALL    POLY
04292D 71 D5       0899*            		DW	0D571H          ;b(8)
04292F 78 4C       0900*            		DW	4C78H
042931 70          0901*            		DB	70H
042932 AF 94       0902*            		DW	94AFH           ;b(6)
042934 03 B6       0903*            		DW	0B603H
042936 76          0904*            		DB	76H
042937 C8 9C       0905*            		DW	9CC8H           ;b(4)
042939 AA 2A       0906*            		DW	2AAAH
04293B 7B          0907*            		DB	7BH
04293C DD FF       0908*            		DW	0FFDDH          ;b(2)
04293E FF FF       0909*            		DW	0FFFFH
042940 7E          0910*            		DB	7EH
042941 00 00       0911*            		DW	0               ;b(0)
042943 00 00       0912*            		DW	0
042945 80          0913*            		DB	80H
042946 CD E2 2F 04 0914*            		CALL    POP5
04294A F1          0915*    SIN3:			POP     AF
04294B E6 04       0916*            		AND     4
04294D C8          0917*            		RET     Z
04294E 0D          0918*            		DEC     C
04294F 0C          0919*            		INC     C
042950 C8          0920*            		RET     Z               ;ZERO
042951 CB FC       0921*            		SET     7,H             ;MAKE NEGATIVE
042953 C9          0922*            		RET
042954             0923*    ;
042954             0924*    ;Floating-point one:
042954             0925*    ;
042954 21 00 00 00 0926*    FONE_FP:			LD      HL,0
042958 D9          0927*            		EXX
042959 21 00 00 00 0928*            		LD      HL,0
04295D D9          0929*            		EXX
04295E 0E 80       0930*            		LD      C,80H
042960 C9          0931*            		RET
042961             0932*    ;
042961 11 00 00 00 0933*    DONE:			LD      DE,0
042965 D9          0934*            		EXX
042966 11 00 00 00 0935*            		LD      DE,0
04296A D9          0936*            		EXX
04296B 06 80       0937*            		LD      B,80H
04296D C9          0938*            		RET
04296E             0939*    ;
04296E 11 0F 49 00 0940*    PIBY4:			LD      DE,490FH
042972 D9          0941*            		EXX
042973 11 A2 DA 00 0942*            		LD      DE,0DAA2H
042977 D9          0943*            		EXX
042978 06 7F       0944*            		LD      B,7FH
04297A C9          0945*            		RET
04297B             0946*    ;
04297B             0947*    ;EXP - Exponential function
04297B             0948*    ;Result is floating-point numeric.
04297B             0949*    ;
04297B CD CC 2E 04 0950*    EXP_FP:			CALL    SFLOAT_FP
04297F CD 0C 2A 04 0951*    EXP0:			CALL    LN2             ;LN(2)
042983 D9          0952*            		EXX
042984 1D          0953*    	        	DEC     E
042985 01 CF D1 00 0954*    		        LD      BC,0D1CFH       ;0.6931471805599453
042989 D9          0955*            		EXX
04298A E5          0956*            		PUSH    HL              ;H7=SIGN
04298B CD 3B 2E 04 0957*            		CALL    MOD48           ;"MODULUS"
04298F F1          0958*            		POP     AF
042990 CB 7B       0959*            		BIT     7,E
042992 28 0B       0960*            		JR      Z,EXP1
042994 17          0961*            		RLA
042995 DA 49 2F 04 0962*            		JP      C,ZERO_FP
042999 3E 18       0963*            		LD      A,EXPRNG
04299B C3 A3 23 04 0964*            		JP      ERROR_FP_           ;"Exp range"
04299F             0965*    ;
04299F E6 80       0966*    EXP1:			AND     80H
0429A1 B3          0967*            		OR      E
0429A2 F5          0968*            		PUSH    AF              ;INTEGER PART
0429A3 CB BC       0969*            		RES     7,H
0429A5 CD D9 2F 04 0970*            		CALL    PUSH5           ;PUSH X*LN(2)
0429A9 CD 16 30 04 0971*            		CALL    POLY
0429AD 72 40       0972*            		DW	4072H           ;a(7)
0429AF 2E 94       0973*            		DW	942EH
0429B1 73          0974*            		DB	73H
0429B2 65 6F       0975*            		DW	6F65H           ;a(6)
0429B4 4F 2E       0976*            		DW	2E4FH
0429B6 76          0977*            		DB	76H
0429B7 37 6D       0978*            		DW	6D37H           ;a(5)
0429B9 02 88       0979*            		DW	8802H
0429BB 79          0980*            		DB	79H
0429BC 12 E5       0981*            		DW	0E512H          ;a(4)
0429BE A0 2A       0982*            		DW	2AA0H
0429C0 7B          0983*            		DB	7BH
0429C1 14 4F       0984*            		DW	4F14H           ;a(3)
0429C3 AA AA       0985*            		DW	0AAAAH
0429C5 7D          0986*            		DB	7DH
0429C6 56 FD       0987*            		DW	0FD56H          ;a(2)
0429C8 FF 7F       0988*            		DW	7FFFH
0429CA 7E          0989*            		DB	7EH
0429CB FE FF       0990*            		DW	0FFFEH          ;a(1)
0429CD FF FF       0991*            		DW	0FFFFH
0429CF 7F          0992*            		DB	7FH
0429D0 00 00       0993*            		DW	0               ;a(0)
0429D2 00 00       0994*            		DW	0
0429D4 80          0995*            		DB	80H
0429D5 CD E2 2F 04 0996*            		CALL    POP5
0429D9 F1          0997*            		POP     AF
0429DA F5          0998*            		PUSH    AF
0429DB F4 00 2A 04 0999*            		CALL    P,RECIP         ;X=1/X
0429DF F1          1000*            		POP     AF
0429E0 F2 E8 29 04 1001*            		JP      P,EXP4
0429E4 E6 7F       1002*            		AND     7FH
0429E6 ED 44       1003*            		NEG
0429E8 C6 80       1004*    EXP4:			ADD     A,80H
0429EA 81          1005*            		ADD     A,C
0429EB 38 06       1006*            		JR      C,EXP2
0429ED F2 49 2F 04 1007*            		JP      P,ZERO_FP          ;UNDERFLOW
0429F1 18 04       1008*            		JR      EXP3
0429F3 FA 14 2F 04 1009*    EXP2:			JP      M,OFLOW         ;OVERFLOW
0429F7 C6 80       1010*    EXP3:			ADD     A,80H
0429F9 CA 49 2F 04 1011*            		JP      Z,ZERO_FP
0429FD 4F          1012*            		LD      C,A
0429FE AF          1013*            		XOR     A               ;NUMERIC MARKER
0429FF C9          1014*            		RET
042A00             1015*    ;
042A00 CD 61 29 04 1016*    RECIP:			CALL    DONE
042A04 CD FD 2E 04 1017*    RDIV:			CALL    SWAP_FP
042A08 C3 8B 25 04 1018*            		JP      FDIV            ;RECIPROCAL
042A0C             1019*    ;
042A0C 11 72 31 00 1020*    LN2:			LD      DE,3172H        ;LN(2)
042A10 D9          1021*            		EXX
042A11 11 F8 17 00 1022*            		LD      DE,17F8H
042A15 D9          1023*            		EXX
042A16 06 7F       1024*            		LD      B,7FH
042A18 C9          1025*            		RET
042A19             1026*    ;
042A19             1027*    ;LN - Natural log.
042A19             1028*    ;Result is floating-point numeric.
042A19             1029*    ;
042A19 CD CC 2E 04 1030*    LN_FP:			CALL    SFLOAT_FP
042A1D 3E 16       1031*    LN0:			LD      A,LOGRNG
042A1F CB 7C       1032*            		BIT     7,H
042A21 C2 A3 23 04 1033*            		JP      NZ,ERROR_FP_        ;"Log range"
042A25 0C          1034*            		INC     C
042A26 0D          1035*            		DEC     C
042A27 CA A3 23 04 1036*            		JP      Z,ERROR_FP_
042A2B 11 04 35 00 1037*            		LD      DE,3504H        ;SQR(2)
042A2F D9          1038*            		EXX
042A30 11 33 F3 00 1039*            		LD      DE,0F333H       ;1.41421356237
042A34 D9          1040*            		EXX
042A35 CD 5C 2F 04 1041*            		CALL    ICP0            ;MANTISSA>SQR(2)?
042A39 79          1042*            		LD      A,C             ;EXPONENT
042A3A 0E 80       1043*            		LD      C,80H           ;1 <= X < 2
042A3C 38 02       1044*            		JR      C,LN4
042A3E 0D          1045*            		DEC     C
042A3F 3C          1046*            		INC     A
042A40 F5          1047*    LN4:			PUSH    AF              ;SAVE EXPONENT
042A41 CD EE 2F 04 1048*            		CALL    RATIO           ;X=(X-1)/(X+1)
042A45 CD D9 2F 04 1049*            		CALL    PUSH5
042A49 CD D1 2F 04 1050*    		        CALL    SQUARE          ;PUSH X*X
042A4D CD 16 30 04 1051*            		CALL    POLY
042A51 48 CC       1052*            		DW	0CC48H          ;a(9)
042A53 FB 74       1053*            		DW	74FBH
042A55 7D          1054*            		DB	7DH
042A56 AF AE       1055*            		DW	0AEAFH          ;a(7)
042A58 FF 11       1056*            		DW	11FFH
042A5A 7E          1057*            		DB	7EH
042A5B 8C D9       1058*            		DW	0D98CH          ;a(5)
042A5D CD 4C       1059*            		DW	4CCDH
042A5F 7E          1060*            		DB	7EH
042A60 E3 A9       1061*            		DW	0A9E3H          ;a(3)
042A62 AA 2A       1062*            		DW	2AAAH
042A64 7F          1063*            		DB	7FH
042A65 00 00       1064*            		DW	0               ;a(1)
042A67 00 00       1065*            		DW	0
042A69 81          1066*            		DB	81H
042A6A CD E2 2F 04 1067*            		CALL    POP5
042A6E CD E2 2F 04 1068*            		CALL    POP5
042A72 CD 34 26 04 1069*            		CALL    FMUL
042A76 F1          1070*            		POP     AF              ;EXPONENT
042A77 CD D9 2F 04 1071*            		CALL    PUSH5
042A7B 08          1072*            		EX      AF,AF'
042A7C CD 49 2F 04 1073*            		CALL    ZERO_FP
042A80 08          1074*            		EX      AF,AF'
042A81 D6 80       1075*            		SUB     80H
042A83 28 1F       1076*            		JR      Z,LN3
042A85 30 02       1077*            		JR      NC,LN1
042A87 2F          1078*            		CPL
042A88 3C          1079*            		INC     A
042A89 67          1080*    LN1:			LD      H,A
042A8A 0E 87       1081*            		LD      C,87H
042A8C F5          1082*            		PUSH    AF
042A8D CD AC 2E 04 1083*            		CALL    FLOAT_
042A91 CB BC       1084*            		RES     7,H
042A93 CD 0C 2A 04 1085*            		CALL    LN2
042A97 CD 34 26 04 1086*            		CALL    FMUL
042A9B F1          1087*            		POP     AF
042A9C 30 06       1088*            		JR      NC,LN3
042A9E FA A4 2A 04 1089*            		JP      M,LN3
042AA2 CB FC       1090*            		SET     7,H
042AA4 CD E2 2F 04 1091*    LN3:			CALL    POP5
042AA8 CD 22 25 04 1092*            		CALL    FADD
042AAC AF          1093*            		XOR     A
042AAD C9          1094*            		RET
042AAE             1095*    ;
042AAE             1096*    ;LOG - base-10 logarithm.
042AAE             1097*    ;Result is floating-point numeric.
042AAE             1098*    ;
042AAE CD 19 2A 04 1099*    LOG_FP:			CALL    LN_FP
042AB2 11 5B 5E 00 1100*            		LD      DE,5E5BH        ;LOG(e)
042AB6 D9          1101*            		EXX
042AB7 11 A9 D8 00 1102*            		LD      DE,0D8A9H
042ABB D9          1103*            		EXX
042ABC 06 7E       1104*            		LD      B,7EH
042ABE CD 34 26 04 1105*            		CALL    FMUL
042AC2 AF          1106*            		XOR     A
042AC3 C9          1107*            		RET
042AC4             1108*    ;
042AC4             1109*    ;ASN - Arc-sine
042AC4             1110*    ;Result is floating-point numeric.
042AC4             1111*    ;
042AC4 CD CC 2E 04 1112*    ASN_FP:			CALL    SFLOAT_FP
042AC8 CD D9 2F 04 1113*            		CALL    PUSH5
042ACC CD C9 2F 04 1114*            		CALL    COPY_
042AD0 CD 34 26 04 1115*            		CALL    FMUL
042AD4 CD 61 29 04 1116*            		CALL    DONE
042AD8 CD 0F 25 04 1117*            		CALL    RSUB
042ADC CD 3F 28 04 1118*            		CALL    SQR0
042AE0 CD E2 2F 04 1119*            		CALL    POP5
042AE4 0C          1120*            		INC     C
042AE5 0D          1121*            		DEC     C
042AE6 3E 02       1122*            		LD      A,2
042AE8 D5          1123*            		PUSH    DE
042AE9 CA 6E 2B 04 1124*            		JP      Z,ACS1
042AED D1          1125*            		POP     DE
042AEE CD 04 2A 04 1126*            		CALL    RDIV
042AF2 18 04       1127*            		JR      ATN0
042AF4             1128*    ;
042AF4             1129*    ;ATN - arc-tangent
042AF4             1130*    ;Result is floating-point numeric.
042AF4             1131*    ;
042AF4 CD CC 2E 04 1132*    ATN_FP:			CALL    SFLOAT_FP
042AF8 E5          1133*    ATN0:			PUSH    HL              ;SAVE SIGN
042AF9 CB BC       1134*            		RES     7,H
042AFB 11 13 54 00 1135*            		LD      DE,5413H        ;TAN(PI/8)=SQR(2)-1
042AFF D9          1136*            		EXX
042B00 11 D0 CC 00 1137*            		LD      DE,0CCD0H
042B04 D9          1138*            		EXX
042B05 06 7E       1139*            		LD      B,7EH
042B07 CD 59 2F 04 1140*            		CALL    FCP0            ;COMPARE
042B0B 06 00       1141*            		LD      B,0
042B0D 38 22       1142*            		JR      C,ATN2
042B0F 11 82 1A 00 1143*            		LD      DE,1A82H        ;TAN(3*PI/8)=SQR(2)+1
042B13 D9          1144*            		EXX
042B14 11 9A 79 00 1145*            		LD      DE,799AH
042B18 D9          1146*            		EXX
042B19 06 81       1147*            		LD      B,81H
042B1B CD 59 2F 04 1148*            		CALL    FCP0            ;COMPARE
042B1F 38 0A       1149*            		JR      C,ATN1
042B21 CD 00 2A 04 1150*            		CALL    RECIP           ;X=1/X
042B25 06 02       1151*            		LD      B,2
042B27 C3 31 2B 04 1152*            		JP      ATN2
042B2B CD EE 2F 04 1153*    ATN1:			CALL    RATIO           ;X=(X-1)/(X+1)
042B2F 06 01       1154*            		LD      B,1
042B31 C5          1155*    ATN2:			PUSH    BC              ;SAVE FLAG
042B32 CD D9 2F 04 1156*            		CALL    PUSH5
042B36 CD D1 2F 04 1157*            		CALL    SQUARE          ;PUSH X*X
042B3A CD 16 30 04 1158*            		CALL    POLY
042B3E 35 F3       1159*            		DW	0F335H          ;a(13)
042B40 D8 37       1160*            		DW	37D8H
042B42 7B          1161*            		DB	7BH
042B43 91 6B       1162*            		DW	6B91H           ;a(11)
042B45 B9 AA       1163*            		DW	0AAB9H
042B47 7C          1164*            		DB	7CH
042B48 DE 41       1165*            		DW	41DEH           ;a(9)
042B4A 97 61       1166*            		DW	6197H
042B4C 7C          1167*            		DB	7CH
042B4D 7B 9D       1168*            		DW	9D7BH           ;a(7)
042B4F 37 92       1169*            		DW	9237H
042B51 7D          1170*            		DB	7DH
042B52 5A 2A       1171*            		DW	2A5AH           ;a(5)
042B54 CC 4C       1172*            		DW	4CCCH
042B56 7D          1173*            		DB	7DH
042B57 5C A9       1174*            		DW	0A95CH          ;a(3)
042B59 AA AA       1175*            		DW	0AAAAH
042B5B 7E          1176*            		DB	7EH
042B5C 00 00       1177*            		DW	0               ;a(1)
042B5E 00 00       1178*            		DW	0
042B60 80          1179*            		DB	80H
042B61 CD E2 2F 04 1180*            		CALL    POP5
042B65 CD E2 2F 04 1181*            		CALL    POP5
042B69 CD 34 26 04 1182*            		CALL    FMUL
042B6D F1          1183*            		POP     AF
042B6E CD 6E 29 04 1184*    ACS1:			CALL    PIBY4           ;PI/4
042B72 1F          1185*            		RRA
042B73 F5          1186*            		PUSH    AF
042B74 DC 22 25 04 1187*            		CALL    C,FADD
042B78 F1          1188*            		POP     AF
042B79 04          1189*            		INC     B
042B7A 1F          1190*            		RRA
042B7B DC 0F 25 04 1191*            		CALL    C,RSUB
042B7F F1          1192*            		POP     AF
042B80 B7          1193*            		OR      A
042B81 F0          1194*            		RET     P
042B82 CB FC       1195*            		SET     7,H             ;MAKE NEGATIVE
042B84 AF          1196*            		XOR     A
042B85 C9          1197*            		RET
042B86             1198*    ;
042B86             1199*    ;ACS - Arc cosine=PI/2-ASN.
042B86             1200*    ;Result is floating point numeric.
042B86             1201*    ;
042B86 CD C4 2A 04 1202*    ACS_FP:			CALL    ASN_FP
042B8A 3E 02       1203*            		LD      A,2
042B8C F5          1204*            		PUSH    AF
042B8D 18 DF       1205*            		JR      ACS1
042B8F             1206*    ;
042B8F             1207*    ;Function STR - convert numeric value to ASCII string.
042B8F             1208*    ;   Inputs: HLH'L'C = integer or floating-point number
042B8F             1209*    ;           DE = address at which to store string
042B8F             1210*    ;           IX = address of @% format control
042B8F             1211*    ;  Outputs: String stored, with NUL terminator
042B8F             1212*    ;
042B8F             1213*    ;First normalise for decimal output:
042B8F             1214*    ;
042B8F CD CC 2E 04 1215*    STR_FP:			CALL    SFLOAT_FP
042B93 06 00       1216*            		LD      B,0             ;DEFAULT PT. POSITION
042B95 CB 7C       1217*            		BIT     7,H             ;NEGATIVE?
042B97 28 06       1218*            		JR      Z,STR10
042B99 CB BC       1219*            		RES     7,H
042B9B 3E 2D       1220*            		LD      A,'-'
042B9D 12          1221*            		LD      (DE),A          ;STORE SIGN
042B9E 13          1222*            		INC     DE
042B9F AF          1223*    STR10:			XOR     A               ;CLEAR A
042BA0 B9          1224*            		CP      C
042BA1 28 4E       1225*            		JR      Z,STR02          ;ZERO
042BA3 D5          1226*            		PUSH    DE              ;SAVE TEXT POINTER
042BA4 78          1227*            		LD      A,B
042BA5 F5          1228*    STR11:			PUSH    AF              ;SAVE DECIMAL COUNTER
042BA6 79          1229*            		LD      A,C             ;BINARY EXPONENT
042BA7 FE A1       1230*            		CP      161
042BA9 30 1C       1231*            		JR      NC,STR14
042BAB FE 9B       1232*            		CP      155
042BAD 30 29       1233*            		JR      NC,STR15
042BAF 2F          1234*            		CPL
042BB0 FE E1       1235*            		CP      225
042BB2 38 02       1236*            		JR      C,STR13
042BB4 3E F8       1237*            		LD      A,-8
042BB6 C6 1C       1238*    STR13:			ADD     A,28
042BB8 CD 45 30 04 1239*            		CALL    POWR10
042BBC F5          1240*            		PUSH    AF
042BBD CD 34 26 04 1241*            		CALL    FMUL
042BC1 F1          1242*            		POP     AF
042BC2 47          1243*            		LD      B,A
042BC3 F1          1244*            		POP     AF
042BC4 90          1245*            		SUB     B
042BC5 18 DE       1246*            		JR      STR11
042BC7 D6 20       1247*    STR14:			SUB     32
042BC9 CD 45 30 04 1248*            		CALL    POWR10
042BCD F5          1249*            		PUSH    AF
042BCE CD 8B 25 04 1250*            		CALL    FDIV
042BD2 F1          1251*            		POP     AF
042BD3 47          1252*            		LD      B,A
042BD4 F1          1253*            		POP     AF
042BD5 80          1254*            		ADD     A,B
042BD6 18 CD       1255*            		JR      STR11
042BD8 3E 09       1256*    STR15:			LD      A,9
042BDA CD 45 30 04 1257*            		CALL    POWR10          ;10^9
042BDE CD 59 2F 04 1258*            		CALL    FCP0
042BE2 79          1259*            		LD      A,C
042BE3 C1          1260*            		POP     BC
042BE4 4F          1261*            		LD      C,A
042BE5 CB FC       1262*            		SET     7,H             ;IMPLIED 1
042BE7 DC 81 2F 04 1263*            		CALL    C,X10B          ;X10, DEC B
042BEB D1          1264*            		POP     DE              ;RESTORE TEXT POINTER
042BEC CB B9       1265*            		RES     7,C
042BEE 3E 00       1266*            		LD      A,0
042BF0 17          1267*            		RLA                     ;PUT CARRY IN LSB
042BF1             1268*    ;
042BF1             1269*    ;At this point decimal normalisation has been done,
042BF1             1270*    ;now convert to decimal digits:
042BF1             1271*    ;      AHLH'L' = number in normalised integer form
042BF1             1272*    ;            B = decimal place adjustment
042BF1             1273*    ;            C = binary place adjustment (29-33)
042BF1             1274*    ;
042BF1 0C          1275*    STR02:			INC     C
042BF2 08          1276*            		EX      AF,AF'          ;SAVE A
042BF3 78          1277*            		LD      A,B
042BF4 DD CB 02 4E 1278*            		BIT     1,(IX+2)
042BF8 20 08       1279*            		JR      NZ,STR20
042BFA AF          1280*            		XOR     A
042BFB DD BE 01    1281*            		CP      (IX+1)
042BFE 28 0B       1282*            		JR      Z,STR21
042C00 3E F6       1283*            		LD      A,-10
042C02 DD 86 01    1284*    STR20:			ADD     A,(IX+1)        ;SIG. FIG. COUNT
042C05 B7          1285*            		OR      A               ;CLEAR CARRY
042C06 FA 0B 2C 04 1286*            		JP      M,STR21
042C0A AF          1287*            		XOR     A
042C0B F5          1288*    STR21:			PUSH    AF
042C0C 08          1289*            		EX      AF,AF'          ;RESTORE A
042C0D CD B5 2F 04 1290*    STR22:			CALL    X2              ;RL AHLH'L'
042C11 8F          1291*            		ADC     A,A
042C12 FE 0A       1292*            		CP      10
042C14 38 05       1293*            		JR      C,STR23
042C16 D6 0A       1294*            		SUB     10
042C18 D9          1295*            		EXX
042C19 2C          1296*            		INC     L               ;SET RESULT BIT
042C1A D9          1297*            		EXX
042C1B 0D          1298*    STR23:			DEC     C
042C1C 20 EF       1299*            		JR      NZ,STR22        ;32 TIMES
042C1E 4F          1300*            		LD      C,A             ;REMAINDER
042C1F 7C          1301*            		LD      A,H
042C20 E6 3F       1302*            		AND     3FH             ;CLEAR OUT JUNK
042C22 67          1303*            		LD      H,A
042C23 F1          1304*            		POP     AF
042C24 F2 32 2C 04 1305*            		JP      P,STR24
042C28 3C          1306*            		INC     A
042C29 20 1C       1307*            		JR      NZ,STR26
042C2B 3E 04       1308*            		LD      A,4
042C2D B9          1309*            		CP      C               ;ROUND UP?
042C2E 3E 00       1310*            		LD      A,0
042C30 18 15       1311*            		JR      STR26
042C32 F5          1312*    STR24:			PUSH    AF
042C33 79          1313*            		LD      A,C
042C34 CE 30       1314*            		ADC     A,'0'           ;ADD CARRY
042C36 FE 30       1315*            		CP      '0'
042C38 28 05       1316*            		JR      Z,STR25         ;SUPPRESS ZERO
042C3A FE 3A       1317*            		CP      '9'+1
042C3C 3F          1318*            		CCF
042C3D 30 08       1319*            		JR      NC,STR26
042C3F E3          1320*    STR25:			EX      (SP),HL
042C40 CB 75       1321*            		BIT     6,L             ;ZERO FLAG
042C42 E3          1322*    		        EX      (SP),HL
042C43 20 05       1323*            		JR      NZ,STR27
042C45 3E 30       1324*            		LD      A,'0'
042C47 3C          1325*    STR26:			INC     A               ;SET +VE
042C48 3D          1326*            		DEC     A
042C49 F5          1327*            		PUSH    AF              ;PUT ON STACK + CARRY
042C4A 04          1328*    STR27:			INC     B
042C4B CD 25 2F 04 1329*            		CALL    TEST_FP            ;IS HLH'L' ZERO?
042C4F 0E 20       1330*            		LD      C,32
042C51 3E 00       1331*            		LD      A,0
042C53 20 B8       1332*            		JR      NZ,STR22
042C55 F1          1333*            		POP     AF
042C56 F5          1334*            		PUSH    AF
042C57 3E 00       1335*            		LD      A,0
042C59 38 B2       1336*            		JR      C,STR22
042C5B             1337*    ;
042C5B             1338*    ;At this point, the decimal character string is stored
042C5B             1339*    ; on the stack. Trailing zeroes are suppressed and may
042C5B             1340*    ; need to be replaced.
042C5B             1341*    ;B register holds decimal point position.
042C5B             1342*    ;Now format number and store as ASCII string:
042C5B             1343*    ;
042C5B EB          1344*    STR3:			EX      DE,HL           ;STRING POINTER
042C5C 0E FF       1345*            		LD      C,-1            ;FLAG "E"
042C5E 16 01       1346*            		LD      D,1
042C60 DD 5E 01    1347*            		LD      E,(IX+1)        ;f2
042C63 DD CB 02 46 1348*            		BIT     0,(IX+2)
042C67 20 35       1349*            		JR      NZ,STR34        ;E MODE
042C69 DD CB 02 4E 1350*            		BIT     1,(IX+2)
042C6D 28 12       1351*            		JR      Z,STR31
042C6F 78          1352*            		LD      A,B             ;F MODE
042C70 B7          1353*            		OR      A
042C71 28 05       1354*            		JR      Z,STR30
042C73 FA 78 2C 04 1355*            		JP      M,STR30
042C77 50          1356*            		LD      D,B
042C78 7A          1357*    STR30:			LD      A,D
042C79 DD 86 01    1358*            		ADD     A,(IX+1)
042C7C 5F          1359*            		LD      E,A
042C7D FE 0B       1360*            		CP      11
042C7F 38 19       1361*            		JR      C,STR32
042C81 78          1362*    STR31:			LD      A,B             ;G MODE
042C82 11 01 01 00 1363*            		LD      DE,101H
042C86 B7          1364*            		OR      A
042C87 FA 9E 2C 04 1365*            		JP      M,STR34
042C8B 28 0D       1366*            		JR      Z,STR32
042C8D DD 7E 01    1367*            		LD      A,(IX+1)
042C90 B7          1368*            		OR      A
042C91 20 02       1369*            		JR      NZ,STR3A
042C93 3E 0A       1370*            		LD      A,10
042C95 B8          1371*    STR3A:			CP      B
042C96 38 06       1372*            		JR      C,STR34
042C98 50          1373*            		LD      D,B
042C99 58          1374*            		LD      E,B
042C9A 78          1375*    STR32:			LD      A,B
042C9B C6 81       1376*            		ADD     A,129
042C9D 4F          1377*            		LD      C,A
042C9E CB FA       1378*    STR34:			SET     7,D
042CA0 1D          1379*            		DEC     E
042CA1 7A          1380*    STR35:			LD      A,D
042CA2 B9          1381*            		CP      C
042CA3 30 0E       1382*            		JR      NC,STR33
042CA5 F1          1383*    STR36:			POP     AF
042CA6 28 04       1384*            		JR      Z,STR37
042CA8 F2 B5 2C 04 1385*            		JP      P,STR38
042CAC F5          1386*    STR37:			PUSH    AF
042CAD 1C          1387*            		INC     E
042CAE 1D          1388*            		DEC     E
042CAF FA C6 2C 04 1389*            		JP      M,STR4
042CB3 3E 30       1390*    STR33:			LD      A,'0'
042CB5 15          1391*    STR38:			DEC     D
042CB6 E2 BD 2C 04 1392*            		JP      PO,STR39
042CBA 36 2E       1393*            		LD      (HL),'.'
042CBC 23          1394*            		INC     HL
042CBD 77          1395*    STR39:			LD      (HL),A
042CBE 23          1396*            		INC     HL
042CBF 1D          1397*            		DEC     E
042CC0 F2 A1 2C 04 1398*            		JP      P,STR35
042CC4 18 DF       1399*            		JR      STR36
042CC6             1400*    ;
042CC6 F1          1401*    STR4:			POP     AF
042CC7 0C          1402*    STR40:			INC     C
042CC8 4D          1403*            		LD      C,L
042CC9 20 28       1404*            		JR      NZ,STR44
042CCB 36 45       1405*            		LD      (HL),'E'        ;EXPONENT
042CCD 23          1406*            		INC     HL
042CCE 78          1407*            		LD      A,B
042CCF 3D          1408*            		DEC     A
042CD0 F2 D9 2C 04 1409*            		JP      P,STR41
042CD4 36 2D       1410*            		LD      (HL),'-'
042CD6 23          1411*            		INC     HL
042CD7 ED 44       1412*            		NEG
042CD9 36 30       1413*    STR41:			LD      (HL),'0'
042CDB 28 15       1414*            		JR      Z,STR47
042CDD FE 0A       1415*            		CP      10
042CDF 47          1416*            		LD      B,A
042CE0 3E 3A       1417*            		LD      A,':'
042CE2 38 03       1418*            		JR      C,STR42
042CE4 23          1419*            		INC     HL
042CE5 36 30       1420*            		LD      (HL),'0'
042CE7 34          1421*    STR42:			INC     (HL)
042CE8 BE          1422*            		CP      (HL)
042CE9 20 05       1423*            		JR      NZ,STR43
042CEB 36 30       1424*            		LD      (HL),'0'
042CED 2B          1425*            		DEC     HL
042CEE 34          1426*            		INC     (HL)
042CEF 23          1427*            		INC     HL
042CF0 10 F5       1428*    STR43:			DJNZ    STR42
042CF2 23          1429*    STR47:			INC     HL
042CF3 EB          1430*    STR44:			EX      DE,HL
042CF4 C9          1431*          			RET
042CF5             1432*    ;
042CF5             1433*    ;Support subroutines:
042CF5             1434*    ;
042CF5 DD 46 04    1435*    DLOAD5:			LD      B,(IX+4)
042CF8 D9          1436*            		EXX
042CF9 DD 5E 00    1437*            		LD      E,(IX+0)
042CFC DD 56 01    1438*            		LD      D,(IX+1)
042CFF D9          1439*            		EXX
042D00 DD 5E 02    1440*            		LD      E,(IX+2)
042D03 DD 56 03    1441*            		LD      D,(IX+3)
042D06 C9          1442*            		RET
042D07             1443*    ;
042D07 DD 46 06    1444*    DLOAD5_SPL:		LD      B,(IX+6)
042D0A D9          1445*    			EXX
042D0B DD 17 00    1446*    			LD	DE, (IX+0)
042D0E D9          1447*    			EXX
042D0F DD 17 03    1448*    			LD	DE, (IX+3)
042D12 C9          1449*    			RET
042D13             1450*    ;
042D13             1451*    ;CON_FP - Get unsigned numeric constant from ASCII string.
042D13             1452*    ;   Inputs: ASCII string at (IX).
042D13             1453*    ;  Outputs: Variable-type result in HLH'L'C
042D13             1454*    ;           IX updated (points to delimiter)
042D13             1455*    ;           A7 = 0 (numeric marker)
042D13             1456*    ;
042D13 CD 49 2F 04 1457*    CON_FP:			CALL    ZERO_FP            ;INITIALISE TO ZERO
042D17 0E 00       1458*            		LD      C,0             ;TRUNCATION COUNTER
042D19 CD A7 2D 04 1459*            		CALL    UINT          ;GET INTEGER PART
042D1D FE 2E       1460*            		CP      '.'
042D1F 06 00       1461*            		LD      B,0             ;DECL. PLACE COUNTER
042D21 CC A5 2D 04 1462*            		CALL    Z,NUMBIX        ;GET FRACTION PART
042D25 FE 45       1463*            		CP      'E'
042D27 3E 00       1464*            		LD      A,0             ;INITIALISE EXPONENT
042D29 CC 73 2D 04 1465*            		CALL    Z,GETEXP        ;GET EXPONENT
042D2D CB 7C       1466*            		BIT     7,H
042D2F 20 08       1467*            		JR      NZ,CON0         ;INTEGER OVERFLOW
042D31 B7          1468*            		OR      A
042D32 20 05       1469*            		JR      NZ,CON0         ;EXPONENT NON-ZERO
042D34 B8          1470*            		CP      B
042D35 20 02       1471*            		JR      NZ,CON0         ;DECIMAL POINT
042D37 B9          1472*            		CP      C
042D38 C8          1473*            		RET     Z               ;INTEGER
042D39 90          1474*    CON0:			SUB     B
042D3A 81          1475*            		ADD     A,C
042D3B 0E 9F       1476*            		LD      C,159
042D3D CD AC 2E 04 1477*            		CALL    FLOAT_
042D41 CB BC       1478*            		RES     7,H             ;DITCH IMPLIED 1
042D43 B7          1479*            		OR      A
042D44 C8          1480*            		RET     Z               ;DONE
042D45 FA 53 2D 04 1481*            		JP      M,CON2          ;NEGATIVE EXPONENT
042D49 CD 45 30 04 1482*            		CALL    POWR10
042D4D CD 34 26 04 1483*            		CALL    FMUL            ;SCALE
042D51 AF          1484*            		XOR     A
042D52 C9          1485*            		RET
042D53 FE DA       1486*    CON2:			CP      -38
042D55 38 0C       1487*            		JR      C,CON3          ;CAN'T SCALE IN ONE GO
042D57 ED 44       1488*            		NEG
042D59 CD 45 30 04 1489*            		CALL    POWR10
042D5D CD 8B 25 04 1490*            		CALL    FDIV            ;SCALE
042D61 AF          1491*            		XOR     A
042D62 C9          1492*            		RET
042D63 F5          1493*    CON3:			PUSH    AF
042D64 3E 26       1494*            		LD      A,38
042D66 CD 45 30 04 1495*            		CALL    POWR10
042D6A CD 8B 25 04 1496*            		CALL    FDIV
042D6E F1          1497*            		POP     AF
042D6F C6 26       1498*            		ADD     A,38
042D71 18 E0       1499*            		JR      CON2
042D73             1500*    ;
042D73             1501*    ;GETEXP - Get decimal exponent from string
042D73             1502*    ;     Inputs: ASCII string at (IX)
042D73             1503*    ;             (IX points at 'E')
042D73             1504*    ;             A = initial value
042D73             1505*    ;    Outputs: A = new exponent
042D73             1506*    ;             IX updated.
042D73             1507*    ;   Destroys: A,A',IX,F,F'
042D73             1508*    ;
042D73 C5          1509*    GETEXP:			PUSH    BC              ;SAVE REGISTERS
042D74 47          1510*            		LD      B,A             ;INITIAL VALUE
042D75 0E 02       1511*            		LD      C,2             ;2 DIGITS MAX
042D77 DD 23       1512*            		INC     IX              ;BUMP PAST 'E'
042D79 CD 63 31 04 1513*            		CALL    SIGNQ
042D7D 08          1514*            		EX      AF,AF'          ;SAVE EXPONENT SIGN
042D7E CD 59 31 04 1515*    GETEX1:			CALL    DIGITQ
042D82 38 18       1516*            		JR      C,GETEX2
042D84 78          1517*            		LD      A,B             ;B=B*10
042D85 87          1518*            		ADD     A,A
042D86 87          1519*            		ADD     A,A
042D87 80          1520*            		ADD     A,B
042D88 87          1521*            		ADD     A,A
042D89 47          1522*            		LD      B,A
042D8A DD 7E 00    1523*            		LD      A,(IX)          ;GET BACK DIGIT
042D8D DD 23       1524*            		INC     IX
042D8F E6 0F       1525*            		AND     0FH             ;MASK UNWANTED BITS
042D91 80          1526*            		ADD     A,B             ;ADD IN DIGIT
042D92 47          1527*            		LD      B,A
042D93 0D          1528*            		DEC     C
042D94 F2 7E 2D 04 1529*            		JP      P,GETEX1
042D98 06 64       1530*            		LD      B,100           ;FORCE OVERFLOW
042D9A 18 E2       1531*            		JR      GETEX1
042D9C 08          1532*    GETEX2:			EX      AF,AF'          ;RESTORE SIGN
042D9D FE 2D       1533*            		CP      '-'
042D9F 78          1534*            		LD      A,B
042DA0 C1          1535*            		POP     BC              ;RESTORE
042DA1 C0          1536*            		RET     NZ
042DA2 ED 44       1537*            		NEG                     ;NEGATE EXPONENT
042DA4 C9          1538*            		RET
042DA5             1539*    ;
042DA5             1540*    ;UINT: Get unsigned integer from string.
042DA5             1541*    ;    Inputs: string at (IX)
042DA5             1542*    ;            C = truncated digit count
042DA5             1543*    ;                (initially zero)
042DA5             1544*    ;            B = total digit count
042DA5             1545*    ;            HLH'L' = initial value
042DA5             1546*    ;   Outputs: HLH'L' = number (binary integer)
042DA5             1547*    ;            A = delimiter.
042DA5             1548*    ;            B, C & IX updated
042DA5             1549*    ;  Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
042DA5             1550*    ;
042DA5 DD 23       1551*    NUMBIX:			INC     IX
042DA7 CD 59 31 04 1552*    UINT:			CALL    DIGITQ
042DAB D8          1553*            		RET     C
042DAC 04          1554*            		INC     B               ;INCREMENT DIGIT COUNT
042DAD DD 23       1555*            		INC     IX
042DAF CD A2 2F 04 1556*            		CALL    X10             ;*10 & COPY OLD VALUE
042DB3 38 15       1557*            		JR      C,NUMB1         ;OVERFLOW
042DB5 0D          1558*            		DEC     C               ;SEE IF TRUNCATED
042DB6 0C          1559*            		INC     C
042DB7 20 11       1560*            		JR      NZ,NUMB1        ;IMPORTANT!
042DB9 E6 0F       1561*            		AND     0FH
042DBB D9          1562*            		EXX
042DBC 06 00       1563*            		LD      B,0
042DBE 4F          1564*            		LD      C,A
042DBF 52 09       1565*            		ADD.S   HL,BC           ;ADD IN DIGIT
042DC1 D9          1566*            		EXX
042DC2 30 E3       1567*            		JR      NC,UINT
042DC4 52 23       1568*            		INC.S   HL              ;CARRY
042DC6 7C          1569*            		LD      A,H
042DC7 B5          1570*            		OR      L
042DC8 20 DD       1571*            		JR      NZ,UINT
042DCA 0C          1572*    NUMB1:			INC     C               ;TRUNCATION COUNTER
042DCB CD 00 2F 04 1573*            		CALL    SWAP1           ;RESTORE PREVIOUS VALUE
042DCF 18 D6       1574*            		JR      UINT
042DD1             1575*    ;
042DD1             1576*    ;FIX - Fix number to specified exponent value.
042DD1             1577*    ;    Inputs: HLH'L'C = +ve non-zero number (floated)
042DD1             1578*    ;            A = desired exponent (A>C)
042DD1             1579*    ;   Outputs: HLH'L'C = fixed number (unsigned)
042DD1             1580*    ;            fraction shifted into B'C'
042DD1             1581*    ;            A'F' positive if integer input
042DD1             1582*    ;  Destroys: C,H,L,A',B',C',H',L',F,F'
042DD1             1583*    ;
042DD1 08          1584*    FIX:			EX      AF,AF'
042DD2 AF          1585*            		XOR     A
042DD3 08          1586*            		EX      AF,AF'
042DD4 CB FC       1587*            		SET     7,H             ;IMPLIED 1
042DD6 CD 05 2F 04 1588*    FIX1:			CALL    DIV2
042DDA B9          1589*            		CP      C
042DDB C8          1590*            		RET     Z
042DDC D2 D6 2D 04 1591*            		JP      NC,FIX1
042DE0 C3 14 2F 04 1592*            		JP      OFLOW
042DE4             1593*    ;
042DE4             1594*    ;SFIX - Convert to integer if necessary.
042DE4             1595*    ;    Input: Variable-type number in HLH'L'C
042DE4             1596*    ;   Output: Integer in HLH'L', C=0
042DE4             1597*    ; Destroys: A,C,H,L,A',B',C',H',L',F,F'
042DE4             1598*    ;
042DE4             1599*    ;NEGATE - Negate HLH'L'
042DE4             1600*    ;    Destroys: H,L,H',L',F
042DE4             1601*    ;
042DE4 CD FD 2E 04 1602*    FIX2:			CALL    SWAP_FP
042DE8 CD F0 2D 04 1603*            		CALL    SFIX_FP
042DEC CD FD 2E 04 1604*            		CALL    SWAP_FP
042DF0 0D          1605*    SFIX_FP:			DEC     C
042DF1 0C          1606*            		INC     C
042DF2 C8          1607*            		RET     Z               ;INTEGER/ZERO
042DF3 CB 7C       1608*            		BIT     7,H             ;SIGN
042DF5 F5          1609*            		PUSH    AF
042DF6 3E 9F       1610*            		LD      A,159
042DF8 CD D1 2D 04 1611*            		CALL    FIX
042DFC F1          1612*            		POP     AF
042DFD 0E 00       1613*            		LD      C,0
042DFF C8          1614*            		RET     Z
042E00 B7          1615*    NEGATE:			OR      A               ;CLEAR CARRY
042E01 D9          1616*            		EXX
042E02 D5          1617*    NEG0:			PUSH    DE
042E03 EB          1618*            		EX      DE,HL
042E04 21 00 00 00 1619*            		LD      HL,0
042E08 52 ED 52    1620*            		SBC.S   HL,DE
042E0B D1          1621*            		POP     DE
042E0C D9          1622*            		EXX
042E0D D5          1623*            		PUSH    DE
042E0E EB          1624*            		EX      DE,HL
042E0F 21 00 00 00 1625*            		LD      HL,0
042E13 52 ED 52    1626*            		SBC.S   HL,DE
042E16 D1          1627*            		POP     DE
042E17 C9          1628*            		RET
042E18             1629*    ;
042E18             1630*    ;NEG - Negate HLH'L'B'C'
042E18             1631*    ;    Also complements A (used in FADD)
042E18             1632*    ;    Destroys: A,H,L,B',C',H',L',F
042E18             1633*    ;
042E18 D9          1634*    NEG_:			EXX
042E19 2F          1635*            		CPL
042E1A E5          1636*            		PUSH    HL
042E1B B7          1637*            		OR      A               ;CLEAR CARRY
042E1C 21 00 00 00 1638*            		LD      HL,0
042E20 52 ED 42    1639*            		SBC.S   HL,BC
042E23 44          1640*            		LD      B,H
042E24 4D          1641*            		LD      C,L
042E25 E1          1642*            		POP     HL
042E26 18 DA       1643*            		JR      NEG0
042E28             1644*    ;
042E28             1645*    ;SCALE - Trig scaling.
042E28             1646*    ;MOD48 - 48-bit floating-point "modulus" (remainder).
042E28             1647*    ;   Inputs: HLH'L'C unsigned floating-point dividend
042E28             1648*    ;           DED'E'B'C'B unsigned 48-bit FP divisor
042E28             1649*    ;  Outputs: HLH'L'C floating point remainder (H7=1)
042E28             1650*    ;           E = quotient (bit 7 is sticky)
042E28             1651*    ; Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',IX,F
042E28             1652*    ;FLO48 - Float unsigned number (48 bits)
042E28             1653*    ;    Input/output in HLH'L'B'C'C
042E28             1654*    ;   Destroys: C,H,L,B',C',H',L',F
042E28             1655*    ;
042E28 3E 96       1656*    SCALE:			LD      A,150
042E2A B9          1657*            		CP      C
042E2B 3E 17       1658*            		LD      A,ACLOST
042E2D DA A3 23 04 1659*            		JP      C,ERROR_FP_         ;"Accuracy lost"
042E31 CD 6E 29 04 1660*            		CALL    PIBY4
042E35 D9          1661*            		EXX
042E36 01 69 21 00 1662*            		LD      BC,2169H        ;3.141592653589793238
042E3A D9          1663*            		EXX
042E3B CB FA       1664*    MOD48:			SET     7,D             ;IMPLIED 1
042E3D CB FC       1665*            		SET     7,H
042E3F 79          1666*            		LD      A,C
042E40 0E 00       1667*            		LD      C,0             ;INIT QUOTIENT
042E42 DD 21 00 00 1668*            		LD      IX,0
       00          
042E47 DD E5       1669*            		PUSH    IX              ;PUT ZERO ON STACK
042E49 B8          1670*            		CP      B
042E4A 38 46       1671*            		JR      C,MOD485        ;DIVIDEND<DIVISOR
042E4C D9          1672*    MOD481:			EXX                     ;CARRY=0 HERE
042E4D E3          1673*            		EX      (SP),HL
042E4E 52 ED 42    1674*            		SBC.S   HL,BC
042E51 E3          1675*            		EX      (SP),HL
042E52 52 ED 52    1676*            		SBC.S   HL,DE
042E55 D9          1677*            		EXX
042E56 52 ED 52    1678*            		SBC.S   HL,DE
042E59 30 0C       1679*            		JR      NC,MOD482       ;DIVIDEND>=DIVISOR
042E5B D9          1680*            		EXX
042E5C E3          1681*            		EX      (SP),HL
042E5D 52 09       1682*            		ADD.S   HL,BC
042E5F E3          1683*            		EX      (SP),HL
042E60 52 ED 5A    1684*            		ADC.S   HL,DE
042E63 D9          1685*            		EXX
042E64 52 ED 5A    1686*            		ADC.S   HL,DE
042E67 3F          1687*    MOD482:			CCF
042E68 CB 11       1688*            		RL      C               ;QUOTIENT
042E6A 30 02       1689*            		JR      NC,MOD483
042E6C CB F9       1690*            		SET     7,C             ;STICKY BIT
042E6E 3D          1691*    MOD483:			DEC     A
042E6F B8          1692*            		CP      B
042E70 38 1F       1693*            		JR      C,MOD484        ;DIVIDEND<DIVISOR
042E72 E3          1694*            		EX      (SP),HL
042E73 52 29       1695*            		ADD.S   HL,HL           ;DIVIDEND * 2
042E75 E3          1696*            		EX      (SP),HL
042E76 D9          1697*            		EXX
042E77 52 ED 6A    1698*            		ADC.S   HL,HL
042E7A D9          1699*            		EXX
042E7B 52 ED 6A    1700*            		ADC.S   HL,HL
042E7E 30 CC       1701*            		JR      NC,MOD481       ;AGAIN
042E80 B7          1702*            		OR      A
042E81 D9          1703*            		EXX
042E82 E3          1704*            		EX      (SP),HL
042E83 52 ED 42    1705*            		SBC.S   HL,BC           ;OVERFLOW, SO SUBTRACT
042E86 E3          1706*            		EX      (SP),HL
042E87 52 ED 52    1707*            		SBC.S   HL,DE
042E8A D9          1708*            		EXX
042E8B 52 ED 52    1709*            		SBC.S   HL,DE
042E8E B7          1710*            		OR      A
042E8F 18 D6       1711*            		JR      MOD482
042E91             1712*    ;
042E91 3C          1713*    MOD484:			INC     A
042E92 59          1714*    MOD485:			LD      E,C             ;QUOTIENT
042E93 4F          1715*            		LD      C,A             ;REMAINDER EXPONENT
042E94 D9          1716*            		EXX
042E95 C1          1717*            		POP     BC
042E96 D9          1718*            		EXX
042E97 CB 7C       1719*    FLO48:			BIT     7,H
042E99 C0          1720*            		RET     NZ
042E9A D9          1721*            		EXX
042E9B CB 21       1722*            		SLA     C
042E9D CB 10       1723*            		RL      B
042E9F 52 ED 6A    1724*            		ADC.S   HL,HL
042EA2 D9          1725*            		EXX
042EA3 52 ED 6A    1726*            		ADC.S   HL,HL
042EA6 0D          1727*            		DEC     C
042EA7 C2 97 2E 04 1728*            		JP      NZ,FLO48
042EAB C9          1729*            		RET
042EAC             1730*    ;
042EAC             1731*    ;Float unsigned number
042EAC             1732*    ;    Input/output in HLH'L'C
042EAC             1733*    ;   Destroys: C,H,L,H',L',F
042EAC             1734*    ;
042EAC CB 7C       1735*    FLOAT_:			BIT     7,H
042EAE C0          1736*            		RET     NZ
042EAF D9          1737*            		EXX                     ;SAME AS "X2"
042EB0 52 29       1738*            		ADD.S   HL,HL           ;TIME-CRITICAL
042EB2 D9          1739*            		EXX                     ;REGION
042EB3 52 ED 6A    1740*            		ADC.S   HL,HL           ;(BENCHMARKS)
042EB6 0D          1741*            		DEC     C
042EB7 C2 AC 2E 04 1742*            		JP      NZ,FLOAT_
042EBB C9          1743*            		RET
042EBC             1744*    ;
042EBC             1745*    ;SFLOAT - Convert to floating-point if necessary.
042EBC             1746*    ;    Input: Variable-type number in HLH'L'C
042EBC             1747*    ;    Output: Floating-point in HLH'L'C
042EBC             1748*    ;    Destroys: A,C,H,L,H',L',F
042EBC             1749*    ;
042EBC 08          1750*    FLOATA:			EX      AF,AF'
042EBD             1751*            		; ADD     A,(RTABLE-DTABLE)/3
042EBD C6 2A       1752*            		ADD     A,RTABLE-DTABLE/3 ; ez80asm doesn't do nested expressions
042EBF 08          1753*            		EX      AF,AF'
042EC0 CD FD 2E 04 1754*    FLOAT2:			CALL    SWAP_FP
042EC4 CD CC 2E 04 1755*            		CALL    SFLOAT_FP
042EC8 CD FD 2E 04 1756*            		CALL    SWAP_FP
042ECC 0D          1757*    SFLOAT_FP:			DEC     C
042ECD 0C          1758*            		INC     C
042ECE C0          1759*            		RET     NZ              ;ALREADY FLOATING-POINT
042ECF CD 25 2F 04 1760*            		CALL    TEST_FP
042ED3 C8          1761*            		RET     Z               ;ZERO
042ED4 7C          1762*            		LD      A,H
042ED5 B7          1763*            		OR      A
042ED6 FC 00 2E 04 1764*            		CALL    M,NEGATE
042EDA 0E 9F       1765*            		LD      C,159
042EDC CD AC 2E 04 1766*            		CALL    FLOAT_
042EE0 B7          1767*            		OR      A
042EE1 F8          1768*            		RET     M               ;NEGATIVE
042EE2 CB BC       1769*            		RES     7,H
042EE4 C9          1770*            		RET
042EE5             1771*    ;
042EE5             1772*    ;ROUND UP
042EE5             1773*    ;Return with carry set if 32-bit overflow
042EE5             1774*    ;   Destroys: H,L,B',C',H',L',F
042EE5             1775*    ;
042EE5 D9          1776*    ADD1_FP:			EXX
042EE6 01 01 00 00 1777*            		LD      BC,1
042EEA 52 09       1778*            		ADD.S   HL,BC
042EEC D9          1779*            		EXX
042EED D0          1780*            		RET     NC
042EEE C5          1781*            		PUSH    BC
042EEF 01 01 00 00 1782*            		LD      BC,1
042EF3 52 09       1783*            		ADD.S   HL,BC
042EF5 C1          1784*            		POP     BC
042EF6 C9          1785*            		RET
042EF7             1786*    ;
042EF7             1787*    ;ODD - Add one if even, leave alone if odd.
042EF7             1788*    ; (Used to perform unbiassed rounding, i.e.
042EF7             1789*    ;  number is rounded up half the time)
042EF7             1790*    ;    Destroys: L',F (carry cleared)
042EF7             1791*    ;
042EF7 B7          1792*    ODD:			OR      A               ;CLEAR CARRY
042EF8 D9          1793*            		EXX
042EF9 CB C5       1794*            		SET     0,L             ;MAKE ODD
042EFB D9          1795*            		EXX
042EFC C9          1796*            		RET
042EFD             1797*    ;
042EFD             1798*    ;SWAP_FP - Swap arguments.
042EFD             1799*    ;    Exchanges DE,HL D'E',H'L' and B,C
042EFD             1800*    ;    Destroys: A,B,C,D,E,H,L,D',E',H',L'
042EFD             1801*    ;SWAP1 - Swap DEHL with D'E'H'L'
042EFD             1802*    ;    Destroys: D,E,H,L,D',E',H',L'
042EFD             1803*    ;
042EFD 79          1804*    SWAP_FP:			LD      A,C
042EFE 48          1805*            		LD      C,B
042EFF 47          1806*            		LD      B,A
042F00 EB          1807*    SWAP1:			EX      DE,HL
042F01 D9          1808*            		EXX
042F02 EB          1809*            		EX      DE,HL
042F03 D9          1810*            		EXX
042F04 C9          1811*            		RET
042F05             1812*    ;
042F05             1813*    ; DIV2 - destroys C,H,L,A',B',C',H',L',F,F'
042F05             1814*    ; INCC - destroys C,F
042F05             1815*    ; OFLOW
042F05             1816*    ;
042F05 CD BE 2F 04 1817*    DIV2:			CALL    D2
042F09 D9          1818*            		EXX
042F0A CB 18       1819*            		RR      B
042F0C CB 19       1820*            		RR      C
042F0E 08          1821*            		EX      AF,AF'
042F0F B0          1822*            		OR      B
042F10 08          1823*            		EX      AF,AF'
042F11 D9          1824*            		EXX
042F12 0C          1825*    INCC:			INC     C
042F13 C0          1826*            		RET     NZ
042F14 3E 14       1827*    OFLOW:			LD      A,TOOBIG_FP
042F16 C3 A3 23 04 1828*            		JP      ERROR_FP_           ;"Too big"
042F1A             1829*    ;
042F1A             1830*    ; FTEST - Test for zero & sign
042F1A             1831*    ;     Output: A=0 if zero, A=&40 if +ve, A=&C0 if -ve
042F1A             1832*    ;
042F1A CD 25 2F 04 1833*    FTEST_FP:			CALL    TEST_FP
042F1E C8          1834*            		RET     Z
042F1F 7C          1835*            		LD      A,H
042F20 E6 80       1836*            		AND     10000000B
042F22 F6 40       1837*            		OR      01000000B
042F24 C9          1838*            		RET
042F25             1839*    ;
042F25             1840*    ; TEST_FP - Test HLH'L' for zero.
042F25             1841*    ;     Output: Z-flag set & A=0 if HLH'L'=0
042F25             1842*    ;     Destroys: A,F
042F25             1843*    ;
042F25 7C          1844*    TEST_FP:			LD      A,H
042F26 B5          1845*            		OR      L
042F27 D9          1846*            		EXX
042F28 B4          1847*            		OR      H
042F29 B5          1848*            		OR      L
042F2A D9          1849*            		EXX
042F2B C9          1850*            		RET
042F2C             1851*    ;
042F2C             1852*    ; FCOMP - Compare two numbers
042F2C             1853*    ;     Output: A=0 if equal, A=&40 if L>R, A=&C0 if L<R
042F2C             1854*    ;
042F2C 78          1855*    FCOMP_FP:			LD      A,B
042F2D B1          1856*            		OR      C               ;Both integer?
042F2E 20 0B       1857*            		JR      NZ,FCOMP1
042F30 CD 45 2F 04 1858*            		CALL    ICP
042F34 3E 00       1859*    FCOMP0:			LD      A,0
042F36 C8          1860*            		RET     Z               ;Equal
042F37 3E 80       1861*            		LD      A,80H
042F39 1F          1862*            		RRA
042F3A C9          1863*            		RET
042F3B             1864*    ;
042F3B CD C0 2E 04 1865*    FCOMP1:			CALL    FLOAT2          ;Float both
042F3F CD 53 2F 04 1866*            		CALL    FCP
042F43 18 EF       1867*            		JR      FCOMP0
042F45             1868*    ;
042F45             1869*    ; Integer and floating point compare.
042F45             1870*    ; Sets carry & zero flags according to HLH'L'C-DED'E'B
042F45             1871*    ; Result pre-set to FALSE
042F45             1872*    ; ICP1, FCP1 destroy A,F
042F45             1873*    ;
042F45             1874*    ; ZERO - Return zero.
042F45             1875*    ;  Destroys: A,C,H,L,H',L'
042F45             1876*    ;
042F45 CD 78 2F 04 1877*    ICP:			CALL    ICP1
042F49 3E 00       1878*    ZERO_FP:			LD      A,0
042F4B D9          1879*            		EXX
042F4C 67          1880*            		LD      H,A
042F4D 6F          1881*    	       		LD      L,A
042F4E D9          1882*            		EXX
042F4F 67          1883*          			LD      H,A
042F50 6F          1884*         			LD      L,A
042F51 4F          1885*    	    		LD      C,A
042F52 C9          1886*            		RET
042F53             1887*    ;
042F53 CD 6A 2F 04 1888*    FCP:			CALL    FCP1
042F57 18 F0       1889*            		JR      ZERO_FP            ;PRESET FALSE
042F59             1890*    ;
042F59 79          1891*    FCP0:			LD      A,C
042F5A B8          1892*            		CP      B               ;COMPARE EXPONENTS
042F5B C0          1893*            		RET     NZ
042F5C             1894*    ICP0:
042F5C 52 ED 52    1895*    			SBC.S   HL,DE           ;COMP MANTISSA MSB
042F5F 52 19       1896*            		ADD.S   HL,DE
042F61 C0          1897*            		RET     NZ
042F62 D9          1898*            		EXX
042F63 52 ED 52    1899*            		SBC.S   HL,DE           ;COMP MANTISSA LSB
042F66 52 19       1900*            		ADD.S   HL,DE
042F68 D9          1901*            		EXX
042F69 C9          1902*            		RET
042F6A             1903*    ;
042F6A 7C          1904*    FCP1:			LD      A,H
042F6B AA          1905*            		XOR     D
042F6C 7C          1906*            		LD      A,H
042F6D 17          1907*            		RLA
042F6E F8          1908*            		RET     M
042F6F 30 E8       1909*            		JR      NC,FCP0
042F71 CD 59 2F 04 1910*            		CALL    FCP0
042F75 C8          1911*            		RET     Z               ;** V0.1 BUG FIX
042F76 3F          1912*            		CCF
042F77 C9          1913*            		RET
042F78             1914*    ;
042F78 7C          1915*    ICP1:			LD      A,H
042F79 AA          1916*            		XOR     D
042F7A F2 5C 2F 04 1917*            		JP      P,ICP0
042F7E 7C          1918*            		LD      A,H
042F7F 17          1919*            		RLA
042F80 C9          1920*            		RET
042F81             1921*    ;
042F81             1922*    ; ADD - Integer add.
042F81             1923*    ; Carry, sign & zero flags valid on exit
042F81             1924*    ;     Destroys: H,L,H',L',F
042F81             1925*    ;
042F81 05          1926*    X10B:			DEC     B
042F82 0C          1927*            		INC     C
042F83 CD CA 2F 04 1928*    X5:			CALL    COPY0
042F87 CD BD 2F 04 1929*            		CALL    D2C
042F8B CD BD 2F 04 1930*            		CALL    D2C
042F8F 08          1931*            		EX      AF,AF'          ;SAVE CARRY
042F90 D9          1932*    ADD_:			EXX
042F91 52 19       1933*            		ADD.S   HL,DE
042F93 D9          1934*            		EXX
042F94 52 ED 5A    1935*            		ADC.S   HL,DE
042F97 C9          1936*            		RET
042F98             1937*    ;
042F98             1938*    ; SUB - Integer subtract.
042F98             1939*    ; Carry, sign & zero flags valid on exit
042F98             1940*    ;     Destroys: H,L,H',L',F
042F98             1941*    ;
042F98 D9          1942*    SUB_:			EXX
042F99 B7          1943*            		OR      A
042F9A 52 ED 52    1944*            		SBC.S   HL,DE
042F9D D9          1945*            		EXX
042F9E 52 ED 52    1946*            		SBC.S   HL,DE
042FA1 C9          1947*            		RET
042FA2             1948*    ;
042FA2             1949*    ; X10 - unsigned integer * 10
042FA2             1950*    ;    Inputs: HLH'L' initial value
042FA2             1951*    ;   Outputs: DED'E' = initial HLH'L'
042FA2             1952*    ;            Carry bit set if overflow
042FA2             1953*    ;            If carry not set HLH'L'=result
042FA2             1954*    ;  Destroys: D,E,H,L,D',E',H',L',F
042FA2             1955*    ; X2 - Multiply HLH'L' by 2 as 32-bit integer.
042FA2             1956*    ;     Carry set if MSB=1 before shift.
042FA2             1957*    ;     Sign set if MSB=1 after shift.
042FA2             1958*    ;     Destroys: H,L,H',L',F
042FA2             1959*    ;
042FA2 CD CA 2F 04 1960*    X10:			CALL    COPY0           ;DED'E'=HLH'L'
042FA6 CD B5 2F 04 1961*            		CALL    X2
042FAA D8          1962*            		RET     C               ;TOO BIG
042FAB CD B5 2F 04 1963*            		CALL    X2
042FAF D8          1964*            		RET     C
042FB0 CD 90 2F 04 1965*            		CALL    ADD_
042FB4 D8          1966*            		RET     C
042FB5 D9          1967*    X2:			EXX
042FB6 52 29       1968*            		ADD.S   HL,HL
042FB8 D9          1969*            		EXX
042FB9 52 ED 6A    1970*            		ADC.S   HL,HL
042FBC C9          1971*            		RET
042FBD             1972*    ;
042FBD             1973*    ; D2 - Divide HLH'L' by 2 as 32-bit integer.
042FBD             1974*    ;     Carry set if LSB=1 before shift.
042FBD             1975*    ;     Destroys: H,L,H',L',F
042FBD             1976*    ;
042FBD 0C          1977*    D2C:			INC     C
042FBE CB 3C       1978*    D2:			SRL     H
042FC0 CB 1D       1979*            		RR      L
042FC2 D9          1980*            		EXX
042FC3 CB 1C       1981*            		RR      H
042FC5 CB 1D       1982*            		RR      L
042FC7 D9          1983*            		EXX
042FC8 C9          1984*            		RET
042FC9             1985*    ;
042FC9             1986*    ; COPY - COPY HLH'L'C INTO DED'E'B
042FC9             1987*    ;   Destroys: B,C,D,E,H,L,D',E',H',L'
042FC9             1988*    ;
042FC9 41          1989*    COPY_:			LD      B,C
042FCA 54          1990*    COPY0:			LD      D,H
042FCB 5D          1991*            		LD      E,L
042FCC D9          1992*            		EXX
042FCD 54          1993*            		LD      D,H
042FCE 5D          1994*            		LD      E,L
042FCF D9          1995*            		EXX
042FD0 C9          1996*            		RET
042FD1             1997*    ;
042FD1             1998*    ; SQUARE - PUSH X*X
042FD1             1999*    ; PUSH5 - PUSH HLH'L'C ONTO STACK.
042FD1             2000*    ;   Destroys: SP,IX
042FD1             2001*    ;
042FD1 CD C9 2F 04 2002*    SQUARE:			CALL    COPY_
042FD5 CD 34 26 04 2003*            		CALL    FMUL
042FD9 DD E1       2004*    PUSH5:			POP     IX              ;RETURN ADDRESS
042FDB C5          2005*            		PUSH    BC
042FDC E5          2006*            		PUSH    HL
042FDD D9          2007*            		EXX
042FDE E5          2008*            		PUSH    HL
042FDF D9          2009*            		EXX
042FE0 DD E9       2010*            		JP      (IX)            ;"RETURN"
042FE2             2011*    ;
042FE2             2012*    ; POP5 - POP DED'E'B OFF STACK.
042FE2             2013*    ;   Destroys: A,B,D,E,D',E',SP,IX
042FE2             2014*    ;
042FE2 DD E1       2015*    POP5:			POP     IX              ;RETURN ADDRESS
042FE4 D9          2016*            		EXX
042FE5 D1          2017*            		POP     DE
042FE6 D9          2018*            		EXX
042FE7 D1          2019*            		POP     DE
042FE8 79          2020*            		LD      A,C
042FE9 C1          2021*            		POP     BC
042FEA 41          2022*            		LD      B,C
042FEB 4F          2023*            		LD      C,A
042FEC DD E9       2024*            		JP      (IX)            ;"RETURN"
042FEE             2025*    ;
042FEE             2026*    ; RATIO - Calculate (X-1)/(X+1)
042FEE             2027*    ;     Inputs: X in HLH'L'C
042FEE             2028*    ;    Outputs: (X-1)/(X+1) in HLH'L'C
042FEE             2029*    ;   Destroys: Everything except IY,SP,I
042FEE             2030*    ;
042FEE CD D9 2F 04 2031*    RATIO:			CALL    PUSH5           ;SAVE X
042FF2 CD 61 29 04 2032*            		CALL    DONE
042FF6 CD 22 25 04 2033*            		CALL    FADD
042FFA CD E2 2F 04 2034*            		CALL    POP5            ;RESTORE X
042FFE CD D9 2F 04 2035*            		CALL    PUSH5           ;SAVE X+1
043002 CD FD 2E 04 2036*            		CALL    SWAP_FP
043006 CD 61 29 04 2037*            		CALL    DONE
04300A CD 09 25 04 2038*            		CALL    FSUB
04300E CD E2 2F 04 2039*            		CALL    POP5            ;RESTORE X+1
043012 C3 8B 25 04 2040*            		JP      FDIV
043016             2041*    ;
043016             2042*    ; POLY - Evaluate a polynomial.
043016             2043*    ;     Inputs: X in HLH'L'C and also stored at (SP+2)
043016             2044*    ;             Polynomial coefficients follow call.
043016             2045*    ;    Outputs: Result in HLH'L'C
043016             2046*    ;   Destroys: Everything except IY,SP,I
043016             2047*    ; Routine terminates on finding a coefficient >=1.
043016             2048*    ; Note: The last coefficient is EXECUTED on return
043016             2049*    ;       so must contain only innocuous bytes!
043016             2050*    ;
043016 DD 21 03 00 2051*    POLY:			LD      IX, 3				; Advance the SP to the return address
       00          
04301B DD 39       2052*            		ADD     IX, SP
04301D DD E3       2053*            		EX      (SP), IX			; IX: Points to the inline list of coefficients
04301F             2054*    ;
04301F CD F5 2C 04 2055*            		CALL    DLOAD5          		; Load the first coefficient from (IX)
043023 CD 34 26 04 2056*    POLY1:			CALL    FMUL
043027 11 05 00 00 2057*            		LD      DE, 5				; Skip to the next coefficient
04302B DD 19       2058*            		ADD     IX, DE
04302D CD F5 2C 04 2059*            		CALL    DLOAD5          		; Load the second coefficient from (IX)
043031 DD E3       2060*            		EX      (SP), IX			; Restore the SP just in case we need to return
043033 04          2061*            		INC     B
043034 05          2062*            		DEC     B               		; Test B for end byte (80h)
043035 FA 22 25 04 2063*            		JP      M,FADD				; Yes, so add and return
043039 CD 22 25 04 2064*            		CALL    FADD				; No, so add
04303D CD 07 2D 04 2065*            		CALL    DLOAD5_SPL			; Load X from SP
043041 DD E3       2066*            		EX      (SP), IX			; IX: Points to the inline list of coefficients
043043 18 DE       2067*            		JR      POLY1				; And loop
043045             2068*    ;
043045             2069*    ; POWR10 - Calculate power of ten.
043045             2070*    ;     Inputs: A=power of 10 required (A<128)
043045             2071*    ;             A=binary exponent to be exceeded (A>=128)
043045             2072*    ;    Outputs: DED'E'B = result
043045             2073*    ;             A = actual power of ten returned
043045             2074*    ;   Destroys: A,B,D,E,A',D',E',F,F'
043045             2075*    ;
043045 3C          2076*    POWR10:			INC     A
043046 08          2077*            		EX      AF,AF'
043047 E5          2078*            		PUSH    HL
043048 D9          2079*            		EXX
043049 E5          2080*            		PUSH    HL
04304A D9          2081*            		EXX
04304B CD 61 29 04 2082*            		CALL    DONE
04304F CD FD 2E 04 2083*            		CALL    SWAP_FP
043053 AF          2084*            		XOR     A
043054 08          2085*    POWR11:			EX      AF,AF'
043055 3D          2086*            		DEC     A
043056 28 26       2087*            		JR      Z,POWR14        ;EXIT TYPE 1
043058 F2 60 30 04 2088*            		JP      P,POWR13
04305C B9          2089*            		CP      C
04305D 38 1F       2090*            		JR      C,POWR14        ;EXIT TYPE 2
04305F 3C          2091*            		INC     A
043060 08          2092*    POWR13:			EX      AF,AF'
043061 3C          2093*            		INC     A
043062 CB FC       2094*            		SET     7,H
043064 CD 83 2F 04 2095*            		CALL    X5
043068 30 06       2096*            		JR      NC,POWR12
04306A 08          2097*            		EX      AF,AF'
04306B CD BD 2F 04 2098*            		CALL    D2C
04306F 08          2099*            		EX      AF,AF'
043070 08          2100*    POWR12:			EX      AF,AF'
043071 DC E5 2E 04 2101*            		CALL    C,ADD1_FP          ;ROUND UP
043075 0C          2102*            		INC     C
043076 FA 54 30 04 2103*            		JP      M,POWR11
04307A C3 14 2F 04 2104*            		JP      OFLOW
04307E CD FD 2E 04 2105*    POWR14:			CALL    SWAP_FP
043082 CB BA       2106*            		RES     7,D
043084 D9          2107*            		EXX
043085 E1          2108*            		POP     HL
043086 D9          2109*            		EXX
043087 E1          2110*            		POP     HL
043088 08          2111*            		EX      AF,AF'
043089 C9          2112*            		RET
04308A             2113*    ;
04308A             2114*    ; DIVA, DIVB - DIVISION PRIMITIVE.
04308A             2115*    ;     Function: D'E'DE = H'L'HLD'E'DE / B'C'BC
04308A             2116*    ;               Remainder in H'L'HL
04308A             2117*    ;     Inputs: A = loop counter (normally -32)
04308A             2118*    ;     Destroys: A,D,E,H,L,D',E',H',L',F
04308A             2119*    ;
04308A B7          2120*    DIVA:			OR      A               ;CLEAR CARRY
04308B             2121*    DIV0:
04308B 52 ED 42    2122*    			SBC.S   HL,BC           ;DIVIDEND-DIVISOR
04308E D9          2123*            		EXX
04308F 52 ED 42    2124*            		SBC.S   HL,BC
043092 D9          2125*            		EXX
043093 30 07       2126*            		JR      NC,DIV1
043095 52 09       2127*            		ADD.S   HL,BC           ;DIVIDEND+DIVISOR
043097 D9          2128*            		EXX
043098 52 ED 4A    2129*            		ADC.S   HL,BC
04309B D9          2130*            		EXX
04309C 3F          2131*    DIV1:			CCF
04309D CB 13       2132*    DIVC:			RL      E               ;SHIFT RESULT INTO DE
04309F CB 12       2133*            		RL      D
0430A1 D9          2134*            		EXX
0430A2 CB 13       2135*            		RL      E
0430A4 CB 12       2136*            		RL      D
0430A6 D9          2137*            		EXX
0430A7 3C          2138*            		INC     A
0430A8 F0          2139*            		RET     P
0430A9             2140*    DIVB:
0430A9 52 ED 6A    2141*    			ADC.S   HL,HL           ;DIVIDEND*2
0430AC D9          2142*            		EXX
0430AD 52 ED 6A    2143*            		ADC.S   HL,HL
0430B0 D9          2144*            		EXX
0430B1 30 D8       2145*            		JR      NC,DIV0
0430B3 B7          2146*            		OR      A
0430B4 52 ED 42    2147*            		SBC.S   HL,BC           ;DIVIDEND-DIVISOR
0430B7 D9          2148*            		EXX
0430B8 52 ED 42    2149*            		SBC.S   HL,BC
0430BB D9          2150*            		EXX
0430BC 37          2151*            		SCF
0430BD C3 9D 30 04 2152*            		JP      DIVC
0430C1             2153*    ;
0430C1             2154*    ;MULA, MULB - MULTIPLICATION PRIMITIVE.
0430C1             2155*    ;    Function: H'L'HLD'E'DE = B'C'BC * D'E'DE
0430C1             2156*    ;    Inputs: A = loop counter (usually -32)
0430C1             2157*    ;            H'L'HL = 0
0430C1             2158*    ;    Destroys: D,E,H,L,D',E',H',L',A,F
0430C1             2159*    ;
0430C1 B7          2160*    MULA:			OR      A               ;CLEAR CARRY
0430C2 D9          2161*    MUL0:			EXX
0430C3 CB 1A       2162*            		RR      D               ;MULTIPLIER/2
0430C5 CB 1B       2163*            		RR      E
0430C7 D9          2164*            		EXX
0430C8 CB 1A       2165*            		RR      D
0430CA CB 1B       2166*            		RR      E
0430CC 30 07       2167*            		JR      NC,MUL1
0430CE 52 09       2168*            		ADD.S   HL,BC           ;ADD IN MULTIPLICAND
0430D0 D9          2169*            		EXX
0430D1 52 ED 4A    2170*            		ADC.S   HL,BC
0430D4 D9          2171*            		EXX
0430D5 3C          2172*    MUL1:			INC     A
0430D6 F0          2173*            		RET     P
0430D7 D9          2174*    MULB:			EXX
0430D8 CB 1C       2175*            		RR      H               ;PRODUCT/2
0430DA CB 1D       2176*            		RR      L
0430DC D9          2177*            		EXX
0430DD CB 1C       2178*            		RR      H
0430DF CB 1D       2179*            		RR      L
0430E1 C3 C2 30 04 2180*            		JP      MUL0
0430E5             2181*    ;
0430E5             2182*    ; SQRA, SQRB - SQUARE ROOT PRIMITIVES
0430E5             2183*    ;     Function: B'C'BC = SQR (D'E'DE)
0430E5             2184*    ;     Inputs: A = loop counter (normally -31)
0430E5             2185*    ;             B'C'BCH'L'HL initialised to 0
0430E5             2186*    ;   Destroys: A,B,C,D,E,H,L,B',C',D',E',H',L',F
0430E5             2187*    ;
0430E5             2188*    SQR1:
0430E5 52 ED 42    2189*    			SBC.S   HL,BC
0430E8 D9          2190*            		EXX
0430E9 52 ED 42    2191*            		SBC.S   HL,BC
0430EC D9          2192*            		EXX
0430ED 0C          2193*            		INC     C
0430EE 30 09       2194*            		JR      NC,SQR2
0430F0 0D          2195*            		DEC     C
0430F1 52 09       2196*            		ADD.S   HL,BC
0430F3 D9          2197*            		EXX
0430F4 52 ED 4A    2198*            		ADC.S   HL,BC
0430F7 D9          2199*            		EXX
0430F8 0D          2200*            		DEC     C
0430F9 3C          2201*    SQR2:			INC     A
0430FA F0          2202*            		RET     P
0430FB CB 21       2203*    SQRA:			SLA     C
0430FD CB 10       2204*            		RL      B
0430FF D9          2205*            		EXX
043100 CB 11       2206*            		RL      C
043102 CB 10       2207*            		RL      B
043104 D9          2208*            		EXX
043105 0C          2209*            		INC     C
043106 CB 23       2210*            		SLA     E
043108 CB 12       2211*            		RL      D
04310A D9          2212*            		EXX
04310B CB 13       2213*            		RL      E
04310D CB 12       2214*            		RL      D
04310F D9          2215*            		EXX
043110 52 ED 6A    2216*            		ADC.S   HL,HL
043113 D9          2217*            		EXX
043114 52 ED 6A    2218*            		ADC.S   HL,HL
043117 D9          2219*            		EXX
043118 CB 23       2220*            		SLA     E
04311A CB 12       2221*            		RL      D
04311C D9          2222*            		EXX
04311D CB 13       2223*            		RL      E
04311F CB 12       2224*            		RL      D
043121 D9          2225*            		EXX
043122 52 ED 6A    2226*            		ADC.S   HL,HL
043125 D9          2227*            		EXX
043126 52 ED 6A    2228*            		ADC.S   HL,HL
043129 D9          2229*            		EXX
04312A D2 E5 30 04 2230*            		JP      NC,SQR1
04312E B7          2231*    SQR3:			OR      A
04312F 52 ED 42    2232*            		SBC.S   HL,BC
043132 D9          2233*            		EXX
043133 52 ED 42    2234*            		SBC.S   HL,BC
043136 D9          2235*            		EXX
043137 0C          2236*            		INC     C
043138 C3 F9 30 04 2237*            		JP      SQR2
04313C             2238*    ;
04313C             2239*    SQRB:
04313C 52 29       2240*    			ADD.S   HL,HL
04313E D9          2241*            		EXX
04313F 52 ED 6A    2242*            		ADC.S   HL,HL
043142 D9          2243*            		EXX
043143 38 E9       2244*            		JR      C,SQR3
043145 3C          2245*            		INC     A
043146 0C          2246*            		INC     C
043147 52 ED 42    2247*            		SBC.S   HL,BC
04314A D9          2248*            		EXX
04314B 52 ED 42    2249*            		SBC.S   HL,BC
04314E D9          2250*            		EXX
04314F D0          2251*            		RET     NC
043150 52 09       2252*            		ADD.S   HL,BC
043152 D9          2253*            		EXX
043153 52 ED 4A    2254*            		ADC.S   HL,BC
043156 D9          2255*            		EXX
043157 0D          2256*            		DEC     C
043158 C9          2257*            		RET
043159             2258*    ;
043159 DD 7E 00    2259*    DIGITQ:			LD      A,(IX)
04315C FE 3A       2260*            		CP      '9'+1
04315E 3F          2261*            		CCF
04315F D8          2262*            		RET     C
043160 FE 30       2263*            		CP      '0'
043162 C9          2264*            		RET
043163             2265*    ;
043163 DD 7E 00    2266*    SIGNQ:			LD      A,(IX)
043166 DD 23       2267*            		INC     IX
043168 FE 20       2268*            		CP      ' '
04316A 28 F7       2269*            		JR      Z,SIGNQ
04316C FE 2B       2270*            		CP      '+'
04316E C8          2271*            		RET     Z
04316F FE 2D       2272*            		CP      '-'
043171 C8          2273*            		RET     Z
043172 DD 2B       2274*            		DEC     IX
043174 C9          2275*            		RET
043175             0046         include "fpp_ext.inc"
043175             0001*    ; integer operations
043175             0002*    iand:	EQU 58	; AND (INTEGER)
043175             0003*    ibdiv:	EQU 59	; DIV
043175             0004*    ieor:	EQU 60	; EOR
043175             0005*    imod:	EQU 61	; MOD
043175             0006*    ior:	EQU 62	; OR
043175             0007*    ile:	EQU 63	; <=
043175             0008*    ine:	EQU 64	; <>
043175             0009*    ige:	EQU 65	; >=
043175             0010*    ilt:	EQU 66	; <
043175             0011*    ieq:	EQU 67	; =
043175             0012*    imul:	EQU 68	; *
043175             0013*    iadd:	EQU 69	; +
043175             0014*    igt:	EQU 70	; >
043175             0015*    isub:	EQU 71	; -
043175             0016*    ipow:	EQU 72	; ^
043175             0017*    idiv:	EQU 73	; /
043175             0018*    ;
043175             0019*    ; floating point functions
043175             0020*    absv:	EQU 16	; ABS
043175             0021*    acs:	EQU 17	; ACS
043175             0022*    asn:	EQU 18	; ASN
043175             0023*    atn:	EQU 19	; ATN
043175             0024*    cos:	EQU 20	; COS
043175             0025*    deg:	EQU 21	; DEG
043175             0026*    exp:	EQU 22	; EXP
043175             0027*    int_:	EQU 23	; INT
043175             0028*    ln:	    EQU 24	; LN
043175             0029*    log:	EQU 25	; LOG
043175             0030*    notk:	EQU 26	; NOT
043175             0031*    rad:	EQU 27	; RAD
043175             0032*    sgn:	EQU 28	; SGN
043175             0033*    sin:	EQU 29	; SIN
043175             0034*    sqr:	EQU 30	; SQR
043175             0035*    tan:	EQU 31	; TAN
043175             0036*    zero:	EQU 32	; ZERO
043175             0037*    fone:	EQU 33	; FONE
043175             0038*    true:	EQU 34	; TRUE
043175             0039*    pi:	    EQU 35	; PI
043175             0040*    val:	EQU 36	; VAL
043175             0041*    str:	EQU 37	; STR$
043175             0042*    sfix:	EQU 38	; FIX
043175             0043*    sfloat:	EQU 39	; FLOAT
043175             0044*    ftest:	EQU 40	; TEST
043175             0045*    fcomp:	EQU 41	; COMPARE
043175             0046*    ;
043175             0047*    ; floating point operations
043175             0048*    fand:	EQU  0	; AND (FLOATING-POINT)
043175             0049*    fbdiv:	EQU  1	; DIV
043175             0050*    feor:	EQU  2	; EOR
043175             0051*    fmod:	EQU  3	; MOD
043175             0052*    ffor:	EQU  4	; OR
043175             0053*    fle:	EQU  5	; <=
043175             0054*    fne:	EQU  6	; <>
043175             0055*    fge:	EQU  7	; >=
043175             0056*    flt:	EQU  8	; <
043175             0057*    feq:	EQU  9	; =
043175             0058*    fmul:	EQU 10	; *
043175             0059*    fadd:	EQU 11	; +
043175             0060*    fgt:	EQU 12	; >
043175             0061*    fsub:	EQU 13	; -
043175             0062*    fpow:	EQU 14	; ^
043175             0063*    fdiv:	EQU 15	; /
043175             0064*    
043175             0065*        MACRO LOAD_FLOAT ARG
043175             0066*        ld ix,$+11
043175             0067*        call val_fp ; convert the string to a float
043175             0068*        jp (ix)
043175             0069*        asciz ARG
043175             0070*        ENDMACRO
043175             0071*    
043175             0072*    ; --- originally in eval.asm ---
043175             0073*    ;SWAP - Swap arguments
043175             0074*    ;Exchanges DE,HL D'E',H'L' and B,C
043175             0075*    ;Destroys: A,B,C,D,E,H,L,D',E',H',L'
043175             0076*    ;
043175 79          0077*    SWAP:			LD      A,C
043176 48          0078*    			LD      C,B
043177 47          0079*    			LD      B,A
043178 EB          0080*    			EX      DE,HL
043179 D9          0081*    			EXX
04317A EB          0082*    			EX      DE,HL
04317B D9          0083*    			EXX
04317C C9          0084*    			RET
04317D             0085*    
04317D             0086*    ; same as VAL_FP in fpp.asm, but preserves any float stored in DED'E'B
04317D             0087*    val_fp:
04317D FD E5       0088*        push iy ; preserve
04317F FD 21 9A 31 0089*        ld iy,@val
       04          
043184 CD 3E 32 04 0090*        call store_float_iy_alt
043188 3E 24       0091*        ld a,val
04318A CD 90 23 04 0092*        call FPP ; string converted to float in HLH'L'C
04318E FD 21 9A 31 0093*        ld iy,@val
       04          
043193 CD 50 32 04 0094*        call fetch_float_iy_alt
043197 FD E1       0095*        pop iy ; restore
043199 C9          0096*        ret
04319A             0097*    @val: ds 5
04319F             0098*    
04319F             0099*    ; same as INT_FP_ in fpp.asm but preserves B, which keeps any float stored in DED'E'B intact
04319F             0100*    ; af will also return differently from the original
04319F             0101*    ;INT - Floor function
04319F             0102*    ;Result is integer numeric.
04319F             0103*    ;
04319F             0104*    int_fp_:
       FF FF FF FF 
       FF 
04319F C5          0105*        push bc ; preserve b
0431A0 3E 17       0106*        ld a,int_
0431A2 CD 90 23 04 0107*        call FPP
0431A6 F1          0108*        pop af ; restore b to a
0431A7 47          0109*        ld b,a ; restore b
0431A8 C9          0110*        RET
0431A9             0111*    
0431A9             0112*    ; convert floating point number to integer and store it in HLU
0431A9             0113*    ; inputs: HLH'L'C = floating point number
0431A9             0114*    ; outputs: HLU = integer part of the number
0431A9             0115*    ; destroys: all except DEU and U'D'E'B, index registers
0431A9             0116*    int2hlu:
0431A9 CD 9F 31 04 0117*        call int_fp_
0431AD 7D          0118*        ld a,l
0431AE F5          0119*        push af
0431AF D9          0120*        exx
0431B0 E5          0121*        push hl
0431B1 D9          0122*        exx
0431B2 E1          0123*        pop hl
0431B3 F1          0124*        pop af
0431B4             0125*        A_TO_HLU
                       M1 Args: none
0431B4 AF          0001*M1      xor a ; 1 cycle
0431B5 22 BE 31 04 0002*M1      ld ($+8+1),hl ; 7 cycles
0431B9 32 C0 31 04 0003*M1      ld ($+4+3),a ; 5 cycles
0431BD 21 00 00 00 0004*M1      ld hl,0x000000 ; 4 cycles
0431C1             0005*M1      ; 17 cycles total
0431C1 C9          0126*        ret
0431C2             0127*    
0431C2             0128*    ; convert the integer value in HLU to a floating point number with exponent of 0
0431C2             0129*    hlu2float:
0431C2 0E 00       0130*        ld c,0 ; exponent = 0
0431C4 E5          0131*        push hl
0431C5 D9          0132*        exx
0431C6 E1          0133*        pop hl
0431C7 D9          0134*        exx
0431C8             0135*        HLU_TO_A
                       M1 Args: none
0431C8 3B          0001*M1      dec sp ; 1 cycle
0431C9 E5          0002*M1      push hl ; 4 cycles
0431CA 33          0003*M1      inc sp ; 1 cycle
0431CB F1          0004*M1      pop af ; 4 cycles
0431CC             0005*M1      ; 10 cycles total
0431CC 21 00 00 00 0136*        ld hl,0
0431D0 6F          0137*        ld l,a
0431D1 C9          0138*        ret
0431D2             0139*    
0431D2             0140*    ; store HLH'L'C floating point number in a 40-bit buffer
0431D2             0141*    ; inputs: HLH'L'C = floating point number
0431D2             0142*    ;         ix = buffer address
0431D2             0143*    ; outputs: buffer filled with floating point number
0431D2             0144*    ; destroys: nothing
0431D2             0145*    store_float_nor:
0431D2 DD 71 00    0146*        ld (ix+0),c
0431D5 D9          0147*        exx
0431D6 DD 75 01    0148*        ld (ix+1),l
0431D9 DD 74 02    0149*        ld (ix+2),h
0431DC D9          0150*        exx
0431DD DD 75 03    0151*        ld (ix+3),l
0431E0 DD 74 04    0152*        ld (ix+4),h
0431E3 C9          0153*        ret
0431E4             0154*    
0431E4             0155*    ; fetch HLH'L'C floating point number from a 40-bit buffer
0431E4             0156*    ; inputs: ix = buffer address
0431E4             0157*    ; outputs: HLH'L'C = floating point number
0431E4             0158*    ; destroys: HLH'L'C
0431E4             0159*    fetch_float_nor:
0431E4 DD 4E 00    0160*        ld c,(ix+0)
0431E7 D9          0161*        exx
0431E8 DD 6E 01    0162*        ld l,(ix+1)
0431EB DD 66 02    0163*        ld h,(ix+2)
0431EE D9          0164*        exx
0431EF DD 6E 03    0165*        ld l,(ix+3)
0431F2 DD 66 04    0166*        ld h,(ix+4)
0431F5 C9          0167*        ret
0431F6             0168*    
0431F6             0169*    ; store DED'E'B floating point number in a 40-bit buffer
0431F6             0170*    ; inputs: DED'E'B = floating point number
0431F6             0171*    ;         ix = buffer address
0431F6             0172*    ; outputs: buffer filled with floating point number
0431F6             0173*    ; destroys: nothing
0431F6             0174*    store_float_alt:
0431F6 DD 70 00    0175*        ld (ix+0),b
0431F9 D9          0176*        exx
0431FA DD 73 01    0177*        ld (ix+1),e
0431FD DD 72 02    0178*        ld (ix+2),d
043200 D9          0179*        exx
043201 DD 73 03    0180*        ld (ix+3),e
043204 DD 72 04    0181*        ld (ix+4),d
043207 C9          0182*        ret
043208             0183*    
043208             0184*    ; fetch DED'E'B floating point number from a 40-bit buffer
043208             0185*    ; inputs: ix = buffer address
043208             0186*    ; outputs: DED'E'B = floating point number
043208             0187*    ; destroys: DED'E'B
043208             0188*    fetch_float_alt:
043208 DD 46 00    0189*        ld b,(ix+0)
04320B D9          0190*        exx
04320C DD 5E 01    0191*        ld e,(ix+1)
04320F DD 56 02    0192*        ld d,(ix+2)
043212 D9          0193*        exx
043213 DD 5E 03    0194*        ld e,(ix+3)
043216 DD 56 04    0195*        ld d,(ix+4)
043219 C9          0196*        ret
04321A             0197*    
04321A             0198*    
04321A             0199*    ; store HLH'L'C floating point number in a 40-bit buffer
04321A             0200*    ; inputs: HLH'L'C = floating point number
04321A             0201*    ;         iy = buffer address
04321A             0202*    ; outputs: buffer filled with floating point number
04321A             0203*    ; destroys: nothing
04321A             0204*    store_float_iy_nor:
04321A FD 71 00    0205*        ld (iy+0),c
04321D D9          0206*        exx
04321E FD 75 01    0207*        ld (iy+1),l
043221 FD 74 02    0208*        ld (iy+2),h
043224 D9          0209*        exx
043225 FD 75 03    0210*        ld (iy+3),l
043228 FD 74 04    0211*        ld (iy+4),h
04322B C9          0212*        ret
04322C             0213*    
04322C             0214*    ; fetch HLH'L'C floating point number from a 40-bit buffer
04322C             0215*    ; inputs: iy = buffer address
04322C             0216*    ; outputs: HLH'L'C = floating point number
04322C             0217*    ; destroys: HLH'L'C
04322C             0218*    fetch_float_iy_nor:
04322C FD 4E 00    0219*        ld c,(iy+0)
04322F D9          0220*        exx
043230 FD 6E 01    0221*        ld l,(iy+1)
043233 FD 66 02    0222*        ld h,(iy+2)
043236 D9          0223*        exx
043237 FD 6E 03    0224*        ld l,(iy+3)
04323A FD 66 04    0225*        ld h,(iy+4)
04323D C9          0226*        ret
04323E             0227*    
04323E             0228*    ; store DED'E'B floating point number in a 40-bit buffer
04323E             0229*    ; inputs: DED'E'B = floating point number
04323E             0230*    ;         iy = buffer address
04323E             0231*    ; outputs: buffer filled with floating point number
04323E             0232*    ; destroys: nothing
04323E             0233*    store_float_iy_alt:
04323E FD 70 00    0234*        ld (iy+0),b
043241 D9          0235*        exx
043242 FD 73 01    0236*        ld (iy+1),e
043245 FD 72 02    0237*        ld (iy+2),d
043248 D9          0238*        exx
043249 FD 73 03    0239*        ld (iy+3),e
04324C FD 72 04    0240*        ld (iy+4),d
04324F C9          0241*        ret
043250             0242*    
043250             0243*    ; fetch DED'E'B floating point number from a 40-bit buffer
043250             0244*    ; inputs: iy = buffer address
043250             0245*    ; outputs: DED'E'B = floating point number
043250             0246*    ; destroys: DED'E'B
043250             0247*    fetch_float_iy_alt:
043250 FD 46 00    0248*        ld b,(iy+0)
043253 D9          0249*        exx
043254 FD 5E 01    0250*        ld e,(iy+1)
043257 FD 56 02    0251*        ld d,(iy+2)
04325A D9          0252*        exx
04325B FD 5E 03    0253*        ld e,(iy+3)
04325E FD 56 04    0254*        ld d,(iy+4)
043261 C9          0255*        ret
043262             0256*    
043262             0257*    ; store HLH'L'C integer number in a 32-bit buffer
043262             0258*    ; inputs: HLH'L'C = integer number
043262             0259*    ;         ix = buffer address
043262             0260*    ; outputs: buffer filled with integer number
043262             0261*    ; destroys: nothing
043262             0262*    store_int_nor:
043262 D9          0263*        exx
043263 DD 75 00    0264*        ld (ix+0),l
043266 DD 74 01    0265*        ld (ix+1),h
043269 D9          0266*        exx
04326A DD 75 02    0267*        ld (ix+2),l
04326D DD 74 03    0268*        ld (ix+3),h
043270 C9          0269*        ret
043271             0270*    
043271             0271*    ; fetch HLH'L'C integer number from a 32-bit buffer
043271             0272*    ; inputs: ix = buffer address
043271             0273*    ; outputs: HLH'L'C = integer number
043271             0274*    ; destroys: HLH'L'C
043271             0275*    fetch_int_nor:
043271 0E 00       0276*        ld c,0 ; set exponent to 0
043273 D9          0277*        exx
043274 DD 6E 00    0278*        ld l,(ix+0)
043277 DD 66 01    0279*        ld h,(ix+1)
04327A D9          0280*        exx
04327B DD 6E 02    0281*        ld l,(ix+2)
04327E DD 66 03    0282*        ld h,(ix+3)
043281 C9          0283*        ret
043282             0284*    
043282             0285*    ; store DED'E'B integer number in a 32-bit buffer
043282             0286*    ; inputs: DED'E'B = integer number
043282             0287*    ;         ix = buffer address
043282             0288*    ; outputs: buffer filled with integer number
043282             0289*    ; destroys: nothing
043282             0290*    store_int_alt:
043282 D9          0291*        exx
043283 DD 73 00    0292*        ld (ix+0),e
043286 DD 72 01    0293*        ld (ix+1),d
043289 D9          0294*        exx
04328A DD 73 02    0295*        ld (ix+2),e
04328D DD 72 03    0296*        ld (ix+3),d
043290 C9          0297*        ret
043291             0298*    
043291             0299*    ; fetch DED'E'B integer number from a 32-bit buffer
043291             0300*    ; inputs: ix = buffer address
043291             0301*    ; outputs: DED'E'B = integer number
043291             0302*    ; destroys: DED'E'B
043291             0303*    fetch_int_alt:
043291 06 00       0304*        ld b,0 ; set exponent to 0
043293 D9          0305*        exx
043294 DD 5E 00    0306*        ld e,(ix+0)
043297 DD 56 01    0307*        ld d,(ix+1)
04329A D9          0308*        exx
04329B DD 5E 02    0309*        ld e,(ix+2)
04329E DD 56 03    0310*        ld d,(ix+3)
0432A1 C9          0311*        ret
0432A2             0312*    
0432A2             0313*    ; store HLH'L'C integer number in a 32-bit buffer
0432A2             0314*    ; inputs: HLH'L'C = integer number
0432A2             0315*    ;         iy = buffer address
0432A2             0316*    ; outputs: buffer filled with integer number
0432A2             0317*    ; destroys: nothing
0432A2             0318*    store_int_iy_nor:
0432A2 D9          0319*        exx
0432A3 FD 75 00    0320*        ld (iy+0),l
0432A6 FD 74 01    0321*        ld (iy+1),h
0432A9 D9          0322*        exx
0432AA FD 75 02    0323*        ld (iy+2),l
0432AD FD 74 03    0324*        ld (iy+3),h
0432B0 C9          0325*        ret
0432B1             0326*    
0432B1             0327*    ; fetch HLH'L'C integer number from a 32-bit buffer
0432B1             0328*    ; inputs: iy = buffer address
0432B1             0329*    ; outputs: HLH'L'C = integer number
0432B1             0330*    ; destroys: HLH'L'C
0432B1             0331*    fetch_int_iy_nor:
0432B1 0E 00       0332*        ld c,0 ; set exponent to 0
0432B3 D9          0333*        exx
0432B4 FD 6E 00    0334*        ld l,(iy+0)
0432B7 FD 66 01    0335*        ld h,(iy+1)
0432BA D9          0336*        exx
0432BB FD 6E 02    0337*        ld l,(iy+2)
0432BE FD 66 03    0338*        ld h,(iy+3)
0432C1 C9          0339*        ret
0432C2             0340*    
0432C2             0341*    ; store DED'E'B integer number in a 32-bit buffer
0432C2             0342*    ; inputs: DED'E'B = integer number
0432C2             0343*    ;         iy = buffer address
0432C2             0344*    ; outputs: buffer filled with integer number
0432C2             0345*    ; destroys: nothing
0432C2             0346*    store_int_iy_alt:
0432C2 D9          0347*        exx
0432C3 FD 73 00    0348*        ld (iy+0),e
0432C6 FD 72 01    0349*        ld (iy+1),d
0432C9 D9          0350*        exx
0432CA FD 73 02    0351*        ld (iy+2),e
0432CD FD 72 03    0352*        ld (iy+3),d
0432D0 C9          0353*        ret
0432D1             0354*    
0432D1             0355*    ; fetch DED'E'B integer number from a 32-bit buffer
0432D1             0356*    ; inputs: iy = buffer address
0432D1             0357*    ; outputs: DED'E'B = integer number
0432D1             0358*    ; destroys: DED'E'B
0432D1             0359*    fetch_int_iy_alt:
0432D1 06 00       0360*        ld b,0 ; set exponent to 0
0432D3 D9          0361*        exx
0432D4 FD 5E 00    0362*        ld e,(iy+0)
0432D7 FD 56 01    0363*        ld d,(iy+1)
0432DA D9          0364*        exx
0432DB FD 5E 02    0365*        ld e,(iy+2)
0432DE FD 56 03    0366*        ld d,(iy+3)
0432E1 C9          0367*        ret
0432E2             0368*    
0432E2             0369*    ; print HLH'L'C floating point number in hex format
0432E2             0370*    ; inputs: HLH'L'C = floating point number
0432E2             0371*    print_float_hex_nor:
0432E2             0372*        PUSH_ALL
                       M1 Args: none
0432E2 08          0001*M1      ex af,af'
0432E3 D9          0002*M1      exx
0432E4 F5          0003*M1      push af
0432E5 E5          0004*M1      push hl
0432E6 C5          0005*M1      push bc
0432E7 D5          0006*M1      push de
0432E8             0007*M1  
0432E8 08          0008*M1      ex af,af'
0432E9 D9          0009*M1      exx
0432EA F5          0010*M1      push af
0432EB E5          0011*M1      push hl
0432EC C5          0012*M1      push bc
0432ED D5          0013*M1      push de
0432EE DD E5       0014*M1      push ix
0432F0 FD E5       0015*M1      push iy
0432F2 C5          0373*        push bc ; preserve c
0432F3 CD A8 00 04 0374*        call printHex16
0432F7 3E 2E       0375*        ld a,'.'
0432F9 5B D7       0376*        rst.lil 10h
0432FB D9          0377*        exx
0432FC CD A8 00 04 0378*        call printHex16
043300 D9          0379*        exx
043301 3E 5E       0380*        ld a,'^'
043303 5B D7       0381*        rst.lil 10h
043305 C1          0382*        pop bc ; restore c
043306 79          0383*        ld a,c
043307 CD AE 00 04 0384*        call printHex8
04330B             0385*        POP_ALL
                       M1 Args: none
04330B FD E1       0001*M1      pop iy
04330D DD E1       0002*M1      pop ix
04330F D1          0003*M1      pop de
043310 C1          0004*M1      pop bc
043311 E1          0005*M1      pop hl
043312 F1          0006*M1      pop af
043313 08          0007*M1      ex af,af'
043314 D9          0008*M1      exx
043315             0009*M1  
043315 D1          0010*M1      pop de
043316 C1          0011*M1      pop bc
043317 E1          0012*M1      pop hl
043318 F1          0013*M1      pop af
043319 08          0014*M1      ex af,af'
04331A D9          0015*M1      exx
04331B C9          0386*        ret
04331C             0387*    
04331C             0388*    ; print DED'E'B floating point number in hex format
04331C             0389*    ; inputs: DED'E'B = floating point number
04331C             0390*    print_float_hex_alt:
04331C             0391*        PUSH_ALL
                       M1 Args: none
04331C 08          0001*M1      ex af,af'
04331D D9          0002*M1      exx
04331E F5          0003*M1      push af
04331F E5          0004*M1      push hl
043320 C5          0005*M1      push bc
043321 D5          0006*M1      push de
043322             0007*M1  
043322 08          0008*M1      ex af,af'
043323 D9          0009*M1      exx
043324 F5          0010*M1      push af
043325 E5          0011*M1      push hl
043326 C5          0012*M1      push bc
043327 D5          0013*M1      push de
043328 DD E5       0014*M1      push ix
04332A FD E5       0015*M1      push iy
04332C C5          0392*        push bc ; preserve b
04332D EB          0393*        ex de,hl
04332E CD A8 00 04 0394*        call printHex16
043332 EB          0395*        ex de,hl
043333 3E 2E       0396*        ld a,'.'
043335 5B D7       0397*        rst.lil 10h
043337 D9          0398*        exx
043338 EB          0399*        ex de,hl
043339 CD A8 00 04 0400*        call printHex16
04333D EB          0401*        ex de,hl
04333E D9          0402*        exx
04333F 3E 5E       0403*        ld a,'^'
043341 5B D7       0404*        rst.lil 10h
043343 F1          0405*        pop af ; restore b to a
043344 CD AE 00 04 0406*        call printHex8
043348             0407*        POP_ALL
                       M1 Args: none
043348 FD E1       0001*M1      pop iy
04334A DD E1       0002*M1      pop ix
04334C D1          0003*M1      pop de
04334D C1          0004*M1      pop bc
04334E E1          0005*M1      pop hl
04334F F1          0006*M1      pop af
043350 08          0007*M1      ex af,af'
043351 D9          0008*M1      exx
043352             0009*M1  
043352 D1          0010*M1      pop de
043353 C1          0011*M1      pop bc
043354 E1          0012*M1      pop hl
043355 F1          0013*M1      pop af
043356 08          0014*M1      ex af,af'
043357 D9          0015*M1      exx
043358 C9          0408*        ret
043359             0409*    
043359             0410*    print_floats_hex:
043359 CD E2 32 04 0411*        call print_float_hex_nor
04335D 3E 20       0412*        ld a,' '
04335F 5B D7       0413*        rst.lil 10h
043361 CD 1C 33 04 0414*        call print_float_hex_alt
043365 C9          0415*        ret
043366             0416*    
043366             0417*    ; print a floating point number in decimal format
043366             0418*    ; inputs: HL'H'L'C is the number to print
043366             0419*    ; outputs: number printed to screen
043366             0420*    ;          ACCS null-terminated string representation of the number
043366             0421*    ; destroys: everything except ix
043366             0422*    print_float_dec:
043366             0423*    print_float_dec_nor:
043366 DD E5       0424*        push ix             ; preserve
043368             0425*    
043368             0426*    ; back up floats in normal and alternate registers
043368 DD 21 A9 33 0427*        ld ix,@float_nor
       04          
04336D CD D2 31 04 0428*        call store_float_nor
043371 DD 21 AE 33 0429*        ld ix,@float_alt
       04          
043376 CD F6 31 04 0430*        call store_float_alt
04337A             0431*    
04337A             0432*    ; convert the number to a string
04337A 11 00 34 04 0433*        ld de,ACCS          ; point to the string accumulator
04337E DD 21 A6 33 0434*        ld ix,@G9-1         ; get the format code for the number
       04          
043383 CD 8F 2B 04 0435*        call STR_FP         ; convert the number to a string
043387 EB          0436*        ex de,hl            ; point to end of the string
043388 36 00       0437*        ld (hl),0           ; null-terminate the string
04338A 21 00 34 04 0438*        ld hl,ACCS          ; point to the string accumulator
04338E CD 67 00 04 0439*        call printString
043392             0440*    
043392             0441*    ; restore floats in normal and alternate registers
043392 DD 21 A9 33 0442*        ld ix,@float_nor
       04          
043397 CD E4 31 04 0443*        call fetch_float_nor
04339B DD 21 AE 33 0444*        ld ix,@float_alt
       04          
0433A0 CD 08 32 04 0445*        call fetch_float_alt
0433A4             0446*    
0433A4             0447*    ; cleanup and go home
0433A4 DD E1       0448*        pop ix              ; restore
0433A6 C9          0449*        ret
0433A7 09 00       0450*    @G9:			DW    9
0433A9             0451*    @float_nor: ds 5
0433AE             0452*    @float_alt: ds 5
0433B3             0453*    
0433B3             0454*    print_float_dec_alt:
       FF FF FF FF 
       FF FF FF FF 
       FF FF 
0433B3 CD 75 31 04 0455*        CALL SWAP
0433B7 CD 66 33 04 0456*        CALL print_float_dec_nor
0433BB CD 75 31 04 0457*        CALL SWAP
0433BF C9          0458*        ret
0433C0             0459*    
0433C0             0460*    ;PI - Return PI (3.14159265)
0433C0             0461*    ;Result is floating-point numeric.
0433C0             0462*    ;
0433C0 11 0F 49 00 0463*    pi_alt:			LD      DE,0x490F
0433C4 D9          0464*            		EXX
0433C5 11 A2 DA 00 0465*            		LD      DE,0xDAA2
0433C9 D9          0466*            		EXX
0433CA 06 81       0467*            		LD      B,0x81
0433CC AF          0468*            		XOR     A               ;NUMERIC MARKER
0433CD C9          0469*            		RET
0433CE             0470*    
0433CE             0471*    ;PI - Return PI * 2 (6.28318531)
0433CE             0472*    ;Result is floating-point numeric.
0433CE             0473*    ;
0433CE 11 0F 49 00 0474*    pi2_alt:		LD      DE,0x490F
0433D2 D9          0475*            		EXX
0433D3 11 A3 DA 00 0476*            		LD      DE,0xDAA3
0433D7 D9          0477*            		EXX
0433D8 06 82       0478*            		LD      B,0x82
0433DA AF          0479*            		XOR     A               ;NUMERIC MARKER
0433DB C9          0480*            		RET
0433DC             0481*    
0433DC             0482*    			ALIGN 		256		; ACCS, BUFFER & STAVAR must be on page boundaries
043400             0483*    RAM_START:
043400             0484*    ;
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
043400 00 00 00 00 0485*    ACCS:           BLKB    256,0             ; String Accumulator
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
       00 00 00 00 
043500             0047     
043500             0048     ; APPLICATION INCLUDES
043500             0049         include "agm.inc"
043500             0001*    ; WAV File Structure Offsets and Descriptions
043500             0002*    wav_riff:          EQU 0    ; 4 bytes: "RIFF" identifier
043500             0003*    wav_file_size:     EQU 4    ; 4 bytes: Total file size minus 8 bytes for RIFF header
043500             0004*    wav_wave:          EQU 8    ; 4 bytes: "WAVE" identifier
043500             0005*    wav_fmt_marker:    EQU 12   ; 4 bytes: "fmt " subchunk marker for .wav, "agm" for .agm
043500             0006*    wav_fmt_size:      EQU 16   ; 4 bytes: Format chunk size (16 for PCM)
043500             0007*    wav_audio_format:  EQU 20   ; 2 bytes: Audio format (1 = PCM)
043500             0008*    wav_num_channels:  EQU 22   ; 2 bytes: Number of channels (1 = mono, 2 = stereo)
043500             0009*    wav_sample_rate:   EQU 24   ; 4 bytes: Sample rate in Hz (e.g., 32768)
043500             0010*    wav_byte_rate:     EQU 28   ; 4 bytes: Bytes per second (SampleRate * NumChannels * BitsPerSample / 8)
043500             0011*    wav_block_align:   EQU 32   ; 2 bytes: Bytes per sample block (NumChannels * BitsPerSample / 8)
043500             0012*    wav_bits_per_sample: EQU 34 ; 2 bytes: Bits per sample (e.g., 8 or 16)
043500             0013*    
043500             0014*    ; LIST Chunk (Extra Metadata)
043500             0015*    wav_list_marker:   EQU 36   ; 4 bytes: "LIST" marker
043500             0016*    wav_list_size:     EQU 40   ; 4 bytes: Size of the LIST chunk (e.g., 26)
043500             0017*    wav_info_marker:   EQU 44   ; 4 bytes: "INFO" marker
043500             0018*    wav_isft_marker:   EQU 48   ; 4 bytes: "ISFT" marker (software identifier)
043500             0019*    wav_isft_data:     EQU 52   ; 14 bytes: Software info string (e.g., "Lavf59.27.100")
043500             0020*    wav_isft_padding:  EQU 66   ; 2 bytes: Padding/NULL terminator for alignment
043500             0021*    
043500             0022*    ; Data Chunk
043500             0023*    wav_data_marker:   EQU 68   ; 4 bytes: "data" subchunk marker
043500             0024*    wav_data_size:     EQU 72   ; 4 bytes: Size of the audio data in bytes
043500             0025*    wav_data_start:    EQU 76   ; Start of audio data
043500             0026*    wav_header_size:   EQU wav_data_start ; Total Header Size: 76 bytes
043500             0027*    
043500             0028*    ; AGON Movie (.agm) Header Structure Offsets and Descriptions
043500             0029*    ; The first 76 bytes are the size and layout of a standard .wav header
043500             0030*    agm_magic:         EQU 0+76    ; 6 bytes: "AGNMOV" identifier (offset 76-81)
043500             0031*    agm_version:       EQU 6+76    ; 1 byte: File format version (offset 82)
043500             0032*    agm_width:         EQU 7+76    ; 2 bytes: Video width in pixels (offsets 83-84)
043500             0033*    agm_height:        EQU 9+76    ; 2 bytes: Video height in pixels (offsets 85-86)
043500             0034*    agm_frame_rate:    EQU 11+76   ; 1 byte: Frames per second (offset 87)
043500             0035*    agm_total_frames:  EQU 12+76   ; 4 bytes: Total number of frames (offsets 88-91)
043500             0036*    agm_audio_seconds: EQU 16+76   ; 4 bytes: Total seconds of audio (offsets 92-95)
043500             0037*    agm_reserved:      EQU 20+76   ; 48 bytes: Reserved for future features (offsets 96-143)
043500             0038*    agm_header_size:   EQU 144     ; Total .agm Header size
043500             0039*    
043500             0040*    
043500             0041*    ; agm segment header
043500             0042*    agm_segment_size_last: equ 0 ; 4 bytes: size of previous segment (including unit and chunk headers)
043500             0043*    agm_segment_size_this: equ 4  ; 4 bytes: size of this segment (including unit and chunk headers)
043500             0044*    agm_segment_hdr_size: equ 8 ; size of the segment header
043500             0045*    
043500             0046*    ; unit header contains metadata about the next unit being read
043500             0047*    agm_unit_mask:     equ 0              ; 1 byte: encodes what to do with the unit with the following masks
043500             0048*    agm_unit_hdr_size: equ 1              ; size of the unit header
043500             0049*    
043500             0050*    agm_unit_type:     equ %10000000  ; bit 7, 0 = audio, 1 = video
043500             0051*    agm_unit_gcol:     equ %00000111  ; bits 0-2, set gcol plotting mode for video frames, see 'GCOL paint modes' in vdu_plot.inc
043500             0052*    agm_unit_cmp_typ:  equ %00011000  ; bits 3-4, compression type with the following types
043500             0053*    agm_unit_cmp_non:  equ %00000000  ; no compression (bits 3,4 clear)
043500             0054*    agm_unit_cmp_tbv:  equ %00001000  ; TurboVega compression (bit 3 set)
043500             0055*    agm_unit_cmp_rle:  equ %00010000  ; Run-Length Encoding (bit 4 set)
043500             0056*    agm_unit_cmp_res:  equ %00011000  ; Reserved for future use (bits 3,4 set)
043500             0057*    
043500             0058*    ; chunk header (for each chunk of a unit)
043500             0059*    agm_chunk_size: equ 0        ; 4 bytes: size of the chunk (excluding chunk header); 0 = end of unit
043500             0060*    agm_chunk_hdr_size: equ 4    ; size of the chunk header
043500             0061*    
043500             0062*    ; verify that a file is an .agm file
043500             0063*    ; inputs: hl = pointer to fil struct, de = pointer to filename
043500             0064*    ; returns: zero flag set,   a = 0 if not a file we can read
043500             0065*    ;          zero flag reset, a = 2 if .agm file
043500             0066*    ; destroys: if called from verify_wav as usual it doesn't matter
043500             0067*    ;           otherwise, af, hl, de, iy
043500             0068*    verify_agm:
043500             0069*    ; clear the .agm header buffer
043500 E5          0070*        push hl
043501 D5          0071*        push de
043502 01 90 00 00 0072*        ld bc,agm_header_size
043506 ED 23 00    0073*        lea hl,iy+0 ; bf or ps agm_header
043509 CD CC 03 04 0074*        call clear_mem
04350D D1          0075*        pop de
04350E E1          0076*        pop hl
04350F             0077*    
04350F             0078*    ; seek back to beginning of the file
04350F 11 00 00 00 0079*        ld de,0
043513 0E 00       0080*        ld c,0
043515             0081*        FFSCALL ffs_flseek
                       M1 Args: function=ffs_flseek 
043515 FD E5       0001*M1  			PUSH IY
043517 3E 84       0002*M1  			LD	A, function
043519 5B CF       0003*M1  			RST.LIL	08h
04351B FD E1       0004*M1  			POP IY
04351D             0082*    
04351D             0083*    ; read the header
04351D 01 90 00 00 0084*        ld bc,agm_header_size
043521 ED 13 00    0085*        lea de,iy+0 ; bf or ps agm_header
043524             0086*        FFSCALL ffs_fread
                       M1 Args: function=ffs_fread 
043524 FD E5       0001*M1  			PUSH IY
043526 3E 82       0002*M1  			LD	A, function
043528 5B CF       0003*M1  			RST.LIL	08h
04352A FD E1       0004*M1  			POP IY
04352C             0087*    
04352C             0088*    ; verify the .agm header magic number 'AGNMOV'
04352C FD 27 4C    0089*        ld hl,(iy+agm_magic)
04352F 11 41 47 4E 0090*        ld de,0x4E4741 ; ascii for AGN in little-endian order
043533 B7          0091*        or a ; clear carry
043534 ED 52       0092*        sbc hl,de
043536 20 17       0093*        jr nz,@not_agm
043538             0094*    
043538 FD 27 4F    0095*        ld hl,(iy+agm_magic+3)
04353B 11 4D 4F 56 0096*        ld de,0x564F4D ; ascii for MOV in little-endian order
04353F B7          0097*        or a ; clear carry
043540 ED 52       0098*        sbc hl,de
043542 20 0B       0099*        jr nz,@not_agm
043544             0100*    
043544             0101*    ; check the version number and reject if not 0x01
043544 FD 7E 52    0102*        ld a,(iy+agm_version)
043547 FE 01       0103*        cp 0x01
043549 20 04       0104*        jr nz,@not_agm
04354B             0105*    
04354B             0106*    ; looks good so fall through to @is_agm
04354B             0107*    @is_agm:
04354B 3E 01       0108*        ld a,1
04354D 3C          0109*        inc a ; reset zero flag and a = 2 indicating .agm file
04354E C9          0110*        ret
04354F             0111*    @not_agm:
04354F AF          0112*        xor a ; set zero flag and a = 0 indicating unreadable file
043550 C9          0113*        ret
043551             0114*    ; end verify_agm
043551             0115*    
043551             0116*    pv_cmd_buffer: equ 0x3004
043551             0117*    pv_img_buffer: equ 0x3005
043551             0118*    
043551             0119*    pv_set_video_buffers:
043551 21 04 30 00 0120*        ld hl,pv_cmd_buffer
043555 22 60 67 04 0121*        ld (ps_agm_cmd_bufferId),hl
043559 21 05 30 00 0122*        ld hl,pv_img_buffer
04355D 22 5D 67 04 0123*        ld (ps_agm_data_bufferId),hl
043561 CD 98 1F 04 0124*        call vdu_clear_buffer
043565 C9          0125*        ret
043566             0126*    
043566             0127*    pv_load_video_cmd_buffers:
043566 2A 53 03 09 0128*        ld hl,(ps_wav_header+agm_width)
04356A 22 AC 35 04 0129*        ld (pv_cmd_width),hl
04356E 2A 55 03 09 0130*        ld hl,(ps_wav_header+agm_height)
043572 22 AE 35 04 0131*        ld (pv_cmd_height),hl
043576 3E 01       0132*        ld a,1 ; format got stomped above
043578 32 B0 35 04 0133*        ld (pv_cmd_height+2),a
04357C AF          0134*        xor a
04357D 32 B3 35 04 0135*        ld (pv_cmd_x0),a
043581 32 B5 35 04 0136*        ld (pv_cmd_y0),a
043585 21 04 30 00 0137*        ld hl,pv_cmd_buffer
043589 01 21 00 00 0138*        ld bc,pv_cmd_draw_end-pv_cmd_draw
04358D 11 96 35 04 0139*        ld de,pv_cmd_draw
043591 CD 55 1F 04 0140*        call vdu_write_block_to_buffer
043595 C9          0141*        ret
043596             0142*    ; end pv_load_video_cmd_buffers
043596             0143*    
043596             0144*    pv_cmd_draw:
043596             0145*    ; Command 65: Decompress a buffer
043596             0146*    ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
043596 17 00 A0    0147*                        db 23,0,0xA0
043599 05 30       0148*                        dw pv_img_buffer
04359B 41          0149*                        db 65 ; decompress buffer
04359C 05 30       0150*                        dw pv_img_buffer
04359E             0151*    
04359E             0152*    ; Command 14: Consolidate blocks in a buffer
04359E             0153*    ; VDU 23, 0, &A0, bufferId; 14
04359E 17 00 A0    0154*                        db 23,0,0xA0 ; vdu buffered api command header
0435A1 05 30       0155*                        dw pv_img_buffer
0435A3 0E          0156*                        db 14 ; consolidate blocks command
0435A4             0157*    
0435A4             0158*    ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
0435A4             0159*    ; inputs: hl=bufferId
0435A4 17 1B 20    0160*                        db 23,27,0x20
0435A7 05 30       0161*                        dw pv_img_buffer
0435A9             0162*    
0435A9             0163*    ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
0435A9             0164*    ; 1 	RGBA2222 (1-bytes per pixel)
0435A9 17 1B 21    0165*                        db 23,27,0x21
0435AC 00 00       0166*    pv_cmd_width:       dw 0x0000
0435AE 00 00       0167*    pv_cmd_height:      dw 0x0000
0435B0 01          0168*                        db 1 ; format
0435B1             0169*    
0435B1             0170*    ; VDU 25, mode, x; y;: PLOT command
0435B1 19          0171*                        db 25
0435B2 ED          0172*                        db plot_bmp+dr_abs_fg ; 0xED
0435B3 00 00       0173*    pv_cmd_x0: 	        dw 0x0000
0435B5 00 00       0174*    pv_cmd_y0: 	        dw 0x0000
0435B7             0175*    pv_cmd_draw_end:
0435B7             0050         include "layout.inc"
0435B7             0001*    text_top: equ 0
0435B7             0002*    text_left: equ 0
0435B7             0003*    text_bottom: equ 47      ; 48 rows, zero-based
0435B7             0004*    text_right: equ 63       ; 64 columns, zero-based
0435B7             0005*    screen_width: equ 512
0435B7             0006*    screen_height: equ 384
0435B7             0007*    
0435B7 00          0008*    original_screen_mode: db 0 ; screen mode when app started so we can return to it on exit
0435B8             0009*    
0435B8 2D 2D 2D 2D 0010*    str_dashes_thin: asciz  "----------------------------------------------------------------"
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       2D 2D 2D 2D 
       00          
0435F9 3D 3D 3D 3D 0011*    str_dashes_thick: asciz "================================================================"
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       3D 3D 3D 3D 
       00          
04363A             0012*    
04363A             0013*    ; set text viewport for current playing song
04363A             0014*    vp_now_playing_top: equ 34
04363A             0015*    vp_now_playing:
04363A 0E 00       0016*        ld c, text_left
04363C 16 22       0017*        ld d, vp_now_playing_top
04363E 1E 3F       0018*        ld e, text_right
043640 06 22       0019*        ld b, vp_now_playing_top
043642 CD 37 1C 04 0020*        call vdu_set_txt_viewport
043646 C9          0021*        ret
043647             0022*    ; end vp_now_playing
043647             0023*    
043647             0024*    ; set text viewport for elapsed time
043647             0025*    vp_elapsed_top: equ vp_now_playing_top+1
043647             0026*    vp_elapsed_right: equ text_left+7 ; 8 chars for HH:MM:SS
043647             0027*    vp_elapsed:
043647 0E 00       0028*        ld c, text_left
043649 16 23       0029*        ld d, vp_elapsed_top
04364B 1E 07       0030*        ld e, vp_elapsed_right
04364D 06 23       0031*        ld b, vp_elapsed_top
04364F CD 37 1C 04 0032*        call vdu_set_txt_viewport
043653 C9          0033*        ret
043654             0034*    ; end vp_elapsed
043654             0035*    
043654             0036*    ; set text viewport for song duration
043654             0037*    vp_duration_left: equ text_right-7 ; 8 chars for HH:MM:SS
043654             0038*    vp_duration_top: equ vp_now_playing_top+1
043654             0039*    vp_duration:
043654 0E 38       0040*        ld c, vp_duration_left
043656 16 23       0041*        ld d, vp_duration_top
043658 1E 3F       0042*        ld e, text_right
04365A 06 23       0043*        ld b, vp_duration_top
04365C CD 37 1C 04 0044*        call vdu_set_txt_viewport
043660 C9          0045*        ret
043661             0046*    ; end vp_duration
043661             0047*    
043661             0048*    ; set text viewport for playing breadcrumbs
043661             0049*    vp_playbar_left: equ 10
043661             0050*    vp_playbar_top: equ vp_now_playing_top+1
043661             0051*    vp_playbar_right: equ 53
043661             0052*    vp_playbar:
043661 0E 0A       0053*        ld c, vp_playbar_left
043663 16 23       0054*        ld d, vp_playbar_top
043665 1E 35       0055*        ld e, vp_playbar_right
043667 06 23       0056*        ld b, vp_playbar_top
043669 CD 37 1C 04 0057*        call vdu_set_txt_viewport
04366D C9          0058*        ret
04366E             0059*    ; end vp_playbar
04366E             0060*    
04366E             0061*    vp_dir_hdr_top: equ 20
04366E             0062*    vp_dir_hdr:
04366E 0E 00       0063*        ld c,text_left
043670 16 14       0064*        ld d,vp_dir_hdr_top
043672 1E 3F       0065*        ld e,text_right
043674 06 14       0066*        ld b,vp_dir_hdr_top
043676 CD 37 1C 04 0067*        call vdu_set_txt_viewport
04367A C9          0068*        ret
04367B             0069*    
04367B             0070*    vp_dir_name_top: equ vp_dir_hdr_top+1
04367B             0071*    vp_dir_name:
04367B 0E 00       0072*        ld c,text_left
04367D 16 15       0073*        ld d,vp_dir_name_top
04367F 1E 3F       0074*        ld e,text_right
043681 06 15       0075*        ld b,vp_dir_name_top
043683 CD 37 1C 04 0076*        call vdu_set_txt_viewport
043687 C9          0077*        ret
043688             0078*    
043688             0079*    ; set text viewport for directory listing
043688             0080*    vp_dir_top: equ vp_dir_hdr_top+3
043688             0081*    vp_dir_bottom: equ vp_dir_top+9
043688             0082*    vp_dir:
043688 0E 00       0083*        ld c,text_left
04368A 16 17       0084*        ld d,vp_dir_top
04368C 1E 3F       0085*        ld e,text_right
04368E 06 20       0086*        ld b,vp_dir_bottom
043690 CD 37 1C 04 0087*        call vdu_set_txt_viewport
043694 C9          0088*        ret
043695             0089*    
043695             0090*    vp_legend_top: equ vp_playbar_top+2
043695             0091*    vp_legend:
043695 0E 00       0092*        ld c,text_left
043697 16 25       0093*        ld d,vp_legend_top
043699 1E 3F       0094*        ld e,text_right
04369B 06 27       0095*        ld b,vp_legend_top+2
04369D CD 37 1C 04 0096*        call vdu_set_txt_viewport
0436A1 C9          0097*        ret
0436A2             0098*    
0436A2             0099*    vp_legend_page_num_top: equ vp_legend_top
0436A2             0100*    vp_legend_page_num_left: equ text_left+29
0436A2             0101*    vp_legend_page_num:
0436A2 0E 1D       0102*        ld c,vp_legend_page_num_left
0436A4 16 25       0103*        ld d,vp_legend_page_num_top
0436A6 1E 1E       0104*        ld e,vp_legend_page_num_left+1
0436A8 06 25       0105*        ld b,vp_legend_page_num_top
0436AA CD 37 1C 04 0106*        call vdu_set_txt_viewport
0436AE C9          0107*        ret
0436AF             0108*    
0436AF             0109*    vp_legend_num_pages_top: equ vp_legend_top
0436AF             0110*    vp_legend_num_pages_left: equ text_left+36
0436AF             0111*    vp_legend_num_pages:
0436AF 0E 24       0112*        ld c,vp_legend_num_pages_left
0436B1 16 25       0113*        ld d,vp_legend_num_pages_top
0436B3 1E 25       0114*        ld e,vp_legend_num_pages_left+1
0436B5 06 25       0115*        ld b,vp_legend_num_pages_top
0436B7 CD 37 1C 04 0116*        call vdu_set_txt_viewport
0436BB C9          0117*        ret
0436BC             0118*    
0436BC             0119*    vp_legend_shuffle_top: equ vp_legend_top+1
0436BC             0120*    vp_legend_shuffle_left: equ text_left+34
0436BC             0121*    vp_legend_shuffle:
0436BC 0E 22       0122*        ld c,vp_legend_shuffle_left
0436BE 16 26       0123*        ld d,vp_legend_shuffle_top
0436C0 1E 24       0124*        ld e,vp_legend_shuffle_left+2
0436C2 06 26       0125*        ld b,vp_legend_shuffle_top
0436C4 CD 37 1C 04 0126*        call vdu_set_txt_viewport
0436C8 C9          0127*        ret
0436C9             0128*    
0436C9             0129*    vp_legend_loop_top: equ vp_legend_top+1
0436C9             0130*    vp_legend_loop_left: equ text_left+51
0436C9             0131*    vp_legend_loop:
0436C9 0E 33       0132*        ld c,vp_legend_loop_left
0436CB 16 26       0133*        ld d,vp_legend_loop_top
0436CD 1E 35       0134*        ld e,vp_legend_loop_left+2
0436CF 06 26       0135*        ld b,vp_legend_loop_top
0436D1 CD 37 1C 04 0136*        call vdu_set_txt_viewport
0436D5 C9          0137*        ret
0436D6             0138*    
0436D6             0139*    vp_seek_rate_top: equ vp_legend_top+2
0436D6             0140*    vp_seek_rate_left: equ text_left+29
0436D6             0141*    vp_seek_rate:
0436D6 0E 1D       0142*        ld c,vp_seek_rate_left
0436D8 16 27       0143*        ld d,vp_seek_rate_top
0436DA 1E 20       0144*        ld e,vp_seek_rate_left+3
0436DC 06 27       0145*        ld b,vp_seek_rate_top
0436DE CD 37 1C 04 0146*        call vdu_set_txt_viewport
0436E2 C9          0147*        ret
0436E3             0148*    
0436E3             0149*    vp_messages_top: equ vp_playbar_top+6
0436E3             0150*    vp_messages_bottom: equ text_bottom
0436E3             0151*    ; set text viewport for messages
0436E3             0152*    vp_messages:
0436E3 0E 00       0153*        ld c,text_left
0436E5 16 29       0154*        ld d,vp_messages_top
0436E7 1E 3F       0155*        ld e,text_right
0436E9 06 2F       0156*        ld b,vp_messages_bottom
0436EB CD 37 1C 04 0157*        call vdu_set_txt_viewport
0436EF C9          0158*        ret
0436F0             0159*    
0436F0             0160*    set_text_colours_normal:
0436F0             0161*    ; set text background color
0436F0 3E 84       0162*        ld a,c_blue_dk+128
0436F2 CD 0F 1C 04 0163*        call vdu_colour_text
0436F6             0164*    ; set text foreground color
0436F6 3E 0F       0165*        ld a,c_white
0436F8 CD 0F 1C 04 0166*        call vdu_colour_text
0436FC C9          0167*        ret
0436FD             0168*    ; end set_text_colours_normal
0436FD             0169*    
0436FD             0170*    set_text_colours_inverse:
0436FD             0171*    ; set text background color
0436FD 3E 8F       0172*        ld a,c_white+128
0436FF CD 0F 1C 04 0173*        call vdu_colour_text
043703             0174*    ; set text foreground color
043703 3E 04       0175*        ld a,c_blue_dk
043705 CD 0F 1C 04 0176*        call vdu_colour_text
043709 C9          0177*        ret
04370A             0178*    ; end set_text_colours_inverse
04370A             0179*    
04370A             0180*    ui_init:
04370A             0181*    ; get current screen mode and save it so we can return to it on exit
04370A CD BD 1C 04 0182*        call vdu_get_screen_mode
04370E 32 B7 35 04 0183*        ld (original_screen_mode),a
043712             0184*    ; set up display
043712 3E 14       0185*        ld a,20 ; 512x384x64 single-buffered
043714 CD AC 1C 04 0186*        call vdu_set_screen_mode
043718 AF          0187*        xor a
043719 CD C5 1C 04 0188*        call vdu_set_scaling
04371D             0189*    ; load fonts and select one
04371D CD B3 1F 04 0190*        call vdu_clear_all_buffers
043721 CD 5A 0E 04 0191*    	call font_load
043725 21 10 FA 00 0192*        ld hl,Lat2_VGA8_8x8
043729 3E 01       0193*        ld a,1
04372B CD 6B 20 04 0194*        call vdu_font_select
04372F             0195*    ; set text fg and bg colours to normal
04372F CD F0 36 04 0196*        call set_text_colours_normal
043733             0197*    ; set cursor behaviuor
043733 CD 66 1B 04 0198*        call vdu_cursor_off
043737 26 10       0199*        ld h,%00010000 ; bit 4 controls cursor scroll at bottom of screen
043739 2E 10       0200*        ld l,%00010000 ; bit 4 set means cursor wraps to top of screen
04373B CD CA 1B 04 0201*        call vdu_cursor_behaviour
04373F             0202*    ; reset text viewports and clear the screen
04373F CD A7 1C 04 0203*        call vdu_reset_viewports
043743 CD DE 1B 04 0204*        call vdu_cls
043747             0205*    
043747             0206*    ; tippy top border
043747 0E 00       0207*        ld c,text_left ; x
043749 06 00       0208*        ld b,text_top ; y
04374B CD B6 1B 04 0209*        call vdu_move_cursor
04374F 21 F9 35 04 0210*        ld hl,str_dashes_thick
043753 CD 67 00 04 0211*        call printString
043757             0212*    
043757             0213*    ; print ascii art splash screen
043757 0E 00       0214*        ld c,text_left ; x
043759 06 01       0215*        ld b,text_top+1 ; y
04375B CD B6 1B 04 0216*        call vdu_move_cursor
04375F 21 49 39 04 0217*        ld hl,agon_jukebox_ascii
043763 CD 67 00 04 0218*        call printString
043767             0219*    
043767             0220*    ; below logo border
043767 0E 00       0221*        ld c,text_left ; x
043769 06 13       0222*        ld b,vp_dir_hdr_top-1 ; y
04376B CD B6 1B 04 0223*        call vdu_move_cursor
04376F 21 F9 35 04 0224*        ld hl,str_dashes_thick
043773 CD 67 00 04 0225*        call printString
043777             0226*    
043777             0227*    ; print the directory header
043777 0E 00       0228*        ld c,text_left ; x
043779 06 14       0229*        ld b,vp_dir_hdr_top ; y
04377B CD B6 1B 04 0230*        call vdu_move_cursor
04377F CD 60 00 04 0231*        call printInline
043783 4F 75 72 20 0232*        asciz "Our current directory is:"
       63 75 72 72 
       65 6E 74 20 
       64 69 72 65 
       63 74 6F 72 
       79 20 69 73 
       3A 00       
04379D             0233*    
04379D             0234*    ; file list top border
04379D 0E 00       0235*        ld c,text_left ; x
04379F 06 16       0236*        ld b,vp_dir_top-1 ; y
0437A1 CD B6 1B 04 0237*        call vdu_move_cursor
0437A5 21 B8 35 04 0238*        ld hl,str_dashes_thin
0437A9 CD 67 00 04 0239*        call printString
0437AD             0240*    
0437AD             0241*    ; file list bottom border
0437AD 0E 00       0242*        ld c,text_left ; x
0437AF 06 21       0243*        ld b,vp_dir_bottom+1 ; y
0437B1 CD B6 1B 04 0244*        call vdu_move_cursor
0437B5 21 B8 35 04 0245*        ld hl,str_dashes_thin
0437B9 CD 67 00 04 0246*        call printString
0437BD             0247*    
0437BD             0248*    ; below the breadcrumbs border
0437BD 0E 00       0249*        ld c,text_left ; x
0437BF 06 24       0250*        ld b,vp_playbar_top+1 ; y
0437C1 CD B6 1B 04 0251*        call vdu_move_cursor
0437C5 21 F9 35 04 0252*        ld hl,str_dashes_thick
0437C9 CD 67 00 04 0253*        call printString
0437CD             0254*    
0437CD             0255*    ; print the playbar
0437CD 0E 00       0256*        ld c,text_left ; x
0437CF 06 22       0257*        ld b,vp_playbar_top-1 ; y
0437D1 CD B6 1B 04 0258*        call vdu_move_cursor
0437D5 CD 60 00 04 0259*        call printInline
0437D9 53 65 6C 65 0260*        db "Select a song with \e",24," \e",25," \e",237,", 0-9, or [R]andom song\r\n"
       63 74 20 61 
       20 73 6F 6E 
       67 20 77 69 
       74 68 20 1B 
       18 20 1B 19 
       20 1B ED 2C 
       20 30 2D 39 
       2C 20 6F 72 
       20 5B 52 5D 
       61 6E 64 6F 
       6D 20 73 6F 
       6E 67 0D 0A 
04380D 30 30 3A 30 0261*        db "00:00:00 [............................................] 00:00:00"
       30 3A 30 30 
       20 5B 2E 2E 
       2E 2E 2E 2E 
       2E 2E 2E 2E 
       2E 2E 2E 2E 
       2E 2E 2E 2E 
       2E 2E 2E 2E 
       2E 2E 2E 2E 
       2E 2E 2E 2E 
       2E 2E 2E 2E 
       2E 2E 2E 2E 
       2E 2E 2E 2E 
       2E 2E 5D 20 
       30 30 3A 30 
       30 3A 30 30 
04384D 00          0262*        db 0 ; null terminator
04384E             0263*    
04384E             0264*    ; print the navigation and song control instructions
04384E 0E 00       0265*        ld c,text_left ; x
043850 06 25       0266*        ld b,vp_playbar_top+2 ; y
043852 CD B6 1B 04 0267*        call vdu_move_cursor
043856 CD 60 00 04 0268*        call printInline
04385A 20 53 6F 6E 0269*        db " Song \e",24," \e",25," \e",237," or 0-9   | Page \e",27,"00\e",26," of 00   | [U]p directory\r\n"
       67 20 1B 18 
       20 1B 19 20 
       1B ED 20 6F 
       72 20 30 2D 
       39 20 20 20 
       7C 20 50 61 
       67 65 20 1B 
       1B 30 30 1B 
       1A 20 6F 66 
       20 30 30 20 
       20 20 7C 20 
       5B 55 5D 70 
       20 64 69 72 
       65 63 74 6F 
       72 79 0D 0A 
04389A 20 5B 52 5D 0270*        db " [R]andom song       | [S]huffle: OFF    | [L]oop: OFF\r\n"
       61 6E 64 6F 
       6D 20 73 6F 
       6E 67 20 20 
       20 20 20 20 
       20 7C 20 5B 
       53 5D 68 75 
       66 66 6C 65 
       3A 20 4F 46 
       46 20 20 20 
       20 7C 20 5B 
       4C 5D 6F 6F 
       70 3A 20 4F 
       46 46 0D 0A 
0438D2 20 5B 45 53 0271*        db " [ESC] or [Q]uit     | Seek -   1 + sec. | v0.9.5-beta\r\n"
       43 5D 20 6F 
       72 20 5B 51 
       5D 75 69 74 
       20 20 20 20 
       20 7C 20 53 
       65 65 6B 20 
       2D 20 20 20 
       31 20 2B 20 
       73 65 63 2E 
       20 7C 20 76 
       30 2E 39 2E 
       35 2D 62 65 
       74 61 0D 0A 
04390A 00          0272*        db 0 ; null terminator
04390B             0273*    
04390B             0274*    ; below the detailed instructions / status border
04390B 0E 00       0275*        ld c,text_left ; x
04390D 06 28       0276*        ld b,vp_playbar_top+5 ; y
04390F CD B6 1B 04 0277*        call vdu_move_cursor
043913 21 F9 35 04 0278*        ld hl,str_dashes_thick
043917 CD 67 00 04 0279*        call printString
04391B             0280*    
04391B             0281*    ; print the current directory path and first page of files
04391B CD 35 3E 04 0282*        call bf_print_dir_name
04391F 21 00 00 00 0283*        ld hl,0
043923 22 0A 00 07 0284*        ld (bf_page_cur),hl
043927 AF          0285*        xor a
043928 32 00 00 07 0286*        ld (bf_file_idx),a ; reset the file index
04392C CD E1 3D 04 0287*        call bf_highlight_file ; highlight the first file
043930             0288*    
043930             0289*    ; load logo and plot it
043930 CD 82 41 04 0290*        call load_ui_images
043934 21 00 20 00 0291*        ld hl,BUF_UI_LOGO
043938 CD D8 1C 04 0292*        call vdu_buff_select
04393C 01 80 01 00 0293*        ld bc,384 ; x
043940 11 14 00 00 0294*        ld de,20 ; y
043944 CD 1E 21 04 0295*        call vdu_plot_bmp
043948             0296*    
043948 C9          0297*        ret
043949             0298*    ; end ui_init
043949             0299*    
043949             0300*    agon_jukebox_ascii:
043949 20 20 20 5F 0301*        db 32,32,32,95,95,95,95,95,32,32,32,32,95,95,95,95,95,95,95,95,32,95,95,95,95,95,95,95,95,32,32,32,32,95,95,95,95,95,95,95,13,10
       5F 5F 5F 5F 
       20 20 20 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 20 
       20 5F 5F 5F 
       5F 5F 5F 5F 
       0D 0A       
043973 20 20 2F 20 0302*        db 32,32,47,32,32,95,32,32,92,32,32,47,32,32,95,95,95,95,95,47,32,92,95,95,95,95,95,32,32,92,32,32,32,92,32,32,32,32,32,32,92,13,10
       20 5F 20 20 
       5C 20 20 2F 
       20 20 5F 5F 
       5F 5F 5F 2F 
       20 5C 5F 5F 
       5F 5F 5F 20 
       20 5C 20 20 
       20 5C 20 20 
       20 20 20 20 
       5C 0D 0A    
04399E 20 2F 20 20 0303*        db 32,47,32,32,47,95,92,32,32,92,47,32,32,32,92,32,32,95,95,95,32,32,47,32,32,32,124,32,32,32,92,32,32,47,32,32,32,124,32,32,32,92,13,10
       2F 5F 5C 20 
       20 5C 2F 20 
       20 20 5C 20 
       20 5F 5F 5F 
       20 20 2F 20 
       20 20 7C 20 
       20 20 5C 20 
       20 2F 20 20 
       20 7C 20 20 
       20 5C 0D 0A 
0439CA 2F 20 20 20 0304*        db 47,32,32,32,32,124,32,32,32,32,92,32,32,32,32,92,95,92,32,32,92,47,32,32,32,32,124,32,32,32,32,92,47,32,32,32,32,124,32,32,32,32,92,13,10
       20 7C 20 20 
       20 20 5C 20 
       20 20 20 5C 
       5F 5C 20 20 
       5C 2F 20 20 
       20 20 7C 20 
       20 20 20 5C 
       2F 20 20 20 
       20 7C 20 20 
       20 20 5C 0D 
       0A          
0439F7 5C 5F 5F 5F 0305*        db 92,95,95,95,95,124,95,95,32,32,47,92,95,95,95,95,95,95,32,32,47,92,95,95,95,95,95,95,95,32,32,47,92,95,95,95,95,124,95,95,32,32,47,13,10
       5F 7C 5F 5F 
       20 20 2F 5C 
       5F 5F 5F 5F 
       5F 5F 20 20 
       2F 5C 5F 5F 
       5F 5F 5F 5F 
       5F 20 20 2F 
       5C 5F 5F 5F 
       5F 7C 5F 5F 
       20 20 2F 0D 
       0A          
043A24 20 20 20 20 0306*        db 32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,92,47,13,10
       20 20 20 20 
       5C 2F 20 20 
       20 20 20 20 
       20 20 5C 2F 
       20 20 20 20 
       20 20 20 20 
       20 5C 2F 20 
       20 20 20 20 
       20 20 20 20 
       5C 2F 0D 0A 
043A50 20 20 20 20 0307*        db 32,32,32,32,32,95,95,95,95,32,95,95,95,95,32,95,95,95,32,95,95,95,95,32,32,95,95,32,95,95,95,95,95,95,95,95,95,95,95,13,10
       20 5F 5F 5F 
       5F 20 5F 5F 
       5F 5F 20 5F 
       5F 5F 20 5F 
       5F 5F 5F 20 
       20 5F 5F 20 
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 5F 0D 
       0A          
043A79 20 20 20 20 0308*        db 32,32,32,32,124,32,32,32,32,124,32,32,32,32,124,32,32,32,92,32,32,32,32,124,47,32,95,124,92,95,32,32,32,95,95,95,95,95,47,13,10
       7C 20 20 20 
       20 7C 20 20 
       20 20 7C 20 
       20 20 5C 20 
       20 20 20 7C 
       2F 20 5F 7C 
       5C 5F 20 20 
       20 5F 5F 5F 
       5F 5F 2F 0D 
       0A          
043AA2 20 20 20 20 0309*        db 32,32,32,32,124,32,32,32,32,124,32,32,32,32,124,32,32,32,47,32,32,32,32,32,32,60,32,32,32,124,32,32,32,32,95,95,41,95,13,10
       7C 20 20 20 
       20 7C 20 20 
       20 20 7C 20 
       20 20 2F 20 
       20 20 20 20 
       20 3C 20 20 
       20 7C 20 20 
       20 20 5F 5F 
       29 5F 0D 0A 
043ACA 2F 5C 5F 5F 0310*        db 47,92,95,95,124,32,32,32,32,124,32,32,32,32,124,32,32,47,124,32,32,32,32,124,32,32,92,32,32,124,32,32,32,32,32,32,32,32,92,13,10
       7C 20 20 20 
       20 7C 20 20 
       20 20 7C 20 
       20 2F 7C 20 
       20 20 20 7C 
       20 20 5C 20 
       20 7C 20 20 
       20 20 20 20 
       20 20 5C 0D 
       0A          
043AF3 5C 5F 5F 5F 0311*        db 92,95,95,95,95,95,95,95,95,124,95,95,95,95,95,95,47,32,124,95,95,95,95,124,95,95,32,92,47,95,95,95,95,95,95,95,32,32,47,13,10
       5F 5F 5F 5F 
       5F 7C 5F 5F 
       5F 5F 5F 5F 
       2F 20 7C 5F 
       5F 5F 5F 7C 
       5F 5F 20 5C 
       2F 5F 5F 5F 
       5F 5F 5F 5F 
       20 20 2F 0D 
       0A          
043B1C 20 20 20 20 0312*        db 32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,92,47,13,10
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 20 20 
       20 20 5C 2F 
       20 20 20 20 
       20 20 20 20 
       5C 2F 0D 0A 
043B44 20 20 20 20 0313*        db 32,32,32,32,95,95,95,95,95,95,95,95,95,95,32,95,95,95,95,95,95,95,95,32,32,95,95,95,95,32,32,95,95,95,13,10
       5F 5F 5F 5F 
       5F 5F 5F 5F 
       5F 5F 20 5F 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       20 5F 5F 5F 
       5F 20 20 5F 
       5F 5F 0D 0A 
043B68 20 20 20 20 0314*        db 32,32,32,32,92,95,95,95,95,95,95,32,32,32,92,92,95,95,95,95,95,32,32,92,32,92,32,32,32,92,47,32,32,47,13,10
       5C 5F 5F 5F 
       5F 5F 5F 20 
       20 20 5C 5C 
       5F 5F 5F 5F 
       5F 20 20 5C 
       20 5C 20 20 
       20 5C 2F 20 
       20 2F 0D 0A 
043B8C 20 20 20 20 0315*        db 32,32,32,32,32,124,32,32,32,32,124,32,32,95,47,32,47,32,32,32,124,32,32,32,92,32,92,32,32,32,32,32,47,13,10
       20 7C 20 20 
       20 20 7C 20 
       20 5F 2F 20 
       2F 20 20 20 
       7C 20 20 20 
       5C 20 5C 20 
       20 20 20 20 
       2F 0D 0A    
043BAF 20 20 20 20 0316*        db 32,32,32,32,32,124,32,32,32,32,124,32,32,32,92,47,32,32,32,32,124,32,32,32,32,92,47,32,32,32,32,32,92,13,10
       20 7C 20 20 
       20 20 7C 20 
       20 20 5C 2F 
       20 20 20 20 
       7C 20 20 20 
       20 5C 2F 20 
       20 20 20 20 
       5C 0D 0A    
043BD2 20 20 20 20 0317*        db 32,32,32,32,32,124,95,95,95,95,95,95,32,32,47,92,95,95,95,95,95,95,95,32,32,47,95,95,95,47,92,32,32,92,13,10
       20 7C 5F 5F 
       5F 5F 5F 5F 
       20 20 2F 5C 
       5F 5F 5F 5F 
       5F 5F 5F 20 
       20 2F 5F 5F 
       5F 2F 5C 20 
       20 5C 0D 0A 
043BF6 20 20 20 20 0318*        db 32,32,32,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,32,32,32,92,47,32,32,32,32,32,32,92,95,47,13,10
       20 20 20 20 
       20 20 20 20 
       5C 2F 20 20 
       20 20 20 20 
       20 20 20 5C 
       2F 20 20 20 
       20 20 20 5C 
       5F 2F 0D 0A 
043C1A 00          0319*        db 0 ; list terminator
043C1B             0051         include "browse.inc"
043C1B             0001*    bf_files_per_pg: equ 10 ; number of directories / files to display per page
043C1B             0002*    
043C1B             0003*    bf_get_dir:
043C1B             0004*    ; initialize counters
043C1B 21 00 00 00 0005*        ld hl,0
043C1F 22 01 00 07 0006*        ld (bf_dir_num_files),hl
043C23             0007*    
043C23             0008*    ; initialize pointers to store directory info and print directory name
043C23 21 10 00 07 0009*        ld hl,bf_dir_path  ; where to store result
043C27 01 FF 00 00 0010*        ld bc,255          ; max length (final byte is zero terminator) [has no effect]
043C2B             0011*        FFSCALL ffs_getcwd ; MOS api get current working directory
                       M1 Args: function=ffs_getcwd 
043C2B FD E5       0001*M1  			PUSH IY
043C2D 3E 9E       0002*M1  			LD	A, function
043C2F 5B CF       0003*M1  			RST.LIL	08h
043C31 FD E1       0004*M1  			POP IY
043C33             0012*    
043C33             0013*    ; get dir info
043C33 21 00 02 07 0014*        ld hl,bf_dir_struct ; define where to store directory info
043C37 11 10 00 07 0015*        ld de,bf_dir_path   ; this is pointer to the path to the directory
043C3B AF          0016*        xor a               ; tell MOS to expect zero-terminated string
043C3C             0017*        FFSCALL ffs_dopen   ; open dir
                       M1 Args: function=ffs_dopen 
043C3C FD E5       0001*M1  			PUSH IY
043C3E 3E 91       0002*M1  			LD	A, function
043C40 5B CF       0003*M1  			RST.LIL	08h
043C42 FD E1       0004*M1  			POP IY
043C44             0018*    
043C44             0019*    ; set up pointers
043C44 DD 21 00 06 0020*        ld ix,bf_dir_fil_list ; this is the pointer to the filinfo structs
       07          
043C49 FD 21 00 03 0021*        ld iy,bf_filinfo_ptrs ; where to store pointers to filinfo structs
       07          
043C4E             0022*    
043C4E             0023*    @readFileInfo:               ; we will loop here until all files have been processed
043C4E 21 00 02 07 0024*        ld hl,bf_dir_struct      ; HL is where to get directory info
043C52 ED 12 00    0025*        lea de,ix                ; DE is where to store filinfo struct
043C55             0026*        FFSCALL ffs_dread        ; read next item from dir into filinfo struct
                       M1 Args: function=ffs_dread 
043C55 FD E5       0001*M1  			PUSH IY
043C57 3E 93       0002*M1  			LD	A, function
043C59 5B CF       0003*M1  			RST.LIL	08h
043C5B FD E1       0004*M1  			POP IY
043C5D             0027*    
043C5D DD 7E 16    0028*        ld a,(ix+filinfo_fname)  ; get first char of file name
043C60 B7          0029*        or a                     ; if zero then we are at the end of the listing
043C61 CA BC 3C 04 0030*        jp z,@allDone
043C65             0031*    
043C65 DD 7E 08    0032*        ld a,(ix+filinfo_fattrib) ; get the file attribute
043C68 CB AF       0033*        res AM_ARC,a ; clear bit 5 (archive) see: https://discord.com/channels/1158535358624039014/1158536667670511726/1328466726098309173
043C6A B7          0034*        or a ; if zero this is a file
043C6B C2 74 3C 04 0035*        jp nz,@F ; not zero so this is some other file type
043C6F CB EF       0036*        set AM_ARC,a ; set bit 5 (archive) so will be consistent btw emulator and hardware
043C71 DD 77 08    0037*        ld (ix+filinfo_fattrib),a ; update so we don't have to do this every time downstream
043C74             0038*    
043C74             0039*    @@: ; skip over writing hidden and system files
043C74 CB 4F       0040*        bit AM_HID,a ; hidden file
043C76 C2 4E 3C 04 0041*        jp nz,@readFileInfo
043C7A CB 57       0042*        bit AM_SYS,a ; system file
043C7C C2 4E 3C 04 0043*        jp nz,@readFileInfo
043C80             0044*    
043C80             0045*    ; check for valid directory
043C80 CB 67       0046*        bit AM_DIR,a ; directory
043C82 C2 9E 3C 04 0047*        jp nz,@isDir ; is directory so skip .wav file check
043C86             0048*    
043C86             0049*    ; is file so check for valid .wav format
043C86 21 00 FF 06 0050*        ld hl,bf_fil_struct ; hl = pointer to fil struct
043C8A ED 12 16    0051*        lea de,ix+filinfo_fname ; de = pointer to filename
043C8D CD 28 6B 04 0052*        call bf_verify_wav
043C91 CA 4E 3C 04 0053*        jp z,@readFileInfo ; not a .wav file, so skip it
043C95             0054*    ; set the last byte of filinfo_faltname to 1 to indicate this is a file for filename sorting
043C95 3E 31       0055*        ld a,'1'
043C97 DD 77 15    0056*        ld (ix+filinfo_fname-1),a
043C9A C3 A3 3C 04 0057*        jp @goodPath
043C9E             0058*    @isDir:
043C9E             0059*    ; set the last byte of filinfo_faltname to 0 to indicate this is a directory for filename sorting
043C9E 3E 30       0060*        ld a,'0'
043CA0 DD 77 15    0061*        ld (ix+filinfo_fname-1),a
043CA3             0062*        ; fall through to @goodPath
043CA3             0063*    @goodPath:
043CA3             0064*    ; valid file or directory
043CA3 FD 3E 00    0065*        ld (iy),ix ; store pointer to filinfo struct
043CA6 2A 01 00 07 0066*        ld hl,(bf_dir_num_files) ; get the current file counter
043CAA 23          0067*        inc hl                  ; increment the counter
043CAB 22 01 00 07 0068*        ld (bf_dir_num_files),hl
043CAF             0069*    ; bump pointers
043CAF ED 33 03    0070*        lea iy,iy+3
043CB2 11 16 01 00 0071*        ld de,filinfo_struct_size ; length of filinfo record
043CB6 DD 19       0072*        add ix,de
043CB8 C3 4E 3C 04 0073*        jp @readFileInfo         ; loop around to check next entry
043CBC             0074*    @allDone:
043CBC             0075*    ; compute page statistics
043CBC 11 0A 00 00 0076*        ld de,bf_files_per_pg    ; number of files per page
043CC0 2A 01 00 07 0077*        ld hl,(bf_dir_num_files) ; get the number of files
043CC4             0078*        SIGN_HLU ; check for zero
                       M1 Args: none
043CC4 19          0001*M1      add hl,de ; 1 cycle
043CC5 B7          0002*M1      or a ; clear flags ; 1 cycle
043CC6 ED 52       0003*M1      sbc hl,de ; 2 cycles
043CC8             0004*M1      ; 4 cycles total
043CC8 C2 D8 3C 04 0079*        jp nz,@not_zero
043CCC 11 00 00 00 0080*        ld de,0 ; number of pages, will increment by 1 later
043CD0 21 00 00 00 0081*        ld hl,0 ; number of files on last page
043CD4 C3 E9 3C 04 0082*        jp @write_stats
043CD8             0083*    @not_zero:
043CD8 CD ED 03 04 0084*        call udiv24 ; de = hl/bf_files_per_pg, hl = mod(hl,bf_files_per_pg)
043CDC             0085*        SIGN_HLU ; check remainder for zero
                       M1 Args: none
043CDC 19          0001*M1      add hl,de ; 1 cycle
043CDD B7          0002*M1      or a ; clear flags ; 1 cycle
043CDE ED 52       0003*M1      sbc hl,de ; 2 cycles
043CE0             0004*M1      ; 4 cycles total
043CE0 C2 E9 3C 04 0086*        jp nz,@write_stats
043CE4 21 0A 00 00 0087*        ld hl,bf_files_per_pg ; if zero then we have exactly bf_files_per_pg files on the last page ...
043CE8 1B          0088*        dec de ; ... and we don't need an additional page for the remainder
043CE9             0089*    @write_stats:
043CE9 22 07 00 07 0090*        ld (bf_files_last_pg),hl ; save the number of files on the last page
043CED 13          0091*        inc de ; bump the page count
043CEE ED 53 0D 00 0092*        ld (bf_dir_num_pages),de ; save the number of pages
       07          
043CF3 21 00 00 00 0093*        ld hl,0 ; reset the page number
043CF7 22 0A 00 07 0094*        ld (bf_page_cur),hl
043CFB             0095*    ; sort the filenames
043CFB FD 21 00 03 0096*        ld iy,bf_filinfo_ptrs ; get the pointer to the fileinfo pointer table
       07          
043D00 3A 01 00 07 0097*        ld a,(bf_dir_num_files) ; get the number of files
043D04 47          0098*        ld b,a ; loop counter
043D05 CD 97 6A 04 0099*        call selection_sort_asc_filinfo ; sort the filenames
043D09             0100*    ; close the directory
043D09 21 00 02 07 0101*        ld hl,bf_dir_struct      ; load H: with address of the DIR struct
043D0D             0102*        FFSCALL ffs_dclose       ; close dir
                       M1 Args: function=ffs_dclose 
043D0D FD E5       0001*M1  			PUSH IY
043D0F 3E 92       0002*M1  			LD	A, function
043D11 5B CF       0003*M1  			RST.LIL	08h
043D13 FD E1       0004*M1  			POP IY
043D15             0103*    ; fall through to bf_get_page_num_files
043D15             0104*    
043D15             0105*    bf_get_page_num_files:
043D15             0106*    ; check whether we're at last page
043D15 2A 0A 00 07 0107*        ld hl,(bf_page_cur)
043D19 ED 5B 0D 00 0108*        ld de,(bf_dir_num_pages)
       07          
043D1E 1B          0109*        dec de ; zero-based
043D1F B7          0110*        or a ; clear carry
043D20 ED 52       0111*        sbc hl,de
043D22 3E 0A       0112*        ld a,bf_files_per_pg ; a = default number of files per page
043D24 C2 2C 3D 04 0113*        jp nz,@F ; not the last page
043D28 3A 07 00 07 0114*        ld a,(bf_files_last_pg) ; get the number of files on the last page
043D2C             0115*    @@:
043D2C 32 04 00 07 0116*        ld (bf_files_cur_pg),a ; save the number of files on the page
043D30 C9          0117*        ret
043D31             0118*    ; end bf_get_page_num_files
043D31             0119*    ; end bf_get_dir
043D31             0120*    
043D31             0121*    ; print the directory listing for the current directory page
043D31             0122*    ; inputs: none
043D31             0123*    ; prerequisites: bf_get_dir must have been called to populate bf_dir_fil_list
043D31             0124*    ; destroys: everything
043D31             0125*    bf_print_dir_page:
043D31             0126*    ; set text viewport for directory listing
043D31 CD 88 36 04 0127*        call vp_dir
043D35 CD DE 1B 04 0128*        call vdu_cls
043D39             0129*    ; check for zero files in directory
043D39 2A 01 00 07 0130*        ld hl,(bf_dir_num_files)
043D3D             0131*        SIGN_HLU
                       M1 Args: none
043D3D 19          0001*M1      add hl,de ; 1 cycle
043D3E B7          0002*M1      or a ; clear flags ; 1 cycle
043D3F ED 52       0003*M1      sbc hl,de ; 2 cycles
043D41             0004*M1      ; 4 cycles total
043D41 CA 7F 3D 04 0132*        jp z,@no_files ; no files to display so update ui with page stats and return
043D45             0133*    ; set pointer to the correct index in the fileinfo pointer table
043D45 2A 0A 00 07 0134*        ld hl,(bf_page_cur) ; get the current page
043D49 11 1E 00 00 0135*        ld de,bf_files_per_pg*3 ; number of files per page * 3 bytes per pointer
043D4D CD D4 03 04 0136*        call umul24 ; hl = page * num_files_per_page
043D51 EB          0137*        ex de,hl ; can't add ix,hl ...
043D52 DD 21 00 03 0138*        ld ix,bf_filinfo_ptrs ; get the pointer to the fileinfo pointer table
       07          
043D57 DD 19       0139*        add ix,de ; ix points to the correct index in the fileinfo pointer table
043D59             0140*    ; loop through the fileinfo pointer table and print out the filenames
043D59 3A 04 00 07 0141*        ld a,(bf_files_cur_pg)
043D5D 47          0142*        ld b,a ; loop counter
043D5E AF          0143*        xor a ; song index
043D5F             0144*    @loop:
043D5F C5          0145*        push bc ; save loop counter
043D60 F5          0146*        push af ; save song index
043D61 CD E5 6B 04 0147*        call printHexA ; print the song index
043D65 DD 31 00    0148*        ld iy,(ix) ; iy points to filinfo struct
043D68 CD 1A 3E 04 0149*        call bf_print_dir_or_file
043D6C             0150*    @bump_counters:
043D6C ED 32 03    0151*        lea ix,ix+3 ; bump the filename pointer
043D6F F1          0152*        pop af ; restore song index
043D70 3C          0153*        inc a ; increment the song index
043D71 C1          0154*        pop bc ; restore loop counter
043D72 05          0155*        dec b
043D73 CA 92 3D 04 0156*        jp z,@done ; if zero, we're done
043D77 CD 7C 00 04 0157*        call printNewLine
043D7B C3 5F 3D 04 0158*        jp @loop
043D7F             0159*    @no_files:
043D7F AF          0160*        xor a ; reset the page number to zero
043D80 32 0A 00 07 0161*        ld (bf_page_cur),a
043D84 21 01 00 00 0162*        ld hl,1 ; an empty page is still a page
043D88 22 0D 00 07 0163*        ld (bf_dir_num_pages),hl
043D8C CD C7 3D 04 0164*        call bf_update_pages_ui
043D90 AF          0165*        xor a ; set zero flag indicating there were no files to display
043D91 C9          0166*        ret
043D92             0167*    @done:
043D92             0168*    ; update ui and return to caller
043D92 CD C7 3D 04 0169*        call bf_update_pages_ui
043D96 F6 01       0170*        or a,1 ; reset zero flag indicating there were files to display
043D98 C9          0171*        ret
043D99             0172*    ; end bf_print_dir_page
043D99             0173*    
043D99             0174*    ; print the entire directory (for debugging, not in-app use)
043D99             0175*    ; inputs: none
043D99             0176*    ; prerequisites: bf_get_dir must have been called to populate bf_dir_fil_list
043D99             0177*    ; destroys: everything
043D99             0178*    bf_print_dir:
043D99             0179*    ; set pointer to the correct index in the fileinfo pointer table
043D99 DD 21 00 03 0180*        ld ix,bf_filinfo_ptrs ; get the pointer to the fileinfo pointer table
       07          
043D9E             0181*    ; loop through the fileinfo pointer table and print out the filenames
043D9E 3A 01 00 07 0182*        ld a,(bf_dir_num_files)
043DA2 47          0183*        ld b,a ; loop counter
043DA3 A7          0184*        and a ; check for zero files in the directory
043DA4 C8          0185*        ret z ; nothing to see here, move along
043DA5 AF          0186*        xor a ; song index
043DA6             0187*    @loop:
043DA6 C5          0188*        push bc ; save loop counter
043DA7 F5          0189*        push af ; save song index
043DA8 CD E5 6B 04 0190*        call printHexA ; print the song index
043DAC DD 31 00    0191*        ld iy,(ix) ; iy points to filinfo struct
043DAF CD 1A 3E 04 0192*        call bf_print_dir_or_file
043DB3             0193*    @bump_counters:
043DB3 ED 32 03    0194*        lea ix,ix+3 ; bump the filename pointer
043DB6 F1          0195*        pop af ; restore song index
043DB7 3C          0196*        inc a ; increment the song index
043DB8 C1          0197*        pop bc ; restore loop counter
043DB9 05          0198*        dec b
043DBA CA C6 3D 04 0199*        jp z,@done ; if zero, we're done
043DBE CD 7C 00 04 0200*        call printNewLine
043DC2 C3 A6 3D 04 0201*        jp @loop
043DC6             0202*    @done:
043DC6 C9          0203*        ret
043DC7             0204*    ; end bf_print_dir
043DC7             0205*    
043DC7             0206*    bf_update_pages_ui:
043DC7             0207*    ; update the directory page ui widgets
043DC7 CD A2 36 04 0208*        call vp_legend_page_num
043DCB 3A 0A 00 07 0209*        ld a,(bf_page_cur)
043DCF 3C          0210*        inc a ; pages are zero-based, users are not
043DD0 CD AE 00 04 0211*        call printHex8
043DD4 CD AF 36 04 0212*        call vp_legend_num_pages
043DD8 3A 0D 00 07 0213*        ld a,(bf_dir_num_pages)
043DDC CD AE 00 04 0214*        call printHex8
043DE0 C9          0215*        ret
043DE1             0216*    ; end bf_update_pages_ui
043DE1             0217*    
043DE1             0218*    bf_highlight_file:
043DE1             0219*    ; refresh the directory listing
043DE1 CD 31 3D 04 0220*        call bf_print_dir_page
043DE5 C8          0221*        ret z ; no files to display so we're done
043DE6             0222*    ; highlight the song being played in the directory listing
043DE6 3A 00 00 07 0223*        ld a,(bf_file_idx)
043DEA 16 17       0224*        ld d,vp_dir_top
043DEC 82          0225*        add a,d
043DED 0E 00       0226*        ld c,text_left
043DEF 57          0227*        ld d,a
043DF0 1E 3F       0228*        ld e,text_right
043DF2 47          0229*        ld b,a
043DF3 CD 37 1C 04 0230*        call vdu_set_txt_viewport
043DF7 CD DE 1B 04 0231*        call vdu_cls
043DFB             0232*    ; set text colours to inverse
043DFB CD FD 36 04 0233*        call set_text_colours_inverse
043DFF             0234*    ; print the index and song filename
043DFF 3A 00 00 07 0235*        ld a,(bf_file_idx)
043E03 CD E5 6B 04 0236*        call printHexA
043E07 CD C1 3F 04 0237*        call bf_get_filinfo_from_pg_idx ; iy = pointer to the filinfo struct
043E0B CD 1A 3E 04 0238*        call bf_print_dir_or_file
043E0F             0239*    ; set text colours to normal
043E0F CD F0 36 04 0240*        call set_text_colours_normal
043E13 C9          0241*        ret
043E14             0242*    ; end bf_highlight_file
043E14             0243*    
043E14             0244*    bf_check_dir_or_file:
043E14 FD 7E 08    0245*        ld a,(iy+filinfo_fattrib)
043E17 CB 67       0246*        bit AM_DIR,a ; if not zero, is directory
043E19 C9          0247*        ret
043E1A             0248*    ; end bf_check_dir_or_file
043E1A             0249*    
043E1A             0250*    bf_print_dir_or_file:
043E1A CD 14 3E 04 0251*        call bf_check_dir_or_file
043E1E CA 2D 3E 04 0252*        jp z,@print_file ; not directory so just write filename
043E22 CD 60 00 04 0253*        call printInline
043E26 3C 44 49 52 0254*        asciz "<DIR> "
       3E 20 00    
043E2D             0255*    @print_file:
043E2D ED 23 16    0256*        lea hl,iy+filinfo_fname
043E30 CD 67 00 04 0257*        call printString ; print the filename
043E34 C9          0258*        ret
043E35             0259*    ; end bf_print_dir_or_file
043E35             0260*    
043E35             0261*    bf_print_dir_name:
043E35 CD 7B 36 04 0262*        call vp_dir_name
043E39 CD DE 1B 04 0263*        call vdu_cls
043E3D 21 10 00 07 0264*        ld hl,bf_dir_path
043E41 CD 67 00 04 0265*        call printString
043E45 C9          0266*        ret
043E46             0267*    ; end bf_print_dir_name
043E46             0052         include "input.inc"
043E46             0001*    get_input:
043E46             0002*    ; wait for the user to push a button
043E46 FB          0003*        ei ; enable interrupts
043E47             0004*        MOSCALL mos_getkey ; a = ascii code of key pressed
                       M1 Args: function=mos_getkey 
043E47 3E 00       0001*M1  			LD	A, function
043E49 5B CF       0002*M1  			RST.LIL	08h
043E4B F3          0005*        di ; disable interrupts
043E4C             0006*    
043E4C             0007*    ; RETURN TO MAIN, which re-enables interrupts and exits app
043E4C FE 1B       0008*        cp '\e' ; escape
043E4E C8          0009*        ret z
043E4F FE 71       0010*        cp 'q' ; quit
043E51 C8          0011*        ret z
043E52             0012*    
043E52             0013*    ; FILE BROWSER COMMANDS
043E52 FE 0B       0014*        cp 0x0B ; up arrow
043E54 CA F3 3E 04 0015*        jp z,bf_prev_file
043E58 FE 0A       0016*        cp 0x0A ; down arrow
043E5A CA 14 3F 04 0017*        jp z,bf_next_file
043E5E FE 15       0018*        cp 0x15 ; right arrow
043E60 CA 20 3F 04 0019*        jp z,bf_next_page
043E64 FE 08       0020*        cp 0x08 ; left arrow
043E66 CA 4C 3F 04 0021*        jp z,bf_prev_page
043E6A FE 75       0022*        cp 'u' ; go up one directory
043E6C CA 76 3F 04 0023*        jp z,bf_up_dir
043E70             0024*    
043E70             0025*    ; SONG PLAYING COMMANDS
043E70             0026*    ; set seek speed commands
043E70 FE 2D       0027*        cp '-' ; slow down
043E72 CA 99 40 04 0028*        jp z,ps_seek_slow
043E76 FE 3D       0029*        cp '=' ; speed up (means +)
043E78 CA A2 40 04 0030*        jp z,ps_seek_fast
043E7C             0031*    ; seek back / forward
043E7C FE 5B       0032*        cp '['
043E7E CA D0 40 04 0033*        jp z,ps_seek_back
043E82 FE 5D       0034*        cp ']'
043E84 CA E4 40 04 0035*        jp z,ps_seek_fwd
043E88             0036*    ; toggle play / pause
043E88 FE 70       0037*        cp 'p'
043E8A CA E3 3F 04 0038*        jp z,ps_toggle_pause
043E8E             0039*    ; toggle loop
043E8E FE 6C       0040*        cp 'l'
043E90 CA 60 40 04 0041*        jp z,ps_toggle_loop
043E94             0042*    ; toggle shuffle
043E94 FE 73       0043*        cp 's'
043E96 CA 27 40 04 0044*        jp z,ps_toggle_shuffle
043E9A             0045*    ; play random song
043E9A FE 72       0046*        cp 'r'
043E9C CA 86 69 04 0047*        jp z,ps_play_random
043EA0             0048*    ; select song or directory
043EA0 FE 0D       0049*        cp '\r' ; ENTER key
043EA2 CA A3 3F 04 0050*        jp z,bf_select_file
043EA6             0051*    ; number key selections
043EA6 FE 30       0052*        cp '0'
043EA8 DA BC 3E 04 0053*        jp c,@no_cmd ; not a song command
043EAC FE 3A       0054*        cp '9'+1
043EAE D2 BC 3E 04 0055*        jp nc,@no_cmd ; not a song command
043EB2             0056*    ; select song or directory
043EB2 D6 30       0057*        sub '0' ; a = file index
043EB4 32 00 00 07 0058*        ld (bf_file_idx),a
043EB8 C3 A3 3F 04 0059*        jp bf_select_file
043EBC             0060*    @no_cmd: ; no valid commands so loop
043EBC C3 46 3E 04 0061*        jp get_input
043EC0             0062*    @play_song:
043EC0 CD E1 3D 04 0063*        call bf_highlight_file ; highlight the selected file
043EC4 C3 63 67 04 0064*        jp play_song ; play the song
043EC8             0065*    ; end get_input
043EC8             0066*    
043EC8             0067*    get_rand_file_idx:
043EC8 3A 04 00 07 0068*        ld a,(bf_files_cur_pg)
043ECC B7          0069*        or a
043ECD C8          0070*        ret z ; no files on page
043ECE 6F          0071*        ld l,a
043ECF CD CD 05 04 0072*        call rand_8 ; a = 0-255
043ED3 67          0073*        ld h,a
043ED4 CD 09 06 04 0074*        call udiv8 ; a = mod(a,bf_files_per_pg)
043ED8 32 00 00 07 0075*        ld (bf_file_idx),a
043EDC C9          0076*        ret
043EDD             0077*    
043EDD             0078*    get_prev_file_idx:
043EDD             0079*    ; get number of files on current page
043EDD 3A 04 00 07 0080*        ld a,(bf_files_cur_pg)
043EE1 47          0081*        ld b,a
043EE2             0082*    ; decrement the file index
043EE2 3A 00 00 07 0083*        ld a,(bf_file_idx)
043EE6 3D          0084*        dec a
043EE7 B8          0085*        cp b
043EE8 DA EE 3E 04 0086*        jp c,@F ; check for wraparound
043EEC 78          0087*        ld a,b ; get the number of files this page
043EED 3D          0088*        dec a ; zero-based
043EEE             0089*    @@:
043EEE 32 00 00 07 0090*        ld (bf_file_idx),a
043EF2 C9          0091*        ret
043EF3             0092*    ; end get_prev_file_idx
043EF3             0093*    
043EF3             0094*    bf_prev_file:
043EF3 CD DD 3E 04 0095*        call get_prev_file_idx
043EF7 CD E1 3D 04 0096*        call bf_highlight_file ; highlight the file
043EFB C3 46 3E 04 0097*        jp get_input
043EFF             0098*    ; end bf_prev_file
043EFF             0099*    
043EFF             0100*    get_next_file_idx:
043EFF             0101*    ; get number of files on current page
043EFF 3A 04 00 07 0102*        ld a,(bf_files_cur_pg)
043F03 47          0103*        ld b,a
043F04             0104*    ; increment the file index
043F04 3A 00 00 07 0105*        ld a,(bf_file_idx)
043F08 3C          0106*        inc a
043F09 B8          0107*        cp b
043F0A DA 0F 3F 04 0108*        jp c,@F ; check for wraparound
043F0E AF          0109*        xor a ; wrap around to the first file
043F0F             0110*    @@:
043F0F 32 00 00 07 0111*        ld (bf_file_idx),a
043F13 C9          0112*        ret
043F14             0113*    ; end get_next_file_idx
043F14             0114*    
043F14             0115*    bf_next_file:
043F14 CD FF 3E 04 0116*        call get_next_file_idx
043F18 CD E1 3D 04 0117*        call bf_highlight_file ; highlight the file
043F1C C3 46 3E 04 0118*        jp get_input
043F20             0119*    ; end bf_next_file
043F20             0120*    
043F20             0121*    bf_next_page:
043F20             0122*    ; advance the page number
043F20 ED 5B 0A 00 0123*        ld de,(bf_page_cur) ; get the current page number
       07          
043F25 13          0124*        inc de ; increment the page number
043F26 2A 0D 00 07 0125*        ld hl,(bf_dir_num_pages) ; get the number of pages
043F2A 2B          0126*        dec hl ; zero-based
043F2B B7          0127*        or a ; clear carry
043F2C ED 52       0128*        sbc hl,de
043F2E F2 36 3F 04 0129*        jp p,@F ; not the last page
043F32 11 00 00 00 0130*        ld de,0 ; wrap around to the first page
043F36             0131*    @@:
043F36             0132*    ; print the new page
043F36 ED 53 0A 00 0133*        ld (bf_page_cur),de
       07          
043F3B AF          0134*        xor a
043F3C 32 00 00 07 0135*        ld (bf_file_idx),a ; reset the file index
043F40 CD 15 3D 04 0136*        call bf_get_page_num_files ; get the number of files on the new page and store it
043F44 CD E1 3D 04 0137*        call bf_highlight_file ; highlight the first file
043F48 C3 46 3E 04 0138*        jp get_input
043F4C             0139*    ; end bf_next_page
043F4C             0140*    
043F4C             0141*    bf_prev_page:
043F4C             0142*    ; decrement the page number
043F4C 2A 0A 00 07 0143*        ld hl,(bf_page_cur) ; get the current page number
043F50 2B          0144*        dec hl ; decrement the page number
043F51             0145*        SIGN_HLU
                       M1 Args: none
043F51 19          0001*M1      add hl,de ; 1 cycle
043F52 B7          0002*M1      or a ; clear flags ; 1 cycle
043F53 ED 52       0003*M1      sbc hl,de ; 2 cycles
043F55             0004*M1      ; 4 cycles total
043F55 F2 5E 3F 04 0146*        jp p,@F ; not time to wrap around
043F59 2A 0D 00 07 0147*        ld hl,(bf_dir_num_pages) ; get the number of pages
043F5D 2B          0148*        dec hl ; zero-based
043F5E             0149*    @@:
043F5E             0150*    ; print the new page
043F5E 22 0A 00 07 0151*        ld (bf_page_cur),hl
043F62 AF          0152*        xor a
043F63 32 00 00 07 0153*        ld (bf_file_idx),a ; reset the file index
043F67 CD 15 3D 04 0154*        call bf_get_page_num_files ; get the number of files on the new page and store it
043F6B CD E1 3D 04 0155*        call bf_highlight_file ; highlight the first file
043F6F C3 46 3E 04 0156*        jp get_input
043F73             0157*    ; end bf_prev_page
043F73             0158*    
043F73 2E 2E 00    0159*    str_up_dir: asciz ".."
043F76             0160*    ; change directory one level up
043F76             0161*    ; inputs: none
043F76             0162*    bf_up_dir:
043F76 21 73 3F 04 0163*        ld hl,str_up_dir
043F7A             0164*    ; change directory
043F7A             0165*    ; inputs: hl = pointer to directory name
043F7A             0166*    bf_change_dir:
043F7A             0167*        MOSCALL mos_cd ; change to the directory
                       M1 Args: function=mos_cd 
043F7A 3E 03       0001*M1  			LD	A, function
043F7C 5B CF       0002*M1  			RST.LIL	08h
043F7E             0168*    ; stop the PRT timer and disable interrupts
043F7E CD E8 6A 04 0169*        call ps_prt_stop ; stop the PRT timer
043F82             0170*     ; get directory listing
043F82 CD 1B 3C 04 0171*        call bf_get_dir
043F86 21 00 00 00 0172*        ld hl,0
043F8A 22 0A 00 07 0173*        ld (bf_page_cur),hl ; reset the page number
043F8E AF          0174*        xor a
043F8F 32 00 00 07 0175*        ld (bf_file_idx),a ; reset the file index
043F93 CD E1 3D 04 0176*        call bf_highlight_file ; highlight the first file
043F97 CD 35 3E 04 0177*        call bf_print_dir_name ; print the directory name
043F9B             0178*    ; restart the PRT timer
043F9B CD D3 6A 04 0179*        call ps_prt_start ; start the PRT timer
043F9F C3 46 3E 04 0180*        jp get_input ; back to main loop (will re-enable interrupts)
043FA3             0181*    ; end bf_change_dir
043FA3             0182*    ; end bf_up_dir
043FA3             0183*    
043FA3             0184*    bf_select_file:
043FA3             0185*    ; set up pointers to the fileinfo struct and filename
043FA3 CD C1 3F 04 0186*        call bf_get_filinfo_from_pg_idx ; iy = pointer to filinfo struct
043FA7 21 00 FF 06 0187*        ld hl,bf_fil_struct ; hl = pointer to fil struct
043FAB ED 13 16    0188*        lea de,iy+filinfo_fname ; de = pointer to filename
043FAE CD 28 6B 04 0189*        call bf_verify_wav
043FB2 ED 23 16    0190*        lea hl,iy+filinfo_fname ; hl = pointer to filename
043FB5 CA 7A 3F 04 0191*        jp z,bf_change_dir ; not a .wav file, so must be a directory
043FB9             0192*    ; play the .wav file
043FB9 CD E1 3D 04 0193*        call bf_highlight_file ; highlight the selected file
043FBD C3 63 67 04 0194*        jp play_song
043FC1             0195*    ; end bf_select_file
043FC1             0196*    
043FC1             0197*    ; get a pointer to a filinfo struct from a directory page index
043FC1             0198*    ; inputs: none
043FC1             0199*    ; outputs: iy = pointer to the filinfo struct
043FC1             0200*    bf_get_filinfo_from_pg_idx:
043FC1             0201*    ; get the fileinfo pointer from the fileinfo pointer table
043FC1 2A 0A 00 07 0202*        ld hl,(bf_page_cur) ; get the current page number
043FC5 11 1E 00 00 0203*        ld de,bf_files_per_pg*3 ; number of files per page * 3 bytes per pointer
043FC9 CD D4 03 04 0204*        call umul24 ; hl = page * num_files_per_page
043FCD 3A 00 00 07 0205*        ld a,(bf_file_idx) ; get the file index
043FD1 5F          0206*        ld e,a ; file index
043FD2 16 03       0207*        ld d,3 ; 3 bytes per pointer
043FD4 ED 5C       0208*        mlt de ; de = file index * 3
043FD6 19          0209*        add hl,de
043FD7 EB          0210*        ex de,hl ; can't add iy,hl ...
043FD8 FD 21 00 03 0211*        ld iy,bf_filinfo_ptrs ; get the pointer to the fileinfo pointer table
       07          
043FDD FD 19       0212*        add iy,de ; iy points to the first fileinfo pointer in the current page
043FDF FD 37 00    0213*        ld iy,(iy) ; iy points to the filinfo record
043FE2 C9          0214*        ret
043FE3             0215*    ; end bf_get_filinfo_from_pg_idx
043FE3             0216*    
043FE3             0217*    ps_toggle_pause:
043FE3 CD 3A 36 04 0218*        call vp_now_playing
043FE7 CD DE 1B 04 0219*        call vdu_cls
043FEB 21 30 67 04 0220*        ld hl,ps_mode
043FEF CB 46       0221*        bit ps_mode_playing,(hl)
043FF1 C2 0A 40 04 0222*        jp nz,@playing
043FF5 CB C6       0223*        set ps_mode_playing,(hl)
043FF7 CD 60 00 04 0224*        call printInline
043FFB 28 50 29 6C 0225*        asciz "(P)laying "
       61 79 69 6E 
       67 20 00    
044006 C3 1B 40 04 0226*        jp @print
04400A             0227*    @playing:
04400A CB 86       0228*        res ps_mode_playing,(hl)
04400C CD 60 00 04 0229*        call printInline
044010 28 50 29 61 0230*        asciz "(P)aused  "
       75 73 65 64 
       20 20 00    
04401B             0231*    @print:
04401B 21 16 01 09 0232*        ld hl,ps_filinfo_fname
04401F CD 67 00 04 0233*        call printString ; print the song filename
044023 C3 46 3E 04 0234*        jp get_input
044027             0235*    ; end ps_toggle_pause
044027             0236*    
044027             0237*    ps_toggle_shuffle:
044027 CD BC 36 04 0238*        call vp_legend_shuffle
04402B CD DE 1B 04 0239*        call vdu_cls
04402F 21 30 67 04 0240*        ld hl,ps_mode
044033 CB 56       0241*        bit ps_mode_shuffle,(hl)
044035 C2 52 40 04 0242*        jp nz,@shuffling
044039 CD FD 36 04 0243*        call set_text_colours_inverse
04403D 21 30 67 04 0244*        ld hl,ps_mode
044041 CB D6       0245*        set ps_mode_shuffle,(hl)
044043 CD 60 00 04 0246*        call printInline
044047 4F 4E 00    0247*        asciz "ON"
04404A CD F0 36 04 0248*        call set_text_colours_normal
04404E C3 46 3E 04 0249*        jp get_input
044052             0250*    @shuffling:
044052 CB 96       0251*        res ps_mode_shuffle,(hl)
044054 CD 60 00 04 0252*        call printInline
044058 4F 46 46 00 0253*        asciz "OFF"
04405C C3 46 3E 04 0254*        jp get_input
044060             0255*    ; end ps_toggle_shuffle
044060             0256*    
044060             0257*    ps_toggle_loop:
044060 CD C9 36 04 0258*        call vp_legend_loop
044064 CD DE 1B 04 0259*        call vdu_cls
044068 21 30 67 04 0260*        ld hl,ps_mode
04406C CB 4E       0261*        bit ps_mode_loop,(hl)
04406E C2 8B 40 04 0262*        jp nz,@looping
044072 CD FD 36 04 0263*        call set_text_colours_inverse
044076 21 30 67 04 0264*        ld hl,ps_mode
04407A CB CE       0265*        set ps_mode_loop,(hl)
04407C CD 60 00 04 0266*        call printInline
044080 4F 4E 00    0267*        asciz "ON"
044083 CD F0 36 04 0268*        call set_text_colours_normal
044087 C3 46 3E 04 0269*        jp get_input
04408B             0270*    @looping:
04408B CB 8E       0271*        res ps_mode_loop,(hl)
04408D CD 60 00 04 0272*        call printInline
044091 4F 46 46 00 0273*        asciz "OFF"
044095 C3 46 3E 04 0274*        jp get_input
044099             0275*    ; end ps_toggle_loop
044099             0276*    
044099             0277*    ps_seek_slow:
044099 3A 42 67 04 0278*        ld a,(ps_seek_rate_idx)
04409D 3D          0279*        dec a
04409E C3 A7 40 04 0280*        jp ps_set_seek_rate
0440A2             0281*    ; end ps_seek_slow
0440A2             0282*    
0440A2             0283*    ps_seek_fast:
0440A2 3A 42 67 04 0284*        ld a,(ps_seek_rate_idx)
0440A6 3C          0285*        inc a
0440A7             0286*    ; fall through to ps_seek_rate
0440A7             0287*    ; end ps_seek_fast
0440A7             0288*    
0440A7             0289*    ps_set_seek_rate:
0440A7 E6 07       0290*        and 7 ; mod 8
0440A9 32 42 67 04 0291*        ld (ps_seek_rate_idx),a
0440AD 21 43 67 04 0292*        ld hl,ps_seek_rate_idx+1
0440B1 11 00 00 00 0293*        ld de,0
0440B5 5F          0294*        ld e,a
0440B6 19          0295*        add hl,de
0440B7 7E          0296*        ld a,(hl)
0440B8 32 3E 67 04 0297*        ld (ps_seek_rate),a
0440BC CD D6 36 04 0298*        call vp_seek_rate
0440C0 CD DE 1B 04 0299*        call vdu_cls
0440C4 3A 3E 67 04 0300*        ld a,(ps_seek_rate)
0440C8 CD 44 01 04 0301*        call printDec8
0440CC C3 46 3E 04 0302*        jp get_input
0440D0             0303*    ; end ps_set_seek_rate
0440D0             0304*    
0440D0             0305*    ps_seek_back:
0440D0             0306*    ; stop the PRT timer and disable interrupts
0440D0 CD E8 6A 04 0307*        call ps_prt_stop ; stop the PRT timer
0440D4             0308*    ; negate seek rate
0440D4 ED 5B 3E 67 0309*        ld de,(ps_seek_rate)
       04          
0440D9 21 00 00 00 0310*        ld hl,0
0440DD B7          0311*        or a ; clear carry
0440DE ED 52       0312*        sbc hl,de ; hl -seek_rate
0440E0 C3 EC 40 04 0313*        jp ps_seek
0440E4             0314*    ; end ps_seek_back
0440E4             0315*    
0440E4             0316*    ps_seek_fwd:
0440E4             0317*    ; stop the PRT timer and disable interrupts
0440E4 CD E8 6A 04 0318*        call ps_prt_stop ; stop the PRT timer
0440E8             0319*    ; seek forward
0440E8 2A 3E 67 04 0320*        ld hl,(ps_seek_rate)
0440EC             0321*    ; fall through to ps_seek
0440EC             0322*    ; end ps_seek_fwd
0440EC             0323*    
0440EC             0324*    ps_seek:
0440EC             0325*    ; compute new playhead position and update the playbar
0440EC ED 5B 35 67 0326*        ld de,(ps_playhead)
       04          
0440F1 19          0327*        add hl,de ; hl = playhead + seek_rate
0440F2 2B          0328*        dec hl ; to offset an inc we get further down somewhere
0440F3             0329*    ; handle wraparound
0440F3 ED 5B 39 67 0330*        ld de,(ps_song_duration)
       04          
0440F8             0331*        SIGN_HLU
                       M1 Args: none
0440F8 19          0001*M1      add hl,de ; 1 cycle
0440F9 B7          0002*M1      or a ; clear flags ; 1 cycle
0440FA ED 52       0003*M1      sbc hl,de ; 2 cycles
0440FC             0004*M1      ; 4 cycles total
0440FC CA 17 41 04 0332*        jp z,@print
044100 F2 13 41 04 0333*        jp p,@mod
044104 B7          0334*        or a ; clear carry for adc because
044105 ED 5A       0335*        adc hl,de ; add doesn't set sign flag
044107 F2 17 41 04 0336*        jp p,@print
04410B CD 15 05 04 0337*        call neg_hlu
04410F C3 17 41 04 0338*        jp @print
044113             0339*    @mod:
044113 CD ED 03 04 0340*        call udiv24
044117             0341*    @print:
044117             0342*    ; save new playhead position and update the playbar
044117 22 35 67 04 0343*        ld (ps_playhead),hl
04411B CD 8E 68 04 0344*        call ps_update_playbar
04411F             0345*    ; reset the chunk counter
04411F 3E 3C       0346*        ld a,ps_chunks_per_second
044121 32 4E 67 04 0347*        ld (ps_wav_chunk_counter),a
044125             0348*    ; multiply new playhead position by sample rate
044125 DD 21 18 03 0349*        ld ix,ps_wav_header+wav_sample_rate
       09          
04412A CD 71 32 04 0350*        call fetch_int_nor
04412E DD 21 35 67 0351*        ld ix,ps_playhead
       04          
044133 CD 91 32 04 0352*        call fetch_int_alt
044137 3E 0A       0353*        ld a,fmul
044139 CD 90 23 04 0354*        call FPP ; HLH'L' = seek position from start of file in bytes less .wav header
04413D CD 75 31 04 0355*        call SWAP
044141 21 4C 00 00 0356*        ld hl,76 ; wav header size
044145 CD C2 31 04 0357*        call hlu2float
044149 3E 0B       0358*        ld a,fadd
04414B CD 90 23 04 0359*        call FPP ; HLH'L' = seek position from start of file in bytes
04414F DD 21 7E 41 0360*        ld ix,@seek_pos
       04          
044154 CD 62 32 04 0361*        call store_int_nor
044158             0362*    ; seek to new position and load the next block of data
044158 21 00 00 09 0363*        ld hl,ps_fil_struct
04415C ED 5B 7E 41 0364*        ld de,(@seek_pos) ; low 3 bytes of seek position
       04          
044161 3A 81 41 04 0365*        ld a,(@seek_pos+3) ; high byte of seek position
044165 4F          0366*        ld c,a
044166             0367*        FFSCALL ffs_flseek
                       M1 Args: function=ffs_flseek 
044166 FD E5       0001*M1  			PUSH IY
044168 3E 84       0002*M1  			LD	A, function
04416A 5B CF       0003*M1  			RST.LIL	08h
04416C FD E1       0004*M1  			POP IY
04416E             0368*    ; flip the command and sample buffers and read the first block of data at the new position
04416E CD C8 69 04 0369*        call ps_load_audio_cmd_buffers ; TODO: we should only have to do this on app init,
044172             0370*                                     ; but if we don't do it here, only one audio buffer
044172             0371*                                     ; is loaded or/and played
044172 CD E6 68 04 0372*        call ps_set_audio_buffers         ; this is crucial so that the next sound played is at new position
044176             0373*    ; restart the PRT timer
044176 CD D3 6A 04 0374*        call ps_prt_start ; start the PRT timer
04417A C3 46 3E 04 0375*        jp get_input ; will reenable interrupts
04417E 00 00 00 00 0376*    @seek_pos: dw32 0 ; temp buffer for seek position
044182             0377*    ; end ps_seek
044182             0053         include "logo.inc"
044182             0001*    ; Bitmap indices:
044182             0002*    BUF_UI_LOGO: equ 0x2000
044182             0003*    
044182             0004*    ; Import .rgba2 bitmap files and load them into VDP buffers
044182             0005*    load_ui_images:
044182             0006*    ; load a vdu buffer from local memory
044182 21 00 20 00 0007*        ld hl,BUF_UI_LOGO
044186 11 B0 41 04 0008*        ld de,F_UI_logo
04418A 01 80 25 00 0009*        ld bc,F_UI_logo_end-F_UI_logo
04418E CD 83 1D 04 0010*        call vdu_load_buffer
044192             0011*    ; now make it a bitmap
044192 21 00 20 00 0012*    	ld hl,BUF_UI_LOGO
044196 CD AF 1D 04 0013*        call vdu_consolidate_buffer
04419A 21 00 20 00 0014*    	ld hl,BUF_UI_LOGO
04419E CD D8 1C 04 0015*        call vdu_buff_select
0441A2 01 50 00 00 0016*    	ld bc,80
0441A6 11 78 00 00 0017*    	ld de,120
0441AA 3E 01       0018*    	ld a,1 ; image type 1 = rgba2222
0441AC C3 ED 1C 04 0019*    	jp vdu_bmp_create
0441B0             0020*    
0441B0             0021*    F_UI_logo:
0441B0 E0 E0 E0 E0 0022*        incbin "../images/logo.rgba2"
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       EA FF FF FF 
       FF FF FA E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FA 
       FF FF FF FF 
       FF FF FF FF 
       EA E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 E5 EA 
       E5 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 E5 EA 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       FA FF FF FF 
       FA E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E5 FF FF 
       FF FA E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 E5 FA FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FA 
       EA E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       FA FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E0 
       E0 FA FF FF 
       FF FF FF FF 
       FF FF FA EA 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 E0 FA 
       FF FF FF FF 
       FF FF EA E0 
       E0 E0 E0 E0 
       FA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF E5 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E5 E0 E0 E0 
       E0 EA FF FF 
       EA E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E5 FF FA 
       E5 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       FA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E5 E5 
       E0 E0 E0 E0 
       E0 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       FA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E0 E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E5 
       E0 E0 E0 E0 
       E0 FA E0 FF 
       FF FF FF FF 
       E0 FF E0 E0 
       E0 FF E0 E0 
       E0 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E0 E0 E0 
       EA E0 FF E0 
       FF FF E0 FF 
       E0 FF E0 FF 
       E0 FF E0 FF 
       E0 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 E5 
       E0 FF FF FF 
       E0 FF E0 FF 
       E0 FF E0 E0 
       E0 FF E0 E0 
       E0 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 FF 
       E0 FF E0 FF 
       E0 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 EA FF 
       E0 FF E0 FF 
       E0 FF E0 FF 
       E0 FF E0 E0 
       E0 E0 E0 E0 
       E0 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       E0 E0 E0 E0 
       E0 FF E0 FF 
       E0 FF FF FF 
       FF E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 FA FF FF 
       FF FF E0 FF 
       FF FF E0 FF 
       E0 FF FF E0 
       E0 E0 E0 E0 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E5 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF E0 FF E0 
       FF FF FF FF 
       E0 FF FF FF 
       FF E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       FA FF FF FF 
       E0 FF FF FF 
       E0 FF E0 E0 
       E0 FF E0 E0 
       E0 E0 E0 E0 
       E0 FF FA FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       FA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       FA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E5 EA 
       FF FF FF FF 
       FF FF FF FA 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 EA 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E0 
       E0 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 FA 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E0 
       E0 E0 E0 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E5 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E0 E0 E0 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E5 E0 E0 FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 FA 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 E5 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 E0 
       E0 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E0 E0 
       E0 E0 E0 E5 
       FA FF FF FF 
       FF E5 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FA E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 EA 
       E5 E0 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 EA FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E5 E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 E5 EA 
       EA FA EA EA 
       E5 E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 EA 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FA FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FA 
       FA E5 E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 EA 
       FF FF FF FF 
       FF FA E5 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 EA FF 
       FF FF FA E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FA FF FF 
       FF FF FF FF 
       FF FF EA E5 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FA EA E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       FA FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 EA 
       FA EA E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E5 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FA FF FF 
       FF FF E5 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E5 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 EA 
       FA FA FA FA 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E5 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E5 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E5 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E0 E0 E0 E0 
       FA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E5 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 E5 EA E5 
       E5 E5 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA EA 
       EA EA E5 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       FA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E5 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E5 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E0 E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E5 EA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF EA E0 
       E5 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E0 E0 E0 E0 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FA E0 E0 
       E0 E0 E0 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E5 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E5 E5 FA FF 
       FF FF FF FF 
       FF FF E0 E0 
       E0 E0 E0 EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FA E5 E0 
       E0 E0 E0 E5 
       FA FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E0 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 E0 E0 
       E0 EA FF FF 
       FF FF E5 E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E0 
       FA FF FF FF 
       FF EA EA E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 EA FF 
       FF FF EA E0 
       E0 E0 E0 E5 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E0 E0 
       E0 E0 E0 E5 
       FF FF EA E5 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 FF FF 
       FF FF FA E0 
       E0 E0 E0 E0 
       FA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF EA E0 E0 
       E0 E0 E0 E0 
       E5 E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 FA FF 
       FF FF FA E0 
       E0 E0 E0 E0 
       FA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       FA FF EA E0 
       E0 E0 E0 E0 
       EA FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E5 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       EA E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E0 E5 FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       E5 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF E5 
       E0 E0 FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FA 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 FA 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FA E5 
       E0 E0 E5 FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF EA 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E5 FA FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF E5 E0 
       E0 E0 E0 E5 
       FA FF FF FF 
       FF FF FA FA 
       FA FA FA FA 
       FA EA E5 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E5 E5 
       EA EA FA FF 
       FF FF FF FF 
       FF FF FF FF 
       FA E5 E0 E0 
       E0 E0 E0 E0 
       E5 E5 EA EA 
       E5 E5 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E0 
       E0 E0 E0 E5 
       EA FA FF FF 
       FF FF FA E5 
       E0 E0 E0 E0 
046730             0023*    F_UI_logo_end:
046730             0054         include "play.inc"
046730             0001*    ; stream a song from the SD card
046730             0002*    ; inputs: hl = pointer to filename
046730             0003*    ; requirements: the file must be 8-bit signed PCM mono
046730             0004*    ; uses: sound channels 0 and 1, buffers 0x3000 and 0x3001
046730             0005*    ; play_song constants
046730             0006*    
046730             0007*    ps_wav_cmd_bufferId0: equ 0x003000
046730             0008*    ps_wav_cmd_bufferId1: equ 0x003001
046730             0009*    ps_wav_data_bufferId0: equ 0x003002
046730             0010*    ps_wav_data_bufferId1: equ 0x003003
046730             0011*    
046730             0012*    
046730             0013*    ; ps_mode bits
046730             0014*    ps_mode_playing: equ 0 ; 0 = paused 1 = playing, p key toggles
046730             0015*    ps_mode_loop:    equ 1 ; 0 = no loop 1 = loop (overrides ps_mode_shuffle if on), l key toggles
046730             0016*    ps_mode_shuffle: equ 2 ; 0 = shuffle off 1 = on, s key toggles
046730             0017*    
046730             0018*    ; play_song state variables
046730             0019*    ; current active channel and bufferId's
046730 00          0020*    ps_mode: db 0 ; playback mode bitmask
046731 00          0021*    ps_channel: db 0 ; channel number
046732 00 00 00    0022*    ps_chunkpointer: dl 0 ; pointer to current chunk
046735 00 00 00 00 0023*    ps_playhead: dw32 0 ; current playhead position in seconds from the start (32-bit integer)
046739 00 00 00 00 0024*    ps_song_duration: blkb 5,0 ; duration of the current song in seconds (32-bit integer plus a padding byte)
       00          
04673E 01 00 00 00 0025*    ps_seek_rate: dw32 1 ; seek rate in seconds per keypress (32-bit integer)
046742 00          0026*    ps_seek_rate_idx: db 0 ; seek rate index
046743 01 05 0A 0F 0027*        db 1,5,10,15,30,60,120,240 ; seek rates in seconds per keypress
       1E 3C 78 F0 
04674B             0028*    
04674B             0029*    ps_chunks_per_second: equ 60 ; number of chunks to load per second
04674B 00 00 00    0030*    ps_wav_chunk_size: dl 0 ; size of audio chunks to load (sample rate / 60)
04674E 00          0031*    ps_wav_chunk_counter: db 0 ; init to audio chunks/sec, when hits zero play the loaded audio buffer
04674F 00          0032*    ps_media_type: db 0 ; 1 = .wav, 2 = .agm
046750             0033*    
046750 00 00 00 00 0034*    ps_agm_segment_hdr: blkb agm_segment_hdr_size,0
       00 00 00 00 
046758 00          0035*    ps_agm_unit_hdr: blkb agm_unit_hdr_size,0
046759 00 00 00 00 0036*    ps_agm_chunk_hdr: blkb agm_chunk_hdr_size,0
04675D             0037*    
04675D 00 00 00    0038*    ps_agm_data_bufferId: dl 0
046760 00 00 00    0039*    ps_agm_cmd_bufferId: dl 0
046763             0040*    
046763             0041*    
046763             0042*    play_song:
046763             0043*    ; stop the PRT timer and close any currently playing file
046763 CD 05 69 04 0044*        call ps_close_file ; also stops prt timer
046767             0045*    
046767             0046*    ; reset the chunk counter to chunks / second
046767 3E 3C       0047*        ld a,ps_chunks_per_second
046769 32 4E 67 04 0048*        ld (ps_wav_chunk_counter),a
04676D             0049*    
04676D             0050*    ; clear now playing viewport
04676D CD 3A 36 04 0051*        call vp_now_playing
046771 CD DE 1B 04 0052*        call vdu_cls
046775             0053*    
046775             0054*    ; open the file and verify it's a playable .wav file
046775 CD 40 6B 04 0055*        call ps_open_wav
046779 C2 AC 67 04 0056*        jp nz,@F ; valid .wav file so continue
04677D CD 60 00 04 0057*        call printInline
046781 49 6E 76 61 0058*        asciz "Invalid .wav file selected, try again."
       6C 69 64 20 
       2E 77 61 76 
       20 66 69 6C 
       65 20 73 65 
       6C 65 63 74 
       65 64 2C 20 
       74 72 79 20 
       61 67 61 69 
       6E 2E 00    
0467A8 C3 46 3E 04 0059*        jp get_input ; return to user input loop
0467AC             0060*    
0467AC             0061*    @@:
0467AC 32 4F 67 04 0062*        ld (ps_media_type),a ; save the media type
0467B0             0063*    ; copy the directory filinfo struct to ps_filinfo_struct
0467B0 ED 23 00    0064*        lea hl,iy ; ps_open_wav set iy to the directory's filinfo struct
0467B3 11 00 01 09 0065*        ld de,ps_filinfo_struct ; destination address
0467B7 01 16 01 00 0066*        ld bc,filinfo_struct_size
0467BB ED B0       0067*        ldir
0467BD             0068*    
0467BD             0069*    ; tell the user what they've won
0467BD CD 60 00 04 0070*        call printInline
0467C1 28 50 29 6C 0071*        asciz "(P)laying "
       61 79 69 6E 
       67 20 00    
0467CC 21 16 01 09 0072*        ld hl,ps_filinfo_fname
0467D0 CD 67 00 04 0073*        call printString ; print the song filename
0467D4             0074*    
0467D4             0075*    ; compute the song duration from the file size and sample rate and print it
0467D4             0076*    ; technically we should account for the .wav header, but at 76 bytes it's negligible
0467D4 CD 54 36 04 0077*        call vp_duration ; set viewport to duration window
0467D8 3A 07 03 09 0078*        ld a,(ps_wav_header+wav_file_size+3) ; upper byte
0467DC DD 2A 04 03 0079*        ld ix,(ps_wav_header+wav_file_size+0) ; lower word
       09          
0467E1 ED 5B 18 03 0080*        ld de,(ps_wav_header+wav_sample_rate)
       09          
0467E6 CD 3A 06 04 0081*        call udiv3223 ; auix = duration in seconds
0467EA DD 22 39 67 0082*        ld (ps_song_duration),ix ; duration low word
       04          
0467EF 32 3C 67 04 0083*        ld (ps_song_duration+3),a ; duration high byte
0467F3 2A 39 67 04 0084*        ld hl,(ps_song_duration) ; ls 24 bits of duration is sufficient and all we're prepared for
0467F7 CD CA 18 04 0085*        call seconds_to_hhmmss ; hl pointer to string representation of HH:MM:SS
0467FB CD 67 00 04 0086*        call printString ; print the duration
0467FF             0087*    
0467FF             0088*    ; branch on .wav or .agm
0467FF 3A 4F 67 04 0089*        ld a,(ps_media_type) ; restore filetype
046803 3D          0090*        dec a ; zero means .wav
046804 C2 F5 6F 04 0091*        jp nz,ps_play_agm ; not .wav so play .agm
046808             0092*    
046808             0093*    ; compute the chunksize
046808 2A 18 03 09 0094*        ld hl,(ps_wav_header+wav_sample_rate)
04680C 11 3C 00 00 0095*        ld de,ps_chunks_per_second
046810 CD ED 03 04 0096*        call udiv24 ; de = sample_rate / ps_chunks_per_second
046814 ED 53 4B 67 0097*        ld (ps_wav_chunk_size),de ; save the chunk size
       04          
046819             0098*    
046819             0099*    ; flip the command and sample buffers and read the first block of data
046819 CD C8 69 04 0100*        call ps_load_audio_cmd_buffers ; TODO: we should only have to do this on app init,
04681D             0101*                                     ; but if we don't do it here, only one audio buffer
04681D             0102*                                     ; is loaded or/and played
04681D             0103*    ; reset the chunk counter
04681D 3E 3C       0104*        ld a,ps_chunks_per_second
04681F 32 4E 67 04 0105*        ld (ps_wav_chunk_counter),a
046823             0106*    play_agm_return:
046823             0107*    ; reset the playbar counter to zero
046823 21 00 00 00 0108*        ld hl,0
046827 22 35 67 04 0109*        ld (ps_playhead),hl
04682B             0110*     ; this is crucial so that the next sound played is at new position
04682B CD E6 68 04 0111*        call ps_set_audio_buffers
04682F             0112*    ; set ps_mode_playing
04682F 21 30 67 04 0113*        ld hl,ps_mode
046833 CB C6       0114*        set ps_mode_playing,(hl)
046835             0115*    ; enable interrupts and start the PRT timer
046835 CD D3 6A 04 0116*        call ps_prt_start
046839             0117*    ; jump to user input loop (enables interrupts)
046839             0118*    ; the play sample interrupt will return to there
046839             0119*    ; and exit app will return to main from there as well
046839 C3 46 3E 04 0120*        jp get_input
04683D             0121*    ; end play_song
04683D             0122*    
04683D             0123*    ; this is called by the PRT timer interrupt
04683D             0124*    ps_read_media:
04683D 3A 4F 67 04 0125*        ld a,(ps_media_type)
046841 3D          0126*        dec a ; zero means .wav
046842 C2 12 70 04 0127*        jp nz,ps_read_agm ; not .wav so read .agm
046846             0128*    ; fall through to ps_read_sample
046846             0129*    
046846             0130*    ; read the next chunk of sound data from the file
046846             0131*    ; and upload it to the sample buffer
046846             0132*    ps_read_sample:
046846             0133*    ; 0x82: ffs_fread
046846             0134*    ; Read from a file (Requires MOS 1.03 or above)
046846             0135*    ; Parameters:
046846             0136*    ; HL(U): Pointer to a FIL structure
046846             0137*    ; DE(U): Pointer to a buffer to store the data in
046846             0138*    ; BC(U): Number of bytes to read (typically the size of the buffer)
046846             0139*    ; Preserves: HL(U), DE(U)
046846             0140*    ; Returns:
046846             0141*    ; BC(U): Number of bytes read
046846             0142*    ; A: FRESULT
046846 21 00 00 09 0143*        ld hl,ps_fil_struct
04684A 11 4C 03 09 0144*        ld de,ps_wav_data
04684E             0145*        ; ld bc,(ps_wav_header+wav_sample_rate)
04684E ED 4B 4B 67 0146*        ld bc,(ps_wav_chunk_size)
       04          
046853             0147*        FFSCALL ffs_fread
                       M1 Args: function=ffs_fread 
046853 FD E5       0001*M1  			PUSH IY
046855 3E 82       0002*M1  			LD	A, function
046857 5B CF       0003*M1  			RST.LIL	08h
046859 FD E1       0004*M1  			POP IY
04685B             0148*    ; test bc for zero bytes read
04685B 21 00 00 00 0149*        ld hl,0
04685F AF          0150*        xor a ; clear carry
046860 ED 42       0151*        sbc hl,bc ; hl = 0-chunksize
046862 C2 6E 68 04 0152*        jp nz,@load ; we read some data
046866             0153*    ; no data read so close file and play next song
046866 CD 05 69 04 0154*        call ps_close_file
04686A C3 16 69 04 0155*        jp ps_song_over
04686E             0156*    ; load a vdu buffer from local memory
04686E             0157*    ; inputs: hl = bufferId ; bc = length ; de = pointer to data
04686E             0158*    @load:
04686E             0159*    ; load the chunk to the current sample buffer
04686E 2A 5D 67 04 0160*        ld hl,(ps_agm_data_bufferId)
046872 11 4C 03 09 0161*        ld de,ps_wav_data ; pointer to data
046876 CD 83 1D 04 0162*        call vdu_load_buffer
04687A             0163*    ; decrement the chunk counter
04687A 3A 4E 67 04 0164*        ld a,(ps_wav_chunk_counter)
04687E 3D          0165*        dec a
04687F 32 4E 67 04 0166*        ld (ps_wav_chunk_counter),a
046883 C0          0167*        ret nz ; not zero so not time to play the buffer
046884             0168*    ; reset the chunk counter and play the buffer
046884 3E 3C       0169*        ld a,ps_chunks_per_second
046886 32 4E 67 04 0170*        ld (ps_wav_chunk_counter),a
04688A C3 D5 68 04 0171*        jp ps_play_sample
04688E             0172*    ; ; DEBUG ; MAKES THE POPPING BETWEEN SAMPLES WORSE SO THAT PROBLEM IS ELSEWHERE
04688E             0173*    ;     call ps_play_sample
04688E             0174*    ;     call ps_read_sample
04688E             0175*    ; ; END DEBUG
04688E             0176*    ; end ps_read_sample
04688E             0177*    ps_update_playbar:
04688E             0178*    ; set viewport to playbar
04688E CD 47 36 04 0179*        call vp_elapsed
046892             0180*    ; increment the playbar counter
046892 2A 35 67 04 0181*        ld hl,(ps_playhead)
046896 23          0182*        inc hl
046897 22 35 67 04 0183*        ld (ps_playhead),hl
04689B             0184*    ; convert the playbar counter to HH:MM:SS and print it
04689B CD CA 18 04 0185*        call seconds_to_hhmmss ; hl pointer to string representation of HH:MM:SS
04689F CD 67 00 04 0186*        call printString ; print the playhead position
0468A3             0187*    ; print breadcrumbs and playhead marker
0468A3 CD 61 36 04 0188*        call vp_playbar
0468A7 CD DE 1B 04 0189*        call vdu_cls
0468AB 21 00 2B 00 0190*        ld hl,[vp_playbar_right-vp_playbar_left]*256 ; leave room for cursor
0468AF ED 5B 39 67 0191*        ld de,(ps_song_duration) ; ls 24-bits is sufficient and all we're prepared for
       04          
0468B4 CD 5D 0F 04 0192*        call udiv168 ; de = breadcrumbs / second in 8.16 fixed point
0468B8 2A 35 67 04 0193*        ld hl,(ps_playhead)
0468BC CD D4 03 04 0194*        call umul24 ; uhl is the breadcrumb position
0468C0             0195*        HLU_TO_A ; a = breadcrumb position
                       M1 Args: none
0468C0 3B          0001*M1      dec sp ; 1 cycle
0468C1 E5          0002*M1      push hl ; 4 cycles
0468C2 33          0003*M1      inc sp ; 1 cycle
0468C3 F1          0004*M1      pop af ; 4 cycles
0468C4             0005*M1      ; 10 cycles total
0468C4 A7          0196*        and a
0468C5 CA D0 68 04 0197*        jp z,@done ; if zero, we're done
0468C9 47          0198*        ld b,a
0468CA             0199*    @loop:
0468CA 3E 2E       0200*        ld a,'.'
0468CC 5B D7       0201*        rst.lil 10h
0468CE 10 FA       0202*        djnz @loop
0468D0             0203*    @done:
0468D0 3E DB       0204*        ld a,219 ; cursor
0468D2 5B D7       0205*        rst.lil 10h
0468D4 C9          0206*        ret
0468D5             0207*    ; end ps_update_playbar
0468D5             0208*    
0468D5             0209*    ps_play_sample:
0468D5             0210*    ; update the playbar counter and display the time elapsed
0468D5 CD 8E 68 04 0211*        call ps_update_playbar
0468D9             0212*    ; call the command buffer to play the sound
0468D9 2A 60 67 04 0213*        ld hl,(ps_agm_cmd_bufferId)
0468DD CD 7D 1F 04 0214*        call vdu_call_buffer
0468E1             0215*    ; flip the sample and command buffers
0468E1 CD E6 68 04 0216*        call ps_set_audio_buffers
0468E5 C9          0217*        ret
0468E6             0218*    ; end ps_play_sample
0468E6             0219*    ps_set_audio_buffers:
0468E6             0220*    ; flip the command and sample buffers and clear the new sample buffer
0468E6 3A 31 67 04 0221*        ld a,(ps_channel)
0468EA 3C          0222*        inc a
0468EB E6 01       0223*        and 1
0468ED 32 31 67 04 0224*        ld (ps_channel),a
0468F1 21 00 30 00 0225*        ld hl,ps_wav_cmd_bufferId0
0468F5 6F          0226*        ld l,a
0468F6 22 60 67 04 0227*        ld (ps_agm_cmd_bufferId),hl
0468FA 2C          0228*        inc l
0468FB 2C          0229*        inc l
0468FC 22 5D 67 04 0230*        ld (ps_agm_data_bufferId),hl
046900 CD 98 1F 04 0231*        call vdu_clear_buffer
046904 C9          0232*        ret
046905             0233*    ; end ps_set_audio_buffers
046905             0234*    
046905             0235*    ; close the file
046905             0236*    ps_close_file:
046905 CD E8 6A 04 0237*        call ps_prt_stop ; stop the PRT timer
046909             0238*    ; 0x81: ffs_fclose
046909             0239*    ; Close a file (Requires MOS 1.03 or above)
046909             0240*    ; Parameters:
046909             0241*    ; HL(U): Pointer to a FIL structure
046909             0242*    ; Preserves: HL(U)
046909             0243*    ; Returns:
046909             0244*    ; A: FRESULT
046909 21 00 00 09 0245*        ld hl,ps_fil_struct
04690D             0246*        FFSCALL ffs_fclose
                       M1 Args: function=ffs_fclose 
04690D FD E5       0001*M1  			PUSH IY
04690F 3E 81       0002*M1  			LD	A, function
046911 5B CF       0003*M1  			RST.LIL	08h
046913 FD E1       0004*M1  			POP IY
046915 C9          0247*        ret
046916             0248*    ; end ps_close_file
046916             0249*    
046916             0250*    ps_song_over:
046916             0251*    ; get playback mode
046916 21 30 67 04 0252*        ld hl,ps_mode
04691A             0253*    
04691A             0254*    ; are we in loop mode?
04691A CB 4E       0255*        bit ps_mode_loop,(hl)
04691C CA 28 69 04 0256*        jp z,@F ; no so check next mode
046920 21 16 01 09 0257*        ld hl,ps_filinfo_fname ; get current song filename
046924 C3 63 67 04 0258*        jp play_song ; and play it again, Sam
046928             0259*    
046928             0260*    @@: ; are we in shuffle mode?
046928 CB 56       0261*        bit ps_mode_shuffle,(hl)
04692A C2 86 69 04 0262*        jp nz,ps_play_random ; yes so play a random song
04692E             0263*    
04692E             0264*    ; loop and shuffle are off so play next song
04692E C3 32 69 04 0265*        jp ps_play_next_song
046932             0266*    ; end ps_song_over
046932             0267*    
046932             0268*    ps_play_next_song:
046932 3A 04 00 07 0269*        ld a,(bf_files_cur_pg)
046936 B7          0270*        or a ; check for zero files
046937 CA 46 3E 04 0271*        jp z,get_input ; no files to play so return to user input loop
04693B 47          0272*        ld b,a ; loop counter
04693C             0273*    @next_file:
04693C C5          0274*        push bc ; save loop counter
04693D CD FF 3E 04 0275*        call get_next_file_idx ; (bf_file_idx)++ with wraparound
046941 CD C1 3F 04 0276*        call bf_get_filinfo_from_pg_idx ; iy points to filinfo struct
046945 CD 14 3E 04 0277*        call bf_check_dir_or_file ; if zero then it's a song
046949 C1          0278*        pop bc ; restore loop counter
04694A CA 54 69 04 0279*        jp z,@play_song ; is a file so play song
04694E 10 EC       0280*        djnz @next_file ; try the next file
046950 C3 46 3E 04 0281*        jp get_input ; no files in this directory so return to user input loop
046954             0282*    @play_song:
046954 CD E1 3D 04 0283*        call bf_highlight_file ; highlight the selected file
046958 C3 63 67 04 0284*        jp play_song
04695C             0285*    ; end ps_play_next_song
04695C             0286*    
04695C             0287*    ps_play_prev_song:
04695C 3A 04 00 07 0288*        ld a,(bf_files_cur_pg)
046960 B7          0289*        or a ; check for zero files
046961 CA 46 3E 04 0290*        jp z,get_input ; no files to play so return to user input loop
046965 47          0291*        ld b,a ; loop counter
046966             0292*    @next_file:
046966 C5          0293*        push bc ; save loop counter
046967 CD FF 3E 04 0294*        call get_next_file_idx ; (bf_file_idx)++ with wraparound
04696B CD C1 3F 04 0295*        call bf_get_filinfo_from_pg_idx ; iy points to filinfo struct
04696F CD 14 3E 04 0296*        call bf_check_dir_or_file ; if zero then it's a song
046973 C1          0297*        pop bc ; restore loop counter
046974 CA 7E 69 04 0298*        jp z,@play_song ; is a file so play song
046978 10 EC       0299*        djnz @next_file ; try the next file
04697A C3 46 3E 04 0300*        jp get_input ; no files in this directory so return to user input loop
04697E             0301*    @play_song:
04697E CD E1 3D 04 0302*        call bf_highlight_file ; highlight the selected file
046982 C3 63 67 04 0303*        jp play_song
046986             0304*    ; end ps_play_prev_song
046986             0305*    
046986             0306*    ; queue a random song on the current page to play next
046986             0307*    ps_play_random:
046986 3A 04 00 07 0308*        ld a,(bf_files_cur_pg)
04698A B7          0309*        or a ; check for zero files
04698B CA 46 3E 04 0310*        jp z,get_input ; no files to play so return to user input loop
04698F 47          0311*        ld b,a ; loop counter
046990 3A 00 00 07 0312*        ld a,(bf_file_idx) ; save current song index
046994 32 C7 69 04 0313*        ld (@file_idx),a
046998             0314*    @next_file:
046998 C5          0315*        push bc ; save loop counter
046999 CD C8 3E 04 0316*        call get_rand_file_idx ; a->(bf_file_idx)
04699D 21 C7 69 04 0317*        ld hl,@file_idx
0469A1 BE          0318*        cp (hl) ; check for same song
0469A2 CA B9 69 04 0319*        jp z,@same ; same song so try again
0469A6 CD C1 3F 04 0320*        call bf_get_filinfo_from_pg_idx ; iy points to filinfo struct
0469AA CD 14 3E 04 0321*        call bf_check_dir_or_file ; if zero then it's a song
0469AE             0322*    @bump_counter:
0469AE C1          0323*        pop bc ; restore loop counter
0469AF CA BF 69 04 0324*        jp z,@play_song ; is a file so play song
0469B3 10 E3       0325*        djnz @next_file ; try the next file
0469B5 C3 46 3E 04 0326*        jp get_input ; no files in this directory so return to user input loop
0469B9             0327*    @same:
0469B9 F6 01       0328*        or a,1 ; reset zero flag
0469BB C3 AE 69 04 0329*        jp @bump_counter
0469BF             0330*    @play_song:
0469BF CD E1 3D 04 0331*        call bf_highlight_file ; highlight the selected file
0469C3 C3 63 67 04 0332*        jp play_song
0469C7 00          0333*    @file_idx: db 0
0469C8             0334*    ; end ps_play_random
0469C8             0335*    
0469C8             0336*    ps_load_audio_cmd_buffers:
0469C8 21 00 30 00 0337*        ld hl,ps_wav_cmd_bufferId0
0469CC CD 98 1F 04 0338*        call vdu_clear_buffer
0469D0 2A 18 03 09 0339*        ld hl,(ps_wav_header+wav_sample_rate)
0469D4             0340*        ; ld hl,(ps_wav_chunk_size)
0469D4 22 24 6A 04 0341*        ld (ps_sr0),hl
0469D8 3E 17       0342*        ld a,23
0469DA 32 26 6A 04 0343*        ld (ps_sr0+2),a
0469DE 21 00 30 00 0344*        ld hl,ps_wav_cmd_bufferId0
0469E2 01 23 00 00 0345*        ld bc,ps_cmd0_end-ps_cmd0
0469E6 11 15 6A 04 0346*        ld de,ps_cmd0
0469EA CD 55 1F 04 0347*        call vdu_write_block_to_buffer
0469EE             0348*    
0469EE 21 01 30 00 0349*        ld hl,ps_wav_cmd_bufferId1
0469F2 CD 98 1F 04 0350*        call vdu_clear_buffer
0469F6 2A 18 03 09 0351*        ld hl,(ps_wav_header+wav_sample_rate)
0469FA             0352*        ; ld hl,(ps_wav_chunk_size)
0469FA 22 47 6A 04 0353*        ld (ps_sr1),hl
0469FE 3E 17       0354*        ld a,23
046A00 32 49 6A 04 0355*        ld (ps_sr1+2),a
046A04 21 01 30 00 0356*        ld hl,ps_wav_cmd_bufferId1
046A08 01 23 00 00 0357*        ld bc,ps_cmd1_end-ps_cmd1
046A0C 11 38 6A 04 0358*        ld de,ps_cmd1
046A10 CD 55 1F 04 0359*        call vdu_write_block_to_buffer
046A14 C9          0360*        ret
046A15             0361*    ps_cmd0:
046A15             0362*    ; Command 14: Consolidate blocks in a buffer
046A15             0363*    ; VDU 23, 0, &A0, bufferId; 14
046A15 17 00 A0    0364*        db 23,0,0xA0 ; vdu buffered api command header
046A18 02 30       0365*        dw ps_wav_data_bufferId0
046A1A 0E          0366*        db 14 ; consolidate blocks command
046A1B             0367*    ; vdu_buffer_to_sound command string
046A1B             0368*    ; Command 2: Buffer to sound
046A1B             0369*    ; VDU 23, 0, &85, channel (ignored), 5, 2, bufferId; format, [sampleRate;]
046A1B 17 00 85    0370*        db 23,0,0x85 ; vdu sound command header
046A1E 00          0371*        db 0x00 ; channel (ignored)
046A1F 05          0372*        db 0x05 ; buffer to sound command
046A20 02          0373*        db 0x02 ; command 2 create sample
046A21 02 30       0374*        dw ps_wav_data_bufferId0
046A23 09          0375*        db 1+8 ; 8-bit unsigned PCM mono, 8 = sample rate argument follows
046A24             0376*    ps_sr0:
046A24 00 00       0377*        dw 0x0000 ; sample rate Hz
046A26             0378*    ; vdu_play_sfx command string
046A26             0379*    ; Command 4: Set waveform
046A26             0380*    ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
046A26 17 00 85    0381*        db 23,0,$85 ; vdu sound command header
046A29 00          0382*        db 0 ; channel
046A2A 04          0383*        db 4 ; set waveform command
046A2B 08          0384*        db 8 ; waveform 8 = sample
046A2C 02 30       0385*        dw ps_wav_data_bufferId0 ; sample bufferId
046A2E             0386*    ; Command 0: Play note
046A2E             0387*    ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
046A2E 17 00 85    0388*        db 23,0,$85 ; vdu sound command header
046A31 00          0389*        db 0 ; channel
046A32 00          0390*        db 0 ; play note command
046A33 7F          0391*        db 127  ; volume 127 = max
046A34 00 00       0392*        dw 0 ; frequency (relevant only for tuneable samples)
046A36 00 00       0393*        dw 0 ; duration (ms), zero means play one time in full
046A38             0394*    ps_cmd0_end:
046A38             0395*    
046A38             0396*    ps_cmd1:
046A38             0397*    ; Command 14: Consolidate blocks in a buffer
046A38             0398*    ; VDU 23, 0, &A0, bufferId; 14
046A38 17 00 A0    0399*        db 23,0,0xA0 ; vdu buffered api command header
046A3B 03 30       0400*        dw ps_wav_data_bufferId1
046A3D 0E          0401*        db 14 ; consolidate blocks command
046A3E             0402*    ; vdu_buffer_to_sound command string
046A3E             0403*    ; Command 2: Buffer to sound
046A3E             0404*    ; VDU 23, 0, &85, channel (ignored), 5, 2, bufferId; format, [sampleRate;]
046A3E 17 00 85    0405*        db 23,0,0x85 ; vdu sound command header
046A41 00          0406*        db 0x00 ; channel (ignored)
046A42 05          0407*        db 0x05 ; buffer to sound command
046A43 02          0408*        db 0x02 ; command 2 create sample
046A44 03 30       0409*        dw ps_wav_data_bufferId1
046A46 09          0410*        db 1+8 ; 8-bit unsigned PCM mono, 8 = sample rate argument follows
046A47             0411*    ps_sr1:
046A47 00 00       0412*        dw 0x0000 ; sample rate Hz
046A49             0413*    ; vdu_play_sfx command string
046A49             0414*    ; Command 4: Set waveform
046A49             0415*    ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
046A49 17 00 85    0416*        db 23,0,$85 ; vdu sound command header
046A4C 01          0417*        db 1 ; channel
046A4D 04          0418*        db 4 ; set waveform command
046A4E 08          0419*        db 8 ; waveform 8 = sample
046A4F 03 30       0420*        dw ps_wav_data_bufferId1 ; sample bufferId
046A51             0421*    ; Command 0: Play note
046A51             0422*    ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
046A51 17 00 85    0423*        db 23,0,$85 ; vdu sound command header
046A54 01          0424*        db 1 ; channel
046A55 00          0425*        db 0 ; play note command
046A56 7F          0426*        db 127  ; volume 127 = max
046A57 00 00       0427*        dw 0 ; frequency (relevant only for tuneable samples)
046A59 00 00       0428*        dw 0 ; duration (ms), zero means play one time in full
046A5B             0429*    ps_cmd1_end:
046A5B             0430*    ; end ps_load_audio_cmd_buffers
046A5B             0055         include "sort.inc"
046A5B             0001*    ; Determines the ascending lexical order of two zero-terminated strings
046A5B             0002*    ; Inputs: HL, DE = pointers to strings
046A5B             0003*    ; Returns:
046A5B             0004*    ;   - HL points to the lexically smaller string, DE to the larger (swapped if HL > DE).
046A5B             0005*    ; Flags:
046A5B             0006*    ;   - Z set,   C reset: Strings are equal.
046A5B             0007*    ;   - Z reset, C reset: DE is lexically larger than HL.
046A5B             0008*    ;   - Z reset, C set: DE is lexically smaller than HL.
046A5B             0009*    ; Destroys: A
046A5B             0010*    ; Notes:
046A5B             0011*    ;   - Comparisons are based on ASCII values: punctuation/numbers < uppercase < lowercase.
046A5B             0012*    alpha_asc:
046A5B E5          0013*        push hl
046A5C D5          0014*        push de
046A5D             0015*    @loop:
046A5D 1A          0016*        ld a,(de)
046A5E BE          0017*        cp a,(hl)
046A5F 20 05       0018*        jr nz,@done
046A61 13          0019*        inc de
046A62 23          0020*        inc hl
046A63 B7          0021*        or a,a
046A64 20 F7       0022*        jr nz,@loop
046A66             0023*    @done:
046A66 D1          0024*        pop de
046A67 E1          0025*        pop hl
046A68 D0          0026*        ret nc
046A69 EB          0027*        ex de,hl
046A6A C9          0028*        ret
046A6B             0029*    ; end alpha_asc
046A6B             0030*    
046A6B             0031*    ; Sorts a list of pointers to zero-terminated strings in ascending lexical order
046A6B             0032*    ; using the selection sort algorithm, which is in-place and stable.
046A6B             0033*    ; Inputs:
046A6B             0034*    ;   - IY: Pointer to the list of string pointers.
046A6B             0035*    ;   - B: Number of items in the list (max 255).
046A6B             0036*    ; Outputs:
046A6B             0037*    ;   - Sorted list of pointers in ascending lexical order.
046A6B             0038*    ; Destroys:
046A6B             0039*    ;   - A, BC, DE, HL, IX.
046A6B             0040*    ; Notes:
046A6B             0041*    ;   - Strings are compared using an unsigned comparison (ASCII-based).
046A6B             0042*    ;   - The algorithm assumes all strings are properly null-terminated.
046A6B             0043*    ;   - The sorting is performed in-place by swapping pointers in the list.
046A6B             0044*    selection_sort_asc:
046A6B A0          0045*        and a,b                  ; Check if B is zero
046A6C C8          0046*        ret z                    ; No need to sort an empty list
046A6D 05          0047*        dec b                    ; We only need to do n-1 loops
046A6E C8          0048*        ret z                    ; No need to sort a single item
046A6F FD E5       0049*        push iy                  ; Save pointer to the list of pointers
046A71             0050*    @outer_loop:
046A71 ED 54 03    0051*        lea ix,iy+3              ; IX = pointer to the next string in the list
046A74 C5          0052*        push bc                  ; Save the outer loop counter
046A75             0053*    @inner_loop:
046A75 C5          0054*        push bc                  ; Save the inner loop counter
046A76 FD 27 00    0055*        ld hl,(iy)               ; HL = address of the current string
046A79 DD 17 00    0056*        ld de,(ix)               ; DE = address of the next string to compare
046A7C CD 5B 6A 04 0057*        call alpha_asc           ; Compare (HL) and (DE)
046A80 30 06       0058*        jr nc,@skip_swap         ; If (HL) <= (DE), skip swapping the strings
046A82 FD 2F 00    0059*        ld (iy),hl               ; alpha_asc already did the swap ...
046A85 DD 1F 00    0060*        ld (ix),de               ; ... so we just load as is
046A88             0061*    @skip_swap:
046A88 ED 32 03    0062*        lea ix,ix+3              ; Move to the next pointer
046A8B C1          0063*        pop bc                   ; Restore the inner loop counter
046A8C 10 E7       0064*        djnz @inner_loop         ; Continue the inner loop
046A8E ED 33 03    0065*        lea iy,iy+3              ; Move to the next pointer in the list
046A91 C1          0066*        pop bc                   ; Restore the outer loop counter
046A92 10 DD       0067*        djnz @outer_loop         ; Continue the outer loop
046A94 FD E1       0068*        pop iy                   ; Restore pointer to the list of pointers
046A96 C9          0069*        ret
046A97             0070*    ; end selection_sort_asc
046A97             0071*    
046A97             0072*    ; same as selection_sort_asc, but for sorting fileinfo structs by filename
046A97             0073*    selection_sort_asc_filinfo:
046A97 A0          0074*        and a,b                  ; Check if B is zero
046A98 C8          0075*        ret z                    ; No need to sort an empty list
046A99 05          0076*        dec b                    ; We only need to do n-1 loops
046A9A C8          0077*        ret z                    ; No need to sort a single item
046A9B FD E5       0078*        push iy                  ; Save pointer to the list of pointers
046A9D             0079*    @outer_loop:
046A9D ED 54 03    0080*        lea ix,iy+3              ; IX = pointer to the next string in the list
046AA0 C5          0081*        push bc                  ; Save the outer loop counter
046AA1             0082*    @inner_loop:
046AA1 C5          0083*        push bc                  ; Save the inner loop counter
046AA2 FD 27 00    0084*        ld hl,(iy)               ; HL = address of the current string
046AA5 11 15 00 00 0085*        ld de,filinfo_fname-1      ; offset to the filename in the FILINFO struct
046AA9 19          0086*        add hl,de                ; HL = address of the filename
046AAA E5          0087*        push hl                  ; Save the address of the filename
046AAB DD 27 00    0088*        ld hl,(ix)               ; HL = address of the next string to compare
046AAE 19          0089*        add hl,de                ; HL = address of the filename (DE already has the offset)
046AAF EB          0090*        ex de,hl                 ; DE = address of the filename
046AB0 E1          0091*        pop hl                   ; HL = address of the current filename
046AB1 CD 5B 6A 04 0092*        call alpha_asc           ; Compare (HL) and (DE)
046AB5 30 0D       0093*        jr nc,@skip_swap         ; If (HL) <= (DE), skip swapping the strings
046AB7 01 EB FF FF 0094*        ld bc,-filinfo_fname+1     ; -offset to the filename in the FILINFO struct
046ABB 09          0095*        add hl,bc                ; HL = address of the FILINFO struct
046ABC FD 2F 00    0096*        ld (iy),hl
046ABF EB          0097*        ex de,hl                 ; HL = address of the filename
046AC0 09          0098*        add hl,bc                ; HL = address of the FILINFO struct
046AC1 DD 2F 00    0099*        ld (ix),hl
046AC4             0100*    @skip_swap:
046AC4 ED 32 03    0101*        lea ix,ix+3              ; Move to the next pointer
046AC7 C1          0102*        pop bc                   ; Restore the inner loop counter
046AC8 10 D7       0103*        djnz @inner_loop         ; Continue the inner loop
046ACA ED 33 03    0104*        lea iy,iy+3              ; Move to the next pointer in the list
046ACD C1          0105*        pop bc                   ; Restore the outer loop counter
046ACE 10 CD       0106*        djnz @outer_loop         ; Continue the outer loop
046AD0 FD E1       0107*        pop iy                   ; Restore pointer to the list of pointers
046AD2 C9          0108*        ret
046AD3             0109*    ; end selection_sort_asc_filinfo
046AD3             0056         include "timer_jukebox.inc"
046AD3             0001*    ; 72000 = 1 tick per second at 18.432 MHz with a 256 clock divider
046AD3             0002*    ; but since max is 65536, intervals > 65536/72000 = 0.91 seconds require an additional counter
046AD3             0003*    ps_prt_reload: equ 72000/ps_chunks_per_second
046AD3             0004*    
046AD3             0005*    ; start PRT timer
046AD3             0006*    ps_prt_start:
046AD3 21 B0 04 00 0007*        ld hl,ps_prt_reload
046AD7 ED 29 84    0008*        out0 (TMR1_CTL+TMR_RES_LOW),l
046ADA ED 21 85    0009*    	out0 (TMR1_CTL+TMR_RES_HIGH),h
046ADD             0010*    ; disable timer (in effect, reset it)
046ADD 3E 0E       0011*        ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_256 | RST_EN_1 | PRT_EN_0
046ADF ED 39 83    0012*    	out0 (TMR1_CTL+TMR_REG_CTL),a
046AE2             0013*    ; enable timer,with interrupt and CONTINUOUS mode,clock divider 256
046AE2 3E 5F       0014*        ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_256 | RST_EN_1 | PRT_EN_1
046AE4 ED 39 83    0015*    	out0 (TMR1_CTL+TMR_REG_CTL),a
046AE7 C9          0016*        ret
046AE8             0017*    
046AE8             0018*    ; stop PRT timer
046AE8             0019*    ps_prt_stop:
046AE8 3E 0E       0020*        ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_256 | RST_EN_1 | PRT_EN_0
046AEA ED 39 83    0021*    	out0 (TMR1_CTL+TMR_REG_CTL),a
046AED C9          0022*        ret
046AEE             0023*    
046AEE             0024*    ; ===============================================
046AEE             0025*    ; PRT Timer Interrupt Handling
046AEE             0026*    ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
046AEE             0027*    ; -----------------------------------------------
046AEE             0028*    ps_prt_irq_init:
046AEE             0029*        ; set up interrupt vector table 2
046AEE 21 00 00 00 0030*    	ld hl,0
046AF2 3A 0C 01 00 0031*    	ld a,($10c)
046AF6 6F          0032*    	ld l,a
046AF7 3A 0D 01 00 0033*    	ld a,($10d)
046AFB 67          0034*    	ld h,a
046AFC             0035*    
046AFC             0036*    	; skip over CALL ($c3)
046AFC 23          0037*    	inc hl
046AFD             0038*    	; load address of jump into vector table 2 (in ram)
046AFD ED 27       0039*    	ld hl,(hl)
046AFF             0040*    
046AFF             0041*    	; write CALL ps_prt_irq_handler to vector table 2
046AFF 3E C3       0042*    	ld a,$c3
046B01 77          0043*    	ld (hl),a
046B02 23          0044*    	inc hl
046B03 11 0A 6B 04 0045*    	ld de,ps_prt_irq_handler
046B07 ED 1F       0046*    	ld (hl),de
046B09             0047*    
046B09 C9          0048*        ret
046B0A             0049*    ; end ps_prt_irq_init
046B0A             0050*    
046B0A             0051*    ; interrupt routine for playing the next sample
046B0A             0052*    ps_prt_irq_handler:
046B0A F3          0053*        di
046B0B 08          0054*        ex af,af'
046B0C D9          0055*        exx
046B0D             0056*    ; clear sysvar_keyascii
046B0D             0057*    	MOSCALL mos_sysvars
                       M1 Args: function=mos_sysvars 
046B0D 3E 08       0001*M1  			LD	A, function
046B0F 5B CF       0002*M1  			RST.LIL	08h
046B11 AF          0058*    	xor a
046B12 DD 77 05    0059*    	ld (IX+sysvar_keyascii),a
046B15             0060*    ; read the timer interrupt and call the handler
046B15 ED 38 83    0061*        in0 a,(TMR1_CTL+TMR_REG_CTL)
046B18 21 30 67 04 0062*        ld hl,ps_mode
046B1C CB 46       0063*        bit ps_mode_playing,(hl)
046B1E C4 3D 68 04 0064*        call nz,ps_read_media
046B22             0065*    @@:
046B22 D9          0066*        exx
046B23 08          0067*        ex af,af'
046B24 FB          0068*        ei
046B25 5B ED 4D    0069*        reti.l
046B28             0070*    ; end ps_prt_irq_handler
046B28             0057         include "wav.inc"
046B28             0001*    bf_verify_wav:
046B28 FD E5       0002*        push iy ; callers want iy back unmolested
046B2A FD 21 00 1C 0003*        ld iy,bf_wav_header
       08          
046B2F CD 67 6B 04 0004*        call verify_wav
046B33 F5          0005*        push af ; save zero flag and a
046B34             0006*        FFSCALL ffs_fclose ; close the file
                       M1 Args: function=ffs_fclose 
046B34 FD E5       0001*M1  			PUSH IY
046B36 3E 81       0002*M1  			LD	A, function
046B38 5B CF       0003*M1  			RST.LIL	08h
046B3A FD E1       0004*M1  			POP IY
046B3C F1          0007*        pop af ; restore zero flag and a for return
046B3D FD E1       0008*        pop iy ; send her home how she came in
046B3F C9          0009*        ret
046B40             0010*    ; end bf_verify_wav
046B40             0011*    
046B40             0012*    ps_open_wav:
046B40             0013*    ; get filinfo and fil struct pointers to currently selected file
046B40 CD C1 3F 04 0014*        call bf_get_filinfo_from_pg_idx ; iy = pointer to filinfo struct
046B44 ED 13 16    0015*        lea de,iy+filinfo_fname ; de = pointer to filename
046B47 21 00 00 09 0016*        ld hl,ps_fil_struct
046B4B             0017*    
046B4B             0018*    ; verify valid .wav or .agm file
046B4B FD E5       0019*        push iy
046B4D FD 21 00 03 0020*        ld iy,ps_wav_header
       09          
046B52 CD 67 6B 04 0021*        call verify_wav
046B56 C2 64 6B 04 0022*        jp nz,@done ; is good file so return without closing
046B5A             0023*    
046B5A             0024*    ; not a good file so close it and return failure
046B5A F5          0025*        push af ; save zero flag and a
046B5B             0026*        FFSCALL ffs_fclose ; close the file
                       M1 Args: function=ffs_fclose 
046B5B FD E5       0001*M1  			PUSH IY
046B5D 3E 81       0002*M1  			LD	A, function
046B5F 5B CF       0003*M1  			RST.LIL	08h
046B61 FD E1       0004*M1  			POP IY
046B63 F1          0027*        pop af ; restore zero flag and a for return
046B64             0028*    @done:
046B64 FD E1       0029*        pop iy
046B66 C9          0030*        ret
046B67             0031*    ; end ps_open_wav
046B67             0032*    
046B67             0033*    ; verify that a file is a .wav or .agm file
046B67             0034*    ; inputs: hl = pointer to fil struct, de = pointer to filename
046B67             0035*    ; returns: a = 0 and zero flag set if not a file we can read
046B67             0036*    ;          zero flag reset and a = 1 if .wav file, a = 2 if .agm file
046B67             0037*    ; destroys: af
046B67             0038*    verify_wav:
046B67             0039*    ; back up registers
046B67 C5          0040*        push bc
046B68 DD E5       0041*        push ix
046B6A             0042*    
046B6A             0043*    ; we need the input registers for checking .agm files
046B6A E5          0044*        push hl
046B6B D5          0045*        push de
046B6C             0046*    
046B6C             0047*    ; clear the .wav header buffer
046B6C E5          0048*        push hl
046B6D D5          0049*        push de
046B6E 01 4C 00 00 0050*        ld bc,wav_header_size
046B72 ED 23 00    0051*        lea hl,iy+0 ; bf or ps wav_header
046B75 CD CC 03 04 0052*        call clear_mem
046B79 D1          0053*        pop de
046B7A E1          0054*        pop hl
046B7B             0055*    
046B7B             0056*    ; open the file
046B7B 0E 01       0057*        ld c,fa_read
046B7D             0058*        FFSCALL ffs_fopen
                       M1 Args: function=ffs_fopen 
046B7D FD E5       0001*M1  			PUSH IY
046B7F 3E 80       0002*M1  			LD	A, function
046B81 5B CF       0003*M1  			RST.LIL	08h
046B83 FD E1       0004*M1  			POP IY
046B85             0059*    
046B85             0060*    ; read the header
046B85 01 4C 00 00 0061*        ld bc,wav_header_size
046B89 ED 13 00    0062*        lea de,iy+0 ; bf or ps wav_header
046B8C             0063*        FFSCALL ffs_fread
                       M1 Args: function=ffs_fread 
046B8C FD E5       0001*M1  			PUSH IY
046B8E 3E 82       0002*M1  			LD	A, function
046B90 5B CF       0003*M1  			RST.LIL	08h
046B92 FD E1       0004*M1  			POP IY
046B94             0064*    
046B94             0065*    ; verify the .wav header
046B94             0066*    
046B94 FD 27 00    0067*        ld hl,(iy+wav_riff)
046B97 11 52 49 46 0068*        ld de,0x464952  ; ascii for "RIF" in little-endian order
046B9B B7          0069*        or a ; clear carry
046B9C ED 52       0070*        sbc hl,de
046B9E 20 42       0071*        jr nz,@not_wav
046BA0             0072*    
046BA0 FD 27 08    0073*        ld hl,(iy+wav_wave)
046BA3 11 57 41 56 0074*        ld de,0x564157  ; ascii for "WAV" in little-endian order
046BA7 B7          0075*        or a ; clear carry
046BA8 ED 52       0076*        sbc hl,de
046BAA 20 36       0077*        jr nz,@not_wav
046BAC             0078*    
046BAC FD 27 14    0079*        ld hl,(iy+wav_audio_format)
046BAF 11 01 00 01 0080*        ld de,0x010001  ; PCM format, 1-channel
046BB3 B7          0081*        or a ; clear carry
046BB4 ED 52       0082*        sbc hl,de
046BB6 20 2A       0083*        jr nz,@not_wav
046BB8             0084*    
046BB8 FD 27 0C    0085*        ld hl,(iy+wav_fmt_marker)
046BBB 11 66 6D 74 0086*        ld de,0x746D66  ; ascii for "fmt" in little-endian order
046BBF B7          0087*        or a ; clear carry
046BC0 ED 52       0088*        sbc hl,de
046BC2 28 1A       0089*        jr z,@is_wav ; valid .wav file
046BC4             0090*    
046BC4             0091*        ; otherwise valid .wav header, so now check for valid .agm header
046BC4 FD 27 0C    0092*        ld hl,(iy+wav_fmt_marker)
046BC7 11 61 67 6D 0093*        ld de,0x6D6761 ; ascii for "agm" in little-endian order
046BCB B7          0094*        or a ; clear carry
046BCC ED 52       0095*        sbc hl,de
046BCE 20 12       0096*        jr nz,@not_wav ; not valid .wav or .agm
046BD0             0097*    
046BD0             0098*        ; so far has valid .wav header, now check for valid .agm header
046BD0 D1          0099*        pop de ; restore pointer to filename
046BD1 E1          0100*        pop hl ; restore pointer to fil struct
046BD2 E5          0101*        push hl ; and back them up
046BD3 D5          0102*        push de ; again to balance stack
046BD4 CD 00 35 04 0103*        call verify_agm ; a = 2, zero flag reset if .agm, otherwise zero flag set and a = 0
046BD8             0104*        ; fall through to @done
046BD8             0105*    @done:
046BD8             0106*    ; restore registers and return
046BD8 D1          0107*        pop de
046BD9 E1          0108*        pop hl
046BDA DD E1       0109*        pop ix
046BDC C1          0110*        pop bc
046BDD C9          0111*        ret
046BDE             0112*    @is_wav:
046BDE AF          0113*        xor a
046BDF 3C          0114*        inc a ; reset zero flag and a = 1 indicating .wav file
046BE0 18 F6       0115*        jr @done
046BE2             0116*    @not_wav:
046BE2 AF          0117*        xor a ; set zero flag and a = 0 indicating unreadable file
046BE3 18 F3       0118*        jr @done
046BE5             0119*    ; end verify_wav
046BE5             0058         include "debug.inc"
046BE5             0001*    printHexA:
046BE5 F5          0002*        push af
046BE6 C5          0003*        push bc
046BE7 CD AE 00 04 0004*        call printHex8
046BEB 3E 20       0005*        ld a,' '
046BED 5B D7       0006*        rst.lil 10h
046BEF C1          0007*        pop bc
046BF0 F1          0008*        pop af
046BF1 C9          0009*        ret
046BF2             0010*    
046BF2             0011*    printHexHL:
046BF2 F5          0012*        push af
046BF3 C5          0013*        push bc
046BF4 CD A8 00 04 0014*        call printHex16
046BF8 3E 20       0015*        ld a,' '
046BFA 5B D7       0016*        rst.lil 10h
046BFC C1          0017*        pop bc
046BFD F1          0018*        pop af
046BFE C9          0019*        ret
046BFF             0020*    
046BFF             0021*    printHexUHL:
046BFF F5          0022*        push af
046C00 C5          0023*        push bc
046C01 CD A0 00 04 0024*        call printHex24
046C05 3E 20       0025*        ld a,' '
046C07 5B D7       0026*        rst.lil 10h
046C09 C1          0027*        pop bc
046C0A F1          0028*        pop af
046C0B C9          0029*        ret
046C0C             0030*    
046C0C             0031*    printHexAUHL:
046C0C F5          0032*        push af
046C0D C5          0033*        push bc
046C0E CD AE 00 04 0034*        call printHex8
046C12 3E 2E       0035*        ld a,'.'
046C14 5B D7       0036*        rst.lil 10h
046C16 CD A0 00 04 0037*        call printHex24
046C1A 3E 20       0038*        ld a,' '
046C1C 5B D7       0039*        rst.lil 10h
046C1E C1          0040*        pop bc
046C1F F1          0041*        pop af
046C20 C9          0042*        ret
046C21             0043*    
046C21             0044*    printHexABHL:
046C21             0045*    ; preserve registers
046C21 C5          0046*        push bc ; b will be ok c will not
046C22 F5          0047*        push af ; will get totally destroyed
046C23             0048*    ; print a
046C23 CD AE 00 04 0049*        call printHex8
046C27             0050*    ; print b
046C27 78          0051*        ld a,b
046C28 CD AE 00 04 0052*        call printHex8
046C2C             0053*    ; print hl
046C2C CD A8 00 04 0054*        call printHex16
046C30             0055*    ; restore registers
046C30 F1          0056*        pop af
046C31 C1          0057*        pop bc
046C32 C9          0058*        ret
046C33             0059*    
046C33             0060*    printHexBHL:
046C33             0061*    ; preserve registers
046C33 C5          0062*        push bc ; b will be ok c will not
046C34 F5          0063*        push af ; will get totally destroyed
046C35             0064*    ; print b
046C35 78          0065*        ld a,b
046C36 CD AE 00 04 0066*        call printHex8
046C3A             0067*    ; print hl
046C3A CD A8 00 04 0068*        call printHex16
046C3E             0069*    ; restore registers
046C3E F1          0070*        pop af
046C3F C1          0071*        pop bc
046C40 C9          0072*        ret
046C41             0073*    
046C41             0074*    printHexCDE:
046C41             0075*    ; preserve registers
046C41 C5          0076*        push bc ; b will be ok c will not
046C42 F5          0077*        push af ; will get totally destroyed
046C43             0078*    ; print c
046C43 79          0079*        ld a,c
046C44 CD AE 00 04 0080*        call printHex8
046C48             0081*    ; print de
046C48 EB          0082*        ex de,hl
046C49 CD A8 00 04 0083*        call printHex16
046C4D EB          0084*        ex de,hl
046C4E             0085*    ; restore registers
046C4E F1          0086*        pop af
046C4F C1          0087*        pop bc
046C50 C9          0088*        ret
046C51             0089*    
046C51             0090*    printHexUIX:
046C51             0091*    ; store everything in scratch
046C51 22 A2 03 04 0092*        ld (uhl),hl
046C55 ED 43 A5 03 0093*        ld (ubc),bc
       04          
046C5A ED 53 A8 03 0094*        ld (ude),de
       04          
046C5F DD 22 AB 03 0095*        ld (uix),ix
       04          
046C64 FD 22 AE 03 0096*        ld (uiy),iy
       04          
046C69 F5          0097*        push af ; fml
046C6A             0098*    
046C6A 21 39 03 04 0099*        ld hl,str_ixu
046C6E CD 67 00 04 0100*        call printString
046C72 2A AB 03 04 0101*        ld hl,(uix)
046C76 CD A0 00 04 0102*        call printHex24
046C7A CD 7C 00 04 0103*        call printNewLine
046C7E             0104*    
046C7E             0105*    ; restore everything
046C7E 2A A2 03 04 0106*        ld hl, (uhl)
046C82 ED 4B A5 03 0107*        ld bc, (ubc)
       04          
046C87 ED 5B A8 03 0108*        ld de, (ude)
       04          
046C8C DD 2A AB 03 0109*        ld ix, (uix)
       04          
046C91 FD 2A AE 03 0110*        ld iy, (uiy)
       04          
046C96 F1          0111*        pop af
046C97             0112*    ; all done
046C97 C9          0113*        ret
046C98             0114*    
046C98             0115*    
046C98             0116*    ; print registers to screen in hexidecimal format
046C98             0117*    ; inputs: none
046C98             0118*    ; outputs: values of every register printed to screen
046C98             0119*    ;    values of each register in global scratch memory
046C98             0120*    ; destroys: nothing
046C98             0121*    stepRegistersHex:
046C98             0122*    ; store everything in scratch
046C98 22 A2 03 04 0123*        ld (uhl),hl
046C9C ED 43 A5 03 0124*        ld (ubc),bc
       04          
046CA1 ED 53 A8 03 0125*        ld (ude),de
       04          
046CA6 DD 22 AB 03 0126*        ld (uix),ix
       04          
046CAB FD 22 AE 03 0127*        ld (uiy),iy
       04          
046CB0 F5          0128*        push af ; fml
046CB1 E1          0129*        pop hl ; thanks, zilog
046CB2 22 9F 03 04 0130*        ld (uaf),hl
046CB6 F5          0131*        push af ; dammit
046CB7             0132*    
046CB7             0133*    ; home the cursor
046CB7             0134*        ; call vdu_home_cursor
046CB7             0135*    
046CB7             0136*    ; print each register
046CB7 21 25 03 04 0137*        ld hl,str_afu
046CBB CD 67 00 04 0138*        call printString
046CBF 2A 9F 03 04 0139*        ld hl,(uaf)
046CC3 CD A0 00 04 0140*        call printHex24
046CC7 CD 7C 00 04 0141*        call printNewLine
046CCB             0142*    
046CCB 21 2A 03 04 0143*        ld hl,str_hlu
046CCF CD 67 00 04 0144*        call printString
046CD3 2A A2 03 04 0145*        ld hl,(uhl)
046CD7 CD A0 00 04 0146*        call printHex24
046CDB CD 7C 00 04 0147*        call printNewLine
046CDF             0148*    
046CDF 21 2F 03 04 0149*        ld hl,str_bcu
046CE3 CD 67 00 04 0150*        call printString
046CE7 2A A5 03 04 0151*        ld hl,(ubc)
046CEB CD A0 00 04 0152*        call printHex24
046CEF CD 7C 00 04 0153*        call printNewLine
046CF3             0154*    
046CF3 21 34 03 04 0155*        ld hl,str_deu
046CF7 CD 67 00 04 0156*        call printString
046CFB 2A A8 03 04 0157*        ld hl,(ude)
046CFF CD A0 00 04 0158*        call printHex24
046D03 CD 7C 00 04 0159*        call printNewLine
046D07             0160*    
046D07 21 39 03 04 0161*        ld hl,str_ixu
046D0B CD 67 00 04 0162*        call printString
046D0F 2A AB 03 04 0163*        ld hl,(uix)
046D13 CD A0 00 04 0164*        call printHex24
046D17 CD 7C 00 04 0165*        call printNewLine
046D1B             0166*    
046D1B 21 3E 03 04 0167*        ld hl,str_iyu
046D1F CD 67 00 04 0168*        call printString
046D23 2A AE 03 04 0169*        ld hl,(uiy)
046D27 CD A0 00 04 0170*        call printHex24
046D2B CD 7C 00 04 0171*        call printNewLine
046D2F             0172*    
046D2F             0173*        ; call vsync
046D2F             0174*    
046D2F CD 7C 00 04 0175*        call printNewLine
046D33             0176*    
046D33             0177*    ; check for right shift key and quit if pressed
046D33             0178*        MOSCALL mos_getkbmap
                       M1 Args: function=mos_getkbmap 
046D33 3E 1E       0001*M1  			LD	A, function
046D35 5B CF       0002*M1  			RST.LIL	08h
046D37             0179*    @stayhere:
046D37             0180*    ; 7 RightShift
046D37 DD CB 00 76 0181*        bit 6,(ix+0)
046D3B 20 02       0182*        jr nz,@RightShift
046D3D 18 F8       0183*        jr @stayhere
046D3F             0184*    @RightShift:
046D3F DD CB 0E 86 0185*        res 0,(ix+14) ; debounce the key (hopefully)
046D43 3E 80       0186*        ld a,%10000000
046D45             0187*        ; call multiPurposeDelay
046D45             0188*    
046D45             0189*    ; restore everything
046D45 2A A2 03 04 0190*        ld hl, (uhl)
046D49 ED 4B A5 03 0191*        ld bc, (ubc)
       04          
046D4E ED 5B A8 03 0192*        ld de, (ude)
       04          
046D53 DD 2A AB 03 0193*        ld ix, (uix)
       04          
046D58 FD 2A AE 03 0194*        ld iy, (uiy)
       04          
046D5D F1          0195*        pop af
046D5E             0196*    ; all done
046D5E C9          0197*        ret
046D5F             0198*    
046D5F             0199*    ; print registers to screen in hexidecimal format
046D5F             0200*    ; inputs: none
046D5F             0201*    ; outputs: values of every register printed to screen
046D5F             0202*    ;    values of each register in global scratch memory
046D5F             0203*    ; destroys: nothing
046D5F             0204*    dumpRegistersHex:
046D5F             0205*    ; store everything in scratch
046D5F 22 A2 03 04 0206*        ld (uhl),hl
046D63 ED 43 A5 03 0207*        ld (ubc),bc
       04          
046D68 ED 53 A8 03 0208*        ld (ude),de
       04          
046D6D DD 22 AB 03 0209*        ld (uix),ix
       04          
046D72 FD 22 AE 03 0210*        ld (uiy),iy
       04          
046D77 F5          0211*        push af ; fml
046D78 E1          0212*        pop hl ; thanks, zilog
046D79 22 9F 03 04 0213*        ld (uaf),hl
046D7D F5          0214*        push af ; dammit
046D7E             0215*    
046D7E             0216*    ; home the cursor
046D7E             0217*        ; call vdu_home_cursor
046D7E             0218*        ; call printNewLine
046D7E             0219*    
046D7E             0220*    ; print each register
046D7E 21 25 03 04 0221*        ld hl,str_afu
046D82 CD 67 00 04 0222*        call printString
046D86 2A 9F 03 04 0223*        ld hl,(uaf)
046D8A CD A0 00 04 0224*        call printHex24
046D8E             0225*        ; call printNewLine
046D8E             0226*    
046D8E 21 2A 03 04 0227*        ld hl,str_hlu
046D92 CD 67 00 04 0228*        call printString
046D96 2A A2 03 04 0229*        ld hl,(uhl)
046D9A CD A0 00 04 0230*        call printHex24
046D9E             0231*        ; call printNewLine
046D9E             0232*    
046D9E 21 2F 03 04 0233*        ld hl,str_bcu
046DA2 CD 67 00 04 0234*        call printString
046DA6 2A A5 03 04 0235*        ld hl,(ubc)
046DAA CD A0 00 04 0236*        call printHex24
046DAE             0237*        ; call printNewLine
046DAE             0238*    
046DAE 21 34 03 04 0239*        ld hl,str_deu
046DB2 CD 67 00 04 0240*        call printString
046DB6 2A A8 03 04 0241*        ld hl,(ude)
046DBA CD A0 00 04 0242*        call printHex24
046DBE             0243*        ; call printNewLine
046DBE             0244*    
046DBE 21 39 03 04 0245*        ld hl,str_ixu
046DC2 CD 67 00 04 0246*        call printString
046DC6 2A AB 03 04 0247*        ld hl,(uix)
046DCA CD A0 00 04 0248*        call printHex24
046DCE             0249*        ; call printNewLine
046DCE             0250*    
046DCE 21 3E 03 04 0251*        ld hl,str_iyu
046DD2 CD 67 00 04 0252*        call printString
046DD6 2A AE 03 04 0253*        ld hl,(uiy)
046DDA CD A0 00 04 0254*        call printHex24
046DDE             0255*    
046DDE CD 7C 00 04 0256*        call printNewLine
046DE2             0257*        ; call printNewLine
046DE2             0258*    ; restore everything
046DE2 2A A2 03 04 0259*        ld hl, (uhl)
046DE6 ED 4B A5 03 0260*        ld bc, (ubc)
       04          
046DEB ED 5B A8 03 0261*        ld de, (ude)
       04          
046DF0 DD 2A AB 03 0262*        ld ix, (uix)
       04          
046DF5 FD 2A AE 03 0263*        ld iy, (uiy)
       04          
046DFA F1          0264*        pop af
046DFB             0265*    ; all done
046DFB C9          0266*        ret
046DFC             0267*    
046DFC             0268*    dumpRegistersHexPrime:
046DFC D9          0269*        exx
046DFD 08          0270*        ex af,af'
046DFE CD 5F 6D 04 0271*        call dumpRegistersHex
046E02 08          0272*        ex af,af'
046E03 D9          0273*        exx
046E04 C9          0274*        ret
046E05             0275*    
046E05             0276*    ; additionally dump prime registers
046E05             0277*    ; inputs: none
046E05             0278*    ; outputs: values of every register printed to screen
046E05             0279*    ; destroys: nothing
046E05             0280*    dumpRegistersHexAll:
046E05 CD 5F 6D 04 0281*        call dumpRegistersHex
046E09 08          0282*        ex af,af'
046E0A D9          0283*        exx
046E0B CD 5F 6D 04 0284*        call dumpRegistersHex
046E0F 08          0285*        ex af,af'
046E10 D9          0286*        exx
046E11 C9          0287*        ret
046E12             0288*    
046E12             0289*    ; print hlu to screen in hexidecimal format
046E12             0290*    ; inputs: none
046E12             0291*    ; destroys: nothing
046E12             0292*    print_hex_hl:
046E12 F5          0293*        push af
046E13 E5          0294*        push hl
046E14 21 2A 03 04 0295*        ld hl,str_hlu
046E18 CD 67 00 04 0296*        call printString
046E1C E1          0297*        pop hl
046E1D E5          0298*        push hl
046E1E CD A0 00 04 0299*        call printHex24
046E22 3E 20       0300*        ld a,' '
046E24 5B D7       0301*        rst.lil 10h
046E26 E1          0302*        pop hl
046E27 F1          0303*        pop af
046E28 C9          0304*        ret
046E29             0305*    
046E29             0306*    ; print bcu to screen in hexidecimal format
046E29             0307*    ; inputs: none
046E29             0308*    ; destroys: nothing
046E29             0309*    print_hex_bc:
046E29 F5          0310*        push af
046E2A E5          0311*        push hl
046E2B C5          0312*        push bc
046E2C 21 2F 03 04 0313*        ld hl,str_bcu
046E30 CD 67 00 04 0314*        call printString
046E34 E1          0315*        pop hl
046E35 E5          0316*        push hl
046E36 CD A0 00 04 0317*        call printHex24
046E3A 3E 20       0318*        ld a,' '
046E3C 5B D7       0319*        rst.lil 10h
046E3E C1          0320*        pop bc
046E3F E1          0321*        pop hl
046E40 F1          0322*        pop af
046E41 C9          0323*        ret
046E42             0324*    
046E42             0325*    ; print deu to screen in hexidecimal format
046E42             0326*    ; inputs: none
046E42             0327*    ; destroys: nothing
046E42             0328*    print_hex_de:
046E42 F5          0329*        push af
046E43 E5          0330*        push hl
046E44 D5          0331*        push de
046E45 21 34 03 04 0332*        ld hl,str_deu
046E49 CD 67 00 04 0333*        call printString
046E4D E1          0334*        pop hl
046E4E E5          0335*        push hl
046E4F CD A0 00 04 0336*        call printHex24
046E53 3E 20       0337*        ld a,' '
046E55 5B D7       0338*        rst.lil 10h
046E57 D1          0339*        pop de
046E58 E1          0340*        pop hl
046E59 F1          0341*        pop af
046E5A C9          0342*        ret
046E5B             0343*    
046E5B             0344*    
046E5B             0345*    ; inputs: whatever is in the flags register
046E5B             0346*    ; outputs: binary representation of flags
046E5B             0347*    ;          with a header so we know which is what
046E5B             0348*    ; destroys: nothing
046E5B             0349*    ; preserves: everything
046E5B             0350*    dumpFlags:
046E5B             0351*    ; first we curse zilog for not giving direct access to flags
046E5B F5          0352*        push af ; this is so we can send it back unharmed
046E5C F5          0353*        push af ; this is so we can pop it to hl
046E5D             0354*    ; store everything in scratch
046E5D 22 A2 03 04 0355*        ld (uhl),hl
046E61 ED 43 A5 03 0356*        ld (ubc),bc
       04          
046E66 ED 53 A8 03 0357*        ld (ude),de
       04          
046E6B DD 22 AB 03 0358*        ld (uix),ix
       04          
046E70 FD 22 AE 03 0359*        ld (uiy),iy
       04          
046E75             0360*    ; next we print the header
046E75 21 A1 6E 04 0361*        ld hl,@header
046E79 CD 67 00 04 0362*        call printString
046E7D E1          0363*        pop hl ; flags are now in l
046E7E 7D          0364*        ld a,l ; flags are now in a
046E7F CD DB 02 04 0365*        call printBin8
046E83 CD 7C 00 04 0366*        call printNewLine
046E87             0367*    ; restore everything
046E87 2A A2 03 04 0368*        ld hl, (uhl)
046E8B ED 4B A5 03 0369*        ld bc, (ubc)
       04          
046E90 ED 5B A8 03 0370*        ld de, (ude)
       04          
046E95 DD 2A AB 03 0371*        ld ix, (uix)
       04          
046E9A FD 2A AE 03 0372*        ld iy, (uiy)
       04          
046E9F F1          0373*        pop af ; send her home the way she came
046EA0 C9          0374*        ret
046EA1             0375*    ; Bit 7 (S): Sign flag
046EA1             0376*    ; Bit 6 (Z): Zero flag
046EA1             0377*    ; Bit 5 (5): Reserved (copy of bit 5 of the result)
046EA1             0378*    ; Bit 4 (H): Half Carry flag
046EA1             0379*    ; Bit 3 (3): Reserved (copy of bit 3 of the result)
046EA1             0380*    ; Bit 2 (PV): Parity/Overflow flag
046EA1             0381*    ; Bit 1 (N): Subtract flag
046EA1             0382*    ; Bit 0 (C): Carry flag
046EA1 53 5A 78 48 0383*    @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
046EAC             0384*    
046EAC             0385*    
046EAC             0386*    ; print bytes from an address to the screen in hexidecimal format
046EAC             0387*    ; inputs: hl = address of first byte to print, a = number of bytes to print
046EAC             0388*    ; outputs: values of each byte printed to screen separated by spaces
046EAC             0389*    ; destroys: nothing
046EAC             0390*    dumpMemoryHex:
046EAC             0391*    ; save registers to the stack
046EAC C5          0392*        push bc
046EAD E5          0393*        push hl
046EAE F5          0394*        push af
046EAF             0395*    
046EAF             0396*    ; print the address and separator
046EAF CD A0 00 04 0397*        call printHex24
046EB3 3E 3A       0398*        ld a,':'
046EB5 5B D7       0399*        rst.lil 10h
046EB7 3E 20       0400*        ld a,' '
046EB9 5B D7       0401*        rst.lil 10h
046EBB             0402*    
046EBB             0403*    ; set b to be our loop counter
046EBB F1          0404*        pop af
046EBC 47          0405*        ld b,a
046EBD E1          0406*        pop hl
046EBE E5          0407*        push hl
046EBF F5          0408*        push af
046EC0             0409*    @loop:
046EC0             0410*    ; print the byte
046EC0 7E          0411*        ld a,(hl)
046EC1 CD AE 00 04 0412*        call printHex8
046EC5             0413*    ; print a space
046EC5 3E 20       0414*        ld a,' '
046EC7 5B D7       0415*        rst.lil 10h
046EC9 23          0416*        inc hl
046ECA 10 F4       0417*        djnz @loop
046ECC             0418*        ; call printNewLine
046ECC             0419*    
046ECC             0420*    ; restore everything
046ECC F1          0421*        pop af
046ECD E1          0422*        pop hl
046ECE C1          0423*        pop bc
046ECF             0424*    
046ECF             0425*    ; all done
046ECF C9          0426*        ret
046ED0             0427*    
046ED0             0428*    
046ED0             0429*    ; print bytes from an address to the screen in binary format
046ED0             0430*    ; inputs: hl = address of first byte to print, a = number of bytes to print
046ED0             0431*    ; outputs: values of each byte printed to screen separated by spaces
046ED0             0432*    ; destroys: nothing
046ED0             0433*    dumpMemoryBin:
046ED0             0434*    ; save all registers to the stack
046ED0 F5          0435*        push af
046ED1 C5          0436*        push bc
046ED2 D5          0437*        push de
046ED3 E5          0438*        push hl
046ED4 DD E5       0439*        push ix
046ED6 FD E5       0440*        push iy
046ED8             0441*    
046ED8             0442*    ; set b to be our loop counter
046ED8 47          0443*        ld b,a
046ED9             0444*    @loop:
046ED9             0445*    ; print the byte
046ED9 7E          0446*        ld a,(hl)
046EDA E5          0447*        push hl
046EDB C5          0448*        push bc
046EDC CD DB 02 04 0449*        call printBin8
046EE0 C1          0450*        pop bc
046EE1             0451*    ; print a space
046EE1 3E 20       0452*        ld a,' '
046EE3 5B D7       0453*        rst.lil 10h
046EE5 E1          0454*        pop hl
046EE6 23          0455*        inc hl
046EE7 10 F0       0456*        djnz @loop
046EE9 CD 7C 00 04 0457*        call printNewLine
046EED             0458*    
046EED             0459*    ; restore everything
046EED FD E1       0460*        pop iy
046EEF DD E1       0461*        pop ix
046EF1 E1          0462*        pop hl
046EF2 D1          0463*        pop de
046EF3 C1          0464*        pop bc
046EF4 F1          0465*        pop af
046EF5             0466*    ; all done
046EF5 C9          0467*        ret
046EF6             0468*    
046EF6             0469*    ; print bytes from an address to the screen in binary format
046EF6             0470*    ; with the bits of each byte in reverse order (lsb first)
046EF6             0471*    ; inputs: hl = address of first byte to print, a = number of bytes to print
046EF6             0472*    ; outputs: values of each byte printed to screen separated by spaces
046EF6             0473*    ; destroys: nothing
046EF6             0474*    dumpMemoryBinRev:
046EF6             0475*    ; save all registers to the stack
046EF6 F5          0476*        push af
046EF7 C5          0477*        push bc
046EF8 D5          0478*        push de
046EF9 E5          0479*        push hl
046EFA DD E5       0480*        push ix
046EFC FD E5       0481*        push iy
046EFE             0482*    
046EFE             0483*    ; set b to be our loop counter
046EFE 47          0484*        ld b,a
046EFF             0485*    @loop:
046EFF             0486*    ; print the byte
046EFF 7E          0487*        ld a,(hl)
046F00 E5          0488*        push hl
046F01 C5          0489*        push bc
046F02 CD 00 03 04 0490*        call printBin8Rev
046F06 C1          0491*        pop bc
046F07             0492*    ; print a space
046F07 3E 20       0493*        ld a,' '
046F09 5B D7       0494*        rst.lil 10h
046F0B E1          0495*        pop hl
046F0C 23          0496*        inc hl
046F0D 10 F0       0497*        djnz @loop
046F0F CD 7C 00 04 0498*        call printNewLine
046F13             0499*    
046F13             0500*    ; restore everything
046F13 FD E1       0501*        pop iy
046F15 DD E1       0502*        pop ix
046F17 E1          0503*        pop hl
046F18 D1          0504*        pop de
046F19 C1          0505*        pop bc
046F1A F1          0506*        pop af
046F1B             0507*    ; all done
046F1B C9          0508*        ret
046F1C             0509*    
046F1C             0510*    DEBUG_PRINT:
046F1C             0511*        PUSH_ALL
                       M1 Args: none
046F1C 08          0001*M1      ex af,af'
046F1D D9          0002*M1      exx
046F1E F5          0003*M1      push af
046F1F E5          0004*M1      push hl
046F20 C5          0005*M1      push bc
046F21 D5          0006*M1      push de
046F22             0007*M1  
046F22 08          0008*M1      ex af,af'
046F23 D9          0009*M1      exx
046F24 F5          0010*M1      push af
046F25 E5          0011*M1      push hl
046F26 C5          0012*M1      push bc
046F27 D5          0013*M1      push de
046F28 DD E5       0014*M1      push ix
046F2A FD E5       0015*M1      push iy
046F2C CD E3 36 04 0512*        CALL vp_messages
046F30 CD DE 1B 04 0513*        CALL vdu_cls
046F34             0514*        POP_ALL
                       M1 Args: none
046F34 FD E1       0001*M1      pop iy
046F36 DD E1       0002*M1      pop ix
046F38 D1          0003*M1      pop de
046F39 C1          0004*M1      pop bc
046F3A E1          0005*M1      pop hl
046F3B F1          0006*M1      pop af
046F3C 08          0007*M1      ex af,af'
046F3D D9          0008*M1      exx
046F3E             0009*M1  
046F3E D1          0010*M1      pop de
046F3F C1          0011*M1      pop bc
046F40 E1          0012*M1      pop hl
046F41 F1          0013*M1      pop af
046F42 08          0014*M1      ex af,af'
046F43 D9          0015*M1      exx
046F44             0515*        PUSH_ALL
                       M1 Args: none
046F44 08          0001*M1      ex af,af'
046F45 D9          0002*M1      exx
046F46 F5          0003*M1      push af
046F47 E5          0004*M1      push hl
046F48 C5          0005*M1      push bc
046F49 D5          0006*M1      push de
046F4A             0007*M1  
046F4A 08          0008*M1      ex af,af'
046F4B D9          0009*M1      exx
046F4C F5          0010*M1      push af
046F4D E5          0011*M1      push hl
046F4E C5          0012*M1      push bc
046F4F D5          0013*M1      push de
046F50 DD E5       0014*M1      push ix
046F52 FD E5       0015*M1      push iy
046F54 CD 5B 6E 04 0516*        call dumpFlags
046F58             0517*        POP_ALL
                       M1 Args: none
046F58 FD E1       0001*M1      pop iy
046F5A DD E1       0002*M1      pop ix
046F5C D1          0003*M1      pop de
046F5D C1          0004*M1      pop bc
046F5E E1          0005*M1      pop hl
046F5F F1          0006*M1      pop af
046F60 08          0007*M1      ex af,af'
046F61 D9          0008*M1      exx
046F62             0009*M1  
046F62 D1          0010*M1      pop de
046F63 C1          0011*M1      pop bc
046F64 E1          0012*M1      pop hl
046F65 F1          0013*M1      pop af
046F66 08          0014*M1      ex af,af'
046F67 D9          0015*M1      exx
046F68             0518*        PUSH_ALL
                       M1 Args: none
046F68 08          0001*M1      ex af,af'
046F69 D9          0002*M1      exx
046F6A F5          0003*M1      push af
046F6B E5          0004*M1      push hl
046F6C C5          0005*M1      push bc
046F6D D5          0006*M1      push de
046F6E             0007*M1  
046F6E 08          0008*M1      ex af,af'
046F6F D9          0009*M1      exx
046F70 F5          0010*M1      push af
046F71 E5          0011*M1      push hl
046F72 C5          0012*M1      push bc
046F73 D5          0013*M1      push de
046F74 DD E5       0014*M1      push ix
046F76 FD E5       0015*M1      push iy
046F78 CD 5F 6D 04 0519*        call dumpRegistersHex
046F7C CD C7 03 04 0520*        call waitKeypress
046F80             0521*        ; call printNewLine
046F80             0522*        POP_ALL
                       M1 Args: none
046F80 FD E1       0001*M1      pop iy
046F82 DD E1       0002*M1      pop ix
046F84 D1          0003*M1      pop de
046F85 C1          0004*M1      pop bc
046F86 E1          0005*M1      pop hl
046F87 F1          0006*M1      pop af
046F88 08          0007*M1      ex af,af'
046F89 D9          0008*M1      exx
046F8A             0009*M1  
046F8A D1          0010*M1      pop de
046F8B C1          0011*M1      pop bc
046F8C E1          0012*M1      pop hl
046F8D F1          0013*M1      pop af
046F8E 08          0014*M1      ex af,af'
046F8F D9          0015*M1      exx
046F90 C9          0523*        ret
046F91             0524*    DEBUG_WAITKEYPRESS:
046F91             0525*        PUSH_ALL
                       M1 Args: none
046F91 08          0001*M1      ex af,af'
046F92 D9          0002*M1      exx
046F93 F5          0003*M1      push af
046F94 E5          0004*M1      push hl
046F95 C5          0005*M1      push bc
046F96 D5          0006*M1      push de
046F97             0007*M1  
046F97 08          0008*M1      ex af,af'
046F98 D9          0009*M1      exx
046F99 F5          0010*M1      push af
046F9A E5          0011*M1      push hl
046F9B C5          0012*M1      push bc
046F9C D5          0013*M1      push de
046F9D DD E5       0014*M1      push ix
046F9F FD E5       0015*M1      push iy
046FA1 CD C7 03 04 0526*        call waitKeypress
046FA5             0527*        POP_ALL
                       M1 Args: none
046FA5 FD E1       0001*M1      pop iy
046FA7 DD E1       0002*M1      pop ix
046FA9 D1          0003*M1      pop de
046FAA C1          0004*M1      pop bc
046FAB E1          0005*M1      pop hl
046FAC F1          0006*M1      pop af
046FAD 08          0007*M1      ex af,af'
046FAE D9          0008*M1      exx
046FAF             0009*M1  
046FAF D1          0010*M1      pop de
046FB0 C1          0011*M1      pop bc
046FB1 E1          0012*M1      pop hl
046FB2 F1          0013*M1      pop af
046FB3 08          0014*M1      ex af,af'
046FB4 D9          0015*M1      exx
046FB5 C9          0528*        RET
046FB6             0529*    
046FB6             0530*    dumpVduCmdStr:
046FB6             0531*        PUSH_ALL
                       M1 Args: none
046FB6 08          0001*M1      ex af,af'
046FB7 D9          0002*M1      exx
046FB8 F5          0003*M1      push af
046FB9 E5          0004*M1      push hl
046FBA C5          0005*M1      push bc
046FBB D5          0006*M1      push de
046FBC             0007*M1  
046FBC 08          0008*M1      ex af,af'
046FBD D9          0009*M1      exx
046FBE F5          0010*M1      push af
046FBF E5          0011*M1      push hl
046FC0 C5          0012*M1      push bc
046FC1 D5          0013*M1      push de
046FC2 DD E5       0014*M1      push ix
046FC4 FD E5       0015*M1      push iy
046FC6 79          0532*        ld a,c
046FC7 CD AC 6E 04 0533*        call dumpMemoryHex
046FCB CD C7 03 04 0534*        call waitKeypress
046FCF             0535*        POP_ALL
                       M1 Args: none
046FCF FD E1       0001*M1      pop iy
046FD1 DD E1       0002*M1      pop ix
046FD3 D1          0003*M1      pop de
046FD4 C1          0004*M1      pop bc
046FD5 E1          0005*M1      pop hl
046FD6 F1          0006*M1      pop af
046FD7 08          0007*M1      ex af,af'
046FD8 D9          0008*M1      exx
046FD9             0009*M1  
046FD9 D1          0010*M1      pop de
046FDA C1          0011*M1      pop bc
046FDB E1          0012*M1      pop hl
046FDC F1          0013*M1      pop af
046FDD 08          0014*M1      ex af,af'
046FDE D9          0015*M1      exx
046FDF C9          0536*        ret
046FE0             0537*    ; end dumpVduCmdStr
046FE0             0059     
046FE0             0060         include "test_agm.inc"
046FE0 61 5F 68 61 0001*    test_fn: asciz "a_ha__Take_On_Me.agm"
       5F 5F 54 61 
       6B 65 5F 4F 
       6E 5F 4D 65 
       2E 61 67 6D 
       00          
046FF5             0002*    ; test_fn: asciz "Star_Wars__Battle_of_Yavin.agm"
046FF5             0003*    
046FF5             0004*    ; inputs:
046FF5             0005*    ;     iy = pointer to a filinfo struct
046FF5             0006*    ;     hl = pointer to a fil struct
046FF5             0007*    ;     de = pointer to a zero-terminated filename
046FF5             0008*    ; returns:
046FF5             0009*    ;     a=2 and zero flag reset if good .agm file (a=1 if good .wav)
046FF5             0010*    ;     hl points to ps_fil_struct
046FF5             0011*    ;     iy points to ps_filinfo_struct,
046FF5             0012*    ;     ps_wav_header and ps_agm_header structs populated
046FF5             0013*    ;     if success, an open file with read cursor set to first block of data, otherwise file closed
046FF5             0014*    ps_play_agm:
046FF5             0015*    ; verify valid .wav or .agm file
046FF5 FD E5       0016*        push iy
046FF7 FD 21 00 03 0017*        ld iy,ps_wav_header
       09          
046FFC CD 67 6B 04 0018*        call verify_wav
047000 C2 0E 70 04 0019*        jp nz,@done ; is good file so return without closing
047004             0020*    
047004             0021*    ; not a good file so close it and return failure
047004 F5          0022*        push af ; save zero flag and a
047005             0023*        FFSCALL ffs_fclose ; close the file
                       M1 Args: function=ffs_fclose 
047005 FD E5       0001*M1  			PUSH IY
047007 3E 81       0002*M1  			LD	A, function
047009 5B CF       0003*M1  			RST.LIL	08h
04700B FD E1       0004*M1  			POP IY
04700D F1          0024*        pop af ; restore zero flag and a for return
04700E             0025*    @done:
04700E FD E1       0026*        pop iy
047010 C9          0027*        ret
047011             0028*    ; end test_agm_open_file
047011             0029*    
047011 00          0030*    segment_counter: db 0
047012             0031*    
047012             0032*    ps_read_agm:
047012 CD C8 69 04 0033*        call ps_load_audio_cmd_buffers
047016 CD 66 35 04 0034*        call pv_load_video_cmd_buffers
04701A             0035*    @next_segment:
04701A             0036*    ; set up a frame timer
04701A FD 21 CB 1A 0037*        ld iy,tmr_test
       04          
04701F 21 78 00 00 0038*        ld hl,120
047023 CD A9 1A 04 0039*        call tmr_set
047027             0040*    
047027             0041*    ; read the next segment header
047027 21 00 00 09 0042*        ld hl,ps_fil_struct
04702B 01 08 00 00 0043*        ld bc,agm_segment_hdr_size ; bytes to read
04702F 11 50 67 04 0044*        ld de,ps_agm_segment_hdr   ; target address
047033             0045*        FFSCALL ffs_fread
                       M1 Args: function=ffs_fread 
047033 FD E5       0001*M1  			PUSH IY
047035 3E 82       0002*M1  			LD	A, function
047037 5B CF       0003*M1  			RST.LIL	08h
047039 FD E1       0004*M1  			POP IY
04703B             0046*        ; call print_segment_hdr ; DEBUG
04703B             0047*    
04703B             0048*    ; check for end of file
04703B C5          0049*        push bc ; bytes read
04703C E1          0050*        pop hl
04703D             0051*        SIGN_HLU
                       M1 Args: none
04703D 19          0001*M1      add hl,de ; 1 cycle
04703E B7          0002*M1      or a ; clear flags ; 1 cycle
04703F ED 52       0003*M1      sbc hl,de ; 2 cycles
047041             0004*M1      ; 4 cycles total
047041 CA E0 70 04 0052*        jp z,@done
047045             0053*    
047045 3A 57 03 09 0054*        ld a,(ps_wav_header+agm_frame_rate)
047049 3C          0055*        inc a ; include audio unit
04704A             0056*    @unit_loop:
04704A 32 11 70 04 0057*        ld (segment_counter),a ; save the segment loop counter
04704E             0058*    
04704E             0059*    ; read the next unit header
04704E 21 00 00 09 0060*        ld hl,ps_fil_struct
047052 01 01 00 00 0061*        ld bc,agm_unit_hdr_size ; bytes to read
047056 11 58 67 04 0062*        ld de,ps_agm_unit_hdr   ; target address
04705A             0063*        FFSCALL ffs_fread
                       M1 Args: function=ffs_fread 
04705A FD E5       0001*M1  			PUSH IY
04705C 3E 82       0002*M1  			LD	A, function
04705E 5B CF       0003*M1  			RST.LIL	08h
047060 FD E1       0004*M1  			POP IY
047062             0064*        ; call print_unit_hdr ; DEBUG
047062             0065*    
047062             0066*    ; set data and command bufferIds based on the unit type
047062 3A 58 67 04 0067*        ld a,(ps_agm_unit_hdr+agm_unit_mask)
047066 E6 80       0068*        and agm_unit_type
047068 C2 74 70 04 0069*        jp nz,@is_video
04706C CD E6 68 04 0070*        call ps_set_audio_buffers ; audio unit
047070 C3 78 70 04 0071*        jp @chunk_loop
047074             0072*    @is_video:
047074 CD 51 35 04 0073*        call pv_set_video_buffers ; video unit
047078             0074*    @chunk_loop:
047078             0075*    ; read the next chunk header
047078 21 00 00 09 0076*        ld hl,ps_fil_struct
04707C 01 04 00 00 0077*        ld bc,agm_chunk_hdr_size ; bytes to read
047080 11 59 67 04 0078*        ld de,ps_agm_chunk_hdr   ; target address
047084             0079*        FFSCALL ffs_fread
                       M1 Args: function=ffs_fread 
047084 FD E5       0001*M1  			PUSH IY
047086 3E 82       0002*M1  			LD	A, function
047088 5B CF       0003*M1  			RST.LIL	08h
04708A FD E1       0004*M1  			POP IY
04708C             0080*        ; call print_chunk_hdr ; DEBUG
04708C             0081*    
04708C             0082*    ; check chunk size for zero
04708C 2A 59 67 04 0083*        ld hl,(ps_agm_chunk_hdr+agm_chunk_size) ; bytes to load
047090             0084*        SIGN_HLU
                       M1 Args: none
047090 19          0001*M1      add hl,de ; 1 cycle
047091 B7          0002*M1      or a ; clear flags ; 1 cycle
047092 ED 52       0003*M1      sbc hl,de ; 2 cycles
047094             0004*M1      ; 4 cycles total
047094 CA BA 70 04 0085*        jp z,@next_unit
047098             0086*    ; read the next chunk of data from the SD card to RAM
047098 E5          0087*        push hl
047099 C1          0088*        pop bc ; bc = bytes to read
04709A 21 00 00 09 0089*        ld hl,ps_fil_struct
04709E 11 DC 03 09 0090*        ld de,ps_agm_data
0470A2             0091*        FFSCALL ffs_fread
                       M1 Args: function=ffs_fread 
0470A2 FD E5       0001*M1  			PUSH IY
0470A4 3E 82       0002*M1  			LD	A, function
0470A6 5B CF       0003*M1  			RST.LIL	08h
0470A8 FD E1       0004*M1  			POP IY
0470AA             0092*    ; load the data buffer with the data read (bc already has bytes to load)
0470AA 2A 5D 67 04 0093*        ld hl,(ps_agm_data_bufferId) ; bufferId
0470AE 11 DC 03 09 0094*        ld de,ps_agm_data ; source address
0470B2 CD 83 1D 04 0095*        call vdu_load_buffer
0470B6 C3 78 70 04 0096*        jp @chunk_loop
0470BA             0097*    @next_unit:
0470BA             0098*    ; execute the unit command buffer
0470BA 2A 60 67 04 0099*        ld hl,(ps_agm_cmd_bufferId) ; bufferId
0470BE CD 7D 1F 04 0100*        call vdu_call_buffer
0470C2             0101*    
0470C2             0102*    ; bump the unit counter
0470C2 3A 11 70 04 0103*        ld a,(segment_counter)
0470C6 3D          0104*        dec a
0470C7 C2 4A 70 04 0105*        jp nz,@unit_loop
0470CB             0106*    
0470CB             0107*    @wait_here:
0470CB FD 21 CB 1A 0108*        ld iy,tmr_test
       04          
0470D0 CD B7 1A 04 0109*        call tmr_get
0470D4 CA 1A 70 04 0110*        jp z,@next_segment
0470D8 FA 1A 70 04 0111*        jp m,@next_segment
0470DC C3 CB 70 04 0112*        jp @wait_here
0470E0             0113*    
0470E0             0114*    @done: ; close the file
0470E0 21 00 00 09 0115*        ld hl,ps_fil_struct
0470E4             0116*        FFSCALL ffs_fclose
                       M1 Args: function=ffs_fclose 
0470E4 FD E5       0001*M1  			PUSH IY
0470E6 3E 81       0002*M1  			LD	A, function
0470E8 5B CF       0003*M1  			RST.LIL	08h
0470EA FD E1       0004*M1  			POP IY
0470EC C9          0117*        ret
0470ED             0118*    ; end ps_read_agm
0470ED             0119*    
0470ED             0120*    
0470ED             0121*    ; ; set graphics mode
0470ED             0122*    ;     ld a,3 ; mode xor
0470ED             0123*    ;     ld c,c_black ; can be any foreground
0470ED             0124*    ;     call vdu_gcol
0470ED             0125*    
0470ED             0126*    print_segment_hdr:
0470ED             0127*        PUSH_ALL
                       M1 Args: none
0470ED 08          0001*M1      ex af,af'
0470EE D9          0002*M1      exx
0470EF F5          0003*M1      push af
0470F0 E5          0004*M1      push hl
0470F1 C5          0005*M1      push bc
0470F2 D5          0006*M1      push de
0470F3             0007*M1  
0470F3 08          0008*M1      ex af,af'
0470F4 D9          0009*M1      exx
0470F5 F5          0010*M1      push af
0470F6 E5          0011*M1      push hl
0470F7 C5          0012*M1      push bc
0470F8 D5          0013*M1      push de
0470F9 DD E5       0014*M1      push ix
0470FB FD E5       0015*M1      push iy
0470FD             0128*        ; call vdu_home_cursor
0470FD             0129*        ; call vdu_cls
0470FD DD 21 50 67 0130*        ld ix,ps_agm_segment_hdr
       04          
047102 CD 60 00 04 0131*        call printInline
047106 61 67 6D 5F 0132*        asciz "agm_segment_size_last: "
       73 65 67 6D 
       65 6E 74 5F 
       73 69 7A 65 
       5F 6C 61 73 
       74 3A 20 00 
04711E DD 27 00    0133*        ld hl,(ix+agm_segment_size_last)
047121 CD CC 00 04 0134*        call printDec
047125 CD 7C 00 04 0135*        call printNewLine
047129 CD 60 00 04 0136*        call printInline
04712D 61 67 6D 5F 0137*        asciz "agm_segment_size_this: "
       73 65 67 6D 
       65 6E 74 5F 
       73 69 7A 65 
       5F 74 68 69 
       73 3A 20 00 
047145 DD 27 04    0138*        ld hl,(ix+agm_segment_size_this)
047148 CD CC 00 04 0139*        call printDec
04714C CD 7C 00 04 0140*        call printNewLine
047150             0141*        ; call DEBUG_WAITKEYPRESS
047150             0142*        POP_ALL
                       M1 Args: none
047150 FD E1       0001*M1      pop iy
047152 DD E1       0002*M1      pop ix
047154 D1          0003*M1      pop de
047155 C1          0004*M1      pop bc
047156 E1          0005*M1      pop hl
047157 F1          0006*M1      pop af
047158 08          0007*M1      ex af,af'
047159 D9          0008*M1      exx
04715A             0009*M1  
04715A D1          0010*M1      pop de
04715B C1          0011*M1      pop bc
04715C E1          0012*M1      pop hl
04715D F1          0013*M1      pop af
04715E 08          0014*M1      ex af,af'
04715F D9          0015*M1      exx
047160 C9          0143*        ret
047161             0144*    ; end print_segment_hdr
047161             0145*    
047161             0146*    print_unit_hdr:
047161             0147*        PUSH_ALL
                       M1 Args: none
047161 08          0001*M1      ex af,af'
047162 D9          0002*M1      exx
047163 F5          0003*M1      push af
047164 E5          0004*M1      push hl
047165 C5          0005*M1      push bc
047166 D5          0006*M1      push de
047167             0007*M1  
047167 08          0008*M1      ex af,af'
047168 D9          0009*M1      exx
047169 F5          0010*M1      push af
04716A E5          0011*M1      push hl
04716B C5          0012*M1      push bc
04716C D5          0013*M1      push de
04716D DD E5       0014*M1      push ix
04716F FD E5       0015*M1      push iy
047171 DD 21 58 67 0148*        ld ix,ps_agm_unit_hdr
       04          
047176 CD 60 00 04 0149*        call printInline
04717A 61 67 6D 5F 0150*        asciz "agm_unit_mask:         "
       75 6E 69 74 
       5F 6D 61 73 
       6B 3A 20 20 
       20 20 20 20 
       20 20 20 00 
047192 DD 7E 00    0151*        ld a,(ix+agm_unit_mask)
047195 CD DB 02 04 0152*        call printBin8
047199 CD 7C 00 04 0153*        call printNewLine
04719D             0154*        ; call DEBUG_WAITKEYPRESS
04719D             0155*        POP_ALL
                       M1 Args: none
04719D FD E1       0001*M1      pop iy
04719F DD E1       0002*M1      pop ix
0471A1 D1          0003*M1      pop de
0471A2 C1          0004*M1      pop bc
0471A3 E1          0005*M1      pop hl
0471A4 F1          0006*M1      pop af
0471A5 08          0007*M1      ex af,af'
0471A6 D9          0008*M1      exx
0471A7             0009*M1  
0471A7 D1          0010*M1      pop de
0471A8 C1          0011*M1      pop bc
0471A9 E1          0012*M1      pop hl
0471AA F1          0013*M1      pop af
0471AB 08          0014*M1      ex af,af'
0471AC D9          0015*M1      exx
0471AD C9          0156*        ret
0471AE             0157*    ; end print_unit_hdr
0471AE             0158*    
0471AE             0159*    print_buffers:
0471AE             0160*        PUSH_ALL
                       M1 Args: none
0471AE 08          0001*M1      ex af,af'
0471AF D9          0002*M1      exx
0471B0 F5          0003*M1      push af
0471B1 E5          0004*M1      push hl
0471B2 C5          0005*M1      push bc
0471B3 D5          0006*M1      push de
0471B4             0007*M1  
0471B4 08          0008*M1      ex af,af'
0471B5 D9          0009*M1      exx
0471B6 F5          0010*M1      push af
0471B7 E5          0011*M1      push hl
0471B8 C5          0012*M1      push bc
0471B9 D5          0013*M1      push de
0471BA DD E5       0014*M1      push ix
0471BC FD E5       0015*M1      push iy
0471BE CD 60 00 04 0161*        call printInline
0471C2 70 73 5F 61 0162*        asciz "ps_agm_cmd_bufferId:     "
       67 6D 5F 63 
       6D 64 5F 62 
       75 66 66 65 
       72 49 64 3A 
       20 20 20 20 
       20 00       
0471DC 2A 60 67 04 0163*        ld hl,(ps_agm_cmd_bufferId)
0471E0 CD A0 00 04 0164*        call printHex24
0471E4 CD 7C 00 04 0165*        call printNewLine
0471E8 CD 60 00 04 0166*        CALL printInline
0471EC 70 73 5F 61 0167*        asciz "ps_agm_data_bufferId:    "
       67 6D 5F 64 
       61 74 61 5F 
       62 75 66 66 
       65 72 49 64 
       3A 20 20 20 
       20 00       
047206 2A 5D 67 04 0168*        ld hl,(ps_agm_data_bufferId)
04720A CD A0 00 04 0169*        call printHex24
04720E CD 7C 00 04 0170*        call printNewLine
047212             0171*        ; call DEBUG_WAITKEYPRESS
047212             0172*        POP_ALL
                       M1 Args: none
047212 FD E1       0001*M1      pop iy
047214 DD E1       0002*M1      pop ix
047216 D1          0003*M1      pop de
047217 C1          0004*M1      pop bc
047218 E1          0005*M1      pop hl
047219 F1          0006*M1      pop af
04721A 08          0007*M1      ex af,af'
04721B D9          0008*M1      exx
04721C             0009*M1  
04721C D1          0010*M1      pop de
04721D C1          0011*M1      pop bc
04721E E1          0012*M1      pop hl
04721F F1          0013*M1      pop af
047220 08          0014*M1      ex af,af'
047221 D9          0015*M1      exx
047222 C9          0173*        ret
047223             0174*    ; end print_chunk_hdr
047223             0175*    
047223             0176*    print_chunk_hdr:
047223             0177*        PUSH_ALL
                       M1 Args: none
047223 08          0001*M1      ex af,af'
047224 D9          0002*M1      exx
047225 F5          0003*M1      push af
047226 E5          0004*M1      push hl
047227 C5          0005*M1      push bc
047228 D5          0006*M1      push de
047229             0007*M1  
047229 08          0008*M1      ex af,af'
04722A D9          0009*M1      exx
04722B F5          0010*M1      push af
04722C E5          0011*M1      push hl
04722D C5          0012*M1      push bc
04722E D5          0013*M1      push de
04722F DD E5       0014*M1      push ix
047231 FD E5       0015*M1      push iy
047233 DD 21 59 67 0178*        ld ix,ps_agm_chunk_hdr
       04          
047238 CD 60 00 04 0179*        call printInline
04723C 61 67 6D 5F 0180*        asciz "agm_chunk_size:        "
       63 68 75 6E 
       6B 5F 73 69 
       7A 65 3A 20 
       20 20 20 20 
       20 20 20 00 
047254 DD 27 00    0181*        ld hl,(ix+agm_chunk_size)
047257 CD CC 00 04 0182*        call printDec
04725B CD 7C 00 04 0183*        call printNewLine
04725F             0184*        ; call DEBUG_WAITKEYPRESS
04725F             0185*        POP_ALL
                       M1 Args: none
04725F FD E1       0001*M1      pop iy
047261 DD E1       0002*M1      pop ix
047263 D1          0003*M1      pop de
047264 C1          0004*M1      pop bc
047265 E1          0005*M1      pop hl
047266 F1          0006*M1      pop af
047267 08          0007*M1      ex af,af'
047268 D9          0008*M1      exx
047269             0009*M1  
047269 D1          0010*M1      pop de
04726A C1          0011*M1      pop bc
04726B E1          0012*M1      pop hl
04726C F1          0013*M1      pop af
04726D 08          0014*M1      ex af,af'
04726E D9          0015*M1      exx
04726F C9          0186*        ret
047270             0187*    ; end print_chunk_hdr
047270             0061     
047270             0062     ; --- MAIN PROGRAM FILE ---
047270             0063     init:
047270             0064     ; set up display
047270 3E 08       0065         ld a,8 ; 320x240x64 single-buffered
047272             0066         ; ld a,20 ; 512x384x64 single-buffered
047272 CD AC 1C 04 0067         call vdu_set_screen_mode
047276 AF          0068         xor a
047277 CD C5 1C 04 0069         call vdu_set_scaling
04727B CD 66 1B 04 0070         call vdu_cursor_off
04727F             0071     
04727F C9          0072         ret
047280             0073     ; end init
047280             0074     main:
047280 CD DE 1B 04 0075         call vdu_cls
047284             0076     
047284             0077     ; a=2 and zero flag reset if good .agm file (a=1 if good .wav)
047284             0078     ; hl points to ps_fil_struct
047284             0079     ; iy points to ps_filinfo_struct,
047284             0080     ; ps_wav_header and ps_agm_header structs populated
047284 FD 21 00 01 0081         ld iy,ps_filinfo_struct
       09          
047289 21 00 00 09 0082         ld hl,ps_fil_struct
04728D 11 E0 6F 04 0083         ld de,test_fn
047291 CD F5 6F 04 0084         call ps_play_agm
047295             0085     
047295             0086     ; ; DEBUG
047295             0087     ;     call dumpFlags
047295             0088     ;     call dumpRegistersHex
047295             0089     ;     call printNewLine
047295             0090     ; ; DEBUG
047295             0091     
047295 28 06       0092         jr z,@main_end
047297 FE 02       0093         cp 2
047299 CC 12 70 04 0094         call z,ps_read_agm
04729D             0095     
04729D             0096     @main_end:
04729D             0097     ; return display to normal
04729D CD 58 1B 04 0098         call vdu_cursor_on
0472A1             0099     
0472A1 C9          0100         ret ; back to MOS
0472A2             0101     ; end main
0472A2             0102     
0472A2             0103     ; must be final include in program so file data does not stomp on program code or other data
0472A2             0104         include "files.inc"
0472A2             0001*    ; THIS MUST BE LAST INCLUDE SO FILE DATA DOES NOT OVERWRITE OTHER CODE OR DATA
0472A2             0002*    
0472A2             0003*    ; buffer for loading files unrelated to audio
0472A2             0004*    ; e.g.: fonts, sprites, etc. (limited to 8k)
0472A2             0005*    filedata: equ 0xB7E000 ; address of onboard 8k sram
0472A2             0006*    
0472A2             0007*    bf_fil_struct: equ 0x06FF00 ;
0472A2             0008*    bf_fil_obj: equ 0x06FF00 ; 15 bytes: Object identifier
0472A2             0009*    bf_fil_flag: equ 0x06FF0F ; 1 bytes: File status flags
0472A2             0010*    bf_fil_err: equ 0x06FF10 ; 1 bytes: Abort flag (error code)
0472A2             0011*    bf_fil_fptr: equ 0x06FF11 ; 4 bytes: File read/write pointer (Zeroed on file open)
0472A2             0012*    bf_fil_clust: equ 0x06FF15 ; 4 bytes: Current cluster of fpter (invalid when fptr is 0)
0472A2             0013*    bf_fil_sect: equ 0x06FF19 ; 4 bytes: Sector number appearing in buf[] (0
0472A2             0014*    bf_fil_dir_sect: equ 0x06FF1D ; 4 bytes: Sector number containing the directory entry
0472A2             0015*    bf_fil_dir_ptr: equ 0x06FF21 ; 3 bytes: Pointer to the directory entry in the win[]
0472A2             0016*    
0472A2             0017*    
0472A2             0018*    bf_struct: equ 0x070000 ; browsing song jukebox info
0472A2             0019*    bf_file_idx: equ 0x070000 ; 1 bytes: Current file index in the directory page
0472A2             0020*    bf_dir_num_files: equ 0x070001 ; 3 bytes: Number of files/directories in the directory (virtually unlimited)
0472A2             0021*    bf_files_cur_pg: equ 0x070004 ; 3 bytes: Number of files/directories of the current directory page
0472A2             0022*    bf_files_last_pg: equ 0x070007 ; 3 bytes: Number of files/directories of the last directory page
0472A2             0023*    bf_page_cur: equ 0x07000A ; 3 bytes: Current directory page number
0472A2             0024*    bf_dir_num_pages: equ 0x07000D ; 3 bytes: Number of pages in the directory (virtually unlimited)
0472A2             0025*    bf_dir_path: equ 0x070010 ; 256 bytes: Path of the current directory
0472A2             0026*    bf_struct_size: equ 512
0472A2             0027*    
0472A2             0028*    bf_dir_struct: equ 0x070200 ; browsing song directory info
0472A2             0029*    bf_dir_obj: equ 0x070200 ; 15 bytes: Object identifier
0472A2             0030*    bf_dir_dptr: equ 0x07020F ; 4 bytes: Current read/write offset
0472A2             0031*    bf_dir_clust: equ 0x070213 ; 4 bytes: Current cluster
0472A2             0032*    bf_dir_sect: equ 0x070217 ; 4 bytes: Current sector (0:Read operation has terminated)
0472A2             0033*    bf_dir_dir: equ 0x07021B ; 3 bytes: Pointer to the directory item in the win[]
0472A2             0034*    bf_dir_fn: equ 0x07021E ; 12 bytes: SFN (in/out) {body[8],ext[3],status[1]}
0472A2             0035*    bf_dir_blk_ofs: equ 0x07022A ; 4 bytes: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
0472A2             0036*    
0472A2             0037*    bf_filinfo_ptrs: equ 0x070300 ; 768 bytes: List of filename pointers in the current directory page (256*3)
0472A2             0038*    bf_filinfo_ptrs_size: equ 768
0472A2             0039*    
0472A2             0040*    bf_dir_fil_list: equ 0x070600 ; 71168 bytes: browsing song directory file list
0472A2             0041*    bf_dir_fil_list_size: equ 71168
0472A2             0042*    
0472A2             0043*    bf_wav_header: equ 0x081C00 ; 76 bytes: browsing song .wav file header
0472A2             0044*    bf_agm_header: equ 0x081C4C ; 144 bytes: browsing song .agm file header
0472A2             0045*    
0472A2             0046*    ps_fil_struct: equ 0x090000 ;
0472A2             0047*    ps_fil_obj: equ 0x090000 ; 15 bytes: Object identifier
0472A2             0048*    ps_fil_flag: equ 0x09000F ; 1 bytes: File status flags
0472A2             0049*    ps_fil_err: equ 0x090010 ; 1 bytes: Abort flag (error code)
0472A2             0050*    ps_fil_fptr: equ 0x090011 ; 4 bytes: File read/write pointer (Zeroed on file open)
0472A2             0051*    ps_fil_clust: equ 0x090015 ; 4 bytes: Current cluster of fpter (invalid when fptr is 0)
0472A2             0052*    ps_fil_sect: equ 0x090019 ; 4 bytes: Sector number appearing in buf[] (0
0472A2             0053*    ps_fil_dir_sect: equ 0x09001D ; 4 bytes: Sector number containing the directory entry
0472A2             0054*    ps_fil_dir_ptr: equ 0x090021 ; 3 bytes: Pointer to the directory entry in the win[]
0472A2             0055*    
0472A2             0056*    ps_filinfo_struct: equ 0x090100 ;
0472A2             0057*    ps_filinfo_fsize: equ 0x090100 ; 4 bytes: File size
0472A2             0058*    ps_filinfo_fdate: equ 0x090104 ; 2 bytes: Modified date
0472A2             0059*    ps_filinfo_ftime: equ 0x090106 ; 2 bytes: Modified time
0472A2             0060*    ps_filinfo_fattrib: equ 0x090108 ; 1 bytes: File attribute
0472A2             0061*    ps_filinfo_altname: equ 0x090109 ; 13 bytes: Alternative file name
0472A2             0062*    ps_filinfo_fname: equ 0x090116 ; 256 bytes: Primary file name
0472A2             0063*    
0472A2             0064*    ps_wav_header: equ 0x090300 ; 76 bytes: playing song .wav file header
0472A2             0065*    ps_wav_data: equ 0x09034C ; virtually unlimited bytes:
0472A2             0066*    
0472A2             0067*    ps_agm_header: equ 0x09034C ; 144 bytes:
0472A2             0068*    ps_agm_data: equ 0x0903DC ; virtually unlimited bytes:
